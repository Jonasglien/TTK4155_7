
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001aa  00800200  00000e96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008003aa  008003aa  000010d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114f  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000841  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009aa  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d4  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ac2  00000000  00000000  00003e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000048c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c1       	rjmp	.+684    	; 0x2ba <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e9       	ldi	r30, 0x96	; 150
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3a       	cpi	r26, 0xAA	; 170
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	aa ea       	ldi	r26, 0xAA	; 170
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 3c       	cpi	r26, 0xCB	; 203
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f4 d1       	rcall	.+1000   	; 0x508 <main>
 120:	b8 c6       	rjmp	.+3440   	; 0xe92 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_construct_message>:
CAN_message_t* CAN_message_receive(void){
	return &CAN_receive_buffer;
}

void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
 124:	90 93 ac 03 	sts	0x03AC, r25
 128:	80 93 ab 03 	sts	0x03AB, r24
	CAN_send_buffer.length = length;
 12c:	60 93 ad 03 	sts	0x03AD, r22
	for(uint8_t i = 0; i < length; i++){
 130:	66 23       	and	r22, r22
 132:	41 f0       	breq	.+16     	; 0x144 <CAN_construct_message+0x20>
 134:	8e ea       	ldi	r24, 0xAE	; 174
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
 13a:	11 92       	st	Z+, r1
 13c:	2e 2f       	mov	r18, r30
 13e:	28 1b       	sub	r18, r24
}

void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
 140:	26 17       	cp	r18, r22
 142:	d8 f3       	brcs	.-10     	; 0x13a <CAN_construct_message+0x16>
 144:	08 95       	ret

00000146 <CAN_initialize>:

static CAN_message_t CAN_receive_buffer; //VOLATILE ??????????????????????????????
static CAN_message_t CAN_send_buffer;
uint8_t FLAG_new_message = 0;

void CAN_initialize(void){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	MCP2515_initialize();
 150:	ac d1       	rcall	.+856    	; 0x4aa <MCP2515_initialize>
	
	
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 152:	4f ef       	ldi	r20, 0xFF	; 255
 154:	64 e6       	ldi	r22, 0x64	; 100
 156:	80 e6       	ldi	r24, 0x60	; 96
 158:	94 d1       	rcall	.+808    	; 0x482 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0b00000001,1);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	8b e2       	ldi	r24, 0x2B	; 43
 160:	90 d1       	rcall	.+800    	; 0x482 <MCP2515_bit_modify>
	//MCP2515_bit_modify(MCP_CANINTF,0b00000001,1);
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);   
 162:	40 e4       	ldi	r20, 0x40	; 64
 164:	60 ee       	ldi	r22, 0xE0	; 224
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	8c d1       	rcall	.+792    	; 0x482 <MCP2515_bit_modify>
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 16a:	68 e0       	ldi	r22, 0x08	; 8
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	d9 df       	rcall	.-78     	; 0x124 <CAN_construct_message>
	
	printf("read CANSTAT\n");
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	84 d2       	rcall	.+1288   	; 0x680 <puts>
	volatile uint8_t value = MCP2515_read(MCP_CANSTAT);
 178:	8e e0       	ldi	r24, 0x0E	; 14
 17a:	5c d1       	rcall	.+696    	; 0x434 <MCP2515_read>
 17c:	89 83       	std	Y+1, r24	; 0x01
	printf("MCP_CANSTAT: %i\n", value);
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	1f 92       	push	r1
 182:	8f 93       	push	r24
 184:	8b e1       	ldi	r24, 0x1B	; 27
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	68 d2       	rcall	.+1232   	; 0x65e <printf>
}
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <CAN_send_byte>:
	CAN_send_byte(&CAN_send_buffer,0);
	//printf("%i\n",CAN_send_buffer.data[0]);
	
}

void CAN_send_byte(CAN_message_t* message,uint8_t n){
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
 1aa:	f6 2e       	mov	r15, r22
	MCP2515_write(MCP_TXBnSIDH+n*0x10,message->id>>3);		//8 most significant bits of the message ID
 1ac:	06 2f       	mov	r16, r22
 1ae:	02 95       	swap	r16
 1b0:	00 7f       	andi	r16, 0xF0	; 240
 1b2:	28 81       	ld	r18, Y
 1b4:	39 81       	ldd	r19, Y+1	; 0x01
 1b6:	b9 01       	movw	r22, r18
 1b8:	75 95       	asr	r23
 1ba:	67 95       	ror	r22
 1bc:	75 95       	asr	r23
 1be:	67 95       	ror	r22
 1c0:	75 95       	asr	r23
 1c2:	67 95       	ror	r22
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	80 0f       	add	r24, r16
 1c8:	26 d1       	rcall	.+588    	; 0x416 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+n*0x10,message->id<<5);		//3 least significant bits of the message ID
 1ca:	68 81       	ld	r22, Y
 1cc:	62 95       	swap	r22
 1ce:	66 0f       	add	r22, r22
 1d0:	60 7e       	andi	r22, 0xE0	; 224
 1d2:	82 e3       	ldi	r24, 0x32	; 50
 1d4:	80 0f       	add	r24, r16
 1d6:	1f d1       	rcall	.+574    	; 0x416 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+n*0x10,(0b00001111)&(message->length));		//Message length
 1d8:	6a 81       	ldd	r22, Y+2	; 0x02
 1da:	6f 70       	andi	r22, 0x0F	; 15
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	80 0f       	add	r24, r16
 1e0:	1a d1       	rcall	.+564    	; 0x416 <MCP2515_write>

	for (uint8_t i = 0; i < message->length;i++){
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	88 23       	and	r24, r24
 1e6:	69 f0       	breq	.+26     	; 0x202 <CAN_send_byte+0x64>
 1e8:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+n*0x10+i,message->data[i]);	//Message data
 1ea:	0a 5c       	subi	r16, 0xCA	; 202
 1ec:	fe 01       	movw	r30, r28
 1ee:	e1 0f       	add	r30, r17
 1f0:	f1 1d       	adc	r31, r1
 1f2:	63 81       	ldd	r22, Z+3	; 0x03
 1f4:	80 2f       	mov	r24, r16
 1f6:	81 0f       	add	r24, r17
 1f8:	0e d1       	rcall	.+540    	; 0x416 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t n){
	MCP2515_write(MCP_TXBnSIDH+n*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+n*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+n*0x10,(0b00001111)&(message->length));		//Message length

	for (uint8_t i = 0; i < message->length;i++){
 1fa:	1f 5f       	subi	r17, 0xFF	; 255
 1fc:	9a 81       	ldd	r25, Y+2	; 0x02
 1fe:	19 17       	cp	r17, r25
 200:	a8 f3       	brcs	.-22     	; 0x1ec <CAN_send_byte+0x4e>
		MCP2515_write(MCP_TXBnD0+n*0x10+i,message->data[i]);	//Message data
	}

	MCP2515_request_to_send(MCP_MERRF+(1<<n));
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <CAN_send_byte+0x6e>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	fa 94       	dec	r15
 20e:	e2 f7       	brpl	.-8      	; 0x208 <CAN_send_byte+0x6a>
 210:	80 58       	subi	r24, 0x80	; 128
 212:	1d d1       	rcall	.+570    	; 0x44e <MCP2515_request_to_send>
	printf("CAN_send_byte: ID %i Length: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);
 214:	80 91 b5 03 	lds	r24, 0x03B5
 218:	1f 92       	push	r1
 21a:	8f 93       	push	r24
 21c:	80 91 b4 03 	lds	r24, 0x03B4
 220:	1f 92       	push	r1
 222:	8f 93       	push	r24
 224:	80 91 b3 03 	lds	r24, 0x03B3
 228:	1f 92       	push	r1
 22a:	8f 93       	push	r24
 22c:	80 91 b2 03 	lds	r24, 0x03B2
 230:	1f 92       	push	r1
 232:	8f 93       	push	r24
 234:	80 91 b1 03 	lds	r24, 0x03B1
 238:	1f 92       	push	r1
 23a:	8f 93       	push	r24
 23c:	80 91 b0 03 	lds	r24, 0x03B0
 240:	1f 92       	push	r1
 242:	8f 93       	push	r24
 244:	80 91 af 03 	lds	r24, 0x03AF
 248:	1f 92       	push	r1
 24a:	8f 93       	push	r24
 24c:	80 91 ae 03 	lds	r24, 0x03AE
 250:	1f 92       	push	r1
 252:	8f 93       	push	r24
 254:	80 91 ad 03 	lds	r24, 0x03AD
 258:	1f 92       	push	r1
 25a:	8f 93       	push	r24
 25c:	eb ea       	ldi	r30, 0xAB	; 171
 25e:	f3 e0       	ldi	r31, 0x03	; 3
 260:	81 81       	ldd	r24, Z+1	; 0x01
 262:	8f 93       	push	r24
 264:	80 81       	ld	r24, Z
 266:	8f 93       	push	r24
 268:	8c e2       	ldi	r24, 0x2C	; 44
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	9f 93       	push	r25
 26e:	8f 93       	push	r24
 270:	f6 d1       	rcall	.+1004   	; 0x65e <printf>
 272:	8d b7       	in	r24, 0x3d	; 61
 274:	9e b7       	in	r25, 0x3e	; 62
 276:	46 96       	adiw	r24, 0x16	; 22
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	9e bf       	out	0x3e, r25	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	8d bf       	out	0x3d, r24	; 61

}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	08 95       	ret

0000028e <CAN_message_send>:
		CAN_send_buffer.data[i] = 0;
	}
}

void CAN_message_send(uint8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
 28e:	20 91 ad 03 	lds	r18, 0x03AD
 292:	22 23       	and	r18, r18
 294:	59 f0       	breq	.+22     	; 0x2ac <CAN_message_send+0x1e>
 296:	38 2f       	mov	r19, r24
 298:	ae ea       	ldi	r26, 0xAE	; 174
 29a:	b3 e0       	ldi	r27, 0x03	; 3
 29c:	e8 2f       	mov	r30, r24
 29e:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
 2a0:	81 91       	ld	r24, Z+
 2a2:	8d 93       	st	X+, r24
 2a4:	8e 2f       	mov	r24, r30
 2a6:	83 1b       	sub	r24, r19
		CAN_send_buffer.data[i] = 0;
	}
}

void CAN_message_send(uint8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
 2a8:	82 17       	cp	r24, r18
 2aa:	d0 f3       	brcs	.-12     	; 0x2a0 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,0);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	8b ea       	ldi	r24, 0xAB	; 171
 2b0:	93 e0       	ldi	r25, 0x03	; 3
 2b2:	75 cf       	rjmp	.-278    	; 0x19e <CAN_send_byte>
 2b4:	08 95       	ret

000002b6 <CAN_read>:
	printf("CAN_send_byte: ID %i Length: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);

}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 2b6:	be c0       	rjmp	.+380    	; 0x434 <MCP2515_read>
}
 2b8:	08 95       	ret

000002ba <__vector_3>:
	MCP2515_bit_modify(MCP_CANINTF,0xFF,0); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
}



ISR(INT2_vect){//interrupt incomming message
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
	cli();
 2c6:	f8 94       	cli
	//IF there is a message in inbox 0, flag 1<<0, then if there is a message in inbox 1, flag 1<<1 this
	FLAG_new_message = 0b01;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 aa 03 	sts	0x03AA, r24
	sei();
 2ce:	78 94       	sei
}
 2d0:	8f 91       	pop	r24
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <CAN_transmit_complete>:


uint8_t CAN_transmit_complete(void){
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	1f 92       	push	r1
 2e2:	1f 92       	push	r1
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
	
	//

	
	
	volatile char interrupt = 1; //MCP2515_read(MCP_CANINTF);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	89 83       	std	Y+1, r24	; 0x01
	
	
	volatile char realInterrupt = MCP2515_read(MCP_CANINTF);
 2ec:	8c e2       	ldi	r24, 0x2C	; 44
 2ee:	a2 d0       	rcall	.+324    	; 0x434 <MCP2515_read>
 2f0:	8a 83       	std	Y+2, r24	; 0x02
	printf("\n interrupt: \%i\n", realInterrupt);
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	1f 92       	push	r1
 2f6:	8f 93       	push	r24
 2f8:	8b e6       	ldi	r24, 0x6B	; 107
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	ae d1       	rcall	.+860    	; 0x65e <printf>

		while((!((1 << MCP_RX0IF) ))&&(!((1 << MCP_RX1IF)))){
			interrupt = MCP2515_read(MCP_CANINTF);
		}
		printf("\n interrupt: \%i", interrupt);
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	1f 92       	push	r1
 306:	8f 93       	push	r24
 308:	8c e7       	ldi	r24, 0x7C	; 124
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	9f 93       	push	r25
 30e:	8f 93       	push	r24
 310:	a6 d1       	rcall	.+844    	; 0x65e <printf>
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
	else{
		return -1;
	}
	*/

 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

void CAN_data_receive() {
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
	printf("CAN receive\n");
 32e:	8c e8       	ldi	r24, 0x8C	; 140
 330:	92 e0       	ldi	r25, 0x02	; 2
 332:	a6 d1       	rcall	.+844    	; 0x680 <puts>
	uint8_t n = CAN_transmit_complete();
 334:	d3 df       	rcall	.-90     	; 0x2dc <CAN_transmit_complete>
 336:	c8 2f       	mov	r28, r24
	printf("CAN_transmit_complete: \%i\n", n);
 338:	1f 92       	push	r1
 33a:	8f 93       	push	r24
 33c:	28 e9       	ldi	r18, 0x98	; 152
 33e:	32 e0       	ldi	r19, 0x02	; 2
 340:	3f 93       	push	r19
 342:	2f 93       	push	r18
 344:	8c d1       	rcall	.+792    	; 0x65e <printf>
	if (n >= 0){
		CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 346:	c2 95       	swap	r28
 348:	c0 7f       	andi	r28, 0xF0	; 240
 34a:	82 e6       	ldi	r24, 0x62	; 98
 34c:	8c 0f       	add	r24, r28
 34e:	b3 df       	rcall	.-154    	; 0x2b6 <CAN_read>
 350:	81 e6       	ldi	r24, 0x61	; 97
 352:	8c 0f       	add	r24, r28
 354:	b0 df       	rcall	.-160    	; 0x2b6 <CAN_read>
 356:	28 e0       	ldi	r18, 0x08	; 8
 358:	82 9f       	mul	r24, r18
 35a:	c0 01       	movw	r24, r0
 35c:	11 24       	eor	r1, r1
 35e:	90 93 b7 03 	sts	0x03B7, r25
 362:	80 93 b6 03 	sts	0x03B6, r24
		CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
 366:	85 e6       	ldi	r24, 0x65	; 101
 368:	8c 0f       	add	r24, r28
 36a:	a5 df       	rcall	.-182    	; 0x2b6 <CAN_read>
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	80 93 b8 03 	sts	0x03B8, r24
		for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	88 23       	and	r24, r24
 37c:	79 f0       	breq	.+30     	; 0x39c <CAN_data_receive+0x74>
 37e:	10 e0       	ldi	r17, 0x00	; 0
 380:	c8 eb       	ldi	r28, 0xB8	; 184
 382:	d3 e0       	ldi	r29, 0x03	; 3
			CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
 384:	86 e6       	ldi	r24, 0x66	; 102
 386:	81 0f       	add	r24, r17
 388:	96 df       	rcall	.-212    	; 0x2b6 <CAN_read>
 38a:	e1 2f       	mov	r30, r17
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	ea 54       	subi	r30, 0x4A	; 74
 390:	fc 4f       	sbci	r31, 0xFC	; 252
 392:	83 83       	std	Z+3, r24	; 0x03
	uint8_t n = CAN_transmit_complete();
	printf("CAN_transmit_complete: \%i\n", n);
	if (n >= 0){
		CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
		CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
		for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 394:	1f 5f       	subi	r17, 0xFF	; 255
 396:	88 81       	ld	r24, Y
 398:	18 17       	cp	r17, r24
 39a:	a0 f3       	brcs	.-24     	; 0x384 <CAN_data_receive+0x5c>
			CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
		}
	}
	//printf("%i",CAN_receive_buffer.data[0]);
	printf("CAN_data_receive: ID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_receive_buffer.id,CAN_receive_buffer.length,CAN_receive_buffer.data[0],CAN_receive_buffer.data[1],CAN_receive_buffer.data[2],CAN_receive_buffer.data[3],CAN_receive_buffer.data[4],CAN_receive_buffer.data[5],CAN_receive_buffer.data[6],CAN_receive_buffer.data[7]);
 39c:	90 91 c0 03 	lds	r25, 0x03C0
 3a0:	1f 92       	push	r1
 3a2:	9f 93       	push	r25
 3a4:	90 91 bf 03 	lds	r25, 0x03BF
 3a8:	1f 92       	push	r1
 3aa:	9f 93       	push	r25
 3ac:	90 91 be 03 	lds	r25, 0x03BE
 3b0:	1f 92       	push	r1
 3b2:	9f 93       	push	r25
 3b4:	90 91 bd 03 	lds	r25, 0x03BD
 3b8:	1f 92       	push	r1
 3ba:	9f 93       	push	r25
 3bc:	90 91 bc 03 	lds	r25, 0x03BC
 3c0:	1f 92       	push	r1
 3c2:	9f 93       	push	r25
 3c4:	90 91 bb 03 	lds	r25, 0x03BB
 3c8:	1f 92       	push	r1
 3ca:	9f 93       	push	r25
 3cc:	90 91 ba 03 	lds	r25, 0x03BA
 3d0:	1f 92       	push	r1
 3d2:	9f 93       	push	r25
 3d4:	90 91 b9 03 	lds	r25, 0x03B9
 3d8:	1f 92       	push	r1
 3da:	9f 93       	push	r25
 3dc:	1f 92       	push	r1
 3de:	8f 93       	push	r24
 3e0:	e6 eb       	ldi	r30, 0xB6	; 182
 3e2:	f3 e0       	ldi	r31, 0x03	; 3
 3e4:	81 81       	ldd	r24, Z+1	; 0x01
 3e6:	8f 93       	push	r24
 3e8:	80 81       	ld	r24, Z
 3ea:	8f 93       	push	r24
 3ec:	83 eb       	ldi	r24, 0xB3	; 179
 3ee:	92 e0       	ldi	r25, 0x02	; 2
 3f0:	9f 93       	push	r25
 3f2:	8f 93       	push	r24
 3f4:	34 d1       	rcall	.+616    	; 0x65e <printf>
	MCP2515_bit_modify(MCP_CANINTF,0xFF,0); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	6f ef       	ldi	r22, 0xFF	; 255
 3fa:	8c e2       	ldi	r24, 0x2C	; 44
 3fc:	42 d0       	rcall	.+132    	; 0x482 <MCP2515_bit_modify>
 3fe:	8d b7       	in	r24, 0x3d	; 61
 400:	9e b7       	in	r25, 0x3e	; 62
 402:	46 96       	adiw	r24, 0x16	; 22
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	9e bf       	out	0x3e, r25	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	8d bf       	out	0x3d, r24	; 61
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	08 95       	ret

00000416 <MCP2515_write>:
	printf("MCP2515_testSPI");
	for (int i = 0; i< 256; i++){
		MCP2515_write(0b00000000,i);
		printf("Value of i: %i\t value of reg:\t%i\n",i,MCP2515_read(0b00000000));
	}
}
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	d8 2f       	mov	r29, r24
 41c:	c6 2f       	mov	r28, r22
 41e:	a5 d0       	rcall	.+330    	; 0x56a <SPI_select>
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	9a d0       	rcall	.+308    	; 0x558 <SPI_send>
 424:	8d 2f       	mov	r24, r29
 426:	98 d0       	rcall	.+304    	; 0x558 <SPI_send>
 428:	8c 2f       	mov	r24, r28
 42a:	96 d0       	rcall	.+300    	; 0x558 <SPI_send>
 42c:	a0 d0       	rcall	.+320    	; 0x56e <SPI_deselect>
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <MCP2515_read>:
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24
 438:	98 d0       	rcall	.+304    	; 0x56a <SPI_select>
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	8d d0       	rcall	.+282    	; 0x558 <SPI_send>
 43e:	8c 2f       	mov	r24, r28
 440:	8b d0       	rcall	.+278    	; 0x558 <SPI_send>
 442:	8f d0       	rcall	.+286    	; 0x562 <SPI_receive>
 444:	c8 2f       	mov	r28, r24
 446:	93 d0       	rcall	.+294    	; 0x56e <SPI_deselect>
 448:	8c 2f       	mov	r24, r28
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <MCP2515_request_to_send>:

void MCP2515_request_to_send(uint8_t buffer){
 44e:	cf 93       	push	r28
 450:	c8 2f       	mov	r28, r24
	SPI_select();
 452:	8b d0       	rcall	.+278    	; 0x56a <SPI_select>
	SPI_send(0x80|(1<<buffer));
 454:	21 e0       	ldi	r18, 0x01	; 1
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	c9 01       	movw	r24, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <MCP2515_request_to_send+0x12>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	ca 95       	dec	r28
 462:	e2 f7       	brpl	.-8      	; 0x45c <MCP2515_request_to_send+0xe>
 464:	80 68       	ori	r24, 0x80	; 128
 466:	78 d0       	rcall	.+240    	; 0x558 <SPI_send>
	SPI_deselect();
 468:	82 d0       	rcall	.+260    	; 0x56e <SPI_deselect>
}
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <MCP2515_read_status>:

uint8_t MCP2515_read_status(void){
 46e:	cf 93       	push	r28
	SPI_select();
 470:	7c d0       	rcall	.+248    	; 0x56a <SPI_select>
	//printf("MCP2515_read_status start\n");
	SPI_send(MCP_READ_STATUS);
 472:	80 ea       	ldi	r24, 0xA0	; 160
 474:	71 d0       	rcall	.+226    	; 0x558 <SPI_send>
	uint8_t recieved_status = SPI_receive();
 476:	75 d0       	rcall	.+234    	; 0x562 <SPI_receive>
 478:	c8 2f       	mov	r28, r24
	SPI_deselect();
 47a:	79 d0       	rcall	.+242    	; 0x56e <SPI_deselect>
	//printf("MCP2515_read_status end\n");
	return recieved_status;
}
 47c:	8c 2f       	mov	r24, r28
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	18 2f       	mov	r17, r24
 48a:	d6 2f       	mov	r29, r22
 48c:	c4 2f       	mov	r28, r20
	//printf("MCP2515_bit_modify");
	SPI_select();
 48e:	6d d0       	rcall	.+218    	; 0x56a <SPI_select>
	SPI_send(MCP_BITMOD);
 490:	85 e0       	ldi	r24, 0x05	; 5
 492:	62 d0       	rcall	.+196    	; 0x558 <SPI_send>
	SPI_send(adr);
 494:	81 2f       	mov	r24, r17
 496:	60 d0       	rcall	.+192    	; 0x558 <SPI_send>
	SPI_send(mask);
 498:	8d 2f       	mov	r24, r29
 49a:	5e d0       	rcall	.+188    	; 0x558 <SPI_send>
	SPI_send(data);
 49c:	8c 2f       	mov	r24, r28
 49e:	5c d0       	rcall	.+184    	; 0x558 <SPI_send>
	SPI_deselect();
 4a0:	66 d0       	rcall	.+204    	; 0x56e <SPI_deselect>
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	08 95       	ret

000004aa <MCP2515_initialize>:
 *  Author: jonasgl
 */ 
#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	1f 92       	push	r1
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
	SPI_initialize();
 4b4:	5e d0       	rcall	.+188    	; 0x572 <SPI_initialize>
	SPI_select();
 4b6:	59 d0       	rcall	.+178    	; 0x56a <SPI_select>
	printf("MCP2515_initialize before reset\n");
 4b8:	82 e2       	ldi	r24, 0x22	; 34
 4ba:	93 e0       	ldi	r25, 0x03	; 3
 4bc:	e1 d0       	rcall	.+450    	; 0x680 <puts>
		SPI_send(MCP_RESET);
 4be:	80 ec       	ldi	r24, 0xC0	; 192
 4c0:	4b d0       	rcall	.+150    	; 0x558 <SPI_send>
	printf("MCP2515_initialize after reset\n");
 4c2:	82 e4       	ldi	r24, 0x42	; 66
 4c4:	93 e0       	ldi	r25, 0x03	; 3
 4c6:	dc d0       	rcall	.+440    	; 0x680 <puts>
	
	SPI_deselect();
 4c8:	52 d0       	rcall	.+164    	; 0x56e <SPI_deselect>
	
	volatile uint8_t value = MCP2515_read_status();
 4ca:	d1 df       	rcall	.-94     	; 0x46e <MCP2515_read_status>
 4cc:	89 83       	std	Y+1, r24	; 0x01
	printf(" MCP2515_read_status: %i\n", value);
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	1f 92       	push	r1
 4d2:	8f 93       	push	r24
 4d4:	81 e6       	ldi	r24, 0x61	; 97
 4d6:	93 e0       	ldi	r25, 0x03	; 3
 4d8:	9f 93       	push	r25
 4da:	8f 93       	push	r24
 4dc:	c0 d0       	rcall	.+384    	; 0x65e <printf>
	//SPI_select();
	MCP2515_bit_modify(MCP_CANCTRL,0b11100000,MODE_CONFIG);
 4de:	40 e8       	ldi	r20, 0x80	; 128
 4e0:	60 ee       	ldi	r22, 0xE0	; 224
 4e2:	8f e0       	ldi	r24, 0x0F	; 15
 4e4:	ce df       	rcall	.-100    	; 0x482 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);
 4e6:	40 e4       	ldi	r20, 0x40	; 64
 4e8:	60 ee       	ldi	r22, 0xE0	; 224
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	ca df       	rcall	.-108    	; 0x482 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANCTRL,0b11100000,0x00);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	60 ee       	ldi	r22, 0xE0	; 224
 4f2:	8f e0       	ldi	r24, 0x0F	; 15
 4f4:	c6 df       	rcall	.-116    	; 0x482 <MCP2515_bit_modify>
	SPI_deselect();
 4f6:	3b d0       	rcall	.+118    	; 0x56e <SPI_deselect>
		
}
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <main>:
#include "SPI.h"
#include "MCP2515.h"
#include "MCP2515_driver.h"

int main(void)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	28 97       	sbiw	r28, 0x08	; 8
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
	init_UART(UBRR);
 51c:	87 e6       	ldi	r24, 0x67	; 103
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	44 d0       	rcall	.+136    	; 0x5aa <init_UART>
			
	printf("Initializing...\n");
 522:	8b e7       	ldi	r24, 0x7B	; 123
 524:	93 e0       	ldi	r25, 0x03	; 3
 526:	ac d0       	rcall	.+344    	; 0x680 <puts>
	
	//MCP2515_initialize();
	CAN_initialize();
 528:	0e de       	rcall	.-996    	; 0x146 <CAN_initialize>
	

	//CAN_receive_buffer =  CAN_message_receive();
	
	
	uint8_t temp[8] = {1,2,3,4,5,6,7,8};
 52a:	88 e0       	ldi	r24, 0x08	; 8
 52c:	e6 e0       	ldi	r30, 0x06	; 6
 52e:	f2 e0       	ldi	r31, 0x02	; 2
 530:	de 01       	movw	r26, r28
 532:	11 96       	adiw	r26, 0x01	; 1
 534:	01 90       	ld	r0, Z+
 536:	0d 92       	st	X+, r0
 538:	8a 95       	dec	r24
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x2c>
	

	uint8_t sendCAN = 1;
	
	if(sendCAN){
		CAN_message_send(data);
 53c:	ce 01       	movw	r24, r28
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	a6 de       	rcall	.-692    	; 0x28e <CAN_message_send>
		CAN_data_receive();
 542:	f2 de       	rcall	.-540    	; 0x328 <CAN_data_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	83 ed       	ldi	r24, 0xD3	; 211
 548:	90 e3       	ldi	r25, 0x30	; 48
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <main+0x42>
 552:	00 c0       	rjmp	.+0      	; 0x554 <main+0x4c>
 554:	00 00       	nop
 556:	ff cf       	rjmp	.-2      	; 0x556 <main+0x4e>

00000558 <SPI_send>:


void SPI_send(char data) {
	
	// Start the transmission
	SPDR = data;
 558:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 55a:	0d b4       	in	r0, 0x2d	; 45
 55c:	07 fe       	sbrs	r0, 7
 55e:	fd cf       	rjmp	.-6      	; 0x55a <SPI_send+0x2>

}
 560:	08 95       	ret

00000562 <SPI_receive>:


char SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	f9 df       	rcall	.-14     	; 0x558 <SPI_send>
	
	// Wait for reception complete
	//while(!(SPSR & (1<<SPIF)));

	// Return Data Register
	return SPDR;
 566:	8e b5       	in	r24, 0x2e	; 46
}
 568:	08 95       	ret

0000056a <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
 56a:	2f 98       	cbi	0x05, 7	; 5
 56c:	08 95       	ret

0000056e <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
 56e:	2f 9a       	sbi	0x05, 7	; 5
 570:	08 95       	ret

00000572 <SPI_initialize>:


void SPI_initialize(void){

	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS)|(1<<PB0);
 572:	84 b1       	in	r24, 0x04	; 4
 574:	87 68       	ori	r24, 0x87	; 135
 576:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 578:	8c b5       	in	r24, 0x2c	; 44
 57a:	81 65       	ori	r24, 0x51	; 81
 57c:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
 57e:	f7 df       	rcall	.-18     	; 0x56e <SPI_deselect>
	printf("SPI communication initialized.\n");
 580:	8b e8       	ldi	r24, 0x8B	; 139
 582:	93 e0       	ldi	r25, 0x03	; 3
 584:	7d c0       	rjmp	.+250    	; 0x680 <puts>
 586:	08 95       	ret

00000588 <send_UART>:
 588:	e0 ec       	ldi	r30, 0xC0	; 192
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	90 81       	ld	r25, Z
 58e:	95 ff       	sbrs	r25, 5
 590:	fd cf       	rjmp	.-6      	; 0x58c <send_UART+0x4>
 592:	80 93 c6 00 	sts	0x00C6, r24
 596:	08 95       	ret

00000598 <recieve_UART>:
 598:	e0 ec       	ldi	r30, 0xC0	; 192
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	88 23       	and	r24, r24
 5a0:	ec f7       	brge	.-6      	; 0x59c <recieve_UART+0x4>
 5a2:	80 91 c6 00 	lds	r24, 0x00C6
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	08 95       	ret

000005aa <init_UART>:
 5aa:	90 93 c5 00 	sts	0x00C5, r25
 5ae:	80 93 c4 00 	sts	0x00C4, r24
 5b2:	88 e1       	ldi	r24, 0x18	; 24
 5b4:	80 93 c1 00 	sts	0x00C1, r24
 5b8:	8e e0       	ldi	r24, 0x0E	; 14
 5ba:	80 93 c2 00 	sts	0x00C2, r24
 5be:	6c ec       	ldi	r22, 0xCC	; 204
 5c0:	72 e0       	ldi	r23, 0x02	; 2
 5c2:	84 ec       	ldi	r24, 0xC4	; 196
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <fdevopen>
 5c8:	08 95       	ret

000005ca <fdevopen>:
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	ec 01       	movw	r28, r24
 5d4:	8b 01       	movw	r16, r22
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	31 f4       	brne	.+12     	; 0x5e6 <fdevopen+0x1c>
 5da:	61 15       	cp	r22, r1
 5dc:	71 05       	cpc	r23, r1
 5de:	19 f4       	brne	.+6      	; 0x5e6 <fdevopen+0x1c>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	37 c0       	rjmp	.+110    	; 0x654 <fdevopen+0x8a>
 5e6:	6e e0       	ldi	r22, 0x0E	; 14
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	63 d2       	rcall	.+1222   	; 0xab6 <calloc>
 5f0:	fc 01       	movw	r30, r24
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	a9 f3       	breq	.-22     	; 0x5e0 <fdevopen+0x16>
 5f6:	80 e8       	ldi	r24, 0x80	; 128
 5f8:	83 83       	std	Z+3, r24	; 0x03
 5fa:	01 15       	cp	r16, r1
 5fc:	11 05       	cpc	r17, r1
 5fe:	71 f0       	breq	.+28     	; 0x61c <fdevopen+0x52>
 600:	13 87       	std	Z+11, r17	; 0x0b
 602:	02 87       	std	Z+10, r16	; 0x0a
 604:	81 e8       	ldi	r24, 0x81	; 129
 606:	83 83       	std	Z+3, r24	; 0x03
 608:	80 91 c1 03 	lds	r24, 0x03C1
 60c:	90 91 c2 03 	lds	r25, 0x03C2
 610:	89 2b       	or	r24, r25
 612:	21 f4       	brne	.+8      	; 0x61c <fdevopen+0x52>
 614:	f0 93 c2 03 	sts	0x03C2, r31
 618:	e0 93 c1 03 	sts	0x03C1, r30
 61c:	20 97       	sbiw	r28, 0x00	; 0
 61e:	c9 f0       	breq	.+50     	; 0x652 <fdevopen+0x88>
 620:	d1 87       	std	Z+9, r29	; 0x09
 622:	c0 87       	std	Z+8, r28	; 0x08
 624:	83 81       	ldd	r24, Z+3	; 0x03
 626:	82 60       	ori	r24, 0x02	; 2
 628:	83 83       	std	Z+3, r24	; 0x03
 62a:	80 91 c3 03 	lds	r24, 0x03C3
 62e:	90 91 c4 03 	lds	r25, 0x03C4
 632:	89 2b       	or	r24, r25
 634:	71 f4       	brne	.+28     	; 0x652 <fdevopen+0x88>
 636:	f0 93 c4 03 	sts	0x03C4, r31
 63a:	e0 93 c3 03 	sts	0x03C3, r30
 63e:	80 91 c5 03 	lds	r24, 0x03C5
 642:	90 91 c6 03 	lds	r25, 0x03C6
 646:	89 2b       	or	r24, r25
 648:	21 f4       	brne	.+8      	; 0x652 <fdevopen+0x88>
 64a:	f0 93 c6 03 	sts	0x03C6, r31
 64e:	e0 93 c5 03 	sts	0x03C5, r30
 652:	cf 01       	movw	r24, r30
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <printf>:
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	fe 01       	movw	r30, r28
 668:	36 96       	adiw	r30, 0x06	; 6
 66a:	61 91       	ld	r22, Z+
 66c:	71 91       	ld	r23, Z+
 66e:	af 01       	movw	r20, r30
 670:	80 91 c3 03 	lds	r24, 0x03C3
 674:	90 91 c4 03 	lds	r25, 0x03C4
 678:	30 d0       	rcall	.+96     	; 0x6da <vfprintf>
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <puts>:
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	e0 91 c3 03 	lds	r30, 0x03C3
 68c:	f0 91 c4 03 	lds	r31, 0x03C4
 690:	23 81       	ldd	r18, Z+3	; 0x03
 692:	21 ff       	sbrs	r18, 1
 694:	1b c0       	rjmp	.+54     	; 0x6cc <puts+0x4c>
 696:	ec 01       	movw	r28, r24
 698:	00 e0       	ldi	r16, 0x00	; 0
 69a:	10 e0       	ldi	r17, 0x00	; 0
 69c:	89 91       	ld	r24, Y+
 69e:	60 91 c3 03 	lds	r22, 0x03C3
 6a2:	70 91 c4 03 	lds	r23, 0x03C4
 6a6:	db 01       	movw	r26, r22
 6a8:	18 96       	adiw	r26, 0x08	; 8
 6aa:	ed 91       	ld	r30, X+
 6ac:	fc 91       	ld	r31, X
 6ae:	19 97       	sbiw	r26, 0x09	; 9
 6b0:	88 23       	and	r24, r24
 6b2:	31 f0       	breq	.+12     	; 0x6c0 <puts+0x40>
 6b4:	19 95       	eicall
 6b6:	89 2b       	or	r24, r25
 6b8:	89 f3       	breq	.-30     	; 0x69c <puts+0x1c>
 6ba:	0f ef       	ldi	r16, 0xFF	; 255
 6bc:	1f ef       	ldi	r17, 0xFF	; 255
 6be:	ee cf       	rjmp	.-36     	; 0x69c <puts+0x1c>
 6c0:	8a e0       	ldi	r24, 0x0A	; 10
 6c2:	19 95       	eicall
 6c4:	89 2b       	or	r24, r25
 6c6:	11 f4       	brne	.+4      	; 0x6cc <puts+0x4c>
 6c8:	c8 01       	movw	r24, r16
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <puts+0x50>
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	9f ef       	ldi	r25, 0xFF	; 255
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	1f 91       	pop	r17
 6d6:	0f 91       	pop	r16
 6d8:	08 95       	ret

000006da <vfprintf>:
 6da:	2f 92       	push	r2
 6dc:	3f 92       	push	r3
 6de:	4f 92       	push	r4
 6e0:	5f 92       	push	r5
 6e2:	6f 92       	push	r6
 6e4:	7f 92       	push	r7
 6e6:	8f 92       	push	r8
 6e8:	9f 92       	push	r9
 6ea:	af 92       	push	r10
 6ec:	bf 92       	push	r11
 6ee:	cf 92       	push	r12
 6f0:	df 92       	push	r13
 6f2:	ef 92       	push	r14
 6f4:	ff 92       	push	r15
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	2c 97       	sbiw	r28, 0x0c	; 12
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	7c 01       	movw	r14, r24
 710:	6b 01       	movw	r12, r22
 712:	8a 01       	movw	r16, r20
 714:	fc 01       	movw	r30, r24
 716:	17 82       	std	Z+7, r1	; 0x07
 718:	16 82       	std	Z+6, r1	; 0x06
 71a:	83 81       	ldd	r24, Z+3	; 0x03
 71c:	81 ff       	sbrs	r24, 1
 71e:	b0 c1       	rjmp	.+864    	; 0xa80 <vfprintf+0x3a6>
 720:	ce 01       	movw	r24, r28
 722:	01 96       	adiw	r24, 0x01	; 1
 724:	4c 01       	movw	r8, r24
 726:	f7 01       	movw	r30, r14
 728:	93 81       	ldd	r25, Z+3	; 0x03
 72a:	f6 01       	movw	r30, r12
 72c:	93 fd       	sbrc	r25, 3
 72e:	85 91       	lpm	r24, Z+
 730:	93 ff       	sbrs	r25, 3
 732:	81 91       	ld	r24, Z+
 734:	6f 01       	movw	r12, r30
 736:	88 23       	and	r24, r24
 738:	09 f4       	brne	.+2      	; 0x73c <vfprintf+0x62>
 73a:	9e c1       	rjmp	.+828    	; 0xa78 <vfprintf+0x39e>
 73c:	85 32       	cpi	r24, 0x25	; 37
 73e:	39 f4       	brne	.+14     	; 0x74e <vfprintf+0x74>
 740:	93 fd       	sbrc	r25, 3
 742:	85 91       	lpm	r24, Z+
 744:	93 ff       	sbrs	r25, 3
 746:	81 91       	ld	r24, Z+
 748:	6f 01       	movw	r12, r30
 74a:	85 32       	cpi	r24, 0x25	; 37
 74c:	21 f4       	brne	.+8      	; 0x756 <vfprintf+0x7c>
 74e:	b7 01       	movw	r22, r14
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0f d3       	rcall	.+1566   	; 0xd72 <fputc>
 754:	e8 cf       	rjmp	.-48     	; 0x726 <vfprintf+0x4c>
 756:	51 2c       	mov	r5, r1
 758:	31 2c       	mov	r3, r1
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	20 32       	cpi	r18, 0x20	; 32
 75e:	a0 f4       	brcc	.+40     	; 0x788 <vfprintf+0xae>
 760:	8b 32       	cpi	r24, 0x2B	; 43
 762:	69 f0       	breq	.+26     	; 0x77e <vfprintf+0xa4>
 764:	30 f4       	brcc	.+12     	; 0x772 <vfprintf+0x98>
 766:	80 32       	cpi	r24, 0x20	; 32
 768:	59 f0       	breq	.+22     	; 0x780 <vfprintf+0xa6>
 76a:	83 32       	cpi	r24, 0x23	; 35
 76c:	69 f4       	brne	.+26     	; 0x788 <vfprintf+0xae>
 76e:	20 61       	ori	r18, 0x10	; 16
 770:	2c c0       	rjmp	.+88     	; 0x7ca <vfprintf+0xf0>
 772:	8d 32       	cpi	r24, 0x2D	; 45
 774:	39 f0       	breq	.+14     	; 0x784 <vfprintf+0xaa>
 776:	80 33       	cpi	r24, 0x30	; 48
 778:	39 f4       	brne	.+14     	; 0x788 <vfprintf+0xae>
 77a:	21 60       	ori	r18, 0x01	; 1
 77c:	26 c0       	rjmp	.+76     	; 0x7ca <vfprintf+0xf0>
 77e:	22 60       	ori	r18, 0x02	; 2
 780:	24 60       	ori	r18, 0x04	; 4
 782:	23 c0       	rjmp	.+70     	; 0x7ca <vfprintf+0xf0>
 784:	28 60       	ori	r18, 0x08	; 8
 786:	21 c0       	rjmp	.+66     	; 0x7ca <vfprintf+0xf0>
 788:	27 fd       	sbrc	r18, 7
 78a:	27 c0       	rjmp	.+78     	; 0x7da <vfprintf+0x100>
 78c:	30 ed       	ldi	r19, 0xD0	; 208
 78e:	38 0f       	add	r19, r24
 790:	3a 30       	cpi	r19, 0x0A	; 10
 792:	78 f4       	brcc	.+30     	; 0x7b2 <vfprintf+0xd8>
 794:	26 ff       	sbrs	r18, 6
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0xca>
 798:	fa e0       	ldi	r31, 0x0A	; 10
 79a:	5f 9e       	mul	r5, r31
 79c:	30 0d       	add	r19, r0
 79e:	11 24       	eor	r1, r1
 7a0:	53 2e       	mov	r5, r19
 7a2:	13 c0       	rjmp	.+38     	; 0x7ca <vfprintf+0xf0>
 7a4:	8a e0       	ldi	r24, 0x0A	; 10
 7a6:	38 9e       	mul	r3, r24
 7a8:	30 0d       	add	r19, r0
 7aa:	11 24       	eor	r1, r1
 7ac:	33 2e       	mov	r3, r19
 7ae:	20 62       	ori	r18, 0x20	; 32
 7b0:	0c c0       	rjmp	.+24     	; 0x7ca <vfprintf+0xf0>
 7b2:	8e 32       	cpi	r24, 0x2E	; 46
 7b4:	21 f4       	brne	.+8      	; 0x7be <vfprintf+0xe4>
 7b6:	26 fd       	sbrc	r18, 6
 7b8:	5f c1       	rjmp	.+702    	; 0xa78 <vfprintf+0x39e>
 7ba:	20 64       	ori	r18, 0x40	; 64
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0xf0>
 7be:	8c 36       	cpi	r24, 0x6C	; 108
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <vfprintf+0xec>
 7c2:	20 68       	ori	r18, 0x80	; 128
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0xf0>
 7c6:	88 36       	cpi	r24, 0x68	; 104
 7c8:	41 f4       	brne	.+16     	; 0x7da <vfprintf+0x100>
 7ca:	f6 01       	movw	r30, r12
 7cc:	93 fd       	sbrc	r25, 3
 7ce:	85 91       	lpm	r24, Z+
 7d0:	93 ff       	sbrs	r25, 3
 7d2:	81 91       	ld	r24, Z+
 7d4:	6f 01       	movw	r12, r30
 7d6:	81 11       	cpse	r24, r1
 7d8:	c1 cf       	rjmp	.-126    	; 0x75c <vfprintf+0x82>
 7da:	98 2f       	mov	r25, r24
 7dc:	9f 7d       	andi	r25, 0xDF	; 223
 7de:	95 54       	subi	r25, 0x45	; 69
 7e0:	93 30       	cpi	r25, 0x03	; 3
 7e2:	28 f4       	brcc	.+10     	; 0x7ee <vfprintf+0x114>
 7e4:	0c 5f       	subi	r16, 0xFC	; 252
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	ff e3       	ldi	r31, 0x3F	; 63
 7ea:	f9 83       	std	Y+1, r31	; 0x01
 7ec:	0d c0       	rjmp	.+26     	; 0x808 <vfprintf+0x12e>
 7ee:	83 36       	cpi	r24, 0x63	; 99
 7f0:	31 f0       	breq	.+12     	; 0x7fe <vfprintf+0x124>
 7f2:	83 37       	cpi	r24, 0x73	; 115
 7f4:	71 f0       	breq	.+28     	; 0x812 <vfprintf+0x138>
 7f6:	83 35       	cpi	r24, 0x53	; 83
 7f8:	09 f0       	breq	.+2      	; 0x7fc <vfprintf+0x122>
 7fa:	57 c0       	rjmp	.+174    	; 0x8aa <vfprintf+0x1d0>
 7fc:	21 c0       	rjmp	.+66     	; 0x840 <vfprintf+0x166>
 7fe:	f8 01       	movw	r30, r16
 800:	80 81       	ld	r24, Z
 802:	89 83       	std	Y+1, r24	; 0x01
 804:	0e 5f       	subi	r16, 0xFE	; 254
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	44 24       	eor	r4, r4
 80a:	43 94       	inc	r4
 80c:	51 2c       	mov	r5, r1
 80e:	54 01       	movw	r10, r8
 810:	14 c0       	rjmp	.+40     	; 0x83a <vfprintf+0x160>
 812:	38 01       	movw	r6, r16
 814:	f2 e0       	ldi	r31, 0x02	; 2
 816:	6f 0e       	add	r6, r31
 818:	71 1c       	adc	r7, r1
 81a:	f8 01       	movw	r30, r16
 81c:	a0 80       	ld	r10, Z
 81e:	b1 80       	ldd	r11, Z+1	; 0x01
 820:	26 ff       	sbrs	r18, 6
 822:	03 c0       	rjmp	.+6      	; 0x82a <vfprintf+0x150>
 824:	65 2d       	mov	r22, r5
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	02 c0       	rjmp	.+4      	; 0x82e <vfprintf+0x154>
 82a:	6f ef       	ldi	r22, 0xFF	; 255
 82c:	7f ef       	ldi	r23, 0xFF	; 255
 82e:	c5 01       	movw	r24, r10
 830:	2c 87       	std	Y+12, r18	; 0x0c
 832:	94 d2       	rcall	.+1320   	; 0xd5c <strnlen>
 834:	2c 01       	movw	r4, r24
 836:	83 01       	movw	r16, r6
 838:	2c 85       	ldd	r18, Y+12	; 0x0c
 83a:	2f 77       	andi	r18, 0x7F	; 127
 83c:	22 2e       	mov	r2, r18
 83e:	16 c0       	rjmp	.+44     	; 0x86c <vfprintf+0x192>
 840:	38 01       	movw	r6, r16
 842:	f2 e0       	ldi	r31, 0x02	; 2
 844:	6f 0e       	add	r6, r31
 846:	71 1c       	adc	r7, r1
 848:	f8 01       	movw	r30, r16
 84a:	a0 80       	ld	r10, Z
 84c:	b1 80       	ldd	r11, Z+1	; 0x01
 84e:	26 ff       	sbrs	r18, 6
 850:	03 c0       	rjmp	.+6      	; 0x858 <vfprintf+0x17e>
 852:	65 2d       	mov	r22, r5
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <vfprintf+0x182>
 858:	6f ef       	ldi	r22, 0xFF	; 255
 85a:	7f ef       	ldi	r23, 0xFF	; 255
 85c:	c5 01       	movw	r24, r10
 85e:	2c 87       	std	Y+12, r18	; 0x0c
 860:	6b d2       	rcall	.+1238   	; 0xd38 <strnlen_P>
 862:	2c 01       	movw	r4, r24
 864:	2c 85       	ldd	r18, Y+12	; 0x0c
 866:	20 68       	ori	r18, 0x80	; 128
 868:	22 2e       	mov	r2, r18
 86a:	83 01       	movw	r16, r6
 86c:	23 fc       	sbrc	r2, 3
 86e:	19 c0       	rjmp	.+50     	; 0x8a2 <vfprintf+0x1c8>
 870:	83 2d       	mov	r24, r3
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	48 16       	cp	r4, r24
 876:	59 06       	cpc	r5, r25
 878:	a0 f4       	brcc	.+40     	; 0x8a2 <vfprintf+0x1c8>
 87a:	b7 01       	movw	r22, r14
 87c:	80 e2       	ldi	r24, 0x20	; 32
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	78 d2       	rcall	.+1264   	; 0xd72 <fputc>
 882:	3a 94       	dec	r3
 884:	f5 cf       	rjmp	.-22     	; 0x870 <vfprintf+0x196>
 886:	f5 01       	movw	r30, r10
 888:	27 fc       	sbrc	r2, 7
 88a:	85 91       	lpm	r24, Z+
 88c:	27 fe       	sbrs	r2, 7
 88e:	81 91       	ld	r24, Z+
 890:	5f 01       	movw	r10, r30
 892:	b7 01       	movw	r22, r14
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	6d d2       	rcall	.+1242   	; 0xd72 <fputc>
 898:	31 10       	cpse	r3, r1
 89a:	3a 94       	dec	r3
 89c:	f1 e0       	ldi	r31, 0x01	; 1
 89e:	4f 1a       	sub	r4, r31
 8a0:	51 08       	sbc	r5, r1
 8a2:	41 14       	cp	r4, r1
 8a4:	51 04       	cpc	r5, r1
 8a6:	79 f7       	brne	.-34     	; 0x886 <vfprintf+0x1ac>
 8a8:	de c0       	rjmp	.+444    	; 0xa66 <vfprintf+0x38c>
 8aa:	84 36       	cpi	r24, 0x64	; 100
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <vfprintf+0x1d8>
 8ae:	89 36       	cpi	r24, 0x69	; 105
 8b0:	31 f5       	brne	.+76     	; 0x8fe <vfprintf+0x224>
 8b2:	f8 01       	movw	r30, r16
 8b4:	27 ff       	sbrs	r18, 7
 8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <vfprintf+0x1ec>
 8b8:	60 81       	ld	r22, Z
 8ba:	71 81       	ldd	r23, Z+1	; 0x01
 8bc:	82 81       	ldd	r24, Z+2	; 0x02
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	0c 5f       	subi	r16, 0xFC	; 252
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <vfprintf+0x1fc>
 8c6:	60 81       	ld	r22, Z
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	88 27       	eor	r24, r24
 8cc:	77 fd       	sbrc	r23, 7
 8ce:	80 95       	com	r24
 8d0:	98 2f       	mov	r25, r24
 8d2:	0e 5f       	subi	r16, 0xFE	; 254
 8d4:	1f 4f       	sbci	r17, 0xFF	; 255
 8d6:	2f 76       	andi	r18, 0x6F	; 111
 8d8:	b2 2e       	mov	r11, r18
 8da:	97 ff       	sbrs	r25, 7
 8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <vfprintf+0x216>
 8de:	90 95       	com	r25
 8e0:	80 95       	com	r24
 8e2:	70 95       	com	r23
 8e4:	61 95       	neg	r22
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	20 68       	ori	r18, 0x80	; 128
 8ee:	b2 2e       	mov	r11, r18
 8f0:	2a e0       	ldi	r18, 0x0A	; 10
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	a4 01       	movw	r20, r8
 8f6:	6f d2       	rcall	.+1246   	; 0xdd6 <__ultoa_invert>
 8f8:	a8 2e       	mov	r10, r24
 8fa:	a8 18       	sub	r10, r8
 8fc:	43 c0       	rjmp	.+134    	; 0x984 <vfprintf+0x2aa>
 8fe:	85 37       	cpi	r24, 0x75	; 117
 900:	29 f4       	brne	.+10     	; 0x90c <vfprintf+0x232>
 902:	2f 7e       	andi	r18, 0xEF	; 239
 904:	b2 2e       	mov	r11, r18
 906:	2a e0       	ldi	r18, 0x0A	; 10
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	25 c0       	rjmp	.+74     	; 0x956 <vfprintf+0x27c>
 90c:	f2 2f       	mov	r31, r18
 90e:	f9 7f       	andi	r31, 0xF9	; 249
 910:	bf 2e       	mov	r11, r31
 912:	8f 36       	cpi	r24, 0x6F	; 111
 914:	c1 f0       	breq	.+48     	; 0x946 <vfprintf+0x26c>
 916:	18 f4       	brcc	.+6      	; 0x91e <vfprintf+0x244>
 918:	88 35       	cpi	r24, 0x58	; 88
 91a:	79 f0       	breq	.+30     	; 0x93a <vfprintf+0x260>
 91c:	ad c0       	rjmp	.+346    	; 0xa78 <vfprintf+0x39e>
 91e:	80 37       	cpi	r24, 0x70	; 112
 920:	19 f0       	breq	.+6      	; 0x928 <vfprintf+0x24e>
 922:	88 37       	cpi	r24, 0x78	; 120
 924:	21 f0       	breq	.+8      	; 0x92e <vfprintf+0x254>
 926:	a8 c0       	rjmp	.+336    	; 0xa78 <vfprintf+0x39e>
 928:	2f 2f       	mov	r18, r31
 92a:	20 61       	ori	r18, 0x10	; 16
 92c:	b2 2e       	mov	r11, r18
 92e:	b4 fe       	sbrs	r11, 4
 930:	0d c0       	rjmp	.+26     	; 0x94c <vfprintf+0x272>
 932:	8b 2d       	mov	r24, r11
 934:	84 60       	ori	r24, 0x04	; 4
 936:	b8 2e       	mov	r11, r24
 938:	09 c0       	rjmp	.+18     	; 0x94c <vfprintf+0x272>
 93a:	24 ff       	sbrs	r18, 4
 93c:	0a c0       	rjmp	.+20     	; 0x952 <vfprintf+0x278>
 93e:	9f 2f       	mov	r25, r31
 940:	96 60       	ori	r25, 0x06	; 6
 942:	b9 2e       	mov	r11, r25
 944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0x278>
 946:	28 e0       	ldi	r18, 0x08	; 8
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	05 c0       	rjmp	.+10     	; 0x956 <vfprintf+0x27c>
 94c:	20 e1       	ldi	r18, 0x10	; 16
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x27c>
 952:	20 e1       	ldi	r18, 0x10	; 16
 954:	32 e0       	ldi	r19, 0x02	; 2
 956:	f8 01       	movw	r30, r16
 958:	b7 fe       	sbrs	r11, 7
 95a:	07 c0       	rjmp	.+14     	; 0x96a <vfprintf+0x290>
 95c:	60 81       	ld	r22, Z
 95e:	71 81       	ldd	r23, Z+1	; 0x01
 960:	82 81       	ldd	r24, Z+2	; 0x02
 962:	93 81       	ldd	r25, Z+3	; 0x03
 964:	0c 5f       	subi	r16, 0xFC	; 252
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	06 c0       	rjmp	.+12     	; 0x976 <vfprintf+0x29c>
 96a:	60 81       	ld	r22, Z
 96c:	71 81       	ldd	r23, Z+1	; 0x01
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 5f       	subi	r16, 0xFE	; 254
 974:	1f 4f       	sbci	r17, 0xFF	; 255
 976:	a4 01       	movw	r20, r8
 978:	2e d2       	rcall	.+1116   	; 0xdd6 <__ultoa_invert>
 97a:	a8 2e       	mov	r10, r24
 97c:	a8 18       	sub	r10, r8
 97e:	fb 2d       	mov	r31, r11
 980:	ff 77       	andi	r31, 0x7F	; 127
 982:	bf 2e       	mov	r11, r31
 984:	b6 fe       	sbrs	r11, 6
 986:	0b c0       	rjmp	.+22     	; 0x99e <vfprintf+0x2c4>
 988:	2b 2d       	mov	r18, r11
 98a:	2e 7f       	andi	r18, 0xFE	; 254
 98c:	a5 14       	cp	r10, r5
 98e:	50 f4       	brcc	.+20     	; 0x9a4 <vfprintf+0x2ca>
 990:	b4 fe       	sbrs	r11, 4
 992:	0a c0       	rjmp	.+20     	; 0x9a8 <vfprintf+0x2ce>
 994:	b2 fc       	sbrc	r11, 2
 996:	08 c0       	rjmp	.+16     	; 0x9a8 <vfprintf+0x2ce>
 998:	2b 2d       	mov	r18, r11
 99a:	2e 7e       	andi	r18, 0xEE	; 238
 99c:	05 c0       	rjmp	.+10     	; 0x9a8 <vfprintf+0x2ce>
 99e:	7a 2c       	mov	r7, r10
 9a0:	2b 2d       	mov	r18, r11
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <vfprintf+0x2d0>
 9a4:	7a 2c       	mov	r7, r10
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <vfprintf+0x2d0>
 9a8:	75 2c       	mov	r7, r5
 9aa:	24 ff       	sbrs	r18, 4
 9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <vfprintf+0x2ee>
 9ae:	fe 01       	movw	r30, r28
 9b0:	ea 0d       	add	r30, r10
 9b2:	f1 1d       	adc	r31, r1
 9b4:	80 81       	ld	r24, Z
 9b6:	80 33       	cpi	r24, 0x30	; 48
 9b8:	11 f4       	brne	.+4      	; 0x9be <vfprintf+0x2e4>
 9ba:	29 7e       	andi	r18, 0xE9	; 233
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <vfprintf+0x2f6>
 9be:	22 ff       	sbrs	r18, 2
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <vfprintf+0x2f4>
 9c2:	73 94       	inc	r7
 9c4:	73 94       	inc	r7
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <vfprintf+0x2f6>
 9c8:	82 2f       	mov	r24, r18
 9ca:	86 78       	andi	r24, 0x86	; 134
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <vfprintf+0x2f6>
 9ce:	73 94       	inc	r7
 9d0:	23 fd       	sbrc	r18, 3
 9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <vfprintf+0x31e>
 9d4:	20 ff       	sbrs	r18, 0
 9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <vfprintf+0x30a>
 9d8:	5a 2c       	mov	r5, r10
 9da:	73 14       	cp	r7, r3
 9dc:	18 f4       	brcc	.+6      	; 0x9e4 <vfprintf+0x30a>
 9de:	53 0c       	add	r5, r3
 9e0:	57 18       	sub	r5, r7
 9e2:	73 2c       	mov	r7, r3
 9e4:	73 14       	cp	r7, r3
 9e6:	60 f4       	brcc	.+24     	; 0xa00 <vfprintf+0x326>
 9e8:	b7 01       	movw	r22, r14
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	2c 87       	std	Y+12, r18	; 0x0c
 9f0:	c0 d1       	rcall	.+896    	; 0xd72 <fputc>
 9f2:	73 94       	inc	r7
 9f4:	2c 85       	ldd	r18, Y+12	; 0x0c
 9f6:	f6 cf       	rjmp	.-20     	; 0x9e4 <vfprintf+0x30a>
 9f8:	73 14       	cp	r7, r3
 9fa:	10 f4       	brcc	.+4      	; 0xa00 <vfprintf+0x326>
 9fc:	37 18       	sub	r3, r7
 9fe:	01 c0       	rjmp	.+2      	; 0xa02 <vfprintf+0x328>
 a00:	31 2c       	mov	r3, r1
 a02:	24 ff       	sbrs	r18, 4
 a04:	11 c0       	rjmp	.+34     	; 0xa28 <vfprintf+0x34e>
 a06:	b7 01       	movw	r22, r14
 a08:	80 e3       	ldi	r24, 0x30	; 48
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	2c 87       	std	Y+12, r18	; 0x0c
 a0e:	b1 d1       	rcall	.+866    	; 0xd72 <fputc>
 a10:	2c 85       	ldd	r18, Y+12	; 0x0c
 a12:	22 ff       	sbrs	r18, 2
 a14:	16 c0       	rjmp	.+44     	; 0xa42 <vfprintf+0x368>
 a16:	21 ff       	sbrs	r18, 1
 a18:	03 c0       	rjmp	.+6      	; 0xa20 <vfprintf+0x346>
 a1a:	88 e5       	ldi	r24, 0x58	; 88
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <vfprintf+0x34a>
 a20:	88 e7       	ldi	r24, 0x78	; 120
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	b7 01       	movw	r22, r14
 a26:	0c c0       	rjmp	.+24     	; 0xa40 <vfprintf+0x366>
 a28:	82 2f       	mov	r24, r18
 a2a:	86 78       	andi	r24, 0x86	; 134
 a2c:	51 f0       	breq	.+20     	; 0xa42 <vfprintf+0x368>
 a2e:	21 fd       	sbrc	r18, 1
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <vfprintf+0x35c>
 a32:	80 e2       	ldi	r24, 0x20	; 32
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <vfprintf+0x35e>
 a36:	8b e2       	ldi	r24, 0x2B	; 43
 a38:	27 fd       	sbrc	r18, 7
 a3a:	8d e2       	ldi	r24, 0x2D	; 45
 a3c:	b7 01       	movw	r22, r14
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	98 d1       	rcall	.+816    	; 0xd72 <fputc>
 a42:	a5 14       	cp	r10, r5
 a44:	30 f4       	brcc	.+12     	; 0xa52 <vfprintf+0x378>
 a46:	b7 01       	movw	r22, r14
 a48:	80 e3       	ldi	r24, 0x30	; 48
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	92 d1       	rcall	.+804    	; 0xd72 <fputc>
 a4e:	5a 94       	dec	r5
 a50:	f8 cf       	rjmp	.-16     	; 0xa42 <vfprintf+0x368>
 a52:	aa 94       	dec	r10
 a54:	f4 01       	movw	r30, r8
 a56:	ea 0d       	add	r30, r10
 a58:	f1 1d       	adc	r31, r1
 a5a:	80 81       	ld	r24, Z
 a5c:	b7 01       	movw	r22, r14
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	88 d1       	rcall	.+784    	; 0xd72 <fputc>
 a62:	a1 10       	cpse	r10, r1
 a64:	f6 cf       	rjmp	.-20     	; 0xa52 <vfprintf+0x378>
 a66:	33 20       	and	r3, r3
 a68:	09 f4       	brne	.+2      	; 0xa6c <vfprintf+0x392>
 a6a:	5d ce       	rjmp	.-838    	; 0x726 <vfprintf+0x4c>
 a6c:	b7 01       	movw	r22, r14
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	7f d1       	rcall	.+766    	; 0xd72 <fputc>
 a74:	3a 94       	dec	r3
 a76:	f7 cf       	rjmp	.-18     	; 0xa66 <vfprintf+0x38c>
 a78:	f7 01       	movw	r30, r14
 a7a:	86 81       	ldd	r24, Z+6	; 0x06
 a7c:	97 81       	ldd	r25, Z+7	; 0x07
 a7e:	02 c0       	rjmp	.+4      	; 0xa84 <vfprintf+0x3aa>
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	2c 96       	adiw	r28, 0x0c	; 12
 a86:	0f b6       	in	r0, 0x3f	; 63
 a88:	f8 94       	cli
 a8a:	de bf       	out	0x3e, r29	; 62
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	cd bf       	out	0x3d, r28	; 61
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	1f 91       	pop	r17
 a96:	0f 91       	pop	r16
 a98:	ff 90       	pop	r15
 a9a:	ef 90       	pop	r14
 a9c:	df 90       	pop	r13
 a9e:	cf 90       	pop	r12
 aa0:	bf 90       	pop	r11
 aa2:	af 90       	pop	r10
 aa4:	9f 90       	pop	r9
 aa6:	8f 90       	pop	r8
 aa8:	7f 90       	pop	r7
 aaa:	6f 90       	pop	r6
 aac:	5f 90       	pop	r5
 aae:	4f 90       	pop	r4
 ab0:	3f 90       	pop	r3
 ab2:	2f 90       	pop	r2
 ab4:	08 95       	ret

00000ab6 <calloc>:
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	86 9f       	mul	r24, r22
 ac0:	80 01       	movw	r16, r0
 ac2:	87 9f       	mul	r24, r23
 ac4:	10 0d       	add	r17, r0
 ac6:	96 9f       	mul	r25, r22
 ac8:	10 0d       	add	r17, r0
 aca:	11 24       	eor	r1, r1
 acc:	c8 01       	movw	r24, r16
 ace:	0d d0       	rcall	.+26     	; 0xaea <malloc>
 ad0:	ec 01       	movw	r28, r24
 ad2:	00 97       	sbiw	r24, 0x00	; 0
 ad4:	21 f0       	breq	.+8      	; 0xade <calloc+0x28>
 ad6:	a8 01       	movw	r20, r16
 ad8:	60 e0       	ldi	r22, 0x00	; 0
 ada:	70 e0       	ldi	r23, 0x00	; 0
 adc:	38 d1       	rcall	.+624    	; 0xd4e <memset>
 ade:	ce 01       	movw	r24, r28
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	1f 91       	pop	r17
 ae6:	0f 91       	pop	r16
 ae8:	08 95       	ret

00000aea <malloc>:
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
 aee:	82 30       	cpi	r24, 0x02	; 2
 af0:	91 05       	cpc	r25, r1
 af2:	10 f4       	brcc	.+4      	; 0xaf8 <malloc+0xe>
 af4:	82 e0       	ldi	r24, 0x02	; 2
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	e0 91 c9 03 	lds	r30, 0x03C9
 afc:	f0 91 ca 03 	lds	r31, 0x03CA
 b00:	20 e0       	ldi	r18, 0x00	; 0
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	a0 e0       	ldi	r26, 0x00	; 0
 b06:	b0 e0       	ldi	r27, 0x00	; 0
 b08:	30 97       	sbiw	r30, 0x00	; 0
 b0a:	39 f1       	breq	.+78     	; 0xb5a <malloc+0x70>
 b0c:	40 81       	ld	r20, Z
 b0e:	51 81       	ldd	r21, Z+1	; 0x01
 b10:	48 17       	cp	r20, r24
 b12:	59 07       	cpc	r21, r25
 b14:	b8 f0       	brcs	.+46     	; 0xb44 <malloc+0x5a>
 b16:	48 17       	cp	r20, r24
 b18:	59 07       	cpc	r21, r25
 b1a:	71 f4       	brne	.+28     	; 0xb38 <malloc+0x4e>
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	93 81       	ldd	r25, Z+3	; 0x03
 b20:	10 97       	sbiw	r26, 0x00	; 0
 b22:	29 f0       	breq	.+10     	; 0xb2e <malloc+0x44>
 b24:	13 96       	adiw	r26, 0x03	; 3
 b26:	9c 93       	st	X, r25
 b28:	8e 93       	st	-X, r24
 b2a:	12 97       	sbiw	r26, 0x02	; 2
 b2c:	2c c0       	rjmp	.+88     	; 0xb86 <malloc+0x9c>
 b2e:	90 93 ca 03 	sts	0x03CA, r25
 b32:	80 93 c9 03 	sts	0x03C9, r24
 b36:	27 c0       	rjmp	.+78     	; 0xb86 <malloc+0x9c>
 b38:	21 15       	cp	r18, r1
 b3a:	31 05       	cpc	r19, r1
 b3c:	31 f0       	breq	.+12     	; 0xb4a <malloc+0x60>
 b3e:	42 17       	cp	r20, r18
 b40:	53 07       	cpc	r21, r19
 b42:	18 f0       	brcs	.+6      	; 0xb4a <malloc+0x60>
 b44:	a9 01       	movw	r20, r18
 b46:	db 01       	movw	r26, r22
 b48:	01 c0       	rjmp	.+2      	; 0xb4c <malloc+0x62>
 b4a:	ef 01       	movw	r28, r30
 b4c:	9a 01       	movw	r18, r20
 b4e:	bd 01       	movw	r22, r26
 b50:	df 01       	movw	r26, r30
 b52:	02 80       	ldd	r0, Z+2	; 0x02
 b54:	f3 81       	ldd	r31, Z+3	; 0x03
 b56:	e0 2d       	mov	r30, r0
 b58:	d7 cf       	rjmp	.-82     	; 0xb08 <malloc+0x1e>
 b5a:	21 15       	cp	r18, r1
 b5c:	31 05       	cpc	r19, r1
 b5e:	f9 f0       	breq	.+62     	; 0xb9e <malloc+0xb4>
 b60:	28 1b       	sub	r18, r24
 b62:	39 0b       	sbc	r19, r25
 b64:	24 30       	cpi	r18, 0x04	; 4
 b66:	31 05       	cpc	r19, r1
 b68:	80 f4       	brcc	.+32     	; 0xb8a <malloc+0xa0>
 b6a:	8a 81       	ldd	r24, Y+2	; 0x02
 b6c:	9b 81       	ldd	r25, Y+3	; 0x03
 b6e:	61 15       	cp	r22, r1
 b70:	71 05       	cpc	r23, r1
 b72:	21 f0       	breq	.+8      	; 0xb7c <malloc+0x92>
 b74:	fb 01       	movw	r30, r22
 b76:	93 83       	std	Z+3, r25	; 0x03
 b78:	82 83       	std	Z+2, r24	; 0x02
 b7a:	04 c0       	rjmp	.+8      	; 0xb84 <malloc+0x9a>
 b7c:	90 93 ca 03 	sts	0x03CA, r25
 b80:	80 93 c9 03 	sts	0x03C9, r24
 b84:	fe 01       	movw	r30, r28
 b86:	32 96       	adiw	r30, 0x02	; 2
 b88:	44 c0       	rjmp	.+136    	; 0xc12 <malloc+0x128>
 b8a:	fe 01       	movw	r30, r28
 b8c:	e2 0f       	add	r30, r18
 b8e:	f3 1f       	adc	r31, r19
 b90:	81 93       	st	Z+, r24
 b92:	91 93       	st	Z+, r25
 b94:	22 50       	subi	r18, 0x02	; 2
 b96:	31 09       	sbc	r19, r1
 b98:	39 83       	std	Y+1, r19	; 0x01
 b9a:	28 83       	st	Y, r18
 b9c:	3a c0       	rjmp	.+116    	; 0xc12 <malloc+0x128>
 b9e:	20 91 c7 03 	lds	r18, 0x03C7
 ba2:	30 91 c8 03 	lds	r19, 0x03C8
 ba6:	23 2b       	or	r18, r19
 ba8:	41 f4       	brne	.+16     	; 0xbba <malloc+0xd0>
 baa:	20 91 02 02 	lds	r18, 0x0202
 bae:	30 91 03 02 	lds	r19, 0x0203
 bb2:	30 93 c8 03 	sts	0x03C8, r19
 bb6:	20 93 c7 03 	sts	0x03C7, r18
 bba:	20 91 00 02 	lds	r18, 0x0200
 bbe:	30 91 01 02 	lds	r19, 0x0201
 bc2:	21 15       	cp	r18, r1
 bc4:	31 05       	cpc	r19, r1
 bc6:	41 f4       	brne	.+16     	; 0xbd8 <malloc+0xee>
 bc8:	2d b7       	in	r18, 0x3d	; 61
 bca:	3e b7       	in	r19, 0x3e	; 62
 bcc:	40 91 04 02 	lds	r20, 0x0204
 bd0:	50 91 05 02 	lds	r21, 0x0205
 bd4:	24 1b       	sub	r18, r20
 bd6:	35 0b       	sbc	r19, r21
 bd8:	e0 91 c7 03 	lds	r30, 0x03C7
 bdc:	f0 91 c8 03 	lds	r31, 0x03C8
 be0:	e2 17       	cp	r30, r18
 be2:	f3 07       	cpc	r31, r19
 be4:	a0 f4       	brcc	.+40     	; 0xc0e <malloc+0x124>
 be6:	2e 1b       	sub	r18, r30
 be8:	3f 0b       	sbc	r19, r31
 bea:	28 17       	cp	r18, r24
 bec:	39 07       	cpc	r19, r25
 bee:	78 f0       	brcs	.+30     	; 0xc0e <malloc+0x124>
 bf0:	ac 01       	movw	r20, r24
 bf2:	4e 5f       	subi	r20, 0xFE	; 254
 bf4:	5f 4f       	sbci	r21, 0xFF	; 255
 bf6:	24 17       	cp	r18, r20
 bf8:	35 07       	cpc	r19, r21
 bfa:	48 f0       	brcs	.+18     	; 0xc0e <malloc+0x124>
 bfc:	4e 0f       	add	r20, r30
 bfe:	5f 1f       	adc	r21, r31
 c00:	50 93 c8 03 	sts	0x03C8, r21
 c04:	40 93 c7 03 	sts	0x03C7, r20
 c08:	81 93       	st	Z+, r24
 c0a:	91 93       	st	Z+, r25
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <malloc+0x128>
 c0e:	e0 e0       	ldi	r30, 0x00	; 0
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	cf 01       	movw	r24, r30
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	08 95       	ret

00000c1a <free>:
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	09 f4       	brne	.+2      	; 0xc24 <free+0xa>
 c22:	87 c0       	rjmp	.+270    	; 0xd32 <free+0x118>
 c24:	fc 01       	movw	r30, r24
 c26:	32 97       	sbiw	r30, 0x02	; 2
 c28:	13 82       	std	Z+3, r1	; 0x03
 c2a:	12 82       	std	Z+2, r1	; 0x02
 c2c:	c0 91 c9 03 	lds	r28, 0x03C9
 c30:	d0 91 ca 03 	lds	r29, 0x03CA
 c34:	20 97       	sbiw	r28, 0x00	; 0
 c36:	81 f4       	brne	.+32     	; 0xc58 <free+0x3e>
 c38:	20 81       	ld	r18, Z
 c3a:	31 81       	ldd	r19, Z+1	; 0x01
 c3c:	28 0f       	add	r18, r24
 c3e:	39 1f       	adc	r19, r25
 c40:	80 91 c7 03 	lds	r24, 0x03C7
 c44:	90 91 c8 03 	lds	r25, 0x03C8
 c48:	82 17       	cp	r24, r18
 c4a:	93 07       	cpc	r25, r19
 c4c:	79 f5       	brne	.+94     	; 0xcac <free+0x92>
 c4e:	f0 93 c8 03 	sts	0x03C8, r31
 c52:	e0 93 c7 03 	sts	0x03C7, r30
 c56:	6d c0       	rjmp	.+218    	; 0xd32 <free+0x118>
 c58:	de 01       	movw	r26, r28
 c5a:	20 e0       	ldi	r18, 0x00	; 0
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	ae 17       	cp	r26, r30
 c60:	bf 07       	cpc	r27, r31
 c62:	50 f4       	brcc	.+20     	; 0xc78 <free+0x5e>
 c64:	12 96       	adiw	r26, 0x02	; 2
 c66:	4d 91       	ld	r20, X+
 c68:	5c 91       	ld	r21, X
 c6a:	13 97       	sbiw	r26, 0x03	; 3
 c6c:	9d 01       	movw	r18, r26
 c6e:	41 15       	cp	r20, r1
 c70:	51 05       	cpc	r21, r1
 c72:	09 f1       	breq	.+66     	; 0xcb6 <free+0x9c>
 c74:	da 01       	movw	r26, r20
 c76:	f3 cf       	rjmp	.-26     	; 0xc5e <free+0x44>
 c78:	b3 83       	std	Z+3, r27	; 0x03
 c7a:	a2 83       	std	Z+2, r26	; 0x02
 c7c:	40 81       	ld	r20, Z
 c7e:	51 81       	ldd	r21, Z+1	; 0x01
 c80:	84 0f       	add	r24, r20
 c82:	95 1f       	adc	r25, r21
 c84:	8a 17       	cp	r24, r26
 c86:	9b 07       	cpc	r25, r27
 c88:	71 f4       	brne	.+28     	; 0xca6 <free+0x8c>
 c8a:	8d 91       	ld	r24, X+
 c8c:	9c 91       	ld	r25, X
 c8e:	11 97       	sbiw	r26, 0x01	; 1
 c90:	84 0f       	add	r24, r20
 c92:	95 1f       	adc	r25, r21
 c94:	02 96       	adiw	r24, 0x02	; 2
 c96:	91 83       	std	Z+1, r25	; 0x01
 c98:	80 83       	st	Z, r24
 c9a:	12 96       	adiw	r26, 0x02	; 2
 c9c:	8d 91       	ld	r24, X+
 c9e:	9c 91       	ld	r25, X
 ca0:	13 97       	sbiw	r26, 0x03	; 3
 ca2:	93 83       	std	Z+3, r25	; 0x03
 ca4:	82 83       	std	Z+2, r24	; 0x02
 ca6:	21 15       	cp	r18, r1
 ca8:	31 05       	cpc	r19, r1
 caa:	29 f4       	brne	.+10     	; 0xcb6 <free+0x9c>
 cac:	f0 93 ca 03 	sts	0x03CA, r31
 cb0:	e0 93 c9 03 	sts	0x03C9, r30
 cb4:	3e c0       	rjmp	.+124    	; 0xd32 <free+0x118>
 cb6:	d9 01       	movw	r26, r18
 cb8:	13 96       	adiw	r26, 0x03	; 3
 cba:	fc 93       	st	X, r31
 cbc:	ee 93       	st	-X, r30
 cbe:	12 97       	sbiw	r26, 0x02	; 2
 cc0:	4d 91       	ld	r20, X+
 cc2:	5d 91       	ld	r21, X+
 cc4:	a4 0f       	add	r26, r20
 cc6:	b5 1f       	adc	r27, r21
 cc8:	ea 17       	cp	r30, r26
 cca:	fb 07       	cpc	r31, r27
 ccc:	79 f4       	brne	.+30     	; 0xcec <free+0xd2>
 cce:	80 81       	ld	r24, Z
 cd0:	91 81       	ldd	r25, Z+1	; 0x01
 cd2:	84 0f       	add	r24, r20
 cd4:	95 1f       	adc	r25, r21
 cd6:	02 96       	adiw	r24, 0x02	; 2
 cd8:	d9 01       	movw	r26, r18
 cda:	11 96       	adiw	r26, 0x01	; 1
 cdc:	9c 93       	st	X, r25
 cde:	8e 93       	st	-X, r24
 ce0:	82 81       	ldd	r24, Z+2	; 0x02
 ce2:	93 81       	ldd	r25, Z+3	; 0x03
 ce4:	13 96       	adiw	r26, 0x03	; 3
 ce6:	9c 93       	st	X, r25
 ce8:	8e 93       	st	-X, r24
 cea:	12 97       	sbiw	r26, 0x02	; 2
 cec:	e0 e0       	ldi	r30, 0x00	; 0
 cee:	f0 e0       	ldi	r31, 0x00	; 0
 cf0:	8a 81       	ldd	r24, Y+2	; 0x02
 cf2:	9b 81       	ldd	r25, Y+3	; 0x03
 cf4:	00 97       	sbiw	r24, 0x00	; 0
 cf6:	19 f0       	breq	.+6      	; 0xcfe <free+0xe4>
 cf8:	fe 01       	movw	r30, r28
 cfa:	ec 01       	movw	r28, r24
 cfc:	f9 cf       	rjmp	.-14     	; 0xcf0 <free+0xd6>
 cfe:	ce 01       	movw	r24, r28
 d00:	02 96       	adiw	r24, 0x02	; 2
 d02:	28 81       	ld	r18, Y
 d04:	39 81       	ldd	r19, Y+1	; 0x01
 d06:	82 0f       	add	r24, r18
 d08:	93 1f       	adc	r25, r19
 d0a:	20 91 c7 03 	lds	r18, 0x03C7
 d0e:	30 91 c8 03 	lds	r19, 0x03C8
 d12:	28 17       	cp	r18, r24
 d14:	39 07       	cpc	r19, r25
 d16:	69 f4       	brne	.+26     	; 0xd32 <free+0x118>
 d18:	30 97       	sbiw	r30, 0x00	; 0
 d1a:	29 f4       	brne	.+10     	; 0xd26 <free+0x10c>
 d1c:	10 92 ca 03 	sts	0x03CA, r1
 d20:	10 92 c9 03 	sts	0x03C9, r1
 d24:	02 c0       	rjmp	.+4      	; 0xd2a <free+0x110>
 d26:	13 82       	std	Z+3, r1	; 0x03
 d28:	12 82       	std	Z+2, r1	; 0x02
 d2a:	d0 93 c8 03 	sts	0x03C8, r29
 d2e:	c0 93 c7 03 	sts	0x03C7, r28
 d32:	df 91       	pop	r29
 d34:	cf 91       	pop	r28
 d36:	08 95       	ret

00000d38 <strnlen_P>:
 d38:	fc 01       	movw	r30, r24
 d3a:	05 90       	lpm	r0, Z+
 d3c:	61 50       	subi	r22, 0x01	; 1
 d3e:	70 40       	sbci	r23, 0x00	; 0
 d40:	01 10       	cpse	r0, r1
 d42:	d8 f7       	brcc	.-10     	; 0xd3a <strnlen_P+0x2>
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	8e 0f       	add	r24, r30
 d4a:	9f 1f       	adc	r25, r31
 d4c:	08 95       	ret

00000d4e <memset>:
 d4e:	dc 01       	movw	r26, r24
 d50:	01 c0       	rjmp	.+2      	; 0xd54 <memset+0x6>
 d52:	6d 93       	st	X+, r22
 d54:	41 50       	subi	r20, 0x01	; 1
 d56:	50 40       	sbci	r21, 0x00	; 0
 d58:	e0 f7       	brcc	.-8      	; 0xd52 <memset+0x4>
 d5a:	08 95       	ret

00000d5c <strnlen>:
 d5c:	fc 01       	movw	r30, r24
 d5e:	61 50       	subi	r22, 0x01	; 1
 d60:	70 40       	sbci	r23, 0x00	; 0
 d62:	01 90       	ld	r0, Z+
 d64:	01 10       	cpse	r0, r1
 d66:	d8 f7       	brcc	.-10     	; 0xd5e <strnlen+0x2>
 d68:	80 95       	com	r24
 d6a:	90 95       	com	r25
 d6c:	8e 0f       	add	r24, r30
 d6e:	9f 1f       	adc	r25, r31
 d70:	08 95       	ret

00000d72 <fputc>:
 d72:	0f 93       	push	r16
 d74:	1f 93       	push	r17
 d76:	cf 93       	push	r28
 d78:	df 93       	push	r29
 d7a:	18 2f       	mov	r17, r24
 d7c:	09 2f       	mov	r16, r25
 d7e:	eb 01       	movw	r28, r22
 d80:	8b 81       	ldd	r24, Y+3	; 0x03
 d82:	81 fd       	sbrc	r24, 1
 d84:	03 c0       	rjmp	.+6      	; 0xd8c <fputc+0x1a>
 d86:	8f ef       	ldi	r24, 0xFF	; 255
 d88:	9f ef       	ldi	r25, 0xFF	; 255
 d8a:	20 c0       	rjmp	.+64     	; 0xdcc <fputc+0x5a>
 d8c:	82 ff       	sbrs	r24, 2
 d8e:	10 c0       	rjmp	.+32     	; 0xdb0 <fputc+0x3e>
 d90:	4e 81       	ldd	r20, Y+6	; 0x06
 d92:	5f 81       	ldd	r21, Y+7	; 0x07
 d94:	2c 81       	ldd	r18, Y+4	; 0x04
 d96:	3d 81       	ldd	r19, Y+5	; 0x05
 d98:	42 17       	cp	r20, r18
 d9a:	53 07       	cpc	r21, r19
 d9c:	7c f4       	brge	.+30     	; 0xdbc <fputc+0x4a>
 d9e:	e8 81       	ld	r30, Y
 da0:	f9 81       	ldd	r31, Y+1	; 0x01
 da2:	9f 01       	movw	r18, r30
 da4:	2f 5f       	subi	r18, 0xFF	; 255
 da6:	3f 4f       	sbci	r19, 0xFF	; 255
 da8:	39 83       	std	Y+1, r19	; 0x01
 daa:	28 83       	st	Y, r18
 dac:	10 83       	st	Z, r17
 dae:	06 c0       	rjmp	.+12     	; 0xdbc <fputc+0x4a>
 db0:	e8 85       	ldd	r30, Y+8	; 0x08
 db2:	f9 85       	ldd	r31, Y+9	; 0x09
 db4:	81 2f       	mov	r24, r17
 db6:	19 95       	eicall
 db8:	89 2b       	or	r24, r25
 dba:	29 f7       	brne	.-54     	; 0xd86 <fputc+0x14>
 dbc:	2e 81       	ldd	r18, Y+6	; 0x06
 dbe:	3f 81       	ldd	r19, Y+7	; 0x07
 dc0:	2f 5f       	subi	r18, 0xFF	; 255
 dc2:	3f 4f       	sbci	r19, 0xFF	; 255
 dc4:	3f 83       	std	Y+7, r19	; 0x07
 dc6:	2e 83       	std	Y+6, r18	; 0x06
 dc8:	81 2f       	mov	r24, r17
 dca:	90 2f       	mov	r25, r16
 dcc:	df 91       	pop	r29
 dce:	cf 91       	pop	r28
 dd0:	1f 91       	pop	r17
 dd2:	0f 91       	pop	r16
 dd4:	08 95       	ret

00000dd6 <__ultoa_invert>:
 dd6:	fa 01       	movw	r30, r20
 dd8:	aa 27       	eor	r26, r26
 dda:	28 30       	cpi	r18, 0x08	; 8
 ddc:	51 f1       	breq	.+84     	; 0xe32 <__ultoa_invert+0x5c>
 dde:	20 31       	cpi	r18, 0x10	; 16
 de0:	81 f1       	breq	.+96     	; 0xe42 <__ultoa_invert+0x6c>
 de2:	e8 94       	clt
 de4:	6f 93       	push	r22
 de6:	6e 7f       	andi	r22, 0xFE	; 254
 de8:	6e 5f       	subi	r22, 0xFE	; 254
 dea:	7f 4f       	sbci	r23, 0xFF	; 255
 dec:	8f 4f       	sbci	r24, 0xFF	; 255
 dee:	9f 4f       	sbci	r25, 0xFF	; 255
 df0:	af 4f       	sbci	r26, 0xFF	; 255
 df2:	b1 e0       	ldi	r27, 0x01	; 1
 df4:	3e d0       	rcall	.+124    	; 0xe72 <__ultoa_invert+0x9c>
 df6:	b4 e0       	ldi	r27, 0x04	; 4
 df8:	3c d0       	rcall	.+120    	; 0xe72 <__ultoa_invert+0x9c>
 dfa:	67 0f       	add	r22, r23
 dfc:	78 1f       	adc	r23, r24
 dfe:	89 1f       	adc	r24, r25
 e00:	9a 1f       	adc	r25, r26
 e02:	a1 1d       	adc	r26, r1
 e04:	68 0f       	add	r22, r24
 e06:	79 1f       	adc	r23, r25
 e08:	8a 1f       	adc	r24, r26
 e0a:	91 1d       	adc	r25, r1
 e0c:	a1 1d       	adc	r26, r1
 e0e:	6a 0f       	add	r22, r26
 e10:	71 1d       	adc	r23, r1
 e12:	81 1d       	adc	r24, r1
 e14:	91 1d       	adc	r25, r1
 e16:	a1 1d       	adc	r26, r1
 e18:	20 d0       	rcall	.+64     	; 0xe5a <__ultoa_invert+0x84>
 e1a:	09 f4       	brne	.+2      	; 0xe1e <__ultoa_invert+0x48>
 e1c:	68 94       	set
 e1e:	3f 91       	pop	r19
 e20:	2a e0       	ldi	r18, 0x0A	; 10
 e22:	26 9f       	mul	r18, r22
 e24:	11 24       	eor	r1, r1
 e26:	30 19       	sub	r19, r0
 e28:	30 5d       	subi	r19, 0xD0	; 208
 e2a:	31 93       	st	Z+, r19
 e2c:	de f6       	brtc	.-74     	; 0xde4 <__ultoa_invert+0xe>
 e2e:	cf 01       	movw	r24, r30
 e30:	08 95       	ret
 e32:	46 2f       	mov	r20, r22
 e34:	47 70       	andi	r20, 0x07	; 7
 e36:	40 5d       	subi	r20, 0xD0	; 208
 e38:	41 93       	st	Z+, r20
 e3a:	b3 e0       	ldi	r27, 0x03	; 3
 e3c:	0f d0       	rcall	.+30     	; 0xe5c <__ultoa_invert+0x86>
 e3e:	c9 f7       	brne	.-14     	; 0xe32 <__ultoa_invert+0x5c>
 e40:	f6 cf       	rjmp	.-20     	; 0xe2e <__ultoa_invert+0x58>
 e42:	46 2f       	mov	r20, r22
 e44:	4f 70       	andi	r20, 0x0F	; 15
 e46:	40 5d       	subi	r20, 0xD0	; 208
 e48:	4a 33       	cpi	r20, 0x3A	; 58
 e4a:	18 f0       	brcs	.+6      	; 0xe52 <__ultoa_invert+0x7c>
 e4c:	49 5d       	subi	r20, 0xD9	; 217
 e4e:	31 fd       	sbrc	r19, 1
 e50:	40 52       	subi	r20, 0x20	; 32
 e52:	41 93       	st	Z+, r20
 e54:	02 d0       	rcall	.+4      	; 0xe5a <__ultoa_invert+0x84>
 e56:	a9 f7       	brne	.-22     	; 0xe42 <__ultoa_invert+0x6c>
 e58:	ea cf       	rjmp	.-44     	; 0xe2e <__ultoa_invert+0x58>
 e5a:	b4 e0       	ldi	r27, 0x04	; 4
 e5c:	a6 95       	lsr	r26
 e5e:	97 95       	ror	r25
 e60:	87 95       	ror	r24
 e62:	77 95       	ror	r23
 e64:	67 95       	ror	r22
 e66:	ba 95       	dec	r27
 e68:	c9 f7       	brne	.-14     	; 0xe5c <__ultoa_invert+0x86>
 e6a:	00 97       	sbiw	r24, 0x00	; 0
 e6c:	61 05       	cpc	r22, r1
 e6e:	71 05       	cpc	r23, r1
 e70:	08 95       	ret
 e72:	9b 01       	movw	r18, r22
 e74:	ac 01       	movw	r20, r24
 e76:	0a 2e       	mov	r0, r26
 e78:	06 94       	lsr	r0
 e7a:	57 95       	ror	r21
 e7c:	47 95       	ror	r20
 e7e:	37 95       	ror	r19
 e80:	27 95       	ror	r18
 e82:	ba 95       	dec	r27
 e84:	c9 f7       	brne	.-14     	; 0xe78 <__ultoa_invert+0xa2>
 e86:	62 0f       	add	r22, r18
 e88:	73 1f       	adc	r23, r19
 e8a:	84 1f       	adc	r24, r20
 e8c:	95 1f       	adc	r25, r21
 e8e:	a0 1d       	adc	r26, r0
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>
