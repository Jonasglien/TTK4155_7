
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800200  00000e74  00000f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080031e  0080031e  00001026  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010f0  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000872  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a3b  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  00003590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000496  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009fc  00000000  00000000  00003e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	26 c1       	rjmp	.+588    	; 0x262 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 31       	cpi	r26, 0x1E	; 30
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ae e1       	ldi	r26, 0x1E	; 30
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 34       	cpi	r26, 0x40	; 64
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	de d1       	rcall	.+956    	; 0x4dc <main>
 120:	a7 c6       	rjmp	.+3406   	; 0xe70 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_construct_message>:
CAN_message_t* CAN_message_receive(void){						// What does this step do
	return &CAN_receive_buffer;						// What does this step do
}

void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
 124:	90 93 21 03 	sts	0x0321, r25
 128:	80 93 20 03 	sts	0x0320, r24
	CAN_send_buffer.length = length;
 12c:	60 93 22 03 	sts	0x0322, r22
	for(uint8_t i = 0; i < length; i++){
 130:	66 23       	and	r22, r22
 132:	41 f0       	breq	.+16     	; 0x144 <CAN_construct_message+0x20>
 134:	83 e2       	ldi	r24, 0x23	; 35
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
 13a:	11 92       	st	Z+, r1
 13c:	2e 2f       	mov	r18, r30
 13e:	28 1b       	sub	r18, r24
}

void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
 140:	26 17       	cp	r18, r22
 142:	d8 f3       	brcs	.-10     	; 0x13a <CAN_construct_message+0x16>
 144:	08 95       	ret

00000146 <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,0);
}

void CAN_send_byte(CAN_message_t* message,uint8_t n){
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 152:	f6 2e       	mov	r15, r22
	MCP2515_write(MCP_TXBnSIDH+n*0x10,message->id>>3);		//8 most significant bits of the message ID
 154:	06 2f       	mov	r16, r22
 156:	02 95       	swap	r16
 158:	00 7f       	andi	r16, 0xF0	; 240
 15a:	28 81       	ld	r18, Y
 15c:	39 81       	ldd	r19, Y+1	; 0x01
 15e:	b9 01       	movw	r22, r18
 160:	75 95       	asr	r23
 162:	67 95       	ror	r22
 164:	75 95       	asr	r23
 166:	67 95       	ror	r22
 168:	75 95       	asr	r23
 16a:	67 95       	ror	r22
 16c:	81 e3       	ldi	r24, 0x31	; 49
 16e:	80 0f       	add	r24, r16
 170:	62 d1       	rcall	.+708    	; 0x436 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+n*0x10,message->id<<5);		//3 least significant bits of the message ID
 172:	68 81       	ld	r22, Y
 174:	62 95       	swap	r22
 176:	66 0f       	add	r22, r22
 178:	60 7e       	andi	r22, 0xE0	; 224
 17a:	82 e3       	ldi	r24, 0x32	; 50
 17c:	80 0f       	add	r24, r16
 17e:	5b d1       	rcall	.+694    	; 0x436 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+n*0x10,(0b00001111)&(message->length));		//Message length
 180:	6a 81       	ldd	r22, Y+2	; 0x02
 182:	6f 70       	andi	r22, 0x0F	; 15
 184:	85 e3       	ldi	r24, 0x35	; 53
 186:	80 0f       	add	r24, r16
 188:	56 d1       	rcall	.+684    	; 0x436 <MCP2515_write>

	for (uint8_t i = 0; i < message->length;i++){
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	88 23       	and	r24, r24
 18e:	69 f0       	breq	.+26     	; 0x1aa <CAN_send_byte+0x64>
 190:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+n*0x10+i,message->data[i]);	//Message data
 192:	0a 5c       	subi	r16, 0xCA	; 202
 194:	fe 01       	movw	r30, r28
 196:	e1 0f       	add	r30, r17
 198:	f1 1d       	adc	r31, r1
 19a:	63 81       	ldd	r22, Z+3	; 0x03
 19c:	80 2f       	mov	r24, r16
 19e:	81 0f       	add	r24, r17
 1a0:	4a d1       	rcall	.+660    	; 0x436 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t n){
	MCP2515_write(MCP_TXBnSIDH+n*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+n*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+n*0x10,(0b00001111)&(message->length));		//Message length

	for (uint8_t i = 0; i < message->length;i++){
 1a2:	1f 5f       	subi	r17, 0xFF	; 255
 1a4:	9a 81       	ldd	r25, Y+2	; 0x02
 1a6:	19 17       	cp	r17, r25
 1a8:	a8 f3       	brcs	.-22     	; 0x194 <CAN_send_byte+0x4e>
		MCP2515_write(MCP_TXBnD0+n*0x10+i,message->data[i]);	//Message data
	}

	MCP2515_request_to_send(MCP_MERRF+(1<<n));
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <CAN_send_byte+0x6e>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	fa 94       	dec	r15
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <CAN_send_byte+0x6a>
 1b8:	80 58       	subi	r24, 0x80	; 128
 1ba:	59 d1       	rcall	.+690    	; 0x46e <MCP2515_request_to_send>
	printf("CAN_send_byte: \tID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);
 1bc:	80 91 2a 03 	lds	r24, 0x032A
 1c0:	1f 92       	push	r1
 1c2:	8f 93       	push	r24
 1c4:	80 91 29 03 	lds	r24, 0x0329
 1c8:	1f 92       	push	r1
 1ca:	8f 93       	push	r24
 1cc:	80 91 28 03 	lds	r24, 0x0328
 1d0:	1f 92       	push	r1
 1d2:	8f 93       	push	r24
 1d4:	80 91 27 03 	lds	r24, 0x0327
 1d8:	1f 92       	push	r1
 1da:	8f 93       	push	r24
 1dc:	80 91 26 03 	lds	r24, 0x0326
 1e0:	1f 92       	push	r1
 1e2:	8f 93       	push	r24
 1e4:	80 91 25 03 	lds	r24, 0x0325
 1e8:	1f 92       	push	r1
 1ea:	8f 93       	push	r24
 1ec:	80 91 24 03 	lds	r24, 0x0324
 1f0:	1f 92       	push	r1
 1f2:	8f 93       	push	r24
 1f4:	80 91 23 03 	lds	r24, 0x0323
 1f8:	1f 92       	push	r1
 1fa:	8f 93       	push	r24
 1fc:	80 91 22 03 	lds	r24, 0x0322
 200:	1f 92       	push	r1
 202:	8f 93       	push	r24
 204:	e0 e2       	ldi	r30, 0x20	; 32
 206:	f3 e0       	ldi	r31, 0x03	; 3
 208:	81 81       	ldd	r24, Z+1	; 0x01
 20a:	8f 93       	push	r24
 20c:	80 81       	ld	r24, Z
 20e:	8f 93       	push	r24
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	9f 93       	push	r25
 216:	8f 93       	push	r24
 218:	11 d2       	rcall	.+1058   	; 0x63c <printf>
 21a:	8d b7       	in	r24, 0x3d	; 61
 21c:	9e b7       	in	r25, 0x3e	; 62
 21e:	46 96       	adiw	r24, 0x16	; 22
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	9e bf       	out	0x3e, r25	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	8d bf       	out	0x3d, r24	; 61

}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	08 95       	ret

00000236 <CAN_message_send>:
		CAN_send_buffer.data[i] = 0;
	}
}

void CAN_message_send(uint8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
 236:	20 91 22 03 	lds	r18, 0x0322
 23a:	22 23       	and	r18, r18
 23c:	59 f0       	breq	.+22     	; 0x254 <CAN_message_send+0x1e>
 23e:	38 2f       	mov	r19, r24
 240:	a3 e2       	ldi	r26, 0x23	; 35
 242:	b3 e0       	ldi	r27, 0x03	; 3
 244:	e8 2f       	mov	r30, r24
 246:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
 248:	81 91       	ld	r24, Z+
 24a:	8d 93       	st	X+, r24
 24c:	8e 2f       	mov	r24, r30
 24e:	83 1b       	sub	r24, r19
		CAN_send_buffer.data[i] = 0;
	}
}

void CAN_message_send(uint8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
 250:	82 17       	cp	r24, r18
 252:	d0 f3       	brcs	.-12     	; 0x248 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,0);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	75 cf       	rjmp	.-278    	; 0x146 <CAN_send_byte>
 25c:	08 95       	ret

0000025e <CAN_read>:
	printf("CAN_send_byte: \tID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);

}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 25e:	fa c0       	rjmp	.+500    	; 0x454 <MCP2515_read>
}
 260:	08 95       	ret

00000262 <__vector_5>:
		printf("CAN_data_receive: \tID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_receive_buffer.id,CAN_receive_buffer.length,CAN_receive_buffer.data[0],CAN_receive_buffer.data[1],CAN_receive_buffer.data[2],CAN_receive_buffer.data[3],CAN_receive_buffer.data[4],CAN_receive_buffer.data[5],CAN_receive_buffer.data[6],CAN_receive_buffer.data[7]);
		
	}
}

ISR(INT4_vect){//interrupt incoming message
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 93       	push	r24
	//IF there is a message in inbox 0, flag 1<<0, then if there is a message in inbox 1, flag 1<<1 this
	receive_flag = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 1e 03 	sts	0x031E, r24
}
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <CAN_interrupt_setup>:
	
void CAN_interrupt_setup(void){
	cli();
 280:	f8 94       	cli

	// Use PE4 as external interrupt pin
	DDRE &= ~(1<<PINE4);
 282:	6c 98       	cbi	0x0d, 4	; 13
	
	// Trigger interrupt on ralling edge (Compare sec 15.2.2 of Atmega2560 data sheet).
	EICRB &= ~(1<<ISC40);	//x0
 284:	ea e6       	ldi	r30, 0x6A	; 106
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	80 83       	st	Z, r24
	EICRB |= (1<<ISC41);	//1x
 28e:	80 81       	ld	r24, Z
 290:	82 60       	ori	r24, 0x02	; 2
 292:	80 83       	st	Z, r24
	
	// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
	EIMSK |= (1<<INT4);
 294:	ec 9a       	sbi	0x1d, 4	; 29

	//Enable global interrupt.
	sei();
 296:	78 94       	sei
 298:	08 95       	ret

0000029a <CAN_initialize>:
#include <util/delay.h>
static CAN_message_t CAN_receive_buffer; //VOLATILE ??????????????????????????????
static CAN_message_t CAN_send_buffer;
uint8_t FLAG_new_message = 0;

void CAN_initialize(void){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	1f 92       	push	r1
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62

	MCP2515_initialize();
 2a4:	10 d1       	rcall	.+544    	; 0x4c6 <MCP2515_initialize>

	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 2a6:	4f ef       	ldi	r20, 0xFF	; 255
 2a8:	64 e6       	ldi	r22, 0x64	; 100
 2aa:	80 e6       	ldi	r24, 0x60	; 96
 2ac:	f0 d0       	rcall	.+480    	; 0x48e <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8b e2       	ldi	r24, 0x2B	; 43
 2b4:	ec d0       	rcall	.+472    	; 0x48e <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK); 
 2b6:	40 e4       	ldi	r20, 0x40	; 64
 2b8:	60 ee       	ldi	r22, 0xE0	; 224
 2ba:	8f e0       	ldi	r24, 0x0F	; 15
 2bc:	e8 d0       	rcall	.+464    	; 0x48e <MCP2515_bit_modify>
	
	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 2be:	68 e0       	ldi	r22, 0x08	; 8
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	2f df       	rcall	.-418    	; 0x124 <CAN_construct_message>
	
	volatile uint8_t value = MCP2515_read(MCP_CANSTAT);
 2c6:	8e e0       	ldi	r24, 0x0E	; 14
 2c8:	c5 d0       	rcall	.+394    	; 0x454 <MCP2515_read>
 2ca:	89 83       	std	Y+1, r24	; 0x01
	printf("MCP_CANSTAT: %i\n", value);	
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	1f 92       	push	r1
 2d0:	8f 93       	push	r24
 2d2:	89 e4       	ldi	r24, 0x49	; 73
 2d4:	92 e0       	ldi	r25, 0x02	; 2
 2d6:	9f 93       	push	r25
 2d8:	8f 93       	push	r24
 2da:	b0 d1       	rcall	.+864    	; 0x63c <printf>
	
	CAN_interrupt_setup();
 2dc:	d1 df       	rcall	.-94     	; 0x280 <CAN_interrupt_setup>
	
	printf("CAN initialized.\n\n");
 2de:	8a e5       	ldi	r24, 0x5A	; 90
 2e0:	92 e0       	ldi	r25, 0x02	; 2
 2e2:	bd d1       	rcall	.+890    	; 0x65e <puts>

}
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <CAN_transmit_complete>:
	//Enable global interrupt.
	sei();
}


uint8_t CAN_transmit_complete(void){
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	1f 92       	push	r1
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
	
	volatile char interrupt = MCP2515_read(MCP_CANINTF);
 2fe:	8c e2       	ldi	r24, 0x2C	; 44
 300:	a9 d0       	rcall	.+338    	; 0x454 <MCP2515_read>
 302:	89 83       	std	Y+1, r24	; 0x01

	while((!((1 << MCP_RX0IF) & interrupt))  &&  (!((1 << MCP_RX1IF)&interrupt))){
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	81 fd       	sbrc	r24, 1
 308:	0c c0       	rjmp	.+24     	; 0x322 <CAN_transmit_complete+0x2e>
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	82 fd       	sbrc	r24, 2
 30e:	09 c0       	rjmp	.+18     	; 0x322 <CAN_transmit_complete+0x2e>
		interrupt = MCP2515_read(MCP_CANINTF);
 310:	8c e2       	ldi	r24, 0x2C	; 44
 312:	a0 d0       	rcall	.+320    	; 0x454 <MCP2515_read>
 314:	89 83       	std	Y+1, r24	; 0x01

uint8_t CAN_transmit_complete(void){
	
	volatile char interrupt = MCP2515_read(MCP_CANINTF);

	while((!((1 << MCP_RX0IF) & interrupt))  &&  (!((1 << MCP_RX1IF)&interrupt))){
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	81 fd       	sbrc	r24, 1
 31a:	03 c0       	rjmp	.+6      	; 0x322 <CAN_transmit_complete+0x2e>
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	82 ff       	sbrs	r24, 2
 320:	f7 cf       	rjmp	.-18     	; 0x310 <CAN_transmit_complete+0x1c>
		interrupt = MCP2515_read(MCP_CANINTF);
	}
	

	if((1 << MCP_RX1IF)&interrupt){
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	82 ff       	sbrs	r24, 2
 326:	09 c0       	rjmp	.+18     	; 0x33a <CAN_transmit_complete+0x46>
		FLAG_new_message = 1;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 1f 03 	sts	0x031F, r24
		MCP2515_bit_modify(MCP_CANINTF,0xFF,1 << MCP_RX1IF); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
 32e:	44 e0       	ldi	r20, 0x04	; 4
 330:	6f ef       	ldi	r22, 0xFF	; 255
 332:	8c e2       	ldi	r24, 0x2C	; 44
 334:	ac d0       	rcall	.+344    	; 0x48e <MCP2515_bit_modify>
		return 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e c0       	rjmp	.+28     	; 0x356 <CAN_transmit_complete+0x62>
	}else if((1 << MCP_RX0IF)&interrupt){
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	81 ff       	sbrs	r24, 1
 33e:	06 c0       	rjmp	.+12     	; 0x34c <CAN_transmit_complete+0x58>
		MCP2515_bit_modify(MCP_CANINTF,0xFF,1 << MCP_RX0IF); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
 340:	42 e0       	ldi	r20, 0x02	; 2
 342:	6f ef       	ldi	r22, 0xFF	; 255
 344:	8c e2       	ldi	r24, 0x2C	; 44
 346:	a3 d0       	rcall	.+326    	; 0x48e <MCP2515_bit_modify>
		return 0;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	05 c0       	rjmp	.+10     	; 0x356 <CAN_transmit_complete+0x62>
	}else{
		MCP2515_bit_modify(MCP_CANINTF,0xFF,0); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	6f ef       	ldi	r22, 0xFF	; 255
 350:	8c e2       	ldi	r24, 0x2C	; 44
 352:	9d d0       	rcall	.+314    	; 0x48e <MCP2515_bit_modify>
		return -1;
 354:	8f ef       	ldi	r24, 0xFF	; 255
	}
 356:	0f 90       	pop	r0
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <CAN_data_receive>:
	return MCP2515_read(adr);
}

uint8_t receive_flag = 0;

void CAN_data_receive(void) {
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
	if(receive_flag){
 364:	80 91 1e 03 	lds	r24, 0x031E
 368:	88 23       	and	r24, r24
 36a:	09 f4       	brne	.+2      	; 0x36e <CAN_data_receive+0x10>
 36c:	60 c0       	rjmp	.+192    	; 0x42e <CAN_data_receive+0xd0>
		receive_flag = 0;
 36e:	10 92 1e 03 	sts	0x031E, r1
		uint8_t n = CAN_transmit_complete();
 372:	c0 df       	rcall	.-128    	; 0x2f4 <CAN_transmit_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 374:	c8 2f       	mov	r28, r24
 376:	c2 95       	swap	r28
 378:	c0 7f       	andi	r28, 0xF0	; 240
 37a:	82 e6       	ldi	r24, 0x62	; 98
 37c:	8c 0f       	add	r24, r28
 37e:	6f df       	rcall	.-290    	; 0x25e <CAN_read>
 380:	81 e6       	ldi	r24, 0x61	; 97
 382:	8c 0f       	add	r24, r28
 384:	6c df       	rcall	.-296    	; 0x25e <CAN_read>
 386:	28 e0       	ldi	r18, 0x08	; 8
 388:	82 9f       	mul	r24, r18
 38a:	c0 01       	movw	r24, r0
 38c:	11 24       	eor	r1, r1
 38e:	90 93 2c 03 	sts	0x032C, r25
 392:	80 93 2b 03 	sts	0x032B, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
 396:	85 e6       	ldi	r24, 0x65	; 101
 398:	8c 0f       	add	r24, r28
 39a:	61 df       	rcall	.-318    	; 0x25e <CAN_read>
 39c:	8f 70       	andi	r24, 0x0F	; 15
 39e:	80 93 2d 03 	sts	0x032D, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 3a2:	88 23       	and	r24, r24
 3a4:	79 f0       	breq	.+30     	; 0x3c4 <CAN_data_receive+0x66>
 3a6:	10 e0       	ldi	r17, 0x00	; 0
 3a8:	cd e2       	ldi	r28, 0x2D	; 45
 3aa:	d3 e0       	ldi	r29, 0x03	; 3
				CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
 3ac:	86 e6       	ldi	r24, 0x66	; 102
 3ae:	81 0f       	add	r24, r17
 3b0:	56 df       	rcall	.-340    	; 0x25e <CAN_read>
 3b2:	e1 2f       	mov	r30, r17
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	e5 5d       	subi	r30, 0xD5	; 213
 3b8:	fc 4f       	sbci	r31, 0xFC	; 252
 3ba:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_transmit_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 3bc:	1f 5f       	subi	r17, 0xFF	; 255
 3be:	88 81       	ld	r24, Y
 3c0:	18 17       	cp	r17, r24
 3c2:	a0 f3       	brcs	.-24     	; 0x3ac <CAN_data_receive+0x4e>
				CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
			}
		}
		printf("CAN_data_receive: \tID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_receive_buffer.id,CAN_receive_buffer.length,CAN_receive_buffer.data[0],CAN_receive_buffer.data[1],CAN_receive_buffer.data[2],CAN_receive_buffer.data[3],CAN_receive_buffer.data[4],CAN_receive_buffer.data[5],CAN_receive_buffer.data[6],CAN_receive_buffer.data[7]);
 3c4:	90 91 35 03 	lds	r25, 0x0335
 3c8:	1f 92       	push	r1
 3ca:	9f 93       	push	r25
 3cc:	90 91 34 03 	lds	r25, 0x0334
 3d0:	1f 92       	push	r1
 3d2:	9f 93       	push	r25
 3d4:	90 91 33 03 	lds	r25, 0x0333
 3d8:	1f 92       	push	r1
 3da:	9f 93       	push	r25
 3dc:	90 91 32 03 	lds	r25, 0x0332
 3e0:	1f 92       	push	r1
 3e2:	9f 93       	push	r25
 3e4:	90 91 31 03 	lds	r25, 0x0331
 3e8:	1f 92       	push	r1
 3ea:	9f 93       	push	r25
 3ec:	90 91 30 03 	lds	r25, 0x0330
 3f0:	1f 92       	push	r1
 3f2:	9f 93       	push	r25
 3f4:	90 91 2f 03 	lds	r25, 0x032F
 3f8:	1f 92       	push	r1
 3fa:	9f 93       	push	r25
 3fc:	90 91 2e 03 	lds	r25, 0x032E
 400:	1f 92       	push	r1
 402:	9f 93       	push	r25
 404:	1f 92       	push	r1
 406:	8f 93       	push	r24
 408:	eb e2       	ldi	r30, 0x2B	; 43
 40a:	f3 e0       	ldi	r31, 0x03	; 3
 40c:	81 81       	ldd	r24, Z+1	; 0x01
 40e:	8f 93       	push	r24
 410:	80 81       	ld	r24, Z
 412:	8f 93       	push	r24
 414:	8c e6       	ldi	r24, 0x6C	; 108
 416:	92 e0       	ldi	r25, 0x02	; 2
 418:	9f 93       	push	r25
 41a:	8f 93       	push	r24
 41c:	0f d1       	rcall	.+542    	; 0x63c <printf>
 41e:	8d b7       	in	r24, 0x3d	; 61
 420:	9e b7       	in	r25, 0x3e	; 62
 422:	46 96       	adiw	r24, 0x16	; 22
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	9e bf       	out	0x3e, r25	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	8d bf       	out	0x3d, r24	; 61
		
	}
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	08 95       	ret

00000436 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	d8 2f       	mov	r29, r24
 43c:	c6 2f       	mov	r28, r22
 43e:	84 d0       	rcall	.+264    	; 0x548 <SPI_select>
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	76 d0       	rcall	.+236    	; 0x530 <SPI_send>
 444:	8d 2f       	mov	r24, r29
 446:	74 d0       	rcall	.+232    	; 0x530 <SPI_send>
 448:	8c 2f       	mov	r24, r28
 44a:	72 d0       	rcall	.+228    	; 0x530 <SPI_send>
 44c:	7f d0       	rcall	.+254    	; 0x54c <SPI_deselect>
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <MCP2515_read>:
 454:	cf 93       	push	r28
 456:	c8 2f       	mov	r28, r24
 458:	77 d0       	rcall	.+238    	; 0x548 <SPI_select>
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	69 d0       	rcall	.+210    	; 0x530 <SPI_send>
 45e:	8c 2f       	mov	r24, r28
 460:	67 d0       	rcall	.+206    	; 0x530 <SPI_send>
 462:	6b d0       	rcall	.+214    	; 0x53a <SPI_receive>
 464:	c8 2f       	mov	r28, r24
 466:	72 d0       	rcall	.+228    	; 0x54c <SPI_deselect>
 468:	8c 2f       	mov	r24, r28
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <MCP2515_request_to_send>:
 46e:	cf 93       	push	r28
 470:	c8 2f       	mov	r28, r24
 472:	6a d0       	rcall	.+212    	; 0x548 <SPI_select>
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	c9 01       	movw	r24, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <MCP2515_request_to_send+0x12>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	ca 95       	dec	r28
 482:	e2 f7       	brpl	.-8      	; 0x47c <MCP2515_request_to_send+0xe>
 484:	80 68       	ori	r24, 0x80	; 128
 486:	54 d0       	rcall	.+168    	; 0x530 <SPI_send>
 488:	61 d0       	rcall	.+194    	; 0x54c <SPI_deselect>
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	18 2f       	mov	r17, r24
 496:	d6 2f       	mov	r29, r22
 498:	c4 2f       	mov	r28, r20
	SPI_select();
 49a:	56 d0       	rcall	.+172    	; 0x548 <SPI_select>
	SPI_send(MCP_BITMOD);
 49c:	85 e0       	ldi	r24, 0x05	; 5
 49e:	48 d0       	rcall	.+144    	; 0x530 <SPI_send>
	SPI_send(adr);
 4a0:	81 2f       	mov	r24, r17
 4a2:	46 d0       	rcall	.+140    	; 0x530 <SPI_send>
	SPI_send(mask);
 4a4:	8d 2f       	mov	r24, r29
 4a6:	44 d0       	rcall	.+136    	; 0x530 <SPI_send>
	SPI_send(data);
 4a8:	8c 2f       	mov	r24, r28
 4aa:	42 d0       	rcall	.+132    	; 0x530 <SPI_send>
	SPI_deselect();
 4ac:	4f d0       	rcall	.+158    	; 0x54c <SPI_deselect>
}
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	08 95       	ret

000004b6 <MCP2515_reset>:


void MCP2515_reset(void){
	printf("Resetting MCP2515\n");
 4b6:	8c ed       	ldi	r24, 0xDC	; 220
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	d1 d0       	rcall	.+418    	; 0x65e <puts>
	SPI_select();
 4bc:	45 d0       	rcall	.+138    	; 0x548 <SPI_select>
	SPI_send(MCP_RESET);
 4be:	80 ec       	ldi	r24, 0xC0	; 192
 4c0:	37 d0       	rcall	.+110    	; 0x530 <SPI_send>
	SPI_deselect();
 4c2:	44 c0       	rjmp	.+136    	; 0x54c <SPI_deselect>
 4c4:	08 95       	ret

000004c6 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
 4c6:	44 d0       	rcall	.+136    	; 0x550 <SPI_initialize>
	MCP2515_reset();
 4c8:	f6 cf       	rjmp	.-20     	; 0x4b6 <MCP2515_reset>
 4ca:	08 95       	ret

000004cc <init>:
	return 1;
}


void init(void){
	printf("Initializing...\n");
 4cc:	8e ee       	ldi	r24, 0xEE	; 238
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	c6 d0       	rcall	.+396    	; 0x65e <puts>
	init_UART(UBRR);		
 4d2:	87 e6       	ldi	r24, 0x67	; 103
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	58 d0       	rcall	.+176    	; 0x588 <init_UART>
	CAN_initialize();
 4d8:	e0 ce       	rjmp	.-576    	; 0x29a <CAN_initialize>
 4da:	08 95       	ret

000004dc <main>:
#include "uart.h"
#include "can.h"


int main(void)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	28 97       	sbiw	r28, 0x08	; 8
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
	cli();
 4f0:	f8 94       	cli
	init();
 4f2:	ec df       	rcall	.-40     	; 0x4cc <init>
	sei();
 4f4:	78 94       	sei
	
	uint8_t temp[8] = {1,2,3,4,5,6,7,8};
 4f6:	88 e0       	ldi	r24, 0x08	; 8
 4f8:	e6 e0       	ldi	r30, 0x06	; 6
 4fa:	f2 e0       	ldi	r31, 0x02	; 2
 4fc:	de 01       	movw	r26, r28
 4fe:	11 96       	adiw	r26, 0x01	; 1
 500:	01 90       	ld	r0, Z+
 502:	0d 92       	st	X+, r0
 504:	8a 95       	dec	r24
 506:	e1 f7       	brne	.-8      	; 0x500 <main+0x24>
	uint8_t *data = temp;

	uint8_t sendCAN = 0;
	CAN_message_send(data);
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	94 de       	rcall	.-728    	; 0x236 <CAN_message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50e:	2f ef       	ldi	r18, 0xFF	; 255
 510:	81 ee       	ldi	r24, 0xE1	; 225
 512:	94 e0       	ldi	r25, 0x04	; 4
 514:	21 50       	subi	r18, 0x01	; 1
 516:	80 40       	sbci	r24, 0x00	; 0
 518:	90 40       	sbci	r25, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <main+0x38>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <main+0x42>
 51e:	00 00       	nop
	_delay_ms(100);
	data[4] = 100;
 520:	84 e6       	ldi	r24, 0x64	; 100
 522:	8d 83       	std	Y+5, r24	; 0x05
	CAN_message_send(data);
 524:	ce 01       	movw	r24, r28
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	86 de       	rcall	.-756    	; 0x236 <CAN_message_send>
	CAN_data_receive();
 52a:	19 df       	rcall	.-462    	; 0x35e <CAN_data_receive>
	CAN_data_receive();
 52c:	18 df       	rcall	.-464    	; 0x35e <CAN_data_receive>
 52e:	ff cf       	rjmp	.-2      	; 0x52e <main+0x52>

00000530 <SPI_send>:


void SPI_send(char data) {
	
	// Start the transmission
	SPDR = data;
 530:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 532:	0d b4       	in	r0, 0x2d	; 45
 534:	07 fe       	sbrs	r0, 7
 536:	fd cf       	rjmp	.-6      	; 0x532 <SPI_send+0x2>

}
 538:	08 95       	ret

0000053a <SPI_receive>:


char SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	f9 df       	rcall	.-14     	; 0x530 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
 53e:	0d b4       	in	r0, 0x2d	; 45
 540:	07 fe       	sbrs	r0, 7
 542:	fd cf       	rjmp	.-6      	; 0x53e <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
 544:	8e b5       	in	r24, 0x2e	; 46
}
 546:	08 95       	ret

00000548 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
 548:	2f 98       	cbi	0x05, 7	; 5
 54a:	08 95       	ret

0000054c <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
 54c:	2f 9a       	sbi	0x05, 7	; 5
 54e:	08 95       	ret

00000550 <SPI_initialize>:


void SPI_initialize(void){

	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS)|(1<<PB0); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
 550:	84 b1       	in	r24, 0x04	; 4
 552:	87 68       	ori	r24, 0x87	; 135
 554:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 556:	8c b5       	in	r24, 0x2c	; 44
 558:	81 65       	ori	r24, 0x51	; 81
 55a:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
 55c:	f7 df       	rcall	.-18     	; 0x54c <SPI_deselect>
	printf("SPI communication initialized.\n");
 55e:	8e ef       	ldi	r24, 0xFE	; 254
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	7d c0       	rjmp	.+250    	; 0x65e <puts>
 564:	08 95       	ret

00000566 <send_UART>:
 566:	e0 ec       	ldi	r30, 0xC0	; 192
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	90 81       	ld	r25, Z
 56c:	95 ff       	sbrs	r25, 5
 56e:	fd cf       	rjmp	.-6      	; 0x56a <send_UART+0x4>
 570:	80 93 c6 00 	sts	0x00C6, r24
 574:	08 95       	ret

00000576 <recieve_UART>:
 576:	e0 ec       	ldi	r30, 0xC0	; 192
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	88 23       	and	r24, r24
 57e:	ec f7       	brge	.-6      	; 0x57a <recieve_UART+0x4>
 580:	80 91 c6 00 	lds	r24, 0x00C6
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	08 95       	ret

00000588 <init_UART>:
 588:	90 93 c5 00 	sts	0x00C5, r25
 58c:	80 93 c4 00 	sts	0x00C4, r24
 590:	88 e1       	ldi	r24, 0x18	; 24
 592:	80 93 c1 00 	sts	0x00C1, r24
 596:	8e e0       	ldi	r24, 0x0E	; 14
 598:	80 93 c2 00 	sts	0x00C2, r24
 59c:	6b eb       	ldi	r22, 0xBB	; 187
 59e:	72 e0       	ldi	r23, 0x02	; 2
 5a0:	83 eb       	ldi	r24, 0xB3	; 179
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <fdevopen>
 5a6:	08 95       	ret

000005a8 <fdevopen>:
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	ec 01       	movw	r28, r24
 5b2:	8b 01       	movw	r16, r22
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <fdevopen+0x1c>
 5b8:	61 15       	cp	r22, r1
 5ba:	71 05       	cpc	r23, r1
 5bc:	19 f4       	brne	.+6      	; 0x5c4 <fdevopen+0x1c>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	37 c0       	rjmp	.+110    	; 0x632 <fdevopen+0x8a>
 5c4:	6e e0       	ldi	r22, 0x0E	; 14
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	63 d2       	rcall	.+1222   	; 0xa94 <calloc>
 5ce:	fc 01       	movw	r30, r24
 5d0:	00 97       	sbiw	r24, 0x00	; 0
 5d2:	a9 f3       	breq	.-22     	; 0x5be <fdevopen+0x16>
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	83 83       	std	Z+3, r24	; 0x03
 5d8:	01 15       	cp	r16, r1
 5da:	11 05       	cpc	r17, r1
 5dc:	71 f0       	breq	.+28     	; 0x5fa <fdevopen+0x52>
 5de:	13 87       	std	Z+11, r17	; 0x0b
 5e0:	02 87       	std	Z+10, r16	; 0x0a
 5e2:	81 e8       	ldi	r24, 0x81	; 129
 5e4:	83 83       	std	Z+3, r24	; 0x03
 5e6:	80 91 36 03 	lds	r24, 0x0336
 5ea:	90 91 37 03 	lds	r25, 0x0337
 5ee:	89 2b       	or	r24, r25
 5f0:	21 f4       	brne	.+8      	; 0x5fa <fdevopen+0x52>
 5f2:	f0 93 37 03 	sts	0x0337, r31
 5f6:	e0 93 36 03 	sts	0x0336, r30
 5fa:	20 97       	sbiw	r28, 0x00	; 0
 5fc:	c9 f0       	breq	.+50     	; 0x630 <fdevopen+0x88>
 5fe:	d1 87       	std	Z+9, r29	; 0x09
 600:	c0 87       	std	Z+8, r28	; 0x08
 602:	83 81       	ldd	r24, Z+3	; 0x03
 604:	82 60       	ori	r24, 0x02	; 2
 606:	83 83       	std	Z+3, r24	; 0x03
 608:	80 91 38 03 	lds	r24, 0x0338
 60c:	90 91 39 03 	lds	r25, 0x0339
 610:	89 2b       	or	r24, r25
 612:	71 f4       	brne	.+28     	; 0x630 <fdevopen+0x88>
 614:	f0 93 39 03 	sts	0x0339, r31
 618:	e0 93 38 03 	sts	0x0338, r30
 61c:	80 91 3a 03 	lds	r24, 0x033A
 620:	90 91 3b 03 	lds	r25, 0x033B
 624:	89 2b       	or	r24, r25
 626:	21 f4       	brne	.+8      	; 0x630 <fdevopen+0x88>
 628:	f0 93 3b 03 	sts	0x033B, r31
 62c:	e0 93 3a 03 	sts	0x033A, r30
 630:	cf 01       	movw	r24, r30
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <printf>:
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	fe 01       	movw	r30, r28
 646:	36 96       	adiw	r30, 0x06	; 6
 648:	61 91       	ld	r22, Z+
 64a:	71 91       	ld	r23, Z+
 64c:	af 01       	movw	r20, r30
 64e:	80 91 38 03 	lds	r24, 0x0338
 652:	90 91 39 03 	lds	r25, 0x0339
 656:	30 d0       	rcall	.+96     	; 0x6b8 <vfprintf>
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <puts>:
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	e0 91 38 03 	lds	r30, 0x0338
 66a:	f0 91 39 03 	lds	r31, 0x0339
 66e:	23 81       	ldd	r18, Z+3	; 0x03
 670:	21 ff       	sbrs	r18, 1
 672:	1b c0       	rjmp	.+54     	; 0x6aa <puts+0x4c>
 674:	ec 01       	movw	r28, r24
 676:	00 e0       	ldi	r16, 0x00	; 0
 678:	10 e0       	ldi	r17, 0x00	; 0
 67a:	89 91       	ld	r24, Y+
 67c:	60 91 38 03 	lds	r22, 0x0338
 680:	70 91 39 03 	lds	r23, 0x0339
 684:	db 01       	movw	r26, r22
 686:	18 96       	adiw	r26, 0x08	; 8
 688:	ed 91       	ld	r30, X+
 68a:	fc 91       	ld	r31, X
 68c:	19 97       	sbiw	r26, 0x09	; 9
 68e:	88 23       	and	r24, r24
 690:	31 f0       	breq	.+12     	; 0x69e <puts+0x40>
 692:	19 95       	eicall
 694:	89 2b       	or	r24, r25
 696:	89 f3       	breq	.-30     	; 0x67a <puts+0x1c>
 698:	0f ef       	ldi	r16, 0xFF	; 255
 69a:	1f ef       	ldi	r17, 0xFF	; 255
 69c:	ee cf       	rjmp	.-36     	; 0x67a <puts+0x1c>
 69e:	8a e0       	ldi	r24, 0x0A	; 10
 6a0:	19 95       	eicall
 6a2:	89 2b       	or	r24, r25
 6a4:	11 f4       	brne	.+4      	; 0x6aa <puts+0x4c>
 6a6:	c8 01       	movw	r24, r16
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <puts+0x50>
 6aa:	8f ef       	ldi	r24, 0xFF	; 255
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <vfprintf>:
 6b8:	2f 92       	push	r2
 6ba:	3f 92       	push	r3
 6bc:	4f 92       	push	r4
 6be:	5f 92       	push	r5
 6c0:	6f 92       	push	r6
 6c2:	7f 92       	push	r7
 6c4:	8f 92       	push	r8
 6c6:	9f 92       	push	r9
 6c8:	af 92       	push	r10
 6ca:	bf 92       	push	r11
 6cc:	cf 92       	push	r12
 6ce:	df 92       	push	r13
 6d0:	ef 92       	push	r14
 6d2:	ff 92       	push	r15
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	2c 97       	sbiw	r28, 0x0c	; 12
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	7c 01       	movw	r14, r24
 6ee:	6b 01       	movw	r12, r22
 6f0:	8a 01       	movw	r16, r20
 6f2:	fc 01       	movw	r30, r24
 6f4:	17 82       	std	Z+7, r1	; 0x07
 6f6:	16 82       	std	Z+6, r1	; 0x06
 6f8:	83 81       	ldd	r24, Z+3	; 0x03
 6fa:	81 ff       	sbrs	r24, 1
 6fc:	b0 c1       	rjmp	.+864    	; 0xa5e <vfprintf+0x3a6>
 6fe:	ce 01       	movw	r24, r28
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	4c 01       	movw	r8, r24
 704:	f7 01       	movw	r30, r14
 706:	93 81       	ldd	r25, Z+3	; 0x03
 708:	f6 01       	movw	r30, r12
 70a:	93 fd       	sbrc	r25, 3
 70c:	85 91       	lpm	r24, Z+
 70e:	93 ff       	sbrs	r25, 3
 710:	81 91       	ld	r24, Z+
 712:	6f 01       	movw	r12, r30
 714:	88 23       	and	r24, r24
 716:	09 f4       	brne	.+2      	; 0x71a <vfprintf+0x62>
 718:	9e c1       	rjmp	.+828    	; 0xa56 <vfprintf+0x39e>
 71a:	85 32       	cpi	r24, 0x25	; 37
 71c:	39 f4       	brne	.+14     	; 0x72c <vfprintf+0x74>
 71e:	93 fd       	sbrc	r25, 3
 720:	85 91       	lpm	r24, Z+
 722:	93 ff       	sbrs	r25, 3
 724:	81 91       	ld	r24, Z+
 726:	6f 01       	movw	r12, r30
 728:	85 32       	cpi	r24, 0x25	; 37
 72a:	21 f4       	brne	.+8      	; 0x734 <vfprintf+0x7c>
 72c:	b7 01       	movw	r22, r14
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0f d3       	rcall	.+1566   	; 0xd50 <fputc>
 732:	e8 cf       	rjmp	.-48     	; 0x704 <vfprintf+0x4c>
 734:	51 2c       	mov	r5, r1
 736:	31 2c       	mov	r3, r1
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	20 32       	cpi	r18, 0x20	; 32
 73c:	a0 f4       	brcc	.+40     	; 0x766 <vfprintf+0xae>
 73e:	8b 32       	cpi	r24, 0x2B	; 43
 740:	69 f0       	breq	.+26     	; 0x75c <vfprintf+0xa4>
 742:	30 f4       	brcc	.+12     	; 0x750 <vfprintf+0x98>
 744:	80 32       	cpi	r24, 0x20	; 32
 746:	59 f0       	breq	.+22     	; 0x75e <vfprintf+0xa6>
 748:	83 32       	cpi	r24, 0x23	; 35
 74a:	69 f4       	brne	.+26     	; 0x766 <vfprintf+0xae>
 74c:	20 61       	ori	r18, 0x10	; 16
 74e:	2c c0       	rjmp	.+88     	; 0x7a8 <vfprintf+0xf0>
 750:	8d 32       	cpi	r24, 0x2D	; 45
 752:	39 f0       	breq	.+14     	; 0x762 <vfprintf+0xaa>
 754:	80 33       	cpi	r24, 0x30	; 48
 756:	39 f4       	brne	.+14     	; 0x766 <vfprintf+0xae>
 758:	21 60       	ori	r18, 0x01	; 1
 75a:	26 c0       	rjmp	.+76     	; 0x7a8 <vfprintf+0xf0>
 75c:	22 60       	ori	r18, 0x02	; 2
 75e:	24 60       	ori	r18, 0x04	; 4
 760:	23 c0       	rjmp	.+70     	; 0x7a8 <vfprintf+0xf0>
 762:	28 60       	ori	r18, 0x08	; 8
 764:	21 c0       	rjmp	.+66     	; 0x7a8 <vfprintf+0xf0>
 766:	27 fd       	sbrc	r18, 7
 768:	27 c0       	rjmp	.+78     	; 0x7b8 <vfprintf+0x100>
 76a:	30 ed       	ldi	r19, 0xD0	; 208
 76c:	38 0f       	add	r19, r24
 76e:	3a 30       	cpi	r19, 0x0A	; 10
 770:	78 f4       	brcc	.+30     	; 0x790 <vfprintf+0xd8>
 772:	26 ff       	sbrs	r18, 6
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0xca>
 776:	fa e0       	ldi	r31, 0x0A	; 10
 778:	5f 9e       	mul	r5, r31
 77a:	30 0d       	add	r19, r0
 77c:	11 24       	eor	r1, r1
 77e:	53 2e       	mov	r5, r19
 780:	13 c0       	rjmp	.+38     	; 0x7a8 <vfprintf+0xf0>
 782:	8a e0       	ldi	r24, 0x0A	; 10
 784:	38 9e       	mul	r3, r24
 786:	30 0d       	add	r19, r0
 788:	11 24       	eor	r1, r1
 78a:	33 2e       	mov	r3, r19
 78c:	20 62       	ori	r18, 0x20	; 32
 78e:	0c c0       	rjmp	.+24     	; 0x7a8 <vfprintf+0xf0>
 790:	8e 32       	cpi	r24, 0x2E	; 46
 792:	21 f4       	brne	.+8      	; 0x79c <vfprintf+0xe4>
 794:	26 fd       	sbrc	r18, 6
 796:	5f c1       	rjmp	.+702    	; 0xa56 <vfprintf+0x39e>
 798:	20 64       	ori	r18, 0x40	; 64
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <vfprintf+0xf0>
 79c:	8c 36       	cpi	r24, 0x6C	; 108
 79e:	11 f4       	brne	.+4      	; 0x7a4 <vfprintf+0xec>
 7a0:	20 68       	ori	r18, 0x80	; 128
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <vfprintf+0xf0>
 7a4:	88 36       	cpi	r24, 0x68	; 104
 7a6:	41 f4       	brne	.+16     	; 0x7b8 <vfprintf+0x100>
 7a8:	f6 01       	movw	r30, r12
 7aa:	93 fd       	sbrc	r25, 3
 7ac:	85 91       	lpm	r24, Z+
 7ae:	93 ff       	sbrs	r25, 3
 7b0:	81 91       	ld	r24, Z+
 7b2:	6f 01       	movw	r12, r30
 7b4:	81 11       	cpse	r24, r1
 7b6:	c1 cf       	rjmp	.-126    	; 0x73a <vfprintf+0x82>
 7b8:	98 2f       	mov	r25, r24
 7ba:	9f 7d       	andi	r25, 0xDF	; 223
 7bc:	95 54       	subi	r25, 0x45	; 69
 7be:	93 30       	cpi	r25, 0x03	; 3
 7c0:	28 f4       	brcc	.+10     	; 0x7cc <vfprintf+0x114>
 7c2:	0c 5f       	subi	r16, 0xFC	; 252
 7c4:	1f 4f       	sbci	r17, 0xFF	; 255
 7c6:	ff e3       	ldi	r31, 0x3F	; 63
 7c8:	f9 83       	std	Y+1, r31	; 0x01
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <vfprintf+0x12e>
 7cc:	83 36       	cpi	r24, 0x63	; 99
 7ce:	31 f0       	breq	.+12     	; 0x7dc <vfprintf+0x124>
 7d0:	83 37       	cpi	r24, 0x73	; 115
 7d2:	71 f0       	breq	.+28     	; 0x7f0 <vfprintf+0x138>
 7d4:	83 35       	cpi	r24, 0x53	; 83
 7d6:	09 f0       	breq	.+2      	; 0x7da <vfprintf+0x122>
 7d8:	57 c0       	rjmp	.+174    	; 0x888 <vfprintf+0x1d0>
 7da:	21 c0       	rjmp	.+66     	; 0x81e <vfprintf+0x166>
 7dc:	f8 01       	movw	r30, r16
 7de:	80 81       	ld	r24, Z
 7e0:	89 83       	std	Y+1, r24	; 0x01
 7e2:	0e 5f       	subi	r16, 0xFE	; 254
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	44 24       	eor	r4, r4
 7e8:	43 94       	inc	r4
 7ea:	51 2c       	mov	r5, r1
 7ec:	54 01       	movw	r10, r8
 7ee:	14 c0       	rjmp	.+40     	; 0x818 <vfprintf+0x160>
 7f0:	38 01       	movw	r6, r16
 7f2:	f2 e0       	ldi	r31, 0x02	; 2
 7f4:	6f 0e       	add	r6, r31
 7f6:	71 1c       	adc	r7, r1
 7f8:	f8 01       	movw	r30, r16
 7fa:	a0 80       	ld	r10, Z
 7fc:	b1 80       	ldd	r11, Z+1	; 0x01
 7fe:	26 ff       	sbrs	r18, 6
 800:	03 c0       	rjmp	.+6      	; 0x808 <vfprintf+0x150>
 802:	65 2d       	mov	r22, r5
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <vfprintf+0x154>
 808:	6f ef       	ldi	r22, 0xFF	; 255
 80a:	7f ef       	ldi	r23, 0xFF	; 255
 80c:	c5 01       	movw	r24, r10
 80e:	2c 87       	std	Y+12, r18	; 0x0c
 810:	94 d2       	rcall	.+1320   	; 0xd3a <strnlen>
 812:	2c 01       	movw	r4, r24
 814:	83 01       	movw	r16, r6
 816:	2c 85       	ldd	r18, Y+12	; 0x0c
 818:	2f 77       	andi	r18, 0x7F	; 127
 81a:	22 2e       	mov	r2, r18
 81c:	16 c0       	rjmp	.+44     	; 0x84a <vfprintf+0x192>
 81e:	38 01       	movw	r6, r16
 820:	f2 e0       	ldi	r31, 0x02	; 2
 822:	6f 0e       	add	r6, r31
 824:	71 1c       	adc	r7, r1
 826:	f8 01       	movw	r30, r16
 828:	a0 80       	ld	r10, Z
 82a:	b1 80       	ldd	r11, Z+1	; 0x01
 82c:	26 ff       	sbrs	r18, 6
 82e:	03 c0       	rjmp	.+6      	; 0x836 <vfprintf+0x17e>
 830:	65 2d       	mov	r22, r5
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <vfprintf+0x182>
 836:	6f ef       	ldi	r22, 0xFF	; 255
 838:	7f ef       	ldi	r23, 0xFF	; 255
 83a:	c5 01       	movw	r24, r10
 83c:	2c 87       	std	Y+12, r18	; 0x0c
 83e:	6b d2       	rcall	.+1238   	; 0xd16 <strnlen_P>
 840:	2c 01       	movw	r4, r24
 842:	2c 85       	ldd	r18, Y+12	; 0x0c
 844:	20 68       	ori	r18, 0x80	; 128
 846:	22 2e       	mov	r2, r18
 848:	83 01       	movw	r16, r6
 84a:	23 fc       	sbrc	r2, 3
 84c:	19 c0       	rjmp	.+50     	; 0x880 <vfprintf+0x1c8>
 84e:	83 2d       	mov	r24, r3
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	48 16       	cp	r4, r24
 854:	59 06       	cpc	r5, r25
 856:	a0 f4       	brcc	.+40     	; 0x880 <vfprintf+0x1c8>
 858:	b7 01       	movw	r22, r14
 85a:	80 e2       	ldi	r24, 0x20	; 32
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	78 d2       	rcall	.+1264   	; 0xd50 <fputc>
 860:	3a 94       	dec	r3
 862:	f5 cf       	rjmp	.-22     	; 0x84e <vfprintf+0x196>
 864:	f5 01       	movw	r30, r10
 866:	27 fc       	sbrc	r2, 7
 868:	85 91       	lpm	r24, Z+
 86a:	27 fe       	sbrs	r2, 7
 86c:	81 91       	ld	r24, Z+
 86e:	5f 01       	movw	r10, r30
 870:	b7 01       	movw	r22, r14
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	6d d2       	rcall	.+1242   	; 0xd50 <fputc>
 876:	31 10       	cpse	r3, r1
 878:	3a 94       	dec	r3
 87a:	f1 e0       	ldi	r31, 0x01	; 1
 87c:	4f 1a       	sub	r4, r31
 87e:	51 08       	sbc	r5, r1
 880:	41 14       	cp	r4, r1
 882:	51 04       	cpc	r5, r1
 884:	79 f7       	brne	.-34     	; 0x864 <vfprintf+0x1ac>
 886:	de c0       	rjmp	.+444    	; 0xa44 <vfprintf+0x38c>
 888:	84 36       	cpi	r24, 0x64	; 100
 88a:	11 f0       	breq	.+4      	; 0x890 <vfprintf+0x1d8>
 88c:	89 36       	cpi	r24, 0x69	; 105
 88e:	31 f5       	brne	.+76     	; 0x8dc <vfprintf+0x224>
 890:	f8 01       	movw	r30, r16
 892:	27 ff       	sbrs	r18, 7
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <vfprintf+0x1ec>
 896:	60 81       	ld	r22, Z
 898:	71 81       	ldd	r23, Z+1	; 0x01
 89a:	82 81       	ldd	r24, Z+2	; 0x02
 89c:	93 81       	ldd	r25, Z+3	; 0x03
 89e:	0c 5f       	subi	r16, 0xFC	; 252
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <vfprintf+0x1fc>
 8a4:	60 81       	ld	r22, Z
 8a6:	71 81       	ldd	r23, Z+1	; 0x01
 8a8:	88 27       	eor	r24, r24
 8aa:	77 fd       	sbrc	r23, 7
 8ac:	80 95       	com	r24
 8ae:	98 2f       	mov	r25, r24
 8b0:	0e 5f       	subi	r16, 0xFE	; 254
 8b2:	1f 4f       	sbci	r17, 0xFF	; 255
 8b4:	2f 76       	andi	r18, 0x6F	; 111
 8b6:	b2 2e       	mov	r11, r18
 8b8:	97 ff       	sbrs	r25, 7
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <vfprintf+0x216>
 8bc:	90 95       	com	r25
 8be:	80 95       	com	r24
 8c0:	70 95       	com	r23
 8c2:	61 95       	neg	r22
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	20 68       	ori	r18, 0x80	; 128
 8cc:	b2 2e       	mov	r11, r18
 8ce:	2a e0       	ldi	r18, 0x0A	; 10
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	a4 01       	movw	r20, r8
 8d4:	6f d2       	rcall	.+1246   	; 0xdb4 <__ultoa_invert>
 8d6:	a8 2e       	mov	r10, r24
 8d8:	a8 18       	sub	r10, r8
 8da:	43 c0       	rjmp	.+134    	; 0x962 <vfprintf+0x2aa>
 8dc:	85 37       	cpi	r24, 0x75	; 117
 8de:	29 f4       	brne	.+10     	; 0x8ea <vfprintf+0x232>
 8e0:	2f 7e       	andi	r18, 0xEF	; 239
 8e2:	b2 2e       	mov	r11, r18
 8e4:	2a e0       	ldi	r18, 0x0A	; 10
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	25 c0       	rjmp	.+74     	; 0x934 <vfprintf+0x27c>
 8ea:	f2 2f       	mov	r31, r18
 8ec:	f9 7f       	andi	r31, 0xF9	; 249
 8ee:	bf 2e       	mov	r11, r31
 8f0:	8f 36       	cpi	r24, 0x6F	; 111
 8f2:	c1 f0       	breq	.+48     	; 0x924 <vfprintf+0x26c>
 8f4:	18 f4       	brcc	.+6      	; 0x8fc <vfprintf+0x244>
 8f6:	88 35       	cpi	r24, 0x58	; 88
 8f8:	79 f0       	breq	.+30     	; 0x918 <vfprintf+0x260>
 8fa:	ad c0       	rjmp	.+346    	; 0xa56 <vfprintf+0x39e>
 8fc:	80 37       	cpi	r24, 0x70	; 112
 8fe:	19 f0       	breq	.+6      	; 0x906 <vfprintf+0x24e>
 900:	88 37       	cpi	r24, 0x78	; 120
 902:	21 f0       	breq	.+8      	; 0x90c <vfprintf+0x254>
 904:	a8 c0       	rjmp	.+336    	; 0xa56 <vfprintf+0x39e>
 906:	2f 2f       	mov	r18, r31
 908:	20 61       	ori	r18, 0x10	; 16
 90a:	b2 2e       	mov	r11, r18
 90c:	b4 fe       	sbrs	r11, 4
 90e:	0d c0       	rjmp	.+26     	; 0x92a <vfprintf+0x272>
 910:	8b 2d       	mov	r24, r11
 912:	84 60       	ori	r24, 0x04	; 4
 914:	b8 2e       	mov	r11, r24
 916:	09 c0       	rjmp	.+18     	; 0x92a <vfprintf+0x272>
 918:	24 ff       	sbrs	r18, 4
 91a:	0a c0       	rjmp	.+20     	; 0x930 <vfprintf+0x278>
 91c:	9f 2f       	mov	r25, r31
 91e:	96 60       	ori	r25, 0x06	; 6
 920:	b9 2e       	mov	r11, r25
 922:	06 c0       	rjmp	.+12     	; 0x930 <vfprintf+0x278>
 924:	28 e0       	ldi	r18, 0x08	; 8
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	05 c0       	rjmp	.+10     	; 0x934 <vfprintf+0x27c>
 92a:	20 e1       	ldi	r18, 0x10	; 16
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	02 c0       	rjmp	.+4      	; 0x934 <vfprintf+0x27c>
 930:	20 e1       	ldi	r18, 0x10	; 16
 932:	32 e0       	ldi	r19, 0x02	; 2
 934:	f8 01       	movw	r30, r16
 936:	b7 fe       	sbrs	r11, 7
 938:	07 c0       	rjmp	.+14     	; 0x948 <vfprintf+0x290>
 93a:	60 81       	ld	r22, Z
 93c:	71 81       	ldd	r23, Z+1	; 0x01
 93e:	82 81       	ldd	r24, Z+2	; 0x02
 940:	93 81       	ldd	r25, Z+3	; 0x03
 942:	0c 5f       	subi	r16, 0xFC	; 252
 944:	1f 4f       	sbci	r17, 0xFF	; 255
 946:	06 c0       	rjmp	.+12     	; 0x954 <vfprintf+0x29c>
 948:	60 81       	ld	r22, Z
 94a:	71 81       	ldd	r23, Z+1	; 0x01
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 5f       	subi	r16, 0xFE	; 254
 952:	1f 4f       	sbci	r17, 0xFF	; 255
 954:	a4 01       	movw	r20, r8
 956:	2e d2       	rcall	.+1116   	; 0xdb4 <__ultoa_invert>
 958:	a8 2e       	mov	r10, r24
 95a:	a8 18       	sub	r10, r8
 95c:	fb 2d       	mov	r31, r11
 95e:	ff 77       	andi	r31, 0x7F	; 127
 960:	bf 2e       	mov	r11, r31
 962:	b6 fe       	sbrs	r11, 6
 964:	0b c0       	rjmp	.+22     	; 0x97c <vfprintf+0x2c4>
 966:	2b 2d       	mov	r18, r11
 968:	2e 7f       	andi	r18, 0xFE	; 254
 96a:	a5 14       	cp	r10, r5
 96c:	50 f4       	brcc	.+20     	; 0x982 <vfprintf+0x2ca>
 96e:	b4 fe       	sbrs	r11, 4
 970:	0a c0       	rjmp	.+20     	; 0x986 <vfprintf+0x2ce>
 972:	b2 fc       	sbrc	r11, 2
 974:	08 c0       	rjmp	.+16     	; 0x986 <vfprintf+0x2ce>
 976:	2b 2d       	mov	r18, r11
 978:	2e 7e       	andi	r18, 0xEE	; 238
 97a:	05 c0       	rjmp	.+10     	; 0x986 <vfprintf+0x2ce>
 97c:	7a 2c       	mov	r7, r10
 97e:	2b 2d       	mov	r18, r11
 980:	03 c0       	rjmp	.+6      	; 0x988 <vfprintf+0x2d0>
 982:	7a 2c       	mov	r7, r10
 984:	01 c0       	rjmp	.+2      	; 0x988 <vfprintf+0x2d0>
 986:	75 2c       	mov	r7, r5
 988:	24 ff       	sbrs	r18, 4
 98a:	0d c0       	rjmp	.+26     	; 0x9a6 <vfprintf+0x2ee>
 98c:	fe 01       	movw	r30, r28
 98e:	ea 0d       	add	r30, r10
 990:	f1 1d       	adc	r31, r1
 992:	80 81       	ld	r24, Z
 994:	80 33       	cpi	r24, 0x30	; 48
 996:	11 f4       	brne	.+4      	; 0x99c <vfprintf+0x2e4>
 998:	29 7e       	andi	r18, 0xE9	; 233
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <vfprintf+0x2f6>
 99c:	22 ff       	sbrs	r18, 2
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <vfprintf+0x2f4>
 9a0:	73 94       	inc	r7
 9a2:	73 94       	inc	r7
 9a4:	04 c0       	rjmp	.+8      	; 0x9ae <vfprintf+0x2f6>
 9a6:	82 2f       	mov	r24, r18
 9a8:	86 78       	andi	r24, 0x86	; 134
 9aa:	09 f0       	breq	.+2      	; 0x9ae <vfprintf+0x2f6>
 9ac:	73 94       	inc	r7
 9ae:	23 fd       	sbrc	r18, 3
 9b0:	12 c0       	rjmp	.+36     	; 0x9d6 <vfprintf+0x31e>
 9b2:	20 ff       	sbrs	r18, 0
 9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <vfprintf+0x30a>
 9b6:	5a 2c       	mov	r5, r10
 9b8:	73 14       	cp	r7, r3
 9ba:	18 f4       	brcc	.+6      	; 0x9c2 <vfprintf+0x30a>
 9bc:	53 0c       	add	r5, r3
 9be:	57 18       	sub	r5, r7
 9c0:	73 2c       	mov	r7, r3
 9c2:	73 14       	cp	r7, r3
 9c4:	60 f4       	brcc	.+24     	; 0x9de <vfprintf+0x326>
 9c6:	b7 01       	movw	r22, r14
 9c8:	80 e2       	ldi	r24, 0x20	; 32
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	2c 87       	std	Y+12, r18	; 0x0c
 9ce:	c0 d1       	rcall	.+896    	; 0xd50 <fputc>
 9d0:	73 94       	inc	r7
 9d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d4:	f6 cf       	rjmp	.-20     	; 0x9c2 <vfprintf+0x30a>
 9d6:	73 14       	cp	r7, r3
 9d8:	10 f4       	brcc	.+4      	; 0x9de <vfprintf+0x326>
 9da:	37 18       	sub	r3, r7
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <vfprintf+0x328>
 9de:	31 2c       	mov	r3, r1
 9e0:	24 ff       	sbrs	r18, 4
 9e2:	11 c0       	rjmp	.+34     	; 0xa06 <vfprintf+0x34e>
 9e4:	b7 01       	movw	r22, r14
 9e6:	80 e3       	ldi	r24, 0x30	; 48
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	2c 87       	std	Y+12, r18	; 0x0c
 9ec:	b1 d1       	rcall	.+866    	; 0xd50 <fputc>
 9ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 9f0:	22 ff       	sbrs	r18, 2
 9f2:	16 c0       	rjmp	.+44     	; 0xa20 <vfprintf+0x368>
 9f4:	21 ff       	sbrs	r18, 1
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe <vfprintf+0x346>
 9f8:	88 e5       	ldi	r24, 0x58	; 88
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0x34a>
 9fe:	88 e7       	ldi	r24, 0x78	; 120
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	b7 01       	movw	r22, r14
 a04:	0c c0       	rjmp	.+24     	; 0xa1e <vfprintf+0x366>
 a06:	82 2f       	mov	r24, r18
 a08:	86 78       	andi	r24, 0x86	; 134
 a0a:	51 f0       	breq	.+20     	; 0xa20 <vfprintf+0x368>
 a0c:	21 fd       	sbrc	r18, 1
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <vfprintf+0x35c>
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	01 c0       	rjmp	.+2      	; 0xa16 <vfprintf+0x35e>
 a14:	8b e2       	ldi	r24, 0x2B	; 43
 a16:	27 fd       	sbrc	r18, 7
 a18:	8d e2       	ldi	r24, 0x2D	; 45
 a1a:	b7 01       	movw	r22, r14
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	98 d1       	rcall	.+816    	; 0xd50 <fputc>
 a20:	a5 14       	cp	r10, r5
 a22:	30 f4       	brcc	.+12     	; 0xa30 <vfprintf+0x378>
 a24:	b7 01       	movw	r22, r14
 a26:	80 e3       	ldi	r24, 0x30	; 48
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	92 d1       	rcall	.+804    	; 0xd50 <fputc>
 a2c:	5a 94       	dec	r5
 a2e:	f8 cf       	rjmp	.-16     	; 0xa20 <vfprintf+0x368>
 a30:	aa 94       	dec	r10
 a32:	f4 01       	movw	r30, r8
 a34:	ea 0d       	add	r30, r10
 a36:	f1 1d       	adc	r31, r1
 a38:	80 81       	ld	r24, Z
 a3a:	b7 01       	movw	r22, r14
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	88 d1       	rcall	.+784    	; 0xd50 <fputc>
 a40:	a1 10       	cpse	r10, r1
 a42:	f6 cf       	rjmp	.-20     	; 0xa30 <vfprintf+0x378>
 a44:	33 20       	and	r3, r3
 a46:	09 f4       	brne	.+2      	; 0xa4a <vfprintf+0x392>
 a48:	5d ce       	rjmp	.-838    	; 0x704 <vfprintf+0x4c>
 a4a:	b7 01       	movw	r22, r14
 a4c:	80 e2       	ldi	r24, 0x20	; 32
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	7f d1       	rcall	.+766    	; 0xd50 <fputc>
 a52:	3a 94       	dec	r3
 a54:	f7 cf       	rjmp	.-18     	; 0xa44 <vfprintf+0x38c>
 a56:	f7 01       	movw	r30, r14
 a58:	86 81       	ldd	r24, Z+6	; 0x06
 a5a:	97 81       	ldd	r25, Z+7	; 0x07
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <vfprintf+0x3aa>
 a5e:	8f ef       	ldi	r24, 0xFF	; 255
 a60:	9f ef       	ldi	r25, 0xFF	; 255
 a62:	2c 96       	adiw	r28, 0x0c	; 12
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	f8 94       	cli
 a68:	de bf       	out	0x3e, r29	; 62
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	cd bf       	out	0x3d, r28	; 61
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	ff 90       	pop	r15
 a78:	ef 90       	pop	r14
 a7a:	df 90       	pop	r13
 a7c:	cf 90       	pop	r12
 a7e:	bf 90       	pop	r11
 a80:	af 90       	pop	r10
 a82:	9f 90       	pop	r9
 a84:	8f 90       	pop	r8
 a86:	7f 90       	pop	r7
 a88:	6f 90       	pop	r6
 a8a:	5f 90       	pop	r5
 a8c:	4f 90       	pop	r4
 a8e:	3f 90       	pop	r3
 a90:	2f 90       	pop	r2
 a92:	08 95       	ret

00000a94 <calloc>:
 a94:	0f 93       	push	r16
 a96:	1f 93       	push	r17
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
 a9c:	86 9f       	mul	r24, r22
 a9e:	80 01       	movw	r16, r0
 aa0:	87 9f       	mul	r24, r23
 aa2:	10 0d       	add	r17, r0
 aa4:	96 9f       	mul	r25, r22
 aa6:	10 0d       	add	r17, r0
 aa8:	11 24       	eor	r1, r1
 aaa:	c8 01       	movw	r24, r16
 aac:	0d d0       	rcall	.+26     	; 0xac8 <malloc>
 aae:	ec 01       	movw	r28, r24
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	21 f0       	breq	.+8      	; 0xabc <calloc+0x28>
 ab4:	a8 01       	movw	r20, r16
 ab6:	60 e0       	ldi	r22, 0x00	; 0
 ab8:	70 e0       	ldi	r23, 0x00	; 0
 aba:	38 d1       	rcall	.+624    	; 0xd2c <memset>
 abc:	ce 01       	movw	r24, r28
 abe:	df 91       	pop	r29
 ac0:	cf 91       	pop	r28
 ac2:	1f 91       	pop	r17
 ac4:	0f 91       	pop	r16
 ac6:	08 95       	ret

00000ac8 <malloc>:
 ac8:	cf 93       	push	r28
 aca:	df 93       	push	r29
 acc:	82 30       	cpi	r24, 0x02	; 2
 ace:	91 05       	cpc	r25, r1
 ad0:	10 f4       	brcc	.+4      	; 0xad6 <malloc+0xe>
 ad2:	82 e0       	ldi	r24, 0x02	; 2
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	e0 91 3e 03 	lds	r30, 0x033E
 ada:	f0 91 3f 03 	lds	r31, 0x033F
 ade:	20 e0       	ldi	r18, 0x00	; 0
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	a0 e0       	ldi	r26, 0x00	; 0
 ae4:	b0 e0       	ldi	r27, 0x00	; 0
 ae6:	30 97       	sbiw	r30, 0x00	; 0
 ae8:	39 f1       	breq	.+78     	; 0xb38 <malloc+0x70>
 aea:	40 81       	ld	r20, Z
 aec:	51 81       	ldd	r21, Z+1	; 0x01
 aee:	48 17       	cp	r20, r24
 af0:	59 07       	cpc	r21, r25
 af2:	b8 f0       	brcs	.+46     	; 0xb22 <malloc+0x5a>
 af4:	48 17       	cp	r20, r24
 af6:	59 07       	cpc	r21, r25
 af8:	71 f4       	brne	.+28     	; 0xb16 <malloc+0x4e>
 afa:	82 81       	ldd	r24, Z+2	; 0x02
 afc:	93 81       	ldd	r25, Z+3	; 0x03
 afe:	10 97       	sbiw	r26, 0x00	; 0
 b00:	29 f0       	breq	.+10     	; 0xb0c <malloc+0x44>
 b02:	13 96       	adiw	r26, 0x03	; 3
 b04:	9c 93       	st	X, r25
 b06:	8e 93       	st	-X, r24
 b08:	12 97       	sbiw	r26, 0x02	; 2
 b0a:	2c c0       	rjmp	.+88     	; 0xb64 <malloc+0x9c>
 b0c:	90 93 3f 03 	sts	0x033F, r25
 b10:	80 93 3e 03 	sts	0x033E, r24
 b14:	27 c0       	rjmp	.+78     	; 0xb64 <malloc+0x9c>
 b16:	21 15       	cp	r18, r1
 b18:	31 05       	cpc	r19, r1
 b1a:	31 f0       	breq	.+12     	; 0xb28 <malloc+0x60>
 b1c:	42 17       	cp	r20, r18
 b1e:	53 07       	cpc	r21, r19
 b20:	18 f0       	brcs	.+6      	; 0xb28 <malloc+0x60>
 b22:	a9 01       	movw	r20, r18
 b24:	db 01       	movw	r26, r22
 b26:	01 c0       	rjmp	.+2      	; 0xb2a <malloc+0x62>
 b28:	ef 01       	movw	r28, r30
 b2a:	9a 01       	movw	r18, r20
 b2c:	bd 01       	movw	r22, r26
 b2e:	df 01       	movw	r26, r30
 b30:	02 80       	ldd	r0, Z+2	; 0x02
 b32:	f3 81       	ldd	r31, Z+3	; 0x03
 b34:	e0 2d       	mov	r30, r0
 b36:	d7 cf       	rjmp	.-82     	; 0xae6 <malloc+0x1e>
 b38:	21 15       	cp	r18, r1
 b3a:	31 05       	cpc	r19, r1
 b3c:	f9 f0       	breq	.+62     	; 0xb7c <malloc+0xb4>
 b3e:	28 1b       	sub	r18, r24
 b40:	39 0b       	sbc	r19, r25
 b42:	24 30       	cpi	r18, 0x04	; 4
 b44:	31 05       	cpc	r19, r1
 b46:	80 f4       	brcc	.+32     	; 0xb68 <malloc+0xa0>
 b48:	8a 81       	ldd	r24, Y+2	; 0x02
 b4a:	9b 81       	ldd	r25, Y+3	; 0x03
 b4c:	61 15       	cp	r22, r1
 b4e:	71 05       	cpc	r23, r1
 b50:	21 f0       	breq	.+8      	; 0xb5a <malloc+0x92>
 b52:	fb 01       	movw	r30, r22
 b54:	93 83       	std	Z+3, r25	; 0x03
 b56:	82 83       	std	Z+2, r24	; 0x02
 b58:	04 c0       	rjmp	.+8      	; 0xb62 <malloc+0x9a>
 b5a:	90 93 3f 03 	sts	0x033F, r25
 b5e:	80 93 3e 03 	sts	0x033E, r24
 b62:	fe 01       	movw	r30, r28
 b64:	32 96       	adiw	r30, 0x02	; 2
 b66:	44 c0       	rjmp	.+136    	; 0xbf0 <malloc+0x128>
 b68:	fe 01       	movw	r30, r28
 b6a:	e2 0f       	add	r30, r18
 b6c:	f3 1f       	adc	r31, r19
 b6e:	81 93       	st	Z+, r24
 b70:	91 93       	st	Z+, r25
 b72:	22 50       	subi	r18, 0x02	; 2
 b74:	31 09       	sbc	r19, r1
 b76:	39 83       	std	Y+1, r19	; 0x01
 b78:	28 83       	st	Y, r18
 b7a:	3a c0       	rjmp	.+116    	; 0xbf0 <malloc+0x128>
 b7c:	20 91 3c 03 	lds	r18, 0x033C
 b80:	30 91 3d 03 	lds	r19, 0x033D
 b84:	23 2b       	or	r18, r19
 b86:	41 f4       	brne	.+16     	; 0xb98 <malloc+0xd0>
 b88:	20 91 02 02 	lds	r18, 0x0202
 b8c:	30 91 03 02 	lds	r19, 0x0203
 b90:	30 93 3d 03 	sts	0x033D, r19
 b94:	20 93 3c 03 	sts	0x033C, r18
 b98:	20 91 00 02 	lds	r18, 0x0200
 b9c:	30 91 01 02 	lds	r19, 0x0201
 ba0:	21 15       	cp	r18, r1
 ba2:	31 05       	cpc	r19, r1
 ba4:	41 f4       	brne	.+16     	; 0xbb6 <malloc+0xee>
 ba6:	2d b7       	in	r18, 0x3d	; 61
 ba8:	3e b7       	in	r19, 0x3e	; 62
 baa:	40 91 04 02 	lds	r20, 0x0204
 bae:	50 91 05 02 	lds	r21, 0x0205
 bb2:	24 1b       	sub	r18, r20
 bb4:	35 0b       	sbc	r19, r21
 bb6:	e0 91 3c 03 	lds	r30, 0x033C
 bba:	f0 91 3d 03 	lds	r31, 0x033D
 bbe:	e2 17       	cp	r30, r18
 bc0:	f3 07       	cpc	r31, r19
 bc2:	a0 f4       	brcc	.+40     	; 0xbec <malloc+0x124>
 bc4:	2e 1b       	sub	r18, r30
 bc6:	3f 0b       	sbc	r19, r31
 bc8:	28 17       	cp	r18, r24
 bca:	39 07       	cpc	r19, r25
 bcc:	78 f0       	brcs	.+30     	; 0xbec <malloc+0x124>
 bce:	ac 01       	movw	r20, r24
 bd0:	4e 5f       	subi	r20, 0xFE	; 254
 bd2:	5f 4f       	sbci	r21, 0xFF	; 255
 bd4:	24 17       	cp	r18, r20
 bd6:	35 07       	cpc	r19, r21
 bd8:	48 f0       	brcs	.+18     	; 0xbec <malloc+0x124>
 bda:	4e 0f       	add	r20, r30
 bdc:	5f 1f       	adc	r21, r31
 bde:	50 93 3d 03 	sts	0x033D, r21
 be2:	40 93 3c 03 	sts	0x033C, r20
 be6:	81 93       	st	Z+, r24
 be8:	91 93       	st	Z+, r25
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <malloc+0x128>
 bec:	e0 e0       	ldi	r30, 0x00	; 0
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	cf 01       	movw	r24, r30
 bf2:	df 91       	pop	r29
 bf4:	cf 91       	pop	r28
 bf6:	08 95       	ret

00000bf8 <free>:
 bf8:	cf 93       	push	r28
 bfa:	df 93       	push	r29
 bfc:	00 97       	sbiw	r24, 0x00	; 0
 bfe:	09 f4       	brne	.+2      	; 0xc02 <free+0xa>
 c00:	87 c0       	rjmp	.+270    	; 0xd10 <free+0x118>
 c02:	fc 01       	movw	r30, r24
 c04:	32 97       	sbiw	r30, 0x02	; 2
 c06:	13 82       	std	Z+3, r1	; 0x03
 c08:	12 82       	std	Z+2, r1	; 0x02
 c0a:	c0 91 3e 03 	lds	r28, 0x033E
 c0e:	d0 91 3f 03 	lds	r29, 0x033F
 c12:	20 97       	sbiw	r28, 0x00	; 0
 c14:	81 f4       	brne	.+32     	; 0xc36 <free+0x3e>
 c16:	20 81       	ld	r18, Z
 c18:	31 81       	ldd	r19, Z+1	; 0x01
 c1a:	28 0f       	add	r18, r24
 c1c:	39 1f       	adc	r19, r25
 c1e:	80 91 3c 03 	lds	r24, 0x033C
 c22:	90 91 3d 03 	lds	r25, 0x033D
 c26:	82 17       	cp	r24, r18
 c28:	93 07       	cpc	r25, r19
 c2a:	79 f5       	brne	.+94     	; 0xc8a <free+0x92>
 c2c:	f0 93 3d 03 	sts	0x033D, r31
 c30:	e0 93 3c 03 	sts	0x033C, r30
 c34:	6d c0       	rjmp	.+218    	; 0xd10 <free+0x118>
 c36:	de 01       	movw	r26, r28
 c38:	20 e0       	ldi	r18, 0x00	; 0
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	ae 17       	cp	r26, r30
 c3e:	bf 07       	cpc	r27, r31
 c40:	50 f4       	brcc	.+20     	; 0xc56 <free+0x5e>
 c42:	12 96       	adiw	r26, 0x02	; 2
 c44:	4d 91       	ld	r20, X+
 c46:	5c 91       	ld	r21, X
 c48:	13 97       	sbiw	r26, 0x03	; 3
 c4a:	9d 01       	movw	r18, r26
 c4c:	41 15       	cp	r20, r1
 c4e:	51 05       	cpc	r21, r1
 c50:	09 f1       	breq	.+66     	; 0xc94 <free+0x9c>
 c52:	da 01       	movw	r26, r20
 c54:	f3 cf       	rjmp	.-26     	; 0xc3c <free+0x44>
 c56:	b3 83       	std	Z+3, r27	; 0x03
 c58:	a2 83       	std	Z+2, r26	; 0x02
 c5a:	40 81       	ld	r20, Z
 c5c:	51 81       	ldd	r21, Z+1	; 0x01
 c5e:	84 0f       	add	r24, r20
 c60:	95 1f       	adc	r25, r21
 c62:	8a 17       	cp	r24, r26
 c64:	9b 07       	cpc	r25, r27
 c66:	71 f4       	brne	.+28     	; 0xc84 <free+0x8c>
 c68:	8d 91       	ld	r24, X+
 c6a:	9c 91       	ld	r25, X
 c6c:	11 97       	sbiw	r26, 0x01	; 1
 c6e:	84 0f       	add	r24, r20
 c70:	95 1f       	adc	r25, r21
 c72:	02 96       	adiw	r24, 0x02	; 2
 c74:	91 83       	std	Z+1, r25	; 0x01
 c76:	80 83       	st	Z, r24
 c78:	12 96       	adiw	r26, 0x02	; 2
 c7a:	8d 91       	ld	r24, X+
 c7c:	9c 91       	ld	r25, X
 c7e:	13 97       	sbiw	r26, 0x03	; 3
 c80:	93 83       	std	Z+3, r25	; 0x03
 c82:	82 83       	std	Z+2, r24	; 0x02
 c84:	21 15       	cp	r18, r1
 c86:	31 05       	cpc	r19, r1
 c88:	29 f4       	brne	.+10     	; 0xc94 <free+0x9c>
 c8a:	f0 93 3f 03 	sts	0x033F, r31
 c8e:	e0 93 3e 03 	sts	0x033E, r30
 c92:	3e c0       	rjmp	.+124    	; 0xd10 <free+0x118>
 c94:	d9 01       	movw	r26, r18
 c96:	13 96       	adiw	r26, 0x03	; 3
 c98:	fc 93       	st	X, r31
 c9a:	ee 93       	st	-X, r30
 c9c:	12 97       	sbiw	r26, 0x02	; 2
 c9e:	4d 91       	ld	r20, X+
 ca0:	5d 91       	ld	r21, X+
 ca2:	a4 0f       	add	r26, r20
 ca4:	b5 1f       	adc	r27, r21
 ca6:	ea 17       	cp	r30, r26
 ca8:	fb 07       	cpc	r31, r27
 caa:	79 f4       	brne	.+30     	; 0xcca <free+0xd2>
 cac:	80 81       	ld	r24, Z
 cae:	91 81       	ldd	r25, Z+1	; 0x01
 cb0:	84 0f       	add	r24, r20
 cb2:	95 1f       	adc	r25, r21
 cb4:	02 96       	adiw	r24, 0x02	; 2
 cb6:	d9 01       	movw	r26, r18
 cb8:	11 96       	adiw	r26, 0x01	; 1
 cba:	9c 93       	st	X, r25
 cbc:	8e 93       	st	-X, r24
 cbe:	82 81       	ldd	r24, Z+2	; 0x02
 cc0:	93 81       	ldd	r25, Z+3	; 0x03
 cc2:	13 96       	adiw	r26, 0x03	; 3
 cc4:	9c 93       	st	X, r25
 cc6:	8e 93       	st	-X, r24
 cc8:	12 97       	sbiw	r26, 0x02	; 2
 cca:	e0 e0       	ldi	r30, 0x00	; 0
 ccc:	f0 e0       	ldi	r31, 0x00	; 0
 cce:	8a 81       	ldd	r24, Y+2	; 0x02
 cd0:	9b 81       	ldd	r25, Y+3	; 0x03
 cd2:	00 97       	sbiw	r24, 0x00	; 0
 cd4:	19 f0       	breq	.+6      	; 0xcdc <free+0xe4>
 cd6:	fe 01       	movw	r30, r28
 cd8:	ec 01       	movw	r28, r24
 cda:	f9 cf       	rjmp	.-14     	; 0xcce <free+0xd6>
 cdc:	ce 01       	movw	r24, r28
 cde:	02 96       	adiw	r24, 0x02	; 2
 ce0:	28 81       	ld	r18, Y
 ce2:	39 81       	ldd	r19, Y+1	; 0x01
 ce4:	82 0f       	add	r24, r18
 ce6:	93 1f       	adc	r25, r19
 ce8:	20 91 3c 03 	lds	r18, 0x033C
 cec:	30 91 3d 03 	lds	r19, 0x033D
 cf0:	28 17       	cp	r18, r24
 cf2:	39 07       	cpc	r19, r25
 cf4:	69 f4       	brne	.+26     	; 0xd10 <free+0x118>
 cf6:	30 97       	sbiw	r30, 0x00	; 0
 cf8:	29 f4       	brne	.+10     	; 0xd04 <free+0x10c>
 cfa:	10 92 3f 03 	sts	0x033F, r1
 cfe:	10 92 3e 03 	sts	0x033E, r1
 d02:	02 c0       	rjmp	.+4      	; 0xd08 <free+0x110>
 d04:	13 82       	std	Z+3, r1	; 0x03
 d06:	12 82       	std	Z+2, r1	; 0x02
 d08:	d0 93 3d 03 	sts	0x033D, r29
 d0c:	c0 93 3c 03 	sts	0x033C, r28
 d10:	df 91       	pop	r29
 d12:	cf 91       	pop	r28
 d14:	08 95       	ret

00000d16 <strnlen_P>:
 d16:	fc 01       	movw	r30, r24
 d18:	05 90       	lpm	r0, Z+
 d1a:	61 50       	subi	r22, 0x01	; 1
 d1c:	70 40       	sbci	r23, 0x00	; 0
 d1e:	01 10       	cpse	r0, r1
 d20:	d8 f7       	brcc	.-10     	; 0xd18 <strnlen_P+0x2>
 d22:	80 95       	com	r24
 d24:	90 95       	com	r25
 d26:	8e 0f       	add	r24, r30
 d28:	9f 1f       	adc	r25, r31
 d2a:	08 95       	ret

00000d2c <memset>:
 d2c:	dc 01       	movw	r26, r24
 d2e:	01 c0       	rjmp	.+2      	; 0xd32 <memset+0x6>
 d30:	6d 93       	st	X+, r22
 d32:	41 50       	subi	r20, 0x01	; 1
 d34:	50 40       	sbci	r21, 0x00	; 0
 d36:	e0 f7       	brcc	.-8      	; 0xd30 <memset+0x4>
 d38:	08 95       	ret

00000d3a <strnlen>:
 d3a:	fc 01       	movw	r30, r24
 d3c:	61 50       	subi	r22, 0x01	; 1
 d3e:	70 40       	sbci	r23, 0x00	; 0
 d40:	01 90       	ld	r0, Z+
 d42:	01 10       	cpse	r0, r1
 d44:	d8 f7       	brcc	.-10     	; 0xd3c <strnlen+0x2>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	08 95       	ret

00000d50 <fputc>:
 d50:	0f 93       	push	r16
 d52:	1f 93       	push	r17
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	18 2f       	mov	r17, r24
 d5a:	09 2f       	mov	r16, r25
 d5c:	eb 01       	movw	r28, r22
 d5e:	8b 81       	ldd	r24, Y+3	; 0x03
 d60:	81 fd       	sbrc	r24, 1
 d62:	03 c0       	rjmp	.+6      	; 0xd6a <fputc+0x1a>
 d64:	8f ef       	ldi	r24, 0xFF	; 255
 d66:	9f ef       	ldi	r25, 0xFF	; 255
 d68:	20 c0       	rjmp	.+64     	; 0xdaa <fputc+0x5a>
 d6a:	82 ff       	sbrs	r24, 2
 d6c:	10 c0       	rjmp	.+32     	; 0xd8e <fputc+0x3e>
 d6e:	4e 81       	ldd	r20, Y+6	; 0x06
 d70:	5f 81       	ldd	r21, Y+7	; 0x07
 d72:	2c 81       	ldd	r18, Y+4	; 0x04
 d74:	3d 81       	ldd	r19, Y+5	; 0x05
 d76:	42 17       	cp	r20, r18
 d78:	53 07       	cpc	r21, r19
 d7a:	7c f4       	brge	.+30     	; 0xd9a <fputc+0x4a>
 d7c:	e8 81       	ld	r30, Y
 d7e:	f9 81       	ldd	r31, Y+1	; 0x01
 d80:	9f 01       	movw	r18, r30
 d82:	2f 5f       	subi	r18, 0xFF	; 255
 d84:	3f 4f       	sbci	r19, 0xFF	; 255
 d86:	39 83       	std	Y+1, r19	; 0x01
 d88:	28 83       	st	Y, r18
 d8a:	10 83       	st	Z, r17
 d8c:	06 c0       	rjmp	.+12     	; 0xd9a <fputc+0x4a>
 d8e:	e8 85       	ldd	r30, Y+8	; 0x08
 d90:	f9 85       	ldd	r31, Y+9	; 0x09
 d92:	81 2f       	mov	r24, r17
 d94:	19 95       	eicall
 d96:	89 2b       	or	r24, r25
 d98:	29 f7       	brne	.-54     	; 0xd64 <fputc+0x14>
 d9a:	2e 81       	ldd	r18, Y+6	; 0x06
 d9c:	3f 81       	ldd	r19, Y+7	; 0x07
 d9e:	2f 5f       	subi	r18, 0xFF	; 255
 da0:	3f 4f       	sbci	r19, 0xFF	; 255
 da2:	3f 83       	std	Y+7, r19	; 0x07
 da4:	2e 83       	std	Y+6, r18	; 0x06
 da6:	81 2f       	mov	r24, r17
 da8:	90 2f       	mov	r25, r16
 daa:	df 91       	pop	r29
 dac:	cf 91       	pop	r28
 dae:	1f 91       	pop	r17
 db0:	0f 91       	pop	r16
 db2:	08 95       	ret

00000db4 <__ultoa_invert>:
 db4:	fa 01       	movw	r30, r20
 db6:	aa 27       	eor	r26, r26
 db8:	28 30       	cpi	r18, 0x08	; 8
 dba:	51 f1       	breq	.+84     	; 0xe10 <__ultoa_invert+0x5c>
 dbc:	20 31       	cpi	r18, 0x10	; 16
 dbe:	81 f1       	breq	.+96     	; 0xe20 <__ultoa_invert+0x6c>
 dc0:	e8 94       	clt
 dc2:	6f 93       	push	r22
 dc4:	6e 7f       	andi	r22, 0xFE	; 254
 dc6:	6e 5f       	subi	r22, 0xFE	; 254
 dc8:	7f 4f       	sbci	r23, 0xFF	; 255
 dca:	8f 4f       	sbci	r24, 0xFF	; 255
 dcc:	9f 4f       	sbci	r25, 0xFF	; 255
 dce:	af 4f       	sbci	r26, 0xFF	; 255
 dd0:	b1 e0       	ldi	r27, 0x01	; 1
 dd2:	3e d0       	rcall	.+124    	; 0xe50 <__ultoa_invert+0x9c>
 dd4:	b4 e0       	ldi	r27, 0x04	; 4
 dd6:	3c d0       	rcall	.+120    	; 0xe50 <__ultoa_invert+0x9c>
 dd8:	67 0f       	add	r22, r23
 dda:	78 1f       	adc	r23, r24
 ddc:	89 1f       	adc	r24, r25
 dde:	9a 1f       	adc	r25, r26
 de0:	a1 1d       	adc	r26, r1
 de2:	68 0f       	add	r22, r24
 de4:	79 1f       	adc	r23, r25
 de6:	8a 1f       	adc	r24, r26
 de8:	91 1d       	adc	r25, r1
 dea:	a1 1d       	adc	r26, r1
 dec:	6a 0f       	add	r22, r26
 dee:	71 1d       	adc	r23, r1
 df0:	81 1d       	adc	r24, r1
 df2:	91 1d       	adc	r25, r1
 df4:	a1 1d       	adc	r26, r1
 df6:	20 d0       	rcall	.+64     	; 0xe38 <__ultoa_invert+0x84>
 df8:	09 f4       	brne	.+2      	; 0xdfc <__ultoa_invert+0x48>
 dfa:	68 94       	set
 dfc:	3f 91       	pop	r19
 dfe:	2a e0       	ldi	r18, 0x0A	; 10
 e00:	26 9f       	mul	r18, r22
 e02:	11 24       	eor	r1, r1
 e04:	30 19       	sub	r19, r0
 e06:	30 5d       	subi	r19, 0xD0	; 208
 e08:	31 93       	st	Z+, r19
 e0a:	de f6       	brtc	.-74     	; 0xdc2 <__ultoa_invert+0xe>
 e0c:	cf 01       	movw	r24, r30
 e0e:	08 95       	ret
 e10:	46 2f       	mov	r20, r22
 e12:	47 70       	andi	r20, 0x07	; 7
 e14:	40 5d       	subi	r20, 0xD0	; 208
 e16:	41 93       	st	Z+, r20
 e18:	b3 e0       	ldi	r27, 0x03	; 3
 e1a:	0f d0       	rcall	.+30     	; 0xe3a <__ultoa_invert+0x86>
 e1c:	c9 f7       	brne	.-14     	; 0xe10 <__ultoa_invert+0x5c>
 e1e:	f6 cf       	rjmp	.-20     	; 0xe0c <__ultoa_invert+0x58>
 e20:	46 2f       	mov	r20, r22
 e22:	4f 70       	andi	r20, 0x0F	; 15
 e24:	40 5d       	subi	r20, 0xD0	; 208
 e26:	4a 33       	cpi	r20, 0x3A	; 58
 e28:	18 f0       	brcs	.+6      	; 0xe30 <__ultoa_invert+0x7c>
 e2a:	49 5d       	subi	r20, 0xD9	; 217
 e2c:	31 fd       	sbrc	r19, 1
 e2e:	40 52       	subi	r20, 0x20	; 32
 e30:	41 93       	st	Z+, r20
 e32:	02 d0       	rcall	.+4      	; 0xe38 <__ultoa_invert+0x84>
 e34:	a9 f7       	brne	.-22     	; 0xe20 <__ultoa_invert+0x6c>
 e36:	ea cf       	rjmp	.-44     	; 0xe0c <__ultoa_invert+0x58>
 e38:	b4 e0       	ldi	r27, 0x04	; 4
 e3a:	a6 95       	lsr	r26
 e3c:	97 95       	ror	r25
 e3e:	87 95       	ror	r24
 e40:	77 95       	ror	r23
 e42:	67 95       	ror	r22
 e44:	ba 95       	dec	r27
 e46:	c9 f7       	brne	.-14     	; 0xe3a <__ultoa_invert+0x86>
 e48:	00 97       	sbiw	r24, 0x00	; 0
 e4a:	61 05       	cpc	r22, r1
 e4c:	71 05       	cpc	r23, r1
 e4e:	08 95       	ret
 e50:	9b 01       	movw	r18, r22
 e52:	ac 01       	movw	r20, r24
 e54:	0a 2e       	mov	r0, r26
 e56:	06 94       	lsr	r0
 e58:	57 95       	ror	r21
 e5a:	47 95       	ror	r20
 e5c:	37 95       	ror	r19
 e5e:	27 95       	ror	r18
 e60:	ba 95       	dec	r27
 e62:	c9 f7       	brne	.-14     	; 0xe56 <__ultoa_invert+0xa2>
 e64:	62 0f       	add	r22, r18
 e66:	73 1f       	adc	r23, r19
 e68:	84 1f       	adc	r24, r20
 e6a:	95 1f       	adc	r25, r21
 e6c:	a0 1d       	adc	r26, r0
 e6e:	08 95       	ret

00000e70 <_exit>:
 e70:	f8 94       	cli

00000e72 <__stop_program>:
 e72:	ff cf       	rjmp	.-2      	; 0xe72 <__stop_program>
