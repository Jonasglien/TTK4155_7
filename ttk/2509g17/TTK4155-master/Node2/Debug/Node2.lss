
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800200  00000cae  00000d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080033c  0080033c  00000e7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001150  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000872  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6a  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  00003480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fa  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009b5  00000000  00000000  00003d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00004713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	9a c0       	rjmp	.+308    	; 0x14a <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ea       	ldi	r30, 0xAE	; 174
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 33       	cpi	r26, 0x3C	; 60
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ac e3       	ldi	r26, 0x3C	; 60
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 35       	cpi	r26, 0x5D	; 93
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	14 d1       	rcall	.+552    	; 0x348 <main>
 120:	c4 c5       	rjmp	.+2952   	; 0xcaa <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_construct_message>:

void CAN_message_send(uint8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,0);
 124:	90 93 3e 03 	sts	0x033E, r25
 128:	80 93 3d 03 	sts	0x033D, r24
 12c:	60 93 3f 03 	sts	0x033F, r22
 130:	66 23       	and	r22, r22
 132:	41 f0       	breq	.+16     	; 0x144 <CAN_construct_message+0x20>
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	fc 01       	movw	r30, r24
 13a:	11 92       	st	Z+, r1
 13c:	2e 2f       	mov	r18, r30
 13e:	28 1b       	sub	r18, r24
 140:	26 17       	cp	r18, r22
 142:	d8 f3       	brcs	.-10     	; 0x13a <CAN_construct_message+0x16>
 144:	08 95       	ret

00000146 <CAN_read>:
	printf("CAN_send_byte: \tID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);

}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 146:	cc c0       	rjmp	.+408    	; 0x2e0 <MCP2515_read>
}
 148:	08 95       	ret

0000014a <__vector_5>:
		printf("CAN_data_receive: \tID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_receive_buffer.id,CAN_receive_buffer.length,CAN_receive_buffer.data[0],CAN_receive_buffer.data[1],CAN_receive_buffer.data[2],CAN_receive_buffer.data[3],CAN_receive_buffer.data[4],CAN_receive_buffer.data[5],CAN_receive_buffer.data[6],CAN_receive_buffer.data[7]);
		
	}
}

ISR(INT4_vect){//interrupt incoming message
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
	//IF there is a message in inbox 0, flag 1<<0, then if there is a message in inbox 1, flag 1<<1 this
	receive_flag = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 3c 03 	sts	0x033C, r24
}
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <CAN_interrupt_setup>:
	
void CAN_interrupt_setup(void){
	cli();
 168:	f8 94       	cli

	// Use PE4 as external interrupt pin
	DDRE &= ~(1<<PINE4);
 16a:	6c 98       	cbi	0x0d, 4	; 13
	
	// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
	EICRB &= ~(1<<ISC40);	//x0
 16c:	ea e6       	ldi	r30, 0x6A	; 106
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8e 7f       	andi	r24, 0xFE	; 254
 174:	80 83       	st	Z, r24
	EICRB |= (1<<ISC41);	//1x
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
	
	// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
	EIMSK |= (1<<INT4);
 17c:	ec 9a       	sbi	0x1d, 4	; 29

	//Enable global interrupt.
	sei();
 17e:	78 94       	sei
 180:	08 95       	ret

00000182 <CAN_initialize>:
#include <util/delay.h>
static CAN_message_t CAN_receive_buffer; //VOLATILE ??????????????????????????????
static CAN_message_t CAN_send_buffer;
uint8_t FLAG_new_message = 0;

void CAN_initialize(void){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62

	MCP2515_initialize();
 18c:	d2 d0       	rcall	.+420    	; 0x332 <MCP2515_initialize>

	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 18e:	4f ef       	ldi	r20, 0xFF	; 255
 190:	64 e6       	ldi	r22, 0x64	; 100
 192:	80 e6       	ldi	r24, 0x60	; 96
 194:	b2 d0       	rcall	.+356    	; 0x2fa <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	8b e2       	ldi	r24, 0x2B	; 43
 19c:	ae d0       	rcall	.+348    	; 0x2fa <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	60 ee       	ldi	r22, 0xE0	; 224
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	aa d0       	rcall	.+340    	; 0x2fa <MCP2515_bit_modify>
	
	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 1a6:	68 e0       	ldi	r22, 0x08	; 8
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	bb df       	rcall	.-138    	; 0x124 <CAN_construct_message>
	
	volatile uint8_t value = MCP2515_read(MCP_CANSTAT);
 1ae:	8e e0       	ldi	r24, 0x0E	; 14
 1b0:	97 d0       	rcall	.+302    	; 0x2e0 <MCP2515_read>
 1b2:	89 83       	std	Y+1, r24	; 0x01
	printf("MCP_CANSTAT: %i\n", value);	
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	1f 92       	push	r1
 1b8:	8f 93       	push	r24
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9f 93       	push	r25
 1c0:	8f 93       	push	r24
 1c2:	59 d1       	rcall	.+690    	; 0x476 <printf>
	
	CAN_interrupt_setup();
 1c4:	d1 df       	rcall	.-94     	; 0x168 <CAN_interrupt_setup>
	
	printf("CAN initialized.\n\n");
 1c6:	82 e5       	ldi	r24, 0x52	; 82
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	66 d1       	rcall	.+716    	; 0x498 <puts>

}
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <CAN_reception_complete>:
	//Enable global interrupt.
	sei();
}

uint8_t CAN_reception_complete(void){
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
 1dc:	8c e2       	ldi	r24, 0x2C	; 44
 1de:	80 d0       	rcall	.+256    	; 0x2e0 <MCP2515_read>
 1e0:	80 ff       	sbrs	r24, 0
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <CAN_reception_complete+0x14>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	8c e2       	ldi	r24, 0x2C	; 44
 1ea:	87 d0       	rcall	.+270    	; 0x2fa <MCP2515_bit_modify>
		return 0;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
	}
	else if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	76 d0       	rcall	.+236    	; 0x2e0 <MCP2515_read>
 1f4:	81 ff       	sbrs	r24, 1
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <CAN_reception_complete+0x28>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	8c e2       	ldi	r24, 0x2C	; 44
 1fe:	7d d0       	rcall	.+250    	; 0x2fa <MCP2515_bit_modify>
		return 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret
	}
	else{
		return -1;
 204:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	
}
 206:	08 95       	ret

00000208 <CAN_data_receive>:
	return MCP2515_read(adr);
}

uint8_t receive_flag = 0;

void CAN_data_receive(void) {
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	if(receive_flag){
 20e:	80 91 3c 03 	lds	r24, 0x033C
 212:	88 23       	and	r24, r24
 214:	09 f4       	brne	.+2      	; 0x218 <CAN_data_receive+0x10>
 216:	60 c0       	rjmp	.+192    	; 0x2d8 <CAN_data_receive+0xd0>
		receive_flag = 0;
 218:	10 92 3c 03 	sts	0x033C, r1
		//uint8_t n = CAN_transmit_complete();
		uint8_t n = CAN_reception_complete();
 21c:	df df       	rcall	.-66     	; 0x1dc <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 21e:	c8 2f       	mov	r28, r24
 220:	c2 95       	swap	r28
 222:	c0 7f       	andi	r28, 0xF0	; 240
 224:	82 e6       	ldi	r24, 0x62	; 98
 226:	8c 0f       	add	r24, r28
 228:	8e df       	rcall	.-228    	; 0x146 <CAN_read>
 22a:	81 e6       	ldi	r24, 0x61	; 97
 22c:	8c 0f       	add	r24, r28
 22e:	8b df       	rcall	.-234    	; 0x146 <CAN_read>
 230:	28 e0       	ldi	r18, 0x08	; 8
 232:	82 9f       	mul	r24, r18
 234:	c0 01       	movw	r24, r0
 236:	11 24       	eor	r1, r1
 238:	90 93 49 03 	sts	0x0349, r25
 23c:	80 93 48 03 	sts	0x0348, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
 240:	85 e6       	ldi	r24, 0x65	; 101
 242:	8c 0f       	add	r24, r28
 244:	80 df       	rcall	.-256    	; 0x146 <CAN_read>
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	80 93 4a 03 	sts	0x034A, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 24c:	88 23       	and	r24, r24
 24e:	79 f0       	breq	.+30     	; 0x26e <CAN_data_receive+0x66>
 250:	10 e0       	ldi	r17, 0x00	; 0
 252:	ca e4       	ldi	r28, 0x4A	; 74
 254:	d3 e0       	ldi	r29, 0x03	; 3
				CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
 256:	86 e6       	ldi	r24, 0x66	; 102
 258:	81 0f       	add	r24, r17
 25a:	75 df       	rcall	.-278    	; 0x146 <CAN_read>
 25c:	e1 2f       	mov	r30, r17
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e8 5b       	subi	r30, 0xB8	; 184
 262:	fc 4f       	sbci	r31, 0xFC	; 252
 264:	83 83       	std	Z+3, r24	; 0x03
		//uint8_t n = CAN_transmit_complete();
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 266:	1f 5f       	subi	r17, 0xFF	; 255
 268:	88 81       	ld	r24, Y
 26a:	18 17       	cp	r17, r24
 26c:	a0 f3       	brcs	.-24     	; 0x256 <CAN_data_receive+0x4e>
				CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
			}
		}
		printf("CAN_data_receive: \tID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_receive_buffer.id,CAN_receive_buffer.length,CAN_receive_buffer.data[0],CAN_receive_buffer.data[1],CAN_receive_buffer.data[2],CAN_receive_buffer.data[3],CAN_receive_buffer.data[4],CAN_receive_buffer.data[5],CAN_receive_buffer.data[6],CAN_receive_buffer.data[7]);
 26e:	90 91 52 03 	lds	r25, 0x0352
 272:	1f 92       	push	r1
 274:	9f 93       	push	r25
 276:	90 91 51 03 	lds	r25, 0x0351
 27a:	1f 92       	push	r1
 27c:	9f 93       	push	r25
 27e:	90 91 50 03 	lds	r25, 0x0350
 282:	1f 92       	push	r1
 284:	9f 93       	push	r25
 286:	90 91 4f 03 	lds	r25, 0x034F
 28a:	1f 92       	push	r1
 28c:	9f 93       	push	r25
 28e:	90 91 4e 03 	lds	r25, 0x034E
 292:	1f 92       	push	r1
 294:	9f 93       	push	r25
 296:	90 91 4d 03 	lds	r25, 0x034D
 29a:	1f 92       	push	r1
 29c:	9f 93       	push	r25
 29e:	90 91 4c 03 	lds	r25, 0x034C
 2a2:	1f 92       	push	r1
 2a4:	9f 93       	push	r25
 2a6:	90 91 4b 03 	lds	r25, 0x034B
 2aa:	1f 92       	push	r1
 2ac:	9f 93       	push	r25
 2ae:	1f 92       	push	r1
 2b0:	8f 93       	push	r24
 2b2:	e8 e4       	ldi	r30, 0x48	; 72
 2b4:	f3 e0       	ldi	r31, 0x03	; 3
 2b6:	81 81       	ldd	r24, Z+1	; 0x01
 2b8:	8f 93       	push	r24
 2ba:	80 81       	ld	r24, Z
 2bc:	8f 93       	push	r24
 2be:	84 e6       	ldi	r24, 0x64	; 100
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	d7 d0       	rcall	.+430    	; 0x476 <printf>
 2c8:	8d b7       	in	r24, 0x3d	; 61
 2ca:	9e b7       	in	r25, 0x3e	; 62
 2cc:	46 96       	adiw	r24, 0x16	; 22
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	9e bf       	out	0x3e, r25	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	8d bf       	out	0x3d, r24	; 61
		
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	08 95       	ret

000002e0 <MCP2515_read>:
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
 2e4:	4e d0       	rcall	.+156    	; 0x382 <SPI_select>
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	40 d0       	rcall	.+128    	; 0x36a <SPI_send>
 2ea:	8c 2f       	mov	r24, r28
 2ec:	3e d0       	rcall	.+124    	; 0x36a <SPI_send>
 2ee:	42 d0       	rcall	.+132    	; 0x374 <SPI_receive>
 2f0:	c8 2f       	mov	r28, r24
 2f2:	49 d0       	rcall	.+146    	; 0x386 <SPI_deselect>
 2f4:	8c 2f       	mov	r24, r28
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <MCP2515_bit_modify>:
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	18 2f       	mov	r17, r24
 302:	d6 2f       	mov	r29, r22
 304:	c4 2f       	mov	r28, r20
 306:	3d d0       	rcall	.+122    	; 0x382 <SPI_select>
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	2f d0       	rcall	.+94     	; 0x36a <SPI_send>
 30c:	81 2f       	mov	r24, r17
 30e:	2d d0       	rcall	.+90     	; 0x36a <SPI_send>
 310:	8d 2f       	mov	r24, r29
 312:	2b d0       	rcall	.+86     	; 0x36a <SPI_send>
 314:	8c 2f       	mov	r24, r28
 316:	29 d0       	rcall	.+82     	; 0x36a <SPI_send>
 318:	36 d0       	rcall	.+108    	; 0x386 <SPI_deselect>
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	08 95       	ret

00000322 <MCP2515_reset>:
 322:	82 ee       	ldi	r24, 0xE2	; 226
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	b8 d0       	rcall	.+368    	; 0x498 <puts>
 328:	2c d0       	rcall	.+88     	; 0x382 <SPI_select>
 32a:	80 ec       	ldi	r24, 0xC0	; 192
 32c:	1e d0       	rcall	.+60     	; 0x36a <SPI_send>
 32e:	2b c0       	rjmp	.+86     	; 0x386 <SPI_deselect>
 330:	08 95       	ret

00000332 <MCP2515_initialize>:
 332:	2b d0       	rcall	.+86     	; 0x38a <SPI_initialize>
 334:	f6 cf       	rjmp	.-20     	; 0x322 <MCP2515_reset>
 336:	08 95       	ret

00000338 <init>:
	return 1;
}


void init(void){
	printf("Initializing...\n");
 338:	84 ef       	ldi	r24, 0xF4	; 244
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	ad d0       	rcall	.+346    	; 0x498 <puts>
	init_UART(UBRR);		
 33e:	87 e6       	ldi	r24, 0x67	; 103
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	3f d0       	rcall	.+126    	; 0x3c2 <init_UART>
	CAN_initialize();
 344:	1e cf       	rjmp	.-452    	; 0x182 <CAN_initialize>
 346:	08 95       	ret

00000348 <main>:
#include "can.h"


int main(void)
{
	cli();
 348:	f8 94       	cli
	init();
 34a:	f6 df       	rcall	.-20     	; 0x338 <init>
	sei();
 34c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	83 e2       	ldi	r24, 0x23	; 35
 352:	94 ef       	ldi	r25, 0xF4	; 244
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0xc>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x16>
 35e:	00 00       	nop
			CAN_data_receive();
			sendCAN = 1;
		}
		
		_delay_ms(5000);
		printf("Waiting for message ...\n");
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	99 d0       	rcall	.+306    	; 0x498 <puts>
		if(receiveCAN){
			CAN_data_receive();
 366:	50 df       	rcall	.-352    	; 0x208 <CAN_data_receive>
 368:	f2 cf       	rjmp	.-28     	; 0x34e <main+0x6>

0000036a <SPI_send>:
 36a:	8e bd       	out	0x2e, r24	; 46
 36c:	0d b4       	in	r0, 0x2d	; 45
 36e:	07 fe       	sbrs	r0, 7
 370:	fd cf       	rjmp	.-6      	; 0x36c <SPI_send+0x2>
 372:	08 95       	ret

00000374 <SPI_receive>:
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	f9 df       	rcall	.-14     	; 0x36a <SPI_send>
 378:	0d b4       	in	r0, 0x2d	; 45
 37a:	07 fe       	sbrs	r0, 7
 37c:	fd cf       	rjmp	.-6      	; 0x378 <SPI_receive+0x4>
 37e:	8e b5       	in	r24, 0x2e	; 46
 380:	08 95       	ret

00000382 <SPI_select>:
 382:	2f 98       	cbi	0x05, 7	; 5
 384:	08 95       	ret

00000386 <SPI_deselect>:
 386:	2f 9a       	sbi	0x05, 7	; 5
 388:	08 95       	ret

0000038a <SPI_initialize>:
 38a:	84 b1       	in	r24, 0x04	; 4
 38c:	87 68       	ori	r24, 0x87	; 135
 38e:	84 b9       	out	0x04, r24	; 4
 390:	8c b5       	in	r24, 0x2c	; 44
 392:	81 65       	ori	r24, 0x51	; 81
 394:	8c bd       	out	0x2c, r24	; 44
 396:	f7 df       	rcall	.-18     	; 0x386 <SPI_deselect>
 398:	8c e1       	ldi	r24, 0x1C	; 28
 39a:	93 e0       	ldi	r25, 0x03	; 3
 39c:	7d c0       	rjmp	.+250    	; 0x498 <puts>
 39e:	08 95       	ret

000003a0 <send_UART>:



void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
 3a0:	e0 ec       	ldi	r30, 0xC0	; 192
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	90 81       	ld	r25, Z
 3a6:	95 ff       	sbrs	r25, 5
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
 3aa:	80 93 c6 00 	sts	0x00C6, r24
 3ae:	08 95       	ret

000003b0 <recieve_UART>:



unsigned int recieve_UART(void){
		
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */ 
 3b0:	e0 ec       	ldi	r30, 0xC0	; 192
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	88 23       	and	r24, r24
 3b8:	ec f7       	brge	.-6      	; 0x3b4 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
 3ba:	80 91 c6 00 	lds	r24, 0x00C6
}
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <init_UART>:


void init_UART(unsigned int ubrr){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 3c2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 3c6:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 3ca:	88 e1       	ldi	r24, 0x18	; 24
 3cc:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 3d0:	8e e0       	ldi	r24, 0x0E	; 14
 3d2:	80 93 c2 00 	sts	0x00C2, r24
	

 	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
 3d6:	68 ed       	ldi	r22, 0xD8	; 216
 3d8:	71 e0       	ldi	r23, 0x01	; 1
 3da:	80 ed       	ldi	r24, 0xD0	; 208
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <fdevopen>
 3e0:	08 95       	ret

000003e2 <fdevopen>:
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
 3ec:	8b 01       	movw	r16, r22
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	31 f4       	brne	.+12     	; 0x3fe <fdevopen+0x1c>
 3f2:	61 15       	cp	r22, r1
 3f4:	71 05       	cpc	r23, r1
 3f6:	19 f4       	brne	.+6      	; 0x3fe <fdevopen+0x1c>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	37 c0       	rjmp	.+110    	; 0x46c <fdevopen+0x8a>
 3fe:	6e e0       	ldi	r22, 0x0E	; 14
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	63 d2       	rcall	.+1222   	; 0x8ce <calloc>
 408:	fc 01       	movw	r30, r24
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	a9 f3       	breq	.-22     	; 0x3f8 <fdevopen+0x16>
 40e:	80 e8       	ldi	r24, 0x80	; 128
 410:	83 83       	std	Z+3, r24	; 0x03
 412:	01 15       	cp	r16, r1
 414:	11 05       	cpc	r17, r1
 416:	71 f0       	breq	.+28     	; 0x434 <fdevopen+0x52>
 418:	13 87       	std	Z+11, r17	; 0x0b
 41a:	02 87       	std	Z+10, r16	; 0x0a
 41c:	81 e8       	ldi	r24, 0x81	; 129
 41e:	83 83       	std	Z+3, r24	; 0x03
 420:	80 91 53 03 	lds	r24, 0x0353
 424:	90 91 54 03 	lds	r25, 0x0354
 428:	89 2b       	or	r24, r25
 42a:	21 f4       	brne	.+8      	; 0x434 <fdevopen+0x52>
 42c:	f0 93 54 03 	sts	0x0354, r31
 430:	e0 93 53 03 	sts	0x0353, r30
 434:	20 97       	sbiw	r28, 0x00	; 0
 436:	c9 f0       	breq	.+50     	; 0x46a <fdevopen+0x88>
 438:	d1 87       	std	Z+9, r29	; 0x09
 43a:	c0 87       	std	Z+8, r28	; 0x08
 43c:	83 81       	ldd	r24, Z+3	; 0x03
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	83 83       	std	Z+3, r24	; 0x03
 442:	80 91 55 03 	lds	r24, 0x0355
 446:	90 91 56 03 	lds	r25, 0x0356
 44a:	89 2b       	or	r24, r25
 44c:	71 f4       	brne	.+28     	; 0x46a <fdevopen+0x88>
 44e:	f0 93 56 03 	sts	0x0356, r31
 452:	e0 93 55 03 	sts	0x0355, r30
 456:	80 91 57 03 	lds	r24, 0x0357
 45a:	90 91 58 03 	lds	r25, 0x0358
 45e:	89 2b       	or	r24, r25
 460:	21 f4       	brne	.+8      	; 0x46a <fdevopen+0x88>
 462:	f0 93 58 03 	sts	0x0358, r31
 466:	e0 93 57 03 	sts	0x0357, r30
 46a:	cf 01       	movw	r24, r30
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <printf>:
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	fe 01       	movw	r30, r28
 480:	36 96       	adiw	r30, 0x06	; 6
 482:	61 91       	ld	r22, Z+
 484:	71 91       	ld	r23, Z+
 486:	af 01       	movw	r20, r30
 488:	80 91 55 03 	lds	r24, 0x0355
 48c:	90 91 56 03 	lds	r25, 0x0356
 490:	30 d0       	rcall	.+96     	; 0x4f2 <vfprintf>
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <puts>:
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	e0 91 55 03 	lds	r30, 0x0355
 4a4:	f0 91 56 03 	lds	r31, 0x0356
 4a8:	23 81       	ldd	r18, Z+3	; 0x03
 4aa:	21 ff       	sbrs	r18, 1
 4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <puts+0x4c>
 4ae:	ec 01       	movw	r28, r24
 4b0:	00 e0       	ldi	r16, 0x00	; 0
 4b2:	10 e0       	ldi	r17, 0x00	; 0
 4b4:	89 91       	ld	r24, Y+
 4b6:	60 91 55 03 	lds	r22, 0x0355
 4ba:	70 91 56 03 	lds	r23, 0x0356
 4be:	db 01       	movw	r26, r22
 4c0:	18 96       	adiw	r26, 0x08	; 8
 4c2:	ed 91       	ld	r30, X+
 4c4:	fc 91       	ld	r31, X
 4c6:	19 97       	sbiw	r26, 0x09	; 9
 4c8:	88 23       	and	r24, r24
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <puts+0x40>
 4cc:	19 95       	eicall
 4ce:	89 2b       	or	r24, r25
 4d0:	89 f3       	breq	.-30     	; 0x4b4 <puts+0x1c>
 4d2:	0f ef       	ldi	r16, 0xFF	; 255
 4d4:	1f ef       	ldi	r17, 0xFF	; 255
 4d6:	ee cf       	rjmp	.-36     	; 0x4b4 <puts+0x1c>
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	19 95       	eicall
 4dc:	89 2b       	or	r24, r25
 4de:	11 f4       	brne	.+4      	; 0x4e4 <puts+0x4c>
 4e0:	c8 01       	movw	r24, r16
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <puts+0x50>
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	9f ef       	ldi	r25, 0xFF	; 255
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <vfprintf>:
 4f2:	2f 92       	push	r2
 4f4:	3f 92       	push	r3
 4f6:	4f 92       	push	r4
 4f8:	5f 92       	push	r5
 4fa:	6f 92       	push	r6
 4fc:	7f 92       	push	r7
 4fe:	8f 92       	push	r8
 500:	9f 92       	push	r9
 502:	af 92       	push	r10
 504:	bf 92       	push	r11
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	2c 97       	sbiw	r28, 0x0c	; 12
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	7c 01       	movw	r14, r24
 528:	6b 01       	movw	r12, r22
 52a:	8a 01       	movw	r16, r20
 52c:	fc 01       	movw	r30, r24
 52e:	17 82       	std	Z+7, r1	; 0x07
 530:	16 82       	std	Z+6, r1	; 0x06
 532:	83 81       	ldd	r24, Z+3	; 0x03
 534:	81 ff       	sbrs	r24, 1
 536:	b0 c1       	rjmp	.+864    	; 0x898 <vfprintf+0x3a6>
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	4c 01       	movw	r8, r24
 53e:	f7 01       	movw	r30, r14
 540:	93 81       	ldd	r25, Z+3	; 0x03
 542:	f6 01       	movw	r30, r12
 544:	93 fd       	sbrc	r25, 3
 546:	85 91       	lpm	r24, Z+
 548:	93 ff       	sbrs	r25, 3
 54a:	81 91       	ld	r24, Z+
 54c:	6f 01       	movw	r12, r30
 54e:	88 23       	and	r24, r24
 550:	09 f4       	brne	.+2      	; 0x554 <vfprintf+0x62>
 552:	9e c1       	rjmp	.+828    	; 0x890 <vfprintf+0x39e>
 554:	85 32       	cpi	r24, 0x25	; 37
 556:	39 f4       	brne	.+14     	; 0x566 <vfprintf+0x74>
 558:	93 fd       	sbrc	r25, 3
 55a:	85 91       	lpm	r24, Z+
 55c:	93 ff       	sbrs	r25, 3
 55e:	81 91       	ld	r24, Z+
 560:	6f 01       	movw	r12, r30
 562:	85 32       	cpi	r24, 0x25	; 37
 564:	21 f4       	brne	.+8      	; 0x56e <vfprintf+0x7c>
 566:	b7 01       	movw	r22, r14
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0f d3       	rcall	.+1566   	; 0xb8a <fputc>
 56c:	e8 cf       	rjmp	.-48     	; 0x53e <vfprintf+0x4c>
 56e:	51 2c       	mov	r5, r1
 570:	31 2c       	mov	r3, r1
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	20 32       	cpi	r18, 0x20	; 32
 576:	a0 f4       	brcc	.+40     	; 0x5a0 <vfprintf+0xae>
 578:	8b 32       	cpi	r24, 0x2B	; 43
 57a:	69 f0       	breq	.+26     	; 0x596 <vfprintf+0xa4>
 57c:	30 f4       	brcc	.+12     	; 0x58a <vfprintf+0x98>
 57e:	80 32       	cpi	r24, 0x20	; 32
 580:	59 f0       	breq	.+22     	; 0x598 <vfprintf+0xa6>
 582:	83 32       	cpi	r24, 0x23	; 35
 584:	69 f4       	brne	.+26     	; 0x5a0 <vfprintf+0xae>
 586:	20 61       	ori	r18, 0x10	; 16
 588:	2c c0       	rjmp	.+88     	; 0x5e2 <vfprintf+0xf0>
 58a:	8d 32       	cpi	r24, 0x2D	; 45
 58c:	39 f0       	breq	.+14     	; 0x59c <vfprintf+0xaa>
 58e:	80 33       	cpi	r24, 0x30	; 48
 590:	39 f4       	brne	.+14     	; 0x5a0 <vfprintf+0xae>
 592:	21 60       	ori	r18, 0x01	; 1
 594:	26 c0       	rjmp	.+76     	; 0x5e2 <vfprintf+0xf0>
 596:	22 60       	ori	r18, 0x02	; 2
 598:	24 60       	ori	r18, 0x04	; 4
 59a:	23 c0       	rjmp	.+70     	; 0x5e2 <vfprintf+0xf0>
 59c:	28 60       	ori	r18, 0x08	; 8
 59e:	21 c0       	rjmp	.+66     	; 0x5e2 <vfprintf+0xf0>
 5a0:	27 fd       	sbrc	r18, 7
 5a2:	27 c0       	rjmp	.+78     	; 0x5f2 <vfprintf+0x100>
 5a4:	30 ed       	ldi	r19, 0xD0	; 208
 5a6:	38 0f       	add	r19, r24
 5a8:	3a 30       	cpi	r19, 0x0A	; 10
 5aa:	78 f4       	brcc	.+30     	; 0x5ca <vfprintf+0xd8>
 5ac:	26 ff       	sbrs	r18, 6
 5ae:	06 c0       	rjmp	.+12     	; 0x5bc <vfprintf+0xca>
 5b0:	fa e0       	ldi	r31, 0x0A	; 10
 5b2:	5f 9e       	mul	r5, r31
 5b4:	30 0d       	add	r19, r0
 5b6:	11 24       	eor	r1, r1
 5b8:	53 2e       	mov	r5, r19
 5ba:	13 c0       	rjmp	.+38     	; 0x5e2 <vfprintf+0xf0>
 5bc:	8a e0       	ldi	r24, 0x0A	; 10
 5be:	38 9e       	mul	r3, r24
 5c0:	30 0d       	add	r19, r0
 5c2:	11 24       	eor	r1, r1
 5c4:	33 2e       	mov	r3, r19
 5c6:	20 62       	ori	r18, 0x20	; 32
 5c8:	0c c0       	rjmp	.+24     	; 0x5e2 <vfprintf+0xf0>
 5ca:	8e 32       	cpi	r24, 0x2E	; 46
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <vfprintf+0xe4>
 5ce:	26 fd       	sbrc	r18, 6
 5d0:	5f c1       	rjmp	.+702    	; 0x890 <vfprintf+0x39e>
 5d2:	20 64       	ori	r18, 0x40	; 64
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <vfprintf+0xf0>
 5d6:	8c 36       	cpi	r24, 0x6C	; 108
 5d8:	11 f4       	brne	.+4      	; 0x5de <vfprintf+0xec>
 5da:	20 68       	ori	r18, 0x80	; 128
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <vfprintf+0xf0>
 5de:	88 36       	cpi	r24, 0x68	; 104
 5e0:	41 f4       	brne	.+16     	; 0x5f2 <vfprintf+0x100>
 5e2:	f6 01       	movw	r30, r12
 5e4:	93 fd       	sbrc	r25, 3
 5e6:	85 91       	lpm	r24, Z+
 5e8:	93 ff       	sbrs	r25, 3
 5ea:	81 91       	ld	r24, Z+
 5ec:	6f 01       	movw	r12, r30
 5ee:	81 11       	cpse	r24, r1
 5f0:	c1 cf       	rjmp	.-126    	; 0x574 <vfprintf+0x82>
 5f2:	98 2f       	mov	r25, r24
 5f4:	9f 7d       	andi	r25, 0xDF	; 223
 5f6:	95 54       	subi	r25, 0x45	; 69
 5f8:	93 30       	cpi	r25, 0x03	; 3
 5fa:	28 f4       	brcc	.+10     	; 0x606 <vfprintf+0x114>
 5fc:	0c 5f       	subi	r16, 0xFC	; 252
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
 600:	ff e3       	ldi	r31, 0x3F	; 63
 602:	f9 83       	std	Y+1, r31	; 0x01
 604:	0d c0       	rjmp	.+26     	; 0x620 <vfprintf+0x12e>
 606:	83 36       	cpi	r24, 0x63	; 99
 608:	31 f0       	breq	.+12     	; 0x616 <vfprintf+0x124>
 60a:	83 37       	cpi	r24, 0x73	; 115
 60c:	71 f0       	breq	.+28     	; 0x62a <vfprintf+0x138>
 60e:	83 35       	cpi	r24, 0x53	; 83
 610:	09 f0       	breq	.+2      	; 0x614 <vfprintf+0x122>
 612:	57 c0       	rjmp	.+174    	; 0x6c2 <vfprintf+0x1d0>
 614:	21 c0       	rjmp	.+66     	; 0x658 <vfprintf+0x166>
 616:	f8 01       	movw	r30, r16
 618:	80 81       	ld	r24, Z
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	0e 5f       	subi	r16, 0xFE	; 254
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	44 24       	eor	r4, r4
 622:	43 94       	inc	r4
 624:	51 2c       	mov	r5, r1
 626:	54 01       	movw	r10, r8
 628:	14 c0       	rjmp	.+40     	; 0x652 <vfprintf+0x160>
 62a:	38 01       	movw	r6, r16
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	6f 0e       	add	r6, r31
 630:	71 1c       	adc	r7, r1
 632:	f8 01       	movw	r30, r16
 634:	a0 80       	ld	r10, Z
 636:	b1 80       	ldd	r11, Z+1	; 0x01
 638:	26 ff       	sbrs	r18, 6
 63a:	03 c0       	rjmp	.+6      	; 0x642 <vfprintf+0x150>
 63c:	65 2d       	mov	r22, r5
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <vfprintf+0x154>
 642:	6f ef       	ldi	r22, 0xFF	; 255
 644:	7f ef       	ldi	r23, 0xFF	; 255
 646:	c5 01       	movw	r24, r10
 648:	2c 87       	std	Y+12, r18	; 0x0c
 64a:	94 d2       	rcall	.+1320   	; 0xb74 <strnlen>
 64c:	2c 01       	movw	r4, r24
 64e:	83 01       	movw	r16, r6
 650:	2c 85       	ldd	r18, Y+12	; 0x0c
 652:	2f 77       	andi	r18, 0x7F	; 127
 654:	22 2e       	mov	r2, r18
 656:	16 c0       	rjmp	.+44     	; 0x684 <vfprintf+0x192>
 658:	38 01       	movw	r6, r16
 65a:	f2 e0       	ldi	r31, 0x02	; 2
 65c:	6f 0e       	add	r6, r31
 65e:	71 1c       	adc	r7, r1
 660:	f8 01       	movw	r30, r16
 662:	a0 80       	ld	r10, Z
 664:	b1 80       	ldd	r11, Z+1	; 0x01
 666:	26 ff       	sbrs	r18, 6
 668:	03 c0       	rjmp	.+6      	; 0x670 <vfprintf+0x17e>
 66a:	65 2d       	mov	r22, r5
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <vfprintf+0x182>
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	7f ef       	ldi	r23, 0xFF	; 255
 674:	c5 01       	movw	r24, r10
 676:	2c 87       	std	Y+12, r18	; 0x0c
 678:	6b d2       	rcall	.+1238   	; 0xb50 <strnlen_P>
 67a:	2c 01       	movw	r4, r24
 67c:	2c 85       	ldd	r18, Y+12	; 0x0c
 67e:	20 68       	ori	r18, 0x80	; 128
 680:	22 2e       	mov	r2, r18
 682:	83 01       	movw	r16, r6
 684:	23 fc       	sbrc	r2, 3
 686:	19 c0       	rjmp	.+50     	; 0x6ba <vfprintf+0x1c8>
 688:	83 2d       	mov	r24, r3
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	48 16       	cp	r4, r24
 68e:	59 06       	cpc	r5, r25
 690:	a0 f4       	brcc	.+40     	; 0x6ba <vfprintf+0x1c8>
 692:	b7 01       	movw	r22, r14
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	78 d2       	rcall	.+1264   	; 0xb8a <fputc>
 69a:	3a 94       	dec	r3
 69c:	f5 cf       	rjmp	.-22     	; 0x688 <vfprintf+0x196>
 69e:	f5 01       	movw	r30, r10
 6a0:	27 fc       	sbrc	r2, 7
 6a2:	85 91       	lpm	r24, Z+
 6a4:	27 fe       	sbrs	r2, 7
 6a6:	81 91       	ld	r24, Z+
 6a8:	5f 01       	movw	r10, r30
 6aa:	b7 01       	movw	r22, r14
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	6d d2       	rcall	.+1242   	; 0xb8a <fputc>
 6b0:	31 10       	cpse	r3, r1
 6b2:	3a 94       	dec	r3
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	4f 1a       	sub	r4, r31
 6b8:	51 08       	sbc	r5, r1
 6ba:	41 14       	cp	r4, r1
 6bc:	51 04       	cpc	r5, r1
 6be:	79 f7       	brne	.-34     	; 0x69e <vfprintf+0x1ac>
 6c0:	de c0       	rjmp	.+444    	; 0x87e <vfprintf+0x38c>
 6c2:	84 36       	cpi	r24, 0x64	; 100
 6c4:	11 f0       	breq	.+4      	; 0x6ca <vfprintf+0x1d8>
 6c6:	89 36       	cpi	r24, 0x69	; 105
 6c8:	31 f5       	brne	.+76     	; 0x716 <vfprintf+0x224>
 6ca:	f8 01       	movw	r30, r16
 6cc:	27 ff       	sbrs	r18, 7
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <vfprintf+0x1ec>
 6d0:	60 81       	ld	r22, Z
 6d2:	71 81       	ldd	r23, Z+1	; 0x01
 6d4:	82 81       	ldd	r24, Z+2	; 0x02
 6d6:	93 81       	ldd	r25, Z+3	; 0x03
 6d8:	0c 5f       	subi	r16, 0xFC	; 252
 6da:	1f 4f       	sbci	r17, 0xFF	; 255
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <vfprintf+0x1fc>
 6de:	60 81       	ld	r22, Z
 6e0:	71 81       	ldd	r23, Z+1	; 0x01
 6e2:	88 27       	eor	r24, r24
 6e4:	77 fd       	sbrc	r23, 7
 6e6:	80 95       	com	r24
 6e8:	98 2f       	mov	r25, r24
 6ea:	0e 5f       	subi	r16, 0xFE	; 254
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	2f 76       	andi	r18, 0x6F	; 111
 6f0:	b2 2e       	mov	r11, r18
 6f2:	97 ff       	sbrs	r25, 7
 6f4:	09 c0       	rjmp	.+18     	; 0x708 <vfprintf+0x216>
 6f6:	90 95       	com	r25
 6f8:	80 95       	com	r24
 6fa:	70 95       	com	r23
 6fc:	61 95       	neg	r22
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	20 68       	ori	r18, 0x80	; 128
 706:	b2 2e       	mov	r11, r18
 708:	2a e0       	ldi	r18, 0x0A	; 10
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	a4 01       	movw	r20, r8
 70e:	6f d2       	rcall	.+1246   	; 0xbee <__ultoa_invert>
 710:	a8 2e       	mov	r10, r24
 712:	a8 18       	sub	r10, r8
 714:	43 c0       	rjmp	.+134    	; 0x79c <vfprintf+0x2aa>
 716:	85 37       	cpi	r24, 0x75	; 117
 718:	29 f4       	brne	.+10     	; 0x724 <vfprintf+0x232>
 71a:	2f 7e       	andi	r18, 0xEF	; 239
 71c:	b2 2e       	mov	r11, r18
 71e:	2a e0       	ldi	r18, 0x0A	; 10
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	25 c0       	rjmp	.+74     	; 0x76e <vfprintf+0x27c>
 724:	f2 2f       	mov	r31, r18
 726:	f9 7f       	andi	r31, 0xF9	; 249
 728:	bf 2e       	mov	r11, r31
 72a:	8f 36       	cpi	r24, 0x6F	; 111
 72c:	c1 f0       	breq	.+48     	; 0x75e <vfprintf+0x26c>
 72e:	18 f4       	brcc	.+6      	; 0x736 <vfprintf+0x244>
 730:	88 35       	cpi	r24, 0x58	; 88
 732:	79 f0       	breq	.+30     	; 0x752 <vfprintf+0x260>
 734:	ad c0       	rjmp	.+346    	; 0x890 <vfprintf+0x39e>
 736:	80 37       	cpi	r24, 0x70	; 112
 738:	19 f0       	breq	.+6      	; 0x740 <vfprintf+0x24e>
 73a:	88 37       	cpi	r24, 0x78	; 120
 73c:	21 f0       	breq	.+8      	; 0x746 <vfprintf+0x254>
 73e:	a8 c0       	rjmp	.+336    	; 0x890 <vfprintf+0x39e>
 740:	2f 2f       	mov	r18, r31
 742:	20 61       	ori	r18, 0x10	; 16
 744:	b2 2e       	mov	r11, r18
 746:	b4 fe       	sbrs	r11, 4
 748:	0d c0       	rjmp	.+26     	; 0x764 <vfprintf+0x272>
 74a:	8b 2d       	mov	r24, r11
 74c:	84 60       	ori	r24, 0x04	; 4
 74e:	b8 2e       	mov	r11, r24
 750:	09 c0       	rjmp	.+18     	; 0x764 <vfprintf+0x272>
 752:	24 ff       	sbrs	r18, 4
 754:	0a c0       	rjmp	.+20     	; 0x76a <vfprintf+0x278>
 756:	9f 2f       	mov	r25, r31
 758:	96 60       	ori	r25, 0x06	; 6
 75a:	b9 2e       	mov	r11, r25
 75c:	06 c0       	rjmp	.+12     	; 0x76a <vfprintf+0x278>
 75e:	28 e0       	ldi	r18, 0x08	; 8
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	05 c0       	rjmp	.+10     	; 0x76e <vfprintf+0x27c>
 764:	20 e1       	ldi	r18, 0x10	; 16
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <vfprintf+0x27c>
 76a:	20 e1       	ldi	r18, 0x10	; 16
 76c:	32 e0       	ldi	r19, 0x02	; 2
 76e:	f8 01       	movw	r30, r16
 770:	b7 fe       	sbrs	r11, 7
 772:	07 c0       	rjmp	.+14     	; 0x782 <vfprintf+0x290>
 774:	60 81       	ld	r22, Z
 776:	71 81       	ldd	r23, Z+1	; 0x01
 778:	82 81       	ldd	r24, Z+2	; 0x02
 77a:	93 81       	ldd	r25, Z+3	; 0x03
 77c:	0c 5f       	subi	r16, 0xFC	; 252
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0x29c>
 782:	60 81       	ld	r22, Z
 784:	71 81       	ldd	r23, Z+1	; 0x01
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 5f       	subi	r16, 0xFE	; 254
 78c:	1f 4f       	sbci	r17, 0xFF	; 255
 78e:	a4 01       	movw	r20, r8
 790:	2e d2       	rcall	.+1116   	; 0xbee <__ultoa_invert>
 792:	a8 2e       	mov	r10, r24
 794:	a8 18       	sub	r10, r8
 796:	fb 2d       	mov	r31, r11
 798:	ff 77       	andi	r31, 0x7F	; 127
 79a:	bf 2e       	mov	r11, r31
 79c:	b6 fe       	sbrs	r11, 6
 79e:	0b c0       	rjmp	.+22     	; 0x7b6 <vfprintf+0x2c4>
 7a0:	2b 2d       	mov	r18, r11
 7a2:	2e 7f       	andi	r18, 0xFE	; 254
 7a4:	a5 14       	cp	r10, r5
 7a6:	50 f4       	brcc	.+20     	; 0x7bc <vfprintf+0x2ca>
 7a8:	b4 fe       	sbrs	r11, 4
 7aa:	0a c0       	rjmp	.+20     	; 0x7c0 <vfprintf+0x2ce>
 7ac:	b2 fc       	sbrc	r11, 2
 7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <vfprintf+0x2ce>
 7b0:	2b 2d       	mov	r18, r11
 7b2:	2e 7e       	andi	r18, 0xEE	; 238
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <vfprintf+0x2ce>
 7b6:	7a 2c       	mov	r7, r10
 7b8:	2b 2d       	mov	r18, r11
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <vfprintf+0x2d0>
 7bc:	7a 2c       	mov	r7, r10
 7be:	01 c0       	rjmp	.+2      	; 0x7c2 <vfprintf+0x2d0>
 7c0:	75 2c       	mov	r7, r5
 7c2:	24 ff       	sbrs	r18, 4
 7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <vfprintf+0x2ee>
 7c6:	fe 01       	movw	r30, r28
 7c8:	ea 0d       	add	r30, r10
 7ca:	f1 1d       	adc	r31, r1
 7cc:	80 81       	ld	r24, Z
 7ce:	80 33       	cpi	r24, 0x30	; 48
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <vfprintf+0x2e4>
 7d2:	29 7e       	andi	r18, 0xE9	; 233
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <vfprintf+0x2f6>
 7d6:	22 ff       	sbrs	r18, 2
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <vfprintf+0x2f4>
 7da:	73 94       	inc	r7
 7dc:	73 94       	inc	r7
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <vfprintf+0x2f6>
 7e0:	82 2f       	mov	r24, r18
 7e2:	86 78       	andi	r24, 0x86	; 134
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <vfprintf+0x2f6>
 7e6:	73 94       	inc	r7
 7e8:	23 fd       	sbrc	r18, 3
 7ea:	12 c0       	rjmp	.+36     	; 0x810 <vfprintf+0x31e>
 7ec:	20 ff       	sbrs	r18, 0
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <vfprintf+0x30a>
 7f0:	5a 2c       	mov	r5, r10
 7f2:	73 14       	cp	r7, r3
 7f4:	18 f4       	brcc	.+6      	; 0x7fc <vfprintf+0x30a>
 7f6:	53 0c       	add	r5, r3
 7f8:	57 18       	sub	r5, r7
 7fa:	73 2c       	mov	r7, r3
 7fc:	73 14       	cp	r7, r3
 7fe:	60 f4       	brcc	.+24     	; 0x818 <vfprintf+0x326>
 800:	b7 01       	movw	r22, r14
 802:	80 e2       	ldi	r24, 0x20	; 32
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	2c 87       	std	Y+12, r18	; 0x0c
 808:	c0 d1       	rcall	.+896    	; 0xb8a <fputc>
 80a:	73 94       	inc	r7
 80c:	2c 85       	ldd	r18, Y+12	; 0x0c
 80e:	f6 cf       	rjmp	.-20     	; 0x7fc <vfprintf+0x30a>
 810:	73 14       	cp	r7, r3
 812:	10 f4       	brcc	.+4      	; 0x818 <vfprintf+0x326>
 814:	37 18       	sub	r3, r7
 816:	01 c0       	rjmp	.+2      	; 0x81a <vfprintf+0x328>
 818:	31 2c       	mov	r3, r1
 81a:	24 ff       	sbrs	r18, 4
 81c:	11 c0       	rjmp	.+34     	; 0x840 <vfprintf+0x34e>
 81e:	b7 01       	movw	r22, r14
 820:	80 e3       	ldi	r24, 0x30	; 48
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	2c 87       	std	Y+12, r18	; 0x0c
 826:	b1 d1       	rcall	.+866    	; 0xb8a <fputc>
 828:	2c 85       	ldd	r18, Y+12	; 0x0c
 82a:	22 ff       	sbrs	r18, 2
 82c:	16 c0       	rjmp	.+44     	; 0x85a <vfprintf+0x368>
 82e:	21 ff       	sbrs	r18, 1
 830:	03 c0       	rjmp	.+6      	; 0x838 <vfprintf+0x346>
 832:	88 e5       	ldi	r24, 0x58	; 88
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <vfprintf+0x34a>
 838:	88 e7       	ldi	r24, 0x78	; 120
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	b7 01       	movw	r22, r14
 83e:	0c c0       	rjmp	.+24     	; 0x858 <vfprintf+0x366>
 840:	82 2f       	mov	r24, r18
 842:	86 78       	andi	r24, 0x86	; 134
 844:	51 f0       	breq	.+20     	; 0x85a <vfprintf+0x368>
 846:	21 fd       	sbrc	r18, 1
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x35c>
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	01 c0       	rjmp	.+2      	; 0x850 <vfprintf+0x35e>
 84e:	8b e2       	ldi	r24, 0x2B	; 43
 850:	27 fd       	sbrc	r18, 7
 852:	8d e2       	ldi	r24, 0x2D	; 45
 854:	b7 01       	movw	r22, r14
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	98 d1       	rcall	.+816    	; 0xb8a <fputc>
 85a:	a5 14       	cp	r10, r5
 85c:	30 f4       	brcc	.+12     	; 0x86a <vfprintf+0x378>
 85e:	b7 01       	movw	r22, r14
 860:	80 e3       	ldi	r24, 0x30	; 48
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	92 d1       	rcall	.+804    	; 0xb8a <fputc>
 866:	5a 94       	dec	r5
 868:	f8 cf       	rjmp	.-16     	; 0x85a <vfprintf+0x368>
 86a:	aa 94       	dec	r10
 86c:	f4 01       	movw	r30, r8
 86e:	ea 0d       	add	r30, r10
 870:	f1 1d       	adc	r31, r1
 872:	80 81       	ld	r24, Z
 874:	b7 01       	movw	r22, r14
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	88 d1       	rcall	.+784    	; 0xb8a <fputc>
 87a:	a1 10       	cpse	r10, r1
 87c:	f6 cf       	rjmp	.-20     	; 0x86a <vfprintf+0x378>
 87e:	33 20       	and	r3, r3
 880:	09 f4       	brne	.+2      	; 0x884 <vfprintf+0x392>
 882:	5d ce       	rjmp	.-838    	; 0x53e <vfprintf+0x4c>
 884:	b7 01       	movw	r22, r14
 886:	80 e2       	ldi	r24, 0x20	; 32
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	7f d1       	rcall	.+766    	; 0xb8a <fputc>
 88c:	3a 94       	dec	r3
 88e:	f7 cf       	rjmp	.-18     	; 0x87e <vfprintf+0x38c>
 890:	f7 01       	movw	r30, r14
 892:	86 81       	ldd	r24, Z+6	; 0x06
 894:	97 81       	ldd	r25, Z+7	; 0x07
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x3aa>
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	9f ef       	ldi	r25, 0xFF	; 255
 89c:	2c 96       	adiw	r28, 0x0c	; 12
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	f8 94       	cli
 8a2:	de bf       	out	0x3e, r29	; 62
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	cd bf       	out	0x3d, r28	; 61
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	df 90       	pop	r13
 8b6:	cf 90       	pop	r12
 8b8:	bf 90       	pop	r11
 8ba:	af 90       	pop	r10
 8bc:	9f 90       	pop	r9
 8be:	8f 90       	pop	r8
 8c0:	7f 90       	pop	r7
 8c2:	6f 90       	pop	r6
 8c4:	5f 90       	pop	r5
 8c6:	4f 90       	pop	r4
 8c8:	3f 90       	pop	r3
 8ca:	2f 90       	pop	r2
 8cc:	08 95       	ret

000008ce <calloc>:
 8ce:	0f 93       	push	r16
 8d0:	1f 93       	push	r17
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	86 9f       	mul	r24, r22
 8d8:	80 01       	movw	r16, r0
 8da:	87 9f       	mul	r24, r23
 8dc:	10 0d       	add	r17, r0
 8de:	96 9f       	mul	r25, r22
 8e0:	10 0d       	add	r17, r0
 8e2:	11 24       	eor	r1, r1
 8e4:	c8 01       	movw	r24, r16
 8e6:	0d d0       	rcall	.+26     	; 0x902 <malloc>
 8e8:	ec 01       	movw	r28, r24
 8ea:	00 97       	sbiw	r24, 0x00	; 0
 8ec:	21 f0       	breq	.+8      	; 0x8f6 <calloc+0x28>
 8ee:	a8 01       	movw	r20, r16
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	70 e0       	ldi	r23, 0x00	; 0
 8f4:	38 d1       	rcall	.+624    	; 0xb66 <memset>
 8f6:	ce 01       	movw	r24, r28
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	1f 91       	pop	r17
 8fe:	0f 91       	pop	r16
 900:	08 95       	ret

00000902 <malloc>:
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	82 30       	cpi	r24, 0x02	; 2
 908:	91 05       	cpc	r25, r1
 90a:	10 f4       	brcc	.+4      	; 0x910 <malloc+0xe>
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	e0 91 5b 03 	lds	r30, 0x035B
 914:	f0 91 5c 03 	lds	r31, 0x035C
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	a0 e0       	ldi	r26, 0x00	; 0
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	30 97       	sbiw	r30, 0x00	; 0
 922:	39 f1       	breq	.+78     	; 0x972 <malloc+0x70>
 924:	40 81       	ld	r20, Z
 926:	51 81       	ldd	r21, Z+1	; 0x01
 928:	48 17       	cp	r20, r24
 92a:	59 07       	cpc	r21, r25
 92c:	b8 f0       	brcs	.+46     	; 0x95c <malloc+0x5a>
 92e:	48 17       	cp	r20, r24
 930:	59 07       	cpc	r21, r25
 932:	71 f4       	brne	.+28     	; 0x950 <malloc+0x4e>
 934:	82 81       	ldd	r24, Z+2	; 0x02
 936:	93 81       	ldd	r25, Z+3	; 0x03
 938:	10 97       	sbiw	r26, 0x00	; 0
 93a:	29 f0       	breq	.+10     	; 0x946 <malloc+0x44>
 93c:	13 96       	adiw	r26, 0x03	; 3
 93e:	9c 93       	st	X, r25
 940:	8e 93       	st	-X, r24
 942:	12 97       	sbiw	r26, 0x02	; 2
 944:	2c c0       	rjmp	.+88     	; 0x99e <malloc+0x9c>
 946:	90 93 5c 03 	sts	0x035C, r25
 94a:	80 93 5b 03 	sts	0x035B, r24
 94e:	27 c0       	rjmp	.+78     	; 0x99e <malloc+0x9c>
 950:	21 15       	cp	r18, r1
 952:	31 05       	cpc	r19, r1
 954:	31 f0       	breq	.+12     	; 0x962 <malloc+0x60>
 956:	42 17       	cp	r20, r18
 958:	53 07       	cpc	r21, r19
 95a:	18 f0       	brcs	.+6      	; 0x962 <malloc+0x60>
 95c:	a9 01       	movw	r20, r18
 95e:	db 01       	movw	r26, r22
 960:	01 c0       	rjmp	.+2      	; 0x964 <malloc+0x62>
 962:	ef 01       	movw	r28, r30
 964:	9a 01       	movw	r18, r20
 966:	bd 01       	movw	r22, r26
 968:	df 01       	movw	r26, r30
 96a:	02 80       	ldd	r0, Z+2	; 0x02
 96c:	f3 81       	ldd	r31, Z+3	; 0x03
 96e:	e0 2d       	mov	r30, r0
 970:	d7 cf       	rjmp	.-82     	; 0x920 <malloc+0x1e>
 972:	21 15       	cp	r18, r1
 974:	31 05       	cpc	r19, r1
 976:	f9 f0       	breq	.+62     	; 0x9b6 <malloc+0xb4>
 978:	28 1b       	sub	r18, r24
 97a:	39 0b       	sbc	r19, r25
 97c:	24 30       	cpi	r18, 0x04	; 4
 97e:	31 05       	cpc	r19, r1
 980:	80 f4       	brcc	.+32     	; 0x9a2 <malloc+0xa0>
 982:	8a 81       	ldd	r24, Y+2	; 0x02
 984:	9b 81       	ldd	r25, Y+3	; 0x03
 986:	61 15       	cp	r22, r1
 988:	71 05       	cpc	r23, r1
 98a:	21 f0       	breq	.+8      	; 0x994 <malloc+0x92>
 98c:	fb 01       	movw	r30, r22
 98e:	93 83       	std	Z+3, r25	; 0x03
 990:	82 83       	std	Z+2, r24	; 0x02
 992:	04 c0       	rjmp	.+8      	; 0x99c <malloc+0x9a>
 994:	90 93 5c 03 	sts	0x035C, r25
 998:	80 93 5b 03 	sts	0x035B, r24
 99c:	fe 01       	movw	r30, r28
 99e:	32 96       	adiw	r30, 0x02	; 2
 9a0:	44 c0       	rjmp	.+136    	; 0xa2a <malloc+0x128>
 9a2:	fe 01       	movw	r30, r28
 9a4:	e2 0f       	add	r30, r18
 9a6:	f3 1f       	adc	r31, r19
 9a8:	81 93       	st	Z+, r24
 9aa:	91 93       	st	Z+, r25
 9ac:	22 50       	subi	r18, 0x02	; 2
 9ae:	31 09       	sbc	r19, r1
 9b0:	39 83       	std	Y+1, r19	; 0x01
 9b2:	28 83       	st	Y, r18
 9b4:	3a c0       	rjmp	.+116    	; 0xa2a <malloc+0x128>
 9b6:	20 91 59 03 	lds	r18, 0x0359
 9ba:	30 91 5a 03 	lds	r19, 0x035A
 9be:	23 2b       	or	r18, r19
 9c0:	41 f4       	brne	.+16     	; 0x9d2 <malloc+0xd0>
 9c2:	20 91 02 02 	lds	r18, 0x0202
 9c6:	30 91 03 02 	lds	r19, 0x0203
 9ca:	30 93 5a 03 	sts	0x035A, r19
 9ce:	20 93 59 03 	sts	0x0359, r18
 9d2:	20 91 00 02 	lds	r18, 0x0200
 9d6:	30 91 01 02 	lds	r19, 0x0201
 9da:	21 15       	cp	r18, r1
 9dc:	31 05       	cpc	r19, r1
 9de:	41 f4       	brne	.+16     	; 0x9f0 <malloc+0xee>
 9e0:	2d b7       	in	r18, 0x3d	; 61
 9e2:	3e b7       	in	r19, 0x3e	; 62
 9e4:	40 91 04 02 	lds	r20, 0x0204
 9e8:	50 91 05 02 	lds	r21, 0x0205
 9ec:	24 1b       	sub	r18, r20
 9ee:	35 0b       	sbc	r19, r21
 9f0:	e0 91 59 03 	lds	r30, 0x0359
 9f4:	f0 91 5a 03 	lds	r31, 0x035A
 9f8:	e2 17       	cp	r30, r18
 9fa:	f3 07       	cpc	r31, r19
 9fc:	a0 f4       	brcc	.+40     	; 0xa26 <malloc+0x124>
 9fe:	2e 1b       	sub	r18, r30
 a00:	3f 0b       	sbc	r19, r31
 a02:	28 17       	cp	r18, r24
 a04:	39 07       	cpc	r19, r25
 a06:	78 f0       	brcs	.+30     	; 0xa26 <malloc+0x124>
 a08:	ac 01       	movw	r20, r24
 a0a:	4e 5f       	subi	r20, 0xFE	; 254
 a0c:	5f 4f       	sbci	r21, 0xFF	; 255
 a0e:	24 17       	cp	r18, r20
 a10:	35 07       	cpc	r19, r21
 a12:	48 f0       	brcs	.+18     	; 0xa26 <malloc+0x124>
 a14:	4e 0f       	add	r20, r30
 a16:	5f 1f       	adc	r21, r31
 a18:	50 93 5a 03 	sts	0x035A, r21
 a1c:	40 93 59 03 	sts	0x0359, r20
 a20:	81 93       	st	Z+, r24
 a22:	91 93       	st	Z+, r25
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <malloc+0x128>
 a26:	e0 e0       	ldi	r30, 0x00	; 0
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	cf 01       	movw	r24, r30
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	08 95       	ret

00000a32 <free>:
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	09 f4       	brne	.+2      	; 0xa3c <free+0xa>
 a3a:	87 c0       	rjmp	.+270    	; 0xb4a <free+0x118>
 a3c:	fc 01       	movw	r30, r24
 a3e:	32 97       	sbiw	r30, 0x02	; 2
 a40:	13 82       	std	Z+3, r1	; 0x03
 a42:	12 82       	std	Z+2, r1	; 0x02
 a44:	c0 91 5b 03 	lds	r28, 0x035B
 a48:	d0 91 5c 03 	lds	r29, 0x035C
 a4c:	20 97       	sbiw	r28, 0x00	; 0
 a4e:	81 f4       	brne	.+32     	; 0xa70 <free+0x3e>
 a50:	20 81       	ld	r18, Z
 a52:	31 81       	ldd	r19, Z+1	; 0x01
 a54:	28 0f       	add	r18, r24
 a56:	39 1f       	adc	r19, r25
 a58:	80 91 59 03 	lds	r24, 0x0359
 a5c:	90 91 5a 03 	lds	r25, 0x035A
 a60:	82 17       	cp	r24, r18
 a62:	93 07       	cpc	r25, r19
 a64:	79 f5       	brne	.+94     	; 0xac4 <free+0x92>
 a66:	f0 93 5a 03 	sts	0x035A, r31
 a6a:	e0 93 59 03 	sts	0x0359, r30
 a6e:	6d c0       	rjmp	.+218    	; 0xb4a <free+0x118>
 a70:	de 01       	movw	r26, r28
 a72:	20 e0       	ldi	r18, 0x00	; 0
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	ae 17       	cp	r26, r30
 a78:	bf 07       	cpc	r27, r31
 a7a:	50 f4       	brcc	.+20     	; 0xa90 <free+0x5e>
 a7c:	12 96       	adiw	r26, 0x02	; 2
 a7e:	4d 91       	ld	r20, X+
 a80:	5c 91       	ld	r21, X
 a82:	13 97       	sbiw	r26, 0x03	; 3
 a84:	9d 01       	movw	r18, r26
 a86:	41 15       	cp	r20, r1
 a88:	51 05       	cpc	r21, r1
 a8a:	09 f1       	breq	.+66     	; 0xace <free+0x9c>
 a8c:	da 01       	movw	r26, r20
 a8e:	f3 cf       	rjmp	.-26     	; 0xa76 <free+0x44>
 a90:	b3 83       	std	Z+3, r27	; 0x03
 a92:	a2 83       	std	Z+2, r26	; 0x02
 a94:	40 81       	ld	r20, Z
 a96:	51 81       	ldd	r21, Z+1	; 0x01
 a98:	84 0f       	add	r24, r20
 a9a:	95 1f       	adc	r25, r21
 a9c:	8a 17       	cp	r24, r26
 a9e:	9b 07       	cpc	r25, r27
 aa0:	71 f4       	brne	.+28     	; 0xabe <free+0x8c>
 aa2:	8d 91       	ld	r24, X+
 aa4:	9c 91       	ld	r25, X
 aa6:	11 97       	sbiw	r26, 0x01	; 1
 aa8:	84 0f       	add	r24, r20
 aaa:	95 1f       	adc	r25, r21
 aac:	02 96       	adiw	r24, 0x02	; 2
 aae:	91 83       	std	Z+1, r25	; 0x01
 ab0:	80 83       	st	Z, r24
 ab2:	12 96       	adiw	r26, 0x02	; 2
 ab4:	8d 91       	ld	r24, X+
 ab6:	9c 91       	ld	r25, X
 ab8:	13 97       	sbiw	r26, 0x03	; 3
 aba:	93 83       	std	Z+3, r25	; 0x03
 abc:	82 83       	std	Z+2, r24	; 0x02
 abe:	21 15       	cp	r18, r1
 ac0:	31 05       	cpc	r19, r1
 ac2:	29 f4       	brne	.+10     	; 0xace <free+0x9c>
 ac4:	f0 93 5c 03 	sts	0x035C, r31
 ac8:	e0 93 5b 03 	sts	0x035B, r30
 acc:	3e c0       	rjmp	.+124    	; 0xb4a <free+0x118>
 ace:	d9 01       	movw	r26, r18
 ad0:	13 96       	adiw	r26, 0x03	; 3
 ad2:	fc 93       	st	X, r31
 ad4:	ee 93       	st	-X, r30
 ad6:	12 97       	sbiw	r26, 0x02	; 2
 ad8:	4d 91       	ld	r20, X+
 ada:	5d 91       	ld	r21, X+
 adc:	a4 0f       	add	r26, r20
 ade:	b5 1f       	adc	r27, r21
 ae0:	ea 17       	cp	r30, r26
 ae2:	fb 07       	cpc	r31, r27
 ae4:	79 f4       	brne	.+30     	; 0xb04 <free+0xd2>
 ae6:	80 81       	ld	r24, Z
 ae8:	91 81       	ldd	r25, Z+1	; 0x01
 aea:	84 0f       	add	r24, r20
 aec:	95 1f       	adc	r25, r21
 aee:	02 96       	adiw	r24, 0x02	; 2
 af0:	d9 01       	movw	r26, r18
 af2:	11 96       	adiw	r26, 0x01	; 1
 af4:	9c 93       	st	X, r25
 af6:	8e 93       	st	-X, r24
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	93 81       	ldd	r25, Z+3	; 0x03
 afc:	13 96       	adiw	r26, 0x03	; 3
 afe:	9c 93       	st	X, r25
 b00:	8e 93       	st	-X, r24
 b02:	12 97       	sbiw	r26, 0x02	; 2
 b04:	e0 e0       	ldi	r30, 0x00	; 0
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	8a 81       	ldd	r24, Y+2	; 0x02
 b0a:	9b 81       	ldd	r25, Y+3	; 0x03
 b0c:	00 97       	sbiw	r24, 0x00	; 0
 b0e:	19 f0       	breq	.+6      	; 0xb16 <free+0xe4>
 b10:	fe 01       	movw	r30, r28
 b12:	ec 01       	movw	r28, r24
 b14:	f9 cf       	rjmp	.-14     	; 0xb08 <free+0xd6>
 b16:	ce 01       	movw	r24, r28
 b18:	02 96       	adiw	r24, 0x02	; 2
 b1a:	28 81       	ld	r18, Y
 b1c:	39 81       	ldd	r19, Y+1	; 0x01
 b1e:	82 0f       	add	r24, r18
 b20:	93 1f       	adc	r25, r19
 b22:	20 91 59 03 	lds	r18, 0x0359
 b26:	30 91 5a 03 	lds	r19, 0x035A
 b2a:	28 17       	cp	r18, r24
 b2c:	39 07       	cpc	r19, r25
 b2e:	69 f4       	brne	.+26     	; 0xb4a <free+0x118>
 b30:	30 97       	sbiw	r30, 0x00	; 0
 b32:	29 f4       	brne	.+10     	; 0xb3e <free+0x10c>
 b34:	10 92 5c 03 	sts	0x035C, r1
 b38:	10 92 5b 03 	sts	0x035B, r1
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <free+0x110>
 b3e:	13 82       	std	Z+3, r1	; 0x03
 b40:	12 82       	std	Z+2, r1	; 0x02
 b42:	d0 93 5a 03 	sts	0x035A, r29
 b46:	c0 93 59 03 	sts	0x0359, r28
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	08 95       	ret

00000b50 <strnlen_P>:
 b50:	fc 01       	movw	r30, r24
 b52:	05 90       	lpm	r0, Z+
 b54:	61 50       	subi	r22, 0x01	; 1
 b56:	70 40       	sbci	r23, 0x00	; 0
 b58:	01 10       	cpse	r0, r1
 b5a:	d8 f7       	brcc	.-10     	; 0xb52 <strnlen_P+0x2>
 b5c:	80 95       	com	r24
 b5e:	90 95       	com	r25
 b60:	8e 0f       	add	r24, r30
 b62:	9f 1f       	adc	r25, r31
 b64:	08 95       	ret

00000b66 <memset>:
 b66:	dc 01       	movw	r26, r24
 b68:	01 c0       	rjmp	.+2      	; 0xb6c <memset+0x6>
 b6a:	6d 93       	st	X+, r22
 b6c:	41 50       	subi	r20, 0x01	; 1
 b6e:	50 40       	sbci	r21, 0x00	; 0
 b70:	e0 f7       	brcc	.-8      	; 0xb6a <memset+0x4>
 b72:	08 95       	ret

00000b74 <strnlen>:
 b74:	fc 01       	movw	r30, r24
 b76:	61 50       	subi	r22, 0x01	; 1
 b78:	70 40       	sbci	r23, 0x00	; 0
 b7a:	01 90       	ld	r0, Z+
 b7c:	01 10       	cpse	r0, r1
 b7e:	d8 f7       	brcc	.-10     	; 0xb76 <strnlen+0x2>
 b80:	80 95       	com	r24
 b82:	90 95       	com	r25
 b84:	8e 0f       	add	r24, r30
 b86:	9f 1f       	adc	r25, r31
 b88:	08 95       	ret

00000b8a <fputc>:
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	18 2f       	mov	r17, r24
 b94:	09 2f       	mov	r16, r25
 b96:	eb 01       	movw	r28, r22
 b98:	8b 81       	ldd	r24, Y+3	; 0x03
 b9a:	81 fd       	sbrc	r24, 1
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <fputc+0x1a>
 b9e:	8f ef       	ldi	r24, 0xFF	; 255
 ba0:	9f ef       	ldi	r25, 0xFF	; 255
 ba2:	20 c0       	rjmp	.+64     	; 0xbe4 <fputc+0x5a>
 ba4:	82 ff       	sbrs	r24, 2
 ba6:	10 c0       	rjmp	.+32     	; 0xbc8 <fputc+0x3e>
 ba8:	4e 81       	ldd	r20, Y+6	; 0x06
 baa:	5f 81       	ldd	r21, Y+7	; 0x07
 bac:	2c 81       	ldd	r18, Y+4	; 0x04
 bae:	3d 81       	ldd	r19, Y+5	; 0x05
 bb0:	42 17       	cp	r20, r18
 bb2:	53 07       	cpc	r21, r19
 bb4:	7c f4       	brge	.+30     	; 0xbd4 <fputc+0x4a>
 bb6:	e8 81       	ld	r30, Y
 bb8:	f9 81       	ldd	r31, Y+1	; 0x01
 bba:	9f 01       	movw	r18, r30
 bbc:	2f 5f       	subi	r18, 0xFF	; 255
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	39 83       	std	Y+1, r19	; 0x01
 bc2:	28 83       	st	Y, r18
 bc4:	10 83       	st	Z, r17
 bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <fputc+0x4a>
 bc8:	e8 85       	ldd	r30, Y+8	; 0x08
 bca:	f9 85       	ldd	r31, Y+9	; 0x09
 bcc:	81 2f       	mov	r24, r17
 bce:	19 95       	eicall
 bd0:	89 2b       	or	r24, r25
 bd2:	29 f7       	brne	.-54     	; 0xb9e <fputc+0x14>
 bd4:	2e 81       	ldd	r18, Y+6	; 0x06
 bd6:	3f 81       	ldd	r19, Y+7	; 0x07
 bd8:	2f 5f       	subi	r18, 0xFF	; 255
 bda:	3f 4f       	sbci	r19, 0xFF	; 255
 bdc:	3f 83       	std	Y+7, r19	; 0x07
 bde:	2e 83       	std	Y+6, r18	; 0x06
 be0:	81 2f       	mov	r24, r17
 be2:	90 2f       	mov	r25, r16
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	0f 91       	pop	r16
 bec:	08 95       	ret

00000bee <__ultoa_invert>:
 bee:	fa 01       	movw	r30, r20
 bf0:	aa 27       	eor	r26, r26
 bf2:	28 30       	cpi	r18, 0x08	; 8
 bf4:	51 f1       	breq	.+84     	; 0xc4a <__ultoa_invert+0x5c>
 bf6:	20 31       	cpi	r18, 0x10	; 16
 bf8:	81 f1       	breq	.+96     	; 0xc5a <__ultoa_invert+0x6c>
 bfa:	e8 94       	clt
 bfc:	6f 93       	push	r22
 bfe:	6e 7f       	andi	r22, 0xFE	; 254
 c00:	6e 5f       	subi	r22, 0xFE	; 254
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	af 4f       	sbci	r26, 0xFF	; 255
 c0a:	b1 e0       	ldi	r27, 0x01	; 1
 c0c:	3e d0       	rcall	.+124    	; 0xc8a <__ultoa_invert+0x9c>
 c0e:	b4 e0       	ldi	r27, 0x04	; 4
 c10:	3c d0       	rcall	.+120    	; 0xc8a <__ultoa_invert+0x9c>
 c12:	67 0f       	add	r22, r23
 c14:	78 1f       	adc	r23, r24
 c16:	89 1f       	adc	r24, r25
 c18:	9a 1f       	adc	r25, r26
 c1a:	a1 1d       	adc	r26, r1
 c1c:	68 0f       	add	r22, r24
 c1e:	79 1f       	adc	r23, r25
 c20:	8a 1f       	adc	r24, r26
 c22:	91 1d       	adc	r25, r1
 c24:	a1 1d       	adc	r26, r1
 c26:	6a 0f       	add	r22, r26
 c28:	71 1d       	adc	r23, r1
 c2a:	81 1d       	adc	r24, r1
 c2c:	91 1d       	adc	r25, r1
 c2e:	a1 1d       	adc	r26, r1
 c30:	20 d0       	rcall	.+64     	; 0xc72 <__ultoa_invert+0x84>
 c32:	09 f4       	brne	.+2      	; 0xc36 <__ultoa_invert+0x48>
 c34:	68 94       	set
 c36:	3f 91       	pop	r19
 c38:	2a e0       	ldi	r18, 0x0A	; 10
 c3a:	26 9f       	mul	r18, r22
 c3c:	11 24       	eor	r1, r1
 c3e:	30 19       	sub	r19, r0
 c40:	30 5d       	subi	r19, 0xD0	; 208
 c42:	31 93       	st	Z+, r19
 c44:	de f6       	brtc	.-74     	; 0xbfc <__ultoa_invert+0xe>
 c46:	cf 01       	movw	r24, r30
 c48:	08 95       	ret
 c4a:	46 2f       	mov	r20, r22
 c4c:	47 70       	andi	r20, 0x07	; 7
 c4e:	40 5d       	subi	r20, 0xD0	; 208
 c50:	41 93       	st	Z+, r20
 c52:	b3 e0       	ldi	r27, 0x03	; 3
 c54:	0f d0       	rcall	.+30     	; 0xc74 <__ultoa_invert+0x86>
 c56:	c9 f7       	brne	.-14     	; 0xc4a <__ultoa_invert+0x5c>
 c58:	f6 cf       	rjmp	.-20     	; 0xc46 <__ultoa_invert+0x58>
 c5a:	46 2f       	mov	r20, r22
 c5c:	4f 70       	andi	r20, 0x0F	; 15
 c5e:	40 5d       	subi	r20, 0xD0	; 208
 c60:	4a 33       	cpi	r20, 0x3A	; 58
 c62:	18 f0       	brcs	.+6      	; 0xc6a <__ultoa_invert+0x7c>
 c64:	49 5d       	subi	r20, 0xD9	; 217
 c66:	31 fd       	sbrc	r19, 1
 c68:	40 52       	subi	r20, 0x20	; 32
 c6a:	41 93       	st	Z+, r20
 c6c:	02 d0       	rcall	.+4      	; 0xc72 <__ultoa_invert+0x84>
 c6e:	a9 f7       	brne	.-22     	; 0xc5a <__ultoa_invert+0x6c>
 c70:	ea cf       	rjmp	.-44     	; 0xc46 <__ultoa_invert+0x58>
 c72:	b4 e0       	ldi	r27, 0x04	; 4
 c74:	a6 95       	lsr	r26
 c76:	97 95       	ror	r25
 c78:	87 95       	ror	r24
 c7a:	77 95       	ror	r23
 c7c:	67 95       	ror	r22
 c7e:	ba 95       	dec	r27
 c80:	c9 f7       	brne	.-14     	; 0xc74 <__ultoa_invert+0x86>
 c82:	00 97       	sbiw	r24, 0x00	; 0
 c84:	61 05       	cpc	r22, r1
 c86:	71 05       	cpc	r23, r1
 c88:	08 95       	ret
 c8a:	9b 01       	movw	r18, r22
 c8c:	ac 01       	movw	r20, r24
 c8e:	0a 2e       	mov	r0, r26
 c90:	06 94       	lsr	r0
 c92:	57 95       	ror	r21
 c94:	47 95       	ror	r20
 c96:	37 95       	ror	r19
 c98:	27 95       	ror	r18
 c9a:	ba 95       	dec	r27
 c9c:	c9 f7       	brne	.-14     	; 0xc90 <__ultoa_invert+0xa2>
 c9e:	62 0f       	add	r22, r18
 ca0:	73 1f       	adc	r23, r19
 ca2:	84 1f       	adc	r24, r20
 ca4:	95 1f       	adc	r25, r21
 ca6:	a0 1d       	adc	r26, r0
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
