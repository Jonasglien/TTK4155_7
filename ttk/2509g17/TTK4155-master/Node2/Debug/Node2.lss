
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800200  00000dea  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008002c6  008002c6  00000f44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a9  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085a  00000000  00000000  000022b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a84  00000000  00000000  00002b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000394  00000000  00000000  00003590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008bd  00000000  00000000  00003db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00004672  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	ef c0       	rjmp	.+478    	; 0x1f4 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ee       	ldi	r30, 0xEA	; 234
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 3c       	cpi	r26, 0xC6	; 198
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 ec       	ldi	r26, 0xC6	; 198
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 3e       	cpi	r26, 0xE7	; 231
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8e d1       	rcall	.+796    	; 0x43c <main>
 120:	62 c6       	rjmp	.+3268   	; 0xde6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_construct_message>:
CAN_message_t* CAN_message_receive(void){						// What does this step do
	return &CAN_receive_buffer;						// What does this step do
}

void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
 124:	90 93 c8 02 	sts	0x02C8, r25
 128:	80 93 c7 02 	sts	0x02C7, r24
	CAN_send_buffer.length = length;
 12c:	60 93 c9 02 	sts	0x02C9, r22
	for(uint8_t i = 0; i < length; i++){
 130:	66 23       	and	r22, r22
 132:	41 f0       	breq	.+16     	; 0x144 <CAN_construct_message+0x20>
 134:	8a ec       	ldi	r24, 0xCA	; 202
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
 13a:	11 92       	st	Z+, r1
 13c:	2e 2f       	mov	r18, r30
 13e:	28 1b       	sub	r18, r24
}

void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
 140:	26 17       	cp	r18, r22
 142:	d8 f3       	brcs	.-10     	; 0x13a <CAN_construct_message+0x16>
 144:	08 95       	ret

00000146 <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,0);
}

void CAN_send_byte(CAN_message_t* message,uint8_t n){
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 152:	f6 2e       	mov	r15, r22
	MCP2515_write(MCP_TXBnSIDH+n*0x10,message->id>>3);		//8 most significant bits of the message ID
 154:	06 2f       	mov	r16, r22
 156:	02 95       	swap	r16
 158:	00 7f       	andi	r16, 0xF0	; 240
 15a:	28 81       	ld	r18, Y
 15c:	39 81       	ldd	r19, Y+1	; 0x01
 15e:	b9 01       	movw	r22, r18
 160:	75 95       	asr	r23
 162:	67 95       	ror	r22
 164:	75 95       	asr	r23
 166:	67 95       	ror	r22
 168:	75 95       	asr	r23
 16a:	67 95       	ror	r22
 16c:	81 e3       	ldi	r24, 0x31	; 49
 16e:	80 0f       	add	r24, r16
 170:	0d d1       	rcall	.+538    	; 0x38c <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+n*0x10,message->id<<5);		//3 least significant bits of the message ID
 172:	68 81       	ld	r22, Y
 174:	62 95       	swap	r22
 176:	66 0f       	add	r22, r22
 178:	60 7e       	andi	r22, 0xE0	; 224
 17a:	82 e3       	ldi	r24, 0x32	; 50
 17c:	80 0f       	add	r24, r16
 17e:	06 d1       	rcall	.+524    	; 0x38c <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+n*0x10,(0b00001111)&(message->length));		//Message length
 180:	6a 81       	ldd	r22, Y+2	; 0x02
 182:	6f 70       	andi	r22, 0x0F	; 15
 184:	85 e3       	ldi	r24, 0x35	; 53
 186:	80 0f       	add	r24, r16
 188:	01 d1       	rcall	.+514    	; 0x38c <MCP2515_write>

	for (uint8_t i = 0; i < message->length;i++){
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	88 23       	and	r24, r24
 18e:	69 f0       	breq	.+26     	; 0x1aa <CAN_send_byte+0x64>
 190:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+n*0x10+i,message->data[i]);	//Message data
 192:	0a 5c       	subi	r16, 0xCA	; 202
 194:	fe 01       	movw	r30, r28
 196:	e1 0f       	add	r30, r17
 198:	f1 1d       	adc	r31, r1
 19a:	63 81       	ldd	r22, Z+3	; 0x03
 19c:	80 2f       	mov	r24, r16
 19e:	81 0f       	add	r24, r17
 1a0:	f5 d0       	rcall	.+490    	; 0x38c <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t n){
	MCP2515_write(MCP_TXBnSIDH+n*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+n*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+n*0x10,(0b00001111)&(message->length));		//Message length

	for (uint8_t i = 0; i < message->length;i++){
 1a2:	1f 5f       	subi	r17, 0xFF	; 255
 1a4:	9a 81       	ldd	r25, Y+2	; 0x02
 1a6:	19 17       	cp	r17, r25
 1a8:	a8 f3       	brcs	.-22     	; 0x194 <CAN_send_byte+0x4e>
		MCP2515_write(MCP_TXBnD0+n*0x10+i,message->data[i]);	//Message data
	}

	MCP2515_request_to_send(MCP_MERRF+(1<<n));
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <CAN_send_byte+0x6e>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	fa 94       	dec	r15
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <CAN_send_byte+0x6a>
 1b8:	80 58       	subi	r24, 0x80	; 128
 1ba:	04 d1       	rcall	.+520    	; 0x3c4 <MCP2515_request_to_send>
	//printf("CAN_send_byte: ID %i Length: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);

}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	08 95       	ret

000001c8 <CAN_message_send>:
		CAN_send_buffer.data[i] = 0;
	}
}

void CAN_message_send(uint8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
 1c8:	20 91 c9 02 	lds	r18, 0x02C9
 1cc:	22 23       	and	r18, r18
 1ce:	59 f0       	breq	.+22     	; 0x1e6 <CAN_message_send+0x1e>
 1d0:	38 2f       	mov	r19, r24
 1d2:	aa ec       	ldi	r26, 0xCA	; 202
 1d4:	b2 e0       	ldi	r27, 0x02	; 2
 1d6:	e8 2f       	mov	r30, r24
 1d8:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
 1da:	81 91       	ld	r24, Z+
 1dc:	8d 93       	st	X+, r24
 1de:	8e 2f       	mov	r24, r30
 1e0:	83 1b       	sub	r24, r19
		CAN_send_buffer.data[i] = 0;
	}
}

void CAN_message_send(uint8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
 1e2:	82 17       	cp	r24, r18
 1e4:	d0 f3       	brcs	.-12     	; 0x1da <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,0);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	87 ec       	ldi	r24, 0xC7	; 199
 1ea:	92 e0       	ldi	r25, 0x02	; 2
 1ec:	ac cf       	rjmp	.-168    	; 0x146 <CAN_send_byte>
 1ee:	08 95       	ret

000001f0 <CAN_read>:
	//printf("CAN_send_byte: ID %i Length: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);

}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 1f0:	dc c0       	rjmp	.+440    	; 0x3aa <MCP2515_read>
}
 1f2:	08 95       	ret

000001f4 <__vector_5>:
		//printf("CAN_data_receive: ID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_receive_buffer.id,CAN_receive_buffer.length,CAN_receive_buffer.data[0],CAN_receive_buffer.data[1],CAN_receive_buffer.data[2],CAN_receive_buffer.data[3],CAN_receive_buffer.data[4],CAN_receive_buffer.data[5],CAN_receive_buffer.data[6],CAN_receive_buffer.data[7]);
		recieve_flag = 0;
	}
}

ISR(INT4_vect){//interrupt incoming message
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	0b b6       	in	r0, 0x3b	; 59
 200:	0f 92       	push	r0
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	//cli();
	//IF there is a message in inbox 0, flag 1<<0, then if there is a message in inbox 1, flag 1<<1 this
	//FLAG_new_message = 0b01;
	recieve_flag = 1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 c6 02 	sts	0x02C6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	81 ee       	ldi	r24, 0xE1	; 225
 224:	94 e0       	ldi	r25, 0x04	; 4
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <__vector_5+0x32>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <__vector_5+0x3c>
 230:	00 00       	nop
	_delay_ms(100);
	//printf('MSG');
	//PORTE |= (1<<PE4);
	//sei();
	MCP2515_bit_modify(MCP_CANINTF,0xFF,0); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	6f ef       	ldi	r22, 0xFF	; 255
 236:	8c e2       	ldi	r24, 0x2C	; 44
 238:	d5 d0       	rcall	.+426    	; 0x3e4 <MCP2515_bit_modify>
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0b be       	out	0x3b, r0	; 59
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <CAN_interrupt_setup>:
	
void CAN_interrupt_setup(void){
	cli();
 260:	f8 94       	cli
	// Use PE4 as external interrupt pin
	DDRE &= ~(1<<PINE4);
 262:	6c 98       	cbi	0x0d, 4	; 13
	
	// Trigger interrupt on any signal change (Compare sec 15.2.2 of Atmega2560 data sheet).
	//EICRB |= (1<<ISC40);
	EICRB &= ~(1<<ISC40);
 264:	ea e6       	ldi	r30, 0x6A	; 106
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	80 83       	st	Z, r24
	EICRB &= ~(1<<ISC41);
 26e:	80 81       	ld	r24, Z
 270:	8d 7f       	andi	r24, 0xFD	; 253
 272:	80 83       	st	Z, r24
	//EICRB &= ~(1<<ISC41);
	
	// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
	EIMSK |= (1<<INT4);
 274:	ec 9a       	sbi	0x1d, 4	; 29
	
	//Enable global interrupt.
	sei();
 276:	78 94       	sei
 278:	08 95       	ret

0000027a <CAN_initialize>:
#include <util/delay.h>
static CAN_message_t CAN_receive_buffer; //VOLATILE ??????????????????????????????
static CAN_message_t CAN_send_buffer;
uint8_t FLAG_new_message = 0;

void CAN_initialize(void){
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	1f 92       	push	r1
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62

	MCP2515_initialize();
 284:	cb d0       	rcall	.+406    	; 0x41c <MCP2515_initialize>

	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 286:	4f ef       	ldi	r20, 0xFF	; 255
 288:	64 e6       	ldi	r22, 0x64	; 100
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	ab d0       	rcall	.+342    	; 0x3e4 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	8b e2       	ldi	r24, 0x2B	; 43
 294:	a7 d0       	rcall	.+334    	; 0x3e4 <MCP2515_bit_modify>
	//MCP2515_bit_modify(MCP_CANINTF,0b00000001,1);
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK); 
 296:	40 e4       	ldi	r20, 0x40	; 64
 298:	60 ee       	ldi	r22, 0xE0	; 224
 29a:	8f e0       	ldi	r24, 0x0F	; 15
 29c:	a3 d0       	rcall	.+326    	; 0x3e4 <MCP2515_bit_modify>
	
	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 29e:	68 e0       	ldi	r22, 0x08	; 8
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	3f df       	rcall	.-386    	; 0x124 <CAN_construct_message>
	
	volatile uint8_t value = MCP2515_read(MCP_CANSTAT);
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	80 d0       	rcall	.+256    	; 0x3aa <MCP2515_read>
 2aa:	89 83       	std	Y+1, r24	; 0x01
	printf("MCP_CANSTAT: %i\n", value);	
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	1f 92       	push	r1
 2b0:	8f 93       	push	r24
 2b2:	8e e0       	ldi	r24, 0x0E	; 14
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	9f 93       	push	r25
 2b8:	8f 93       	push	r24
 2ba:	7b d1       	rcall	.+758    	; 0x5b2 <printf>
	
	CAN_interrupt_setup();
 2bc:	d1 df       	rcall	.-94     	; 0x260 <CAN_interrupt_setup>
	
	printf("CAN initialized.\n\n");
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	88 d1       	rcall	.+784    	; 0x5d4 <puts>

}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <CAN_transmit_complete>:
	//Enable global interrupt.
	sei();
}


uint8_t CAN_transmit_complete(void){
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	1f 92       	push	r1
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
	
	
	// AMUND CAN YOU EXPLAIN WHAT HAPPENS HERE
	

	volatile char interrupt = MCP2515_read(MCP_CANINTF); ; //MCP2515_read(MCP_CANINTF);
 2de:	8c e2       	ldi	r24, 0x2C	; 44
 2e0:	64 d0       	rcall	.+200    	; 0x3aa <MCP2515_read>
 2e2:	89 83       	std	Y+1, r24	; 0x01
			return -1;
		}
	
		*/
	
	while((!((1 << MCP_RX0IF) & interrupt))&&(!((1 << MCP_RX1IF)&interrupt))){
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	81 fd       	sbrc	r24, 1
 2e8:	0c c0       	rjmp	.+24     	; 0x302 <CAN_transmit_complete+0x2e>
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	82 fd       	sbrc	r24, 2
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <CAN_transmit_complete+0x2e>
		interrupt = MCP2515_read(MCP_CANINTF);
 2f0:	8c e2       	ldi	r24, 0x2C	; 44
 2f2:	5b d0       	rcall	.+182    	; 0x3aa <MCP2515_read>
 2f4:	89 83       	std	Y+1, r24	; 0x01
			return -1;
		}
	
		*/
	
	while((!((1 << MCP_RX0IF) & interrupt))&&(!((1 << MCP_RX1IF)&interrupt))){
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	81 fd       	sbrc	r24, 1
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <CAN_transmit_complete+0x2e>
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	82 ff       	sbrs	r24, 2
 300:	f7 cf       	rjmp	.-18     	; 0x2f0 <CAN_transmit_complete+0x1c>
		interrupt = MCP2515_read(MCP_CANINTF);
	}
	//printf("interrupt: \%i", interrupt);
	
	if((1 << MCP_RX0IF)&interrupt){
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	81 fd       	sbrc	r24, 1
 306:	05 c0       	rjmp	.+10     	; 0x312 <CAN_transmit_complete+0x3e>
		return 0;
	}
	else if((1 << MCP_RX1IF)&interrupt){
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	82 ff       	sbrs	r24, 2
 30c:	04 c0       	rjmp	.+8      	; 0x316 <CAN_transmit_complete+0x42>
		return 1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	03 c0       	rjmp	.+6      	; 0x318 <CAN_transmit_complete+0x44>
		interrupt = MCP2515_read(MCP_CANINTF);
	}
	//printf("interrupt: \%i", interrupt);
	
	if((1 << MCP_RX0IF)&interrupt){
		return 0;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	01 c0       	rjmp	.+2      	; 0x318 <CAN_transmit_complete+0x44>
	}
	else if((1 << MCP_RX1IF)&interrupt){
		return 1;
	}
	else{
		return -1;
 316:	8f ef       	ldi	r24, 0xFF	; 255
	}
	

 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <CAN_data_receive>:
	return MCP2515_read(adr);
}

uint8_t recieve_flag = 0;

void CAN_data_receive(void) {
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	//printf("CAN receive\n");
	if(recieve_flag){
 326:	80 91 c6 02 	lds	r24, 0x02C6
 32a:	88 23       	and	r24, r24
 32c:	59 f1       	breq	.+86     	; 0x384 <CAN_data_receive+0x64>
		uint8_t n = CAN_transmit_complete();
 32e:	d2 df       	rcall	.-92     	; 0x2d4 <CAN_transmit_complete>
		//printf("CAN_transmit_complete: \%i\n", n);
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 330:	c8 2f       	mov	r28, r24
 332:	c2 95       	swap	r28
 334:	c0 7f       	andi	r28, 0xF0	; 240
 336:	82 e6       	ldi	r24, 0x62	; 98
 338:	8c 0f       	add	r24, r28
 33a:	5a df       	rcall	.-332    	; 0x1f0 <CAN_read>
 33c:	81 e6       	ldi	r24, 0x61	; 97
 33e:	8c 0f       	add	r24, r28
 340:	57 df       	rcall	.-338    	; 0x1f0 <CAN_read>
 342:	28 e0       	ldi	r18, 0x08	; 8
 344:	82 9f       	mul	r24, r18
 346:	c0 01       	movw	r24, r0
 348:	11 24       	eor	r1, r1
 34a:	90 93 d3 02 	sts	0x02D3, r25
 34e:	80 93 d2 02 	sts	0x02D2, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
 352:	85 e6       	ldi	r24, 0x65	; 101
 354:	8c 0f       	add	r24, r28
 356:	4c df       	rcall	.-360    	; 0x1f0 <CAN_read>
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	80 93 d4 02 	sts	0x02D4, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 35e:	88 23       	and	r24, r24
 360:	79 f0       	breq	.+30     	; 0x380 <CAN_data_receive+0x60>
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	c4 ed       	ldi	r28, 0xD4	; 212
 366:	d2 e0       	ldi	r29, 0x02	; 2
				CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
 368:	86 e6       	ldi	r24, 0x66	; 102
 36a:	81 0f       	add	r24, r17
 36c:	41 df       	rcall	.-382    	; 0x1f0 <CAN_read>
 36e:	e1 2f       	mov	r30, r17
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ee 52       	subi	r30, 0x2E	; 46
 374:	fd 4f       	sbci	r31, 0xFD	; 253
 376:	83 83       	std	Z+3, r24	; 0x03
		uint8_t n = CAN_transmit_complete();
		//printf("CAN_transmit_complete: \%i\n", n);
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 378:	1f 5f       	subi	r17, 0xFF	; 255
 37a:	88 81       	ld	r24, Y
 37c:	18 17       	cp	r17, r24
 37e:	a0 f3       	brcs	.-24     	; 0x368 <CAN_data_receive+0x48>
				CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
			}
		}
		//printf("%i",CAN_receive_buffer.data[0]);
		//printf("CAN_data_receive: ID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_receive_buffer.id,CAN_receive_buffer.length,CAN_receive_buffer.data[0],CAN_receive_buffer.data[1],CAN_receive_buffer.data[2],CAN_receive_buffer.data[3],CAN_receive_buffer.data[4],CAN_receive_buffer.data[5],CAN_receive_buffer.data[6],CAN_receive_buffer.data[7]);
		recieve_flag = 0;
 380:	10 92 c6 02 	sts	0x02C6, r1
	}
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	08 95       	ret

0000038c <MCP2515_write>:
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	//printf("MCP2515_read_status end\n");
	return recieved_status;
}
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	d8 2f       	mov	r29, r24
 392:	c6 2f       	mov	r28, r22
 394:	94 d0       	rcall	.+296    	; 0x4be <SPI_select>
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	86 d0       	rcall	.+268    	; 0x4a6 <SPI_send>
 39a:	8d 2f       	mov	r24, r29
 39c:	84 d0       	rcall	.+264    	; 0x4a6 <SPI_send>
 39e:	8c 2f       	mov	r24, r28
 3a0:	82 d0       	rcall	.+260    	; 0x4a6 <SPI_send>
 3a2:	8f d0       	rcall	.+286    	; 0x4c2 <SPI_deselect>
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <MCP2515_read>:
 3aa:	cf 93       	push	r28
 3ac:	c8 2f       	mov	r28, r24
 3ae:	87 d0       	rcall	.+270    	; 0x4be <SPI_select>
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	79 d0       	rcall	.+242    	; 0x4a6 <SPI_send>
 3b4:	8c 2f       	mov	r24, r28
 3b6:	77 d0       	rcall	.+238    	; 0x4a6 <SPI_send>
 3b8:	7b d0       	rcall	.+246    	; 0x4b0 <SPI_receive>
 3ba:	c8 2f       	mov	r28, r24
 3bc:	82 d0       	rcall	.+260    	; 0x4c2 <SPI_deselect>
 3be:	8c 2f       	mov	r24, r28
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <MCP2515_request_to_send>:
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	7a d0       	rcall	.+244    	; 0x4be <SPI_select>
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	c9 01       	movw	r24, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <MCP2515_request_to_send+0x12>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	ca 95       	dec	r28
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <MCP2515_request_to_send+0xe>
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	64 d0       	rcall	.+200    	; 0x4a6 <SPI_send>
 3de:	71 d0       	rcall	.+226    	; 0x4c2 <SPI_deselect>
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	18 2f       	mov	r17, r24
 3ec:	d6 2f       	mov	r29, r22
 3ee:	c4 2f       	mov	r28, r20
	//printf("MCP2515_bit_modify");
	SPI_select();
 3f0:	66 d0       	rcall	.+204    	; 0x4be <SPI_select>
	SPI_send(MCP_BITMOD);
 3f2:	85 e0       	ldi	r24, 0x05	; 5
 3f4:	58 d0       	rcall	.+176    	; 0x4a6 <SPI_send>
	SPI_send(adr);
 3f6:	81 2f       	mov	r24, r17
 3f8:	56 d0       	rcall	.+172    	; 0x4a6 <SPI_send>
	SPI_send(mask);
 3fa:	8d 2f       	mov	r24, r29
 3fc:	54 d0       	rcall	.+168    	; 0x4a6 <SPI_send>
	SPI_send(data);
 3fe:	8c 2f       	mov	r24, r28
 400:	52 d0       	rcall	.+164    	; 0x4a6 <SPI_send>
	SPI_deselect();
 402:	5f d0       	rcall	.+190    	; 0x4c2 <SPI_deselect>
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	08 95       	ret

0000040c <MCP2515_reset>:


void MCP2515_reset(void){
	printf("Resetting MCP2515\n");
 40c:	83 e6       	ldi	r24, 0x63	; 99
 40e:	92 e0       	ldi	r25, 0x02	; 2
 410:	e1 d0       	rcall	.+450    	; 0x5d4 <puts>
	SPI_select();
 412:	55 d0       	rcall	.+170    	; 0x4be <SPI_select>
	SPI_send(MCP_RESET);
 414:	80 ec       	ldi	r24, 0xC0	; 192
 416:	47 d0       	rcall	.+142    	; 0x4a6 <SPI_send>
	SPI_deselect();
 418:	54 c0       	rjmp	.+168    	; 0x4c2 <SPI_deselect>
 41a:	08 95       	ret

0000041c <MCP2515_initialize>:
 */ 
#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
 41c:	54 d0       	rcall	.+168    	; 0x4c6 <SPI_initialize>
	MCP2515_reset();
 41e:	f6 df       	rcall	.-20     	; 0x40c <MCP2515_reset>
	printf("MCP status: %i\n", MCP2515_read(MCP_CANSTAT));		
 420:	8e e0       	ldi	r24, 0x0E	; 14
 422:	c3 df       	rcall	.-122    	; 0x3aa <MCP2515_read>
 424:	1f 92       	push	r1
 426:	8f 93       	push	r24
 428:	85 e7       	ldi	r24, 0x75	; 117
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	9f 93       	push	r25
 42e:	8f 93       	push	r24
 430:	c0 d0       	rcall	.+384    	; 0x5b2 <printf>
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	08 95       	ret

0000043c <main>:
#include "uart.h"
#include "can.h"


int main(void)
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	28 97       	sbiw	r28, 0x08	; 8
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
	init_UART(UBRR);
 450:	87 e6       	ldi	r24, 0x67	; 103
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	54 d0       	rcall	.+168    	; 0x4fe <init_UART>
			
	printf("Initializing...\n");
 456:	85 e8       	ldi	r24, 0x85	; 133
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	bc d0       	rcall	.+376    	; 0x5d4 <puts>
	
	
	CAN_initialize();
 45c:	0e df       	rcall	.-484    	; 0x27a <CAN_initialize>
	

	//CAN_receive_buffer =  CAN_message_receive();
	
	
	uint8_t temp[8] = {1,10,3,4,5,6,7,8};
 45e:	88 e0       	ldi	r24, 0x08	; 8
 460:	e6 e0       	ldi	r30, 0x06	; 6
 462:	f2 e0       	ldi	r31, 0x02	; 2
 464:	de 01       	movw	r26, r28
 466:	11 96       	adiw	r26, 0x01	; 1
 468:	01 90       	ld	r0, Z+
 46a:	0d 92       	st	X+, r0
 46c:	8a 95       	dec	r24
 46e:	e1 f7       	brne	.-8      	; 0x468 <main+0x2c>
	uint8_t *data = temp;
	//CAN_message_send(data);
	
	//SPI_test();

	sei();
 470:	78 94       	sei
	uint8_t sendCAN = 1;
	

    while(1){
		if(sendCAN){
			printf("Sending message!\n");
 472:	85 e9       	ldi	r24, 0x95	; 149
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	ae d0       	rcall	.+348    	; 0x5d4 <puts>
			CAN_message_send(data);
 478:	ce 01       	movw	r24, r28
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	a5 de       	rcall	.-694    	; 0x1c8 <CAN_message_send>
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	81 ee       	ldi	r24, 0xE1	; 225
 482:	94 e0       	ldi	r25, 0x04	; 4
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <main+0x48>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x52>
 48e:	00 00       	nop
			_delay_ms(100);
			CAN_data_receive();
 490:	47 df       	rcall	.-370    	; 0x320 <CAN_data_receive>
 492:	2f ef       	ldi	r18, 0xFF	; 255
 494:	83 ec       	ldi	r24, 0xC3	; 195
 496:	99 e0       	ldi	r25, 0x09	; 9
 498:	21 50       	subi	r18, 0x01	; 1
 49a:	80 40       	sbci	r24, 0x00	; 0
 49c:	90 40       	sbci	r25, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <main+0x5c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0x66>
 4a2:	00 00       	nop
 4a4:	e6 cf       	rjmp	.-52     	; 0x472 <main+0x36>

000004a6 <SPI_send>:


void SPI_send(char data) {
	
	// Start the transmission
	SPDR = data;
 4a6:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 4a8:	0d b4       	in	r0, 0x2d	; 45
 4aa:	07 fe       	sbrs	r0, 7
 4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <SPI_send+0x2>

}
 4ae:	08 95       	ret

000004b0 <SPI_receive>:


char SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	f9 df       	rcall	.-14     	; 0x4a6 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
 4b4:	0d b4       	in	r0, 0x2d	; 45
 4b6:	07 fe       	sbrs	r0, 7
 4b8:	fd cf       	rjmp	.-6      	; 0x4b4 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
 4ba:	8e b5       	in	r24, 0x2e	; 46
}
 4bc:	08 95       	ret

000004be <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
 4be:	2f 98       	cbi	0x05, 7	; 5
 4c0:	08 95       	ret

000004c2 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
 4c2:	2f 9a       	sbi	0x05, 7	; 5
 4c4:	08 95       	ret

000004c6 <SPI_initialize>:


void SPI_initialize(void){

	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS)|(1<<PB0); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
 4c6:	84 b1       	in	r24, 0x04	; 4
 4c8:	87 68       	ori	r24, 0x87	; 135
 4ca:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 4cc:	8c b5       	in	r24, 0x2c	; 44
 4ce:	81 65       	ori	r24, 0x51	; 81
 4d0:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
 4d2:	f7 df       	rcall	.-18     	; 0x4c2 <SPI_deselect>
	printf("SPI communication initialized.\n");
 4d4:	86 ea       	ldi	r24, 0xA6	; 166
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	7d c0       	rjmp	.+250    	; 0x5d4 <puts>
 4da:	08 95       	ret

000004dc <send_UART>:
 4dc:	e0 ec       	ldi	r30, 0xC0	; 192
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	90 81       	ld	r25, Z
 4e2:	95 ff       	sbrs	r25, 5
 4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <send_UART+0x4>
 4e6:	80 93 c6 00 	sts	0x00C6, r24
 4ea:	08 95       	ret

000004ec <recieve_UART>:
 4ec:	e0 ec       	ldi	r30, 0xC0	; 192
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	88 23       	and	r24, r24
 4f4:	ec f7       	brge	.-6      	; 0x4f0 <recieve_UART+0x4>
 4f6:	80 91 c6 00 	lds	r24, 0x00C6
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 95       	ret

000004fe <init_UART>:
 4fe:	90 93 c5 00 	sts	0x00C5, r25
 502:	80 93 c4 00 	sts	0x00C4, r24
 506:	88 e1       	ldi	r24, 0x18	; 24
 508:	80 93 c1 00 	sts	0x00C1, r24
 50c:	8e e0       	ldi	r24, 0x0E	; 14
 50e:	80 93 c2 00 	sts	0x00C2, r24
 512:	66 e7       	ldi	r22, 0x76	; 118
 514:	72 e0       	ldi	r23, 0x02	; 2
 516:	8e e6       	ldi	r24, 0x6E	; 110
 518:	92 e0       	ldi	r25, 0x02	; 2
 51a:	01 c0       	rjmp	.+2      	; 0x51e <fdevopen>
 51c:	08 95       	ret

0000051e <fdevopen>:
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24
 528:	8b 01       	movw	r16, r22
 52a:	00 97       	sbiw	r24, 0x00	; 0
 52c:	31 f4       	brne	.+12     	; 0x53a <fdevopen+0x1c>
 52e:	61 15       	cp	r22, r1
 530:	71 05       	cpc	r23, r1
 532:	19 f4       	brne	.+6      	; 0x53a <fdevopen+0x1c>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	37 c0       	rjmp	.+110    	; 0x5a8 <fdevopen+0x8a>
 53a:	6e e0       	ldi	r22, 0x0E	; 14
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	63 d2       	rcall	.+1222   	; 0xa0a <calloc>
 544:	fc 01       	movw	r30, r24
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	a9 f3       	breq	.-22     	; 0x534 <fdevopen+0x16>
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	83 83       	std	Z+3, r24	; 0x03
 54e:	01 15       	cp	r16, r1
 550:	11 05       	cpc	r17, r1
 552:	71 f0       	breq	.+28     	; 0x570 <fdevopen+0x52>
 554:	13 87       	std	Z+11, r17	; 0x0b
 556:	02 87       	std	Z+10, r16	; 0x0a
 558:	81 e8       	ldi	r24, 0x81	; 129
 55a:	83 83       	std	Z+3, r24	; 0x03
 55c:	80 91 dd 02 	lds	r24, 0x02DD
 560:	90 91 de 02 	lds	r25, 0x02DE
 564:	89 2b       	or	r24, r25
 566:	21 f4       	brne	.+8      	; 0x570 <fdevopen+0x52>
 568:	f0 93 de 02 	sts	0x02DE, r31
 56c:	e0 93 dd 02 	sts	0x02DD, r30
 570:	20 97       	sbiw	r28, 0x00	; 0
 572:	c9 f0       	breq	.+50     	; 0x5a6 <fdevopen+0x88>
 574:	d1 87       	std	Z+9, r29	; 0x09
 576:	c0 87       	std	Z+8, r28	; 0x08
 578:	83 81       	ldd	r24, Z+3	; 0x03
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	83 83       	std	Z+3, r24	; 0x03
 57e:	80 91 df 02 	lds	r24, 0x02DF
 582:	90 91 e0 02 	lds	r25, 0x02E0
 586:	89 2b       	or	r24, r25
 588:	71 f4       	brne	.+28     	; 0x5a6 <fdevopen+0x88>
 58a:	f0 93 e0 02 	sts	0x02E0, r31
 58e:	e0 93 df 02 	sts	0x02DF, r30
 592:	80 91 e1 02 	lds	r24, 0x02E1
 596:	90 91 e2 02 	lds	r25, 0x02E2
 59a:	89 2b       	or	r24, r25
 59c:	21 f4       	brne	.+8      	; 0x5a6 <fdevopen+0x88>
 59e:	f0 93 e2 02 	sts	0x02E2, r31
 5a2:	e0 93 e1 02 	sts	0x02E1, r30
 5a6:	cf 01       	movw	r24, r30
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	08 95       	ret

000005b2 <printf>:
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	fe 01       	movw	r30, r28
 5bc:	36 96       	adiw	r30, 0x06	; 6
 5be:	61 91       	ld	r22, Z+
 5c0:	71 91       	ld	r23, Z+
 5c2:	af 01       	movw	r20, r30
 5c4:	80 91 df 02 	lds	r24, 0x02DF
 5c8:	90 91 e0 02 	lds	r25, 0x02E0
 5cc:	30 d0       	rcall	.+96     	; 0x62e <vfprintf>
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <puts>:
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	e0 91 df 02 	lds	r30, 0x02DF
 5e0:	f0 91 e0 02 	lds	r31, 0x02E0
 5e4:	23 81       	ldd	r18, Z+3	; 0x03
 5e6:	21 ff       	sbrs	r18, 1
 5e8:	1b c0       	rjmp	.+54     	; 0x620 <puts+0x4c>
 5ea:	ec 01       	movw	r28, r24
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	10 e0       	ldi	r17, 0x00	; 0
 5f0:	89 91       	ld	r24, Y+
 5f2:	60 91 df 02 	lds	r22, 0x02DF
 5f6:	70 91 e0 02 	lds	r23, 0x02E0
 5fa:	db 01       	movw	r26, r22
 5fc:	18 96       	adiw	r26, 0x08	; 8
 5fe:	ed 91       	ld	r30, X+
 600:	fc 91       	ld	r31, X
 602:	19 97       	sbiw	r26, 0x09	; 9
 604:	88 23       	and	r24, r24
 606:	31 f0       	breq	.+12     	; 0x614 <puts+0x40>
 608:	19 95       	eicall
 60a:	89 2b       	or	r24, r25
 60c:	89 f3       	breq	.-30     	; 0x5f0 <puts+0x1c>
 60e:	0f ef       	ldi	r16, 0xFF	; 255
 610:	1f ef       	ldi	r17, 0xFF	; 255
 612:	ee cf       	rjmp	.-36     	; 0x5f0 <puts+0x1c>
 614:	8a e0       	ldi	r24, 0x0A	; 10
 616:	19 95       	eicall
 618:	89 2b       	or	r24, r25
 61a:	11 f4       	brne	.+4      	; 0x620 <puts+0x4c>
 61c:	c8 01       	movw	r24, r16
 61e:	02 c0       	rjmp	.+4      	; 0x624 <puts+0x50>
 620:	8f ef       	ldi	r24, 0xFF	; 255
 622:	9f ef       	ldi	r25, 0xFF	; 255
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	08 95       	ret

0000062e <vfprintf>:
 62e:	2f 92       	push	r2
 630:	3f 92       	push	r3
 632:	4f 92       	push	r4
 634:	5f 92       	push	r5
 636:	6f 92       	push	r6
 638:	7f 92       	push	r7
 63a:	8f 92       	push	r8
 63c:	9f 92       	push	r9
 63e:	af 92       	push	r10
 640:	bf 92       	push	r11
 642:	cf 92       	push	r12
 644:	df 92       	push	r13
 646:	ef 92       	push	r14
 648:	ff 92       	push	r15
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	2c 97       	sbiw	r28, 0x0c	; 12
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	de bf       	out	0x3e, r29	; 62
 65e:	0f be       	out	0x3f, r0	; 63
 660:	cd bf       	out	0x3d, r28	; 61
 662:	7c 01       	movw	r14, r24
 664:	6b 01       	movw	r12, r22
 666:	8a 01       	movw	r16, r20
 668:	fc 01       	movw	r30, r24
 66a:	17 82       	std	Z+7, r1	; 0x07
 66c:	16 82       	std	Z+6, r1	; 0x06
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	81 ff       	sbrs	r24, 1
 672:	b0 c1       	rjmp	.+864    	; 0x9d4 <vfprintf+0x3a6>
 674:	ce 01       	movw	r24, r28
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	4c 01       	movw	r8, r24
 67a:	f7 01       	movw	r30, r14
 67c:	93 81       	ldd	r25, Z+3	; 0x03
 67e:	f6 01       	movw	r30, r12
 680:	93 fd       	sbrc	r25, 3
 682:	85 91       	lpm	r24, Z+
 684:	93 ff       	sbrs	r25, 3
 686:	81 91       	ld	r24, Z+
 688:	6f 01       	movw	r12, r30
 68a:	88 23       	and	r24, r24
 68c:	09 f4       	brne	.+2      	; 0x690 <vfprintf+0x62>
 68e:	9e c1       	rjmp	.+828    	; 0x9cc <vfprintf+0x39e>
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	39 f4       	brne	.+14     	; 0x6a2 <vfprintf+0x74>
 694:	93 fd       	sbrc	r25, 3
 696:	85 91       	lpm	r24, Z+
 698:	93 ff       	sbrs	r25, 3
 69a:	81 91       	ld	r24, Z+
 69c:	6f 01       	movw	r12, r30
 69e:	85 32       	cpi	r24, 0x25	; 37
 6a0:	21 f4       	brne	.+8      	; 0x6aa <vfprintf+0x7c>
 6a2:	b7 01       	movw	r22, r14
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0f d3       	rcall	.+1566   	; 0xcc6 <fputc>
 6a8:	e8 cf       	rjmp	.-48     	; 0x67a <vfprintf+0x4c>
 6aa:	51 2c       	mov	r5, r1
 6ac:	31 2c       	mov	r3, r1
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	20 32       	cpi	r18, 0x20	; 32
 6b2:	a0 f4       	brcc	.+40     	; 0x6dc <vfprintf+0xae>
 6b4:	8b 32       	cpi	r24, 0x2B	; 43
 6b6:	69 f0       	breq	.+26     	; 0x6d2 <vfprintf+0xa4>
 6b8:	30 f4       	brcc	.+12     	; 0x6c6 <vfprintf+0x98>
 6ba:	80 32       	cpi	r24, 0x20	; 32
 6bc:	59 f0       	breq	.+22     	; 0x6d4 <vfprintf+0xa6>
 6be:	83 32       	cpi	r24, 0x23	; 35
 6c0:	69 f4       	brne	.+26     	; 0x6dc <vfprintf+0xae>
 6c2:	20 61       	ori	r18, 0x10	; 16
 6c4:	2c c0       	rjmp	.+88     	; 0x71e <vfprintf+0xf0>
 6c6:	8d 32       	cpi	r24, 0x2D	; 45
 6c8:	39 f0       	breq	.+14     	; 0x6d8 <vfprintf+0xaa>
 6ca:	80 33       	cpi	r24, 0x30	; 48
 6cc:	39 f4       	brne	.+14     	; 0x6dc <vfprintf+0xae>
 6ce:	21 60       	ori	r18, 0x01	; 1
 6d0:	26 c0       	rjmp	.+76     	; 0x71e <vfprintf+0xf0>
 6d2:	22 60       	ori	r18, 0x02	; 2
 6d4:	24 60       	ori	r18, 0x04	; 4
 6d6:	23 c0       	rjmp	.+70     	; 0x71e <vfprintf+0xf0>
 6d8:	28 60       	ori	r18, 0x08	; 8
 6da:	21 c0       	rjmp	.+66     	; 0x71e <vfprintf+0xf0>
 6dc:	27 fd       	sbrc	r18, 7
 6de:	27 c0       	rjmp	.+78     	; 0x72e <vfprintf+0x100>
 6e0:	30 ed       	ldi	r19, 0xD0	; 208
 6e2:	38 0f       	add	r19, r24
 6e4:	3a 30       	cpi	r19, 0x0A	; 10
 6e6:	78 f4       	brcc	.+30     	; 0x706 <vfprintf+0xd8>
 6e8:	26 ff       	sbrs	r18, 6
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <vfprintf+0xca>
 6ec:	fa e0       	ldi	r31, 0x0A	; 10
 6ee:	5f 9e       	mul	r5, r31
 6f0:	30 0d       	add	r19, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	53 2e       	mov	r5, r19
 6f6:	13 c0       	rjmp	.+38     	; 0x71e <vfprintf+0xf0>
 6f8:	8a e0       	ldi	r24, 0x0A	; 10
 6fa:	38 9e       	mul	r3, r24
 6fc:	30 0d       	add	r19, r0
 6fe:	11 24       	eor	r1, r1
 700:	33 2e       	mov	r3, r19
 702:	20 62       	ori	r18, 0x20	; 32
 704:	0c c0       	rjmp	.+24     	; 0x71e <vfprintf+0xf0>
 706:	8e 32       	cpi	r24, 0x2E	; 46
 708:	21 f4       	brne	.+8      	; 0x712 <vfprintf+0xe4>
 70a:	26 fd       	sbrc	r18, 6
 70c:	5f c1       	rjmp	.+702    	; 0x9cc <vfprintf+0x39e>
 70e:	20 64       	ori	r18, 0x40	; 64
 710:	06 c0       	rjmp	.+12     	; 0x71e <vfprintf+0xf0>
 712:	8c 36       	cpi	r24, 0x6C	; 108
 714:	11 f4       	brne	.+4      	; 0x71a <vfprintf+0xec>
 716:	20 68       	ori	r18, 0x80	; 128
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0xf0>
 71a:	88 36       	cpi	r24, 0x68	; 104
 71c:	41 f4       	brne	.+16     	; 0x72e <vfprintf+0x100>
 71e:	f6 01       	movw	r30, r12
 720:	93 fd       	sbrc	r25, 3
 722:	85 91       	lpm	r24, Z+
 724:	93 ff       	sbrs	r25, 3
 726:	81 91       	ld	r24, Z+
 728:	6f 01       	movw	r12, r30
 72a:	81 11       	cpse	r24, r1
 72c:	c1 cf       	rjmp	.-126    	; 0x6b0 <vfprintf+0x82>
 72e:	98 2f       	mov	r25, r24
 730:	9f 7d       	andi	r25, 0xDF	; 223
 732:	95 54       	subi	r25, 0x45	; 69
 734:	93 30       	cpi	r25, 0x03	; 3
 736:	28 f4       	brcc	.+10     	; 0x742 <vfprintf+0x114>
 738:	0c 5f       	subi	r16, 0xFC	; 252
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	ff e3       	ldi	r31, 0x3F	; 63
 73e:	f9 83       	std	Y+1, r31	; 0x01
 740:	0d c0       	rjmp	.+26     	; 0x75c <vfprintf+0x12e>
 742:	83 36       	cpi	r24, 0x63	; 99
 744:	31 f0       	breq	.+12     	; 0x752 <vfprintf+0x124>
 746:	83 37       	cpi	r24, 0x73	; 115
 748:	71 f0       	breq	.+28     	; 0x766 <vfprintf+0x138>
 74a:	83 35       	cpi	r24, 0x53	; 83
 74c:	09 f0       	breq	.+2      	; 0x750 <vfprintf+0x122>
 74e:	57 c0       	rjmp	.+174    	; 0x7fe <vfprintf+0x1d0>
 750:	21 c0       	rjmp	.+66     	; 0x794 <vfprintf+0x166>
 752:	f8 01       	movw	r30, r16
 754:	80 81       	ld	r24, Z
 756:	89 83       	std	Y+1, r24	; 0x01
 758:	0e 5f       	subi	r16, 0xFE	; 254
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	44 24       	eor	r4, r4
 75e:	43 94       	inc	r4
 760:	51 2c       	mov	r5, r1
 762:	54 01       	movw	r10, r8
 764:	14 c0       	rjmp	.+40     	; 0x78e <vfprintf+0x160>
 766:	38 01       	movw	r6, r16
 768:	f2 e0       	ldi	r31, 0x02	; 2
 76a:	6f 0e       	add	r6, r31
 76c:	71 1c       	adc	r7, r1
 76e:	f8 01       	movw	r30, r16
 770:	a0 80       	ld	r10, Z
 772:	b1 80       	ldd	r11, Z+1	; 0x01
 774:	26 ff       	sbrs	r18, 6
 776:	03 c0       	rjmp	.+6      	; 0x77e <vfprintf+0x150>
 778:	65 2d       	mov	r22, r5
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <vfprintf+0x154>
 77e:	6f ef       	ldi	r22, 0xFF	; 255
 780:	7f ef       	ldi	r23, 0xFF	; 255
 782:	c5 01       	movw	r24, r10
 784:	2c 87       	std	Y+12, r18	; 0x0c
 786:	94 d2       	rcall	.+1320   	; 0xcb0 <strnlen>
 788:	2c 01       	movw	r4, r24
 78a:	83 01       	movw	r16, r6
 78c:	2c 85       	ldd	r18, Y+12	; 0x0c
 78e:	2f 77       	andi	r18, 0x7F	; 127
 790:	22 2e       	mov	r2, r18
 792:	16 c0       	rjmp	.+44     	; 0x7c0 <vfprintf+0x192>
 794:	38 01       	movw	r6, r16
 796:	f2 e0       	ldi	r31, 0x02	; 2
 798:	6f 0e       	add	r6, r31
 79a:	71 1c       	adc	r7, r1
 79c:	f8 01       	movw	r30, r16
 79e:	a0 80       	ld	r10, Z
 7a0:	b1 80       	ldd	r11, Z+1	; 0x01
 7a2:	26 ff       	sbrs	r18, 6
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <vfprintf+0x17e>
 7a6:	65 2d       	mov	r22, r5
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <vfprintf+0x182>
 7ac:	6f ef       	ldi	r22, 0xFF	; 255
 7ae:	7f ef       	ldi	r23, 0xFF	; 255
 7b0:	c5 01       	movw	r24, r10
 7b2:	2c 87       	std	Y+12, r18	; 0x0c
 7b4:	6b d2       	rcall	.+1238   	; 0xc8c <strnlen_P>
 7b6:	2c 01       	movw	r4, r24
 7b8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ba:	20 68       	ori	r18, 0x80	; 128
 7bc:	22 2e       	mov	r2, r18
 7be:	83 01       	movw	r16, r6
 7c0:	23 fc       	sbrc	r2, 3
 7c2:	19 c0       	rjmp	.+50     	; 0x7f6 <vfprintf+0x1c8>
 7c4:	83 2d       	mov	r24, r3
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	48 16       	cp	r4, r24
 7ca:	59 06       	cpc	r5, r25
 7cc:	a0 f4       	brcc	.+40     	; 0x7f6 <vfprintf+0x1c8>
 7ce:	b7 01       	movw	r22, r14
 7d0:	80 e2       	ldi	r24, 0x20	; 32
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	78 d2       	rcall	.+1264   	; 0xcc6 <fputc>
 7d6:	3a 94       	dec	r3
 7d8:	f5 cf       	rjmp	.-22     	; 0x7c4 <vfprintf+0x196>
 7da:	f5 01       	movw	r30, r10
 7dc:	27 fc       	sbrc	r2, 7
 7de:	85 91       	lpm	r24, Z+
 7e0:	27 fe       	sbrs	r2, 7
 7e2:	81 91       	ld	r24, Z+
 7e4:	5f 01       	movw	r10, r30
 7e6:	b7 01       	movw	r22, r14
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	6d d2       	rcall	.+1242   	; 0xcc6 <fputc>
 7ec:	31 10       	cpse	r3, r1
 7ee:	3a 94       	dec	r3
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
 7f2:	4f 1a       	sub	r4, r31
 7f4:	51 08       	sbc	r5, r1
 7f6:	41 14       	cp	r4, r1
 7f8:	51 04       	cpc	r5, r1
 7fa:	79 f7       	brne	.-34     	; 0x7da <vfprintf+0x1ac>
 7fc:	de c0       	rjmp	.+444    	; 0x9ba <vfprintf+0x38c>
 7fe:	84 36       	cpi	r24, 0x64	; 100
 800:	11 f0       	breq	.+4      	; 0x806 <vfprintf+0x1d8>
 802:	89 36       	cpi	r24, 0x69	; 105
 804:	31 f5       	brne	.+76     	; 0x852 <vfprintf+0x224>
 806:	f8 01       	movw	r30, r16
 808:	27 ff       	sbrs	r18, 7
 80a:	07 c0       	rjmp	.+14     	; 0x81a <vfprintf+0x1ec>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	82 81       	ldd	r24, Z+2	; 0x02
 812:	93 81       	ldd	r25, Z+3	; 0x03
 814:	0c 5f       	subi	r16, 0xFC	; 252
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	08 c0       	rjmp	.+16     	; 0x82a <vfprintf+0x1fc>
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	88 27       	eor	r24, r24
 820:	77 fd       	sbrc	r23, 7
 822:	80 95       	com	r24
 824:	98 2f       	mov	r25, r24
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	2f 76       	andi	r18, 0x6F	; 111
 82c:	b2 2e       	mov	r11, r18
 82e:	97 ff       	sbrs	r25, 7
 830:	09 c0       	rjmp	.+18     	; 0x844 <vfprintf+0x216>
 832:	90 95       	com	r25
 834:	80 95       	com	r24
 836:	70 95       	com	r23
 838:	61 95       	neg	r22
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	20 68       	ori	r18, 0x80	; 128
 842:	b2 2e       	mov	r11, r18
 844:	2a e0       	ldi	r18, 0x0A	; 10
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	a4 01       	movw	r20, r8
 84a:	6f d2       	rcall	.+1246   	; 0xd2a <__ultoa_invert>
 84c:	a8 2e       	mov	r10, r24
 84e:	a8 18       	sub	r10, r8
 850:	43 c0       	rjmp	.+134    	; 0x8d8 <vfprintf+0x2aa>
 852:	85 37       	cpi	r24, 0x75	; 117
 854:	29 f4       	brne	.+10     	; 0x860 <vfprintf+0x232>
 856:	2f 7e       	andi	r18, 0xEF	; 239
 858:	b2 2e       	mov	r11, r18
 85a:	2a e0       	ldi	r18, 0x0A	; 10
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	25 c0       	rjmp	.+74     	; 0x8aa <vfprintf+0x27c>
 860:	f2 2f       	mov	r31, r18
 862:	f9 7f       	andi	r31, 0xF9	; 249
 864:	bf 2e       	mov	r11, r31
 866:	8f 36       	cpi	r24, 0x6F	; 111
 868:	c1 f0       	breq	.+48     	; 0x89a <vfprintf+0x26c>
 86a:	18 f4       	brcc	.+6      	; 0x872 <vfprintf+0x244>
 86c:	88 35       	cpi	r24, 0x58	; 88
 86e:	79 f0       	breq	.+30     	; 0x88e <vfprintf+0x260>
 870:	ad c0       	rjmp	.+346    	; 0x9cc <vfprintf+0x39e>
 872:	80 37       	cpi	r24, 0x70	; 112
 874:	19 f0       	breq	.+6      	; 0x87c <vfprintf+0x24e>
 876:	88 37       	cpi	r24, 0x78	; 120
 878:	21 f0       	breq	.+8      	; 0x882 <vfprintf+0x254>
 87a:	a8 c0       	rjmp	.+336    	; 0x9cc <vfprintf+0x39e>
 87c:	2f 2f       	mov	r18, r31
 87e:	20 61       	ori	r18, 0x10	; 16
 880:	b2 2e       	mov	r11, r18
 882:	b4 fe       	sbrs	r11, 4
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <vfprintf+0x272>
 886:	8b 2d       	mov	r24, r11
 888:	84 60       	ori	r24, 0x04	; 4
 88a:	b8 2e       	mov	r11, r24
 88c:	09 c0       	rjmp	.+18     	; 0x8a0 <vfprintf+0x272>
 88e:	24 ff       	sbrs	r18, 4
 890:	0a c0       	rjmp	.+20     	; 0x8a6 <vfprintf+0x278>
 892:	9f 2f       	mov	r25, r31
 894:	96 60       	ori	r25, 0x06	; 6
 896:	b9 2e       	mov	r11, r25
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0x278>
 89a:	28 e0       	ldi	r18, 0x08	; 8
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <vfprintf+0x27c>
 8a0:	20 e1       	ldi	r18, 0x10	; 16
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <vfprintf+0x27c>
 8a6:	20 e1       	ldi	r18, 0x10	; 16
 8a8:	32 e0       	ldi	r19, 0x02	; 2
 8aa:	f8 01       	movw	r30, r16
 8ac:	b7 fe       	sbrs	r11, 7
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <vfprintf+0x290>
 8b0:	60 81       	ld	r22, Z
 8b2:	71 81       	ldd	r23, Z+1	; 0x01
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
 8b8:	0c 5f       	subi	r16, 0xFC	; 252
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x29c>
 8be:	60 81       	ld	r22, Z
 8c0:	71 81       	ldd	r23, Z+1	; 0x01
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 5f       	subi	r16, 0xFE	; 254
 8c8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ca:	a4 01       	movw	r20, r8
 8cc:	2e d2       	rcall	.+1116   	; 0xd2a <__ultoa_invert>
 8ce:	a8 2e       	mov	r10, r24
 8d0:	a8 18       	sub	r10, r8
 8d2:	fb 2d       	mov	r31, r11
 8d4:	ff 77       	andi	r31, 0x7F	; 127
 8d6:	bf 2e       	mov	r11, r31
 8d8:	b6 fe       	sbrs	r11, 6
 8da:	0b c0       	rjmp	.+22     	; 0x8f2 <vfprintf+0x2c4>
 8dc:	2b 2d       	mov	r18, r11
 8de:	2e 7f       	andi	r18, 0xFE	; 254
 8e0:	a5 14       	cp	r10, r5
 8e2:	50 f4       	brcc	.+20     	; 0x8f8 <vfprintf+0x2ca>
 8e4:	b4 fe       	sbrs	r11, 4
 8e6:	0a c0       	rjmp	.+20     	; 0x8fc <vfprintf+0x2ce>
 8e8:	b2 fc       	sbrc	r11, 2
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <vfprintf+0x2ce>
 8ec:	2b 2d       	mov	r18, r11
 8ee:	2e 7e       	andi	r18, 0xEE	; 238
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <vfprintf+0x2ce>
 8f2:	7a 2c       	mov	r7, r10
 8f4:	2b 2d       	mov	r18, r11
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x2d0>
 8f8:	7a 2c       	mov	r7, r10
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <vfprintf+0x2d0>
 8fc:	75 2c       	mov	r7, r5
 8fe:	24 ff       	sbrs	r18, 4
 900:	0d c0       	rjmp	.+26     	; 0x91c <vfprintf+0x2ee>
 902:	fe 01       	movw	r30, r28
 904:	ea 0d       	add	r30, r10
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	80 33       	cpi	r24, 0x30	; 48
 90c:	11 f4       	brne	.+4      	; 0x912 <vfprintf+0x2e4>
 90e:	29 7e       	andi	r18, 0xE9	; 233
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x2f6>
 912:	22 ff       	sbrs	r18, 2
 914:	06 c0       	rjmp	.+12     	; 0x922 <vfprintf+0x2f4>
 916:	73 94       	inc	r7
 918:	73 94       	inc	r7
 91a:	04 c0       	rjmp	.+8      	; 0x924 <vfprintf+0x2f6>
 91c:	82 2f       	mov	r24, r18
 91e:	86 78       	andi	r24, 0x86	; 134
 920:	09 f0       	breq	.+2      	; 0x924 <vfprintf+0x2f6>
 922:	73 94       	inc	r7
 924:	23 fd       	sbrc	r18, 3
 926:	12 c0       	rjmp	.+36     	; 0x94c <vfprintf+0x31e>
 928:	20 ff       	sbrs	r18, 0
 92a:	06 c0       	rjmp	.+12     	; 0x938 <vfprintf+0x30a>
 92c:	5a 2c       	mov	r5, r10
 92e:	73 14       	cp	r7, r3
 930:	18 f4       	brcc	.+6      	; 0x938 <vfprintf+0x30a>
 932:	53 0c       	add	r5, r3
 934:	57 18       	sub	r5, r7
 936:	73 2c       	mov	r7, r3
 938:	73 14       	cp	r7, r3
 93a:	60 f4       	brcc	.+24     	; 0x954 <vfprintf+0x326>
 93c:	b7 01       	movw	r22, r14
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	2c 87       	std	Y+12, r18	; 0x0c
 944:	c0 d1       	rcall	.+896    	; 0xcc6 <fputc>
 946:	73 94       	inc	r7
 948:	2c 85       	ldd	r18, Y+12	; 0x0c
 94a:	f6 cf       	rjmp	.-20     	; 0x938 <vfprintf+0x30a>
 94c:	73 14       	cp	r7, r3
 94e:	10 f4       	brcc	.+4      	; 0x954 <vfprintf+0x326>
 950:	37 18       	sub	r3, r7
 952:	01 c0       	rjmp	.+2      	; 0x956 <vfprintf+0x328>
 954:	31 2c       	mov	r3, r1
 956:	24 ff       	sbrs	r18, 4
 958:	11 c0       	rjmp	.+34     	; 0x97c <vfprintf+0x34e>
 95a:	b7 01       	movw	r22, r14
 95c:	80 e3       	ldi	r24, 0x30	; 48
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	2c 87       	std	Y+12, r18	; 0x0c
 962:	b1 d1       	rcall	.+866    	; 0xcc6 <fputc>
 964:	2c 85       	ldd	r18, Y+12	; 0x0c
 966:	22 ff       	sbrs	r18, 2
 968:	16 c0       	rjmp	.+44     	; 0x996 <vfprintf+0x368>
 96a:	21 ff       	sbrs	r18, 1
 96c:	03 c0       	rjmp	.+6      	; 0x974 <vfprintf+0x346>
 96e:	88 e5       	ldi	r24, 0x58	; 88
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	02 c0       	rjmp	.+4      	; 0x978 <vfprintf+0x34a>
 974:	88 e7       	ldi	r24, 0x78	; 120
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	b7 01       	movw	r22, r14
 97a:	0c c0       	rjmp	.+24     	; 0x994 <vfprintf+0x366>
 97c:	82 2f       	mov	r24, r18
 97e:	86 78       	andi	r24, 0x86	; 134
 980:	51 f0       	breq	.+20     	; 0x996 <vfprintf+0x368>
 982:	21 fd       	sbrc	r18, 1
 984:	02 c0       	rjmp	.+4      	; 0x98a <vfprintf+0x35c>
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	01 c0       	rjmp	.+2      	; 0x98c <vfprintf+0x35e>
 98a:	8b e2       	ldi	r24, 0x2B	; 43
 98c:	27 fd       	sbrc	r18, 7
 98e:	8d e2       	ldi	r24, 0x2D	; 45
 990:	b7 01       	movw	r22, r14
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	98 d1       	rcall	.+816    	; 0xcc6 <fputc>
 996:	a5 14       	cp	r10, r5
 998:	30 f4       	brcc	.+12     	; 0x9a6 <vfprintf+0x378>
 99a:	b7 01       	movw	r22, r14
 99c:	80 e3       	ldi	r24, 0x30	; 48
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	92 d1       	rcall	.+804    	; 0xcc6 <fputc>
 9a2:	5a 94       	dec	r5
 9a4:	f8 cf       	rjmp	.-16     	; 0x996 <vfprintf+0x368>
 9a6:	aa 94       	dec	r10
 9a8:	f4 01       	movw	r30, r8
 9aa:	ea 0d       	add	r30, r10
 9ac:	f1 1d       	adc	r31, r1
 9ae:	80 81       	ld	r24, Z
 9b0:	b7 01       	movw	r22, r14
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	88 d1       	rcall	.+784    	; 0xcc6 <fputc>
 9b6:	a1 10       	cpse	r10, r1
 9b8:	f6 cf       	rjmp	.-20     	; 0x9a6 <vfprintf+0x378>
 9ba:	33 20       	and	r3, r3
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <vfprintf+0x392>
 9be:	5d ce       	rjmp	.-838    	; 0x67a <vfprintf+0x4c>
 9c0:	b7 01       	movw	r22, r14
 9c2:	80 e2       	ldi	r24, 0x20	; 32
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	7f d1       	rcall	.+766    	; 0xcc6 <fputc>
 9c8:	3a 94       	dec	r3
 9ca:	f7 cf       	rjmp	.-18     	; 0x9ba <vfprintf+0x38c>
 9cc:	f7 01       	movw	r30, r14
 9ce:	86 81       	ldd	r24, Z+6	; 0x06
 9d0:	97 81       	ldd	r25, Z+7	; 0x07
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0x3aa>
 9d4:	8f ef       	ldi	r24, 0xFF	; 255
 9d6:	9f ef       	ldi	r25, 0xFF	; 255
 9d8:	2c 96       	adiw	r28, 0x0c	; 12
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	de bf       	out	0x3e, r29	; 62
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	cd bf       	out	0x3d, r28	; 61
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	1f 91       	pop	r17
 9ea:	0f 91       	pop	r16
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	df 90       	pop	r13
 9f2:	cf 90       	pop	r12
 9f4:	bf 90       	pop	r11
 9f6:	af 90       	pop	r10
 9f8:	9f 90       	pop	r9
 9fa:	8f 90       	pop	r8
 9fc:	7f 90       	pop	r7
 9fe:	6f 90       	pop	r6
 a00:	5f 90       	pop	r5
 a02:	4f 90       	pop	r4
 a04:	3f 90       	pop	r3
 a06:	2f 90       	pop	r2
 a08:	08 95       	ret

00000a0a <calloc>:
 a0a:	0f 93       	push	r16
 a0c:	1f 93       	push	r17
 a0e:	cf 93       	push	r28
 a10:	df 93       	push	r29
 a12:	86 9f       	mul	r24, r22
 a14:	80 01       	movw	r16, r0
 a16:	87 9f       	mul	r24, r23
 a18:	10 0d       	add	r17, r0
 a1a:	96 9f       	mul	r25, r22
 a1c:	10 0d       	add	r17, r0
 a1e:	11 24       	eor	r1, r1
 a20:	c8 01       	movw	r24, r16
 a22:	0d d0       	rcall	.+26     	; 0xa3e <malloc>
 a24:	ec 01       	movw	r28, r24
 a26:	00 97       	sbiw	r24, 0x00	; 0
 a28:	21 f0       	breq	.+8      	; 0xa32 <calloc+0x28>
 a2a:	a8 01       	movw	r20, r16
 a2c:	60 e0       	ldi	r22, 0x00	; 0
 a2e:	70 e0       	ldi	r23, 0x00	; 0
 a30:	38 d1       	rcall	.+624    	; 0xca2 <memset>
 a32:	ce 01       	movw	r24, r28
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	08 95       	ret

00000a3e <malloc>:
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	82 30       	cpi	r24, 0x02	; 2
 a44:	91 05       	cpc	r25, r1
 a46:	10 f4       	brcc	.+4      	; 0xa4c <malloc+0xe>
 a48:	82 e0       	ldi	r24, 0x02	; 2
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	e0 91 e5 02 	lds	r30, 0x02E5
 a50:	f0 91 e6 02 	lds	r31, 0x02E6
 a54:	20 e0       	ldi	r18, 0x00	; 0
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	a0 e0       	ldi	r26, 0x00	; 0
 a5a:	b0 e0       	ldi	r27, 0x00	; 0
 a5c:	30 97       	sbiw	r30, 0x00	; 0
 a5e:	39 f1       	breq	.+78     	; 0xaae <malloc+0x70>
 a60:	40 81       	ld	r20, Z
 a62:	51 81       	ldd	r21, Z+1	; 0x01
 a64:	48 17       	cp	r20, r24
 a66:	59 07       	cpc	r21, r25
 a68:	b8 f0       	brcs	.+46     	; 0xa98 <malloc+0x5a>
 a6a:	48 17       	cp	r20, r24
 a6c:	59 07       	cpc	r21, r25
 a6e:	71 f4       	brne	.+28     	; 0xa8c <malloc+0x4e>
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	10 97       	sbiw	r26, 0x00	; 0
 a76:	29 f0       	breq	.+10     	; 0xa82 <malloc+0x44>
 a78:	13 96       	adiw	r26, 0x03	; 3
 a7a:	9c 93       	st	X, r25
 a7c:	8e 93       	st	-X, r24
 a7e:	12 97       	sbiw	r26, 0x02	; 2
 a80:	2c c0       	rjmp	.+88     	; 0xada <malloc+0x9c>
 a82:	90 93 e6 02 	sts	0x02E6, r25
 a86:	80 93 e5 02 	sts	0x02E5, r24
 a8a:	27 c0       	rjmp	.+78     	; 0xada <malloc+0x9c>
 a8c:	21 15       	cp	r18, r1
 a8e:	31 05       	cpc	r19, r1
 a90:	31 f0       	breq	.+12     	; 0xa9e <malloc+0x60>
 a92:	42 17       	cp	r20, r18
 a94:	53 07       	cpc	r21, r19
 a96:	18 f0       	brcs	.+6      	; 0xa9e <malloc+0x60>
 a98:	a9 01       	movw	r20, r18
 a9a:	db 01       	movw	r26, r22
 a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <malloc+0x62>
 a9e:	ef 01       	movw	r28, r30
 aa0:	9a 01       	movw	r18, r20
 aa2:	bd 01       	movw	r22, r26
 aa4:	df 01       	movw	r26, r30
 aa6:	02 80       	ldd	r0, Z+2	; 0x02
 aa8:	f3 81       	ldd	r31, Z+3	; 0x03
 aaa:	e0 2d       	mov	r30, r0
 aac:	d7 cf       	rjmp	.-82     	; 0xa5c <malloc+0x1e>
 aae:	21 15       	cp	r18, r1
 ab0:	31 05       	cpc	r19, r1
 ab2:	f9 f0       	breq	.+62     	; 0xaf2 <malloc+0xb4>
 ab4:	28 1b       	sub	r18, r24
 ab6:	39 0b       	sbc	r19, r25
 ab8:	24 30       	cpi	r18, 0x04	; 4
 aba:	31 05       	cpc	r19, r1
 abc:	80 f4       	brcc	.+32     	; 0xade <malloc+0xa0>
 abe:	8a 81       	ldd	r24, Y+2	; 0x02
 ac0:	9b 81       	ldd	r25, Y+3	; 0x03
 ac2:	61 15       	cp	r22, r1
 ac4:	71 05       	cpc	r23, r1
 ac6:	21 f0       	breq	.+8      	; 0xad0 <malloc+0x92>
 ac8:	fb 01       	movw	r30, r22
 aca:	93 83       	std	Z+3, r25	; 0x03
 acc:	82 83       	std	Z+2, r24	; 0x02
 ace:	04 c0       	rjmp	.+8      	; 0xad8 <malloc+0x9a>
 ad0:	90 93 e6 02 	sts	0x02E6, r25
 ad4:	80 93 e5 02 	sts	0x02E5, r24
 ad8:	fe 01       	movw	r30, r28
 ada:	32 96       	adiw	r30, 0x02	; 2
 adc:	44 c0       	rjmp	.+136    	; 0xb66 <malloc+0x128>
 ade:	fe 01       	movw	r30, r28
 ae0:	e2 0f       	add	r30, r18
 ae2:	f3 1f       	adc	r31, r19
 ae4:	81 93       	st	Z+, r24
 ae6:	91 93       	st	Z+, r25
 ae8:	22 50       	subi	r18, 0x02	; 2
 aea:	31 09       	sbc	r19, r1
 aec:	39 83       	std	Y+1, r19	; 0x01
 aee:	28 83       	st	Y, r18
 af0:	3a c0       	rjmp	.+116    	; 0xb66 <malloc+0x128>
 af2:	20 91 e3 02 	lds	r18, 0x02E3
 af6:	30 91 e4 02 	lds	r19, 0x02E4
 afa:	23 2b       	or	r18, r19
 afc:	41 f4       	brne	.+16     	; 0xb0e <malloc+0xd0>
 afe:	20 91 02 02 	lds	r18, 0x0202
 b02:	30 91 03 02 	lds	r19, 0x0203
 b06:	30 93 e4 02 	sts	0x02E4, r19
 b0a:	20 93 e3 02 	sts	0x02E3, r18
 b0e:	20 91 00 02 	lds	r18, 0x0200
 b12:	30 91 01 02 	lds	r19, 0x0201
 b16:	21 15       	cp	r18, r1
 b18:	31 05       	cpc	r19, r1
 b1a:	41 f4       	brne	.+16     	; 0xb2c <malloc+0xee>
 b1c:	2d b7       	in	r18, 0x3d	; 61
 b1e:	3e b7       	in	r19, 0x3e	; 62
 b20:	40 91 04 02 	lds	r20, 0x0204
 b24:	50 91 05 02 	lds	r21, 0x0205
 b28:	24 1b       	sub	r18, r20
 b2a:	35 0b       	sbc	r19, r21
 b2c:	e0 91 e3 02 	lds	r30, 0x02E3
 b30:	f0 91 e4 02 	lds	r31, 0x02E4
 b34:	e2 17       	cp	r30, r18
 b36:	f3 07       	cpc	r31, r19
 b38:	a0 f4       	brcc	.+40     	; 0xb62 <malloc+0x124>
 b3a:	2e 1b       	sub	r18, r30
 b3c:	3f 0b       	sbc	r19, r31
 b3e:	28 17       	cp	r18, r24
 b40:	39 07       	cpc	r19, r25
 b42:	78 f0       	brcs	.+30     	; 0xb62 <malloc+0x124>
 b44:	ac 01       	movw	r20, r24
 b46:	4e 5f       	subi	r20, 0xFE	; 254
 b48:	5f 4f       	sbci	r21, 0xFF	; 255
 b4a:	24 17       	cp	r18, r20
 b4c:	35 07       	cpc	r19, r21
 b4e:	48 f0       	brcs	.+18     	; 0xb62 <malloc+0x124>
 b50:	4e 0f       	add	r20, r30
 b52:	5f 1f       	adc	r21, r31
 b54:	50 93 e4 02 	sts	0x02E4, r21
 b58:	40 93 e3 02 	sts	0x02E3, r20
 b5c:	81 93       	st	Z+, r24
 b5e:	91 93       	st	Z+, r25
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <malloc+0x128>
 b62:	e0 e0       	ldi	r30, 0x00	; 0
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	cf 01       	movw	r24, r30
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	08 95       	ret

00000b6e <free>:
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	00 97       	sbiw	r24, 0x00	; 0
 b74:	09 f4       	brne	.+2      	; 0xb78 <free+0xa>
 b76:	87 c0       	rjmp	.+270    	; 0xc86 <free+0x118>
 b78:	fc 01       	movw	r30, r24
 b7a:	32 97       	sbiw	r30, 0x02	; 2
 b7c:	13 82       	std	Z+3, r1	; 0x03
 b7e:	12 82       	std	Z+2, r1	; 0x02
 b80:	c0 91 e5 02 	lds	r28, 0x02E5
 b84:	d0 91 e6 02 	lds	r29, 0x02E6
 b88:	20 97       	sbiw	r28, 0x00	; 0
 b8a:	81 f4       	brne	.+32     	; 0xbac <free+0x3e>
 b8c:	20 81       	ld	r18, Z
 b8e:	31 81       	ldd	r19, Z+1	; 0x01
 b90:	28 0f       	add	r18, r24
 b92:	39 1f       	adc	r19, r25
 b94:	80 91 e3 02 	lds	r24, 0x02E3
 b98:	90 91 e4 02 	lds	r25, 0x02E4
 b9c:	82 17       	cp	r24, r18
 b9e:	93 07       	cpc	r25, r19
 ba0:	79 f5       	brne	.+94     	; 0xc00 <free+0x92>
 ba2:	f0 93 e4 02 	sts	0x02E4, r31
 ba6:	e0 93 e3 02 	sts	0x02E3, r30
 baa:	6d c0       	rjmp	.+218    	; 0xc86 <free+0x118>
 bac:	de 01       	movw	r26, r28
 bae:	20 e0       	ldi	r18, 0x00	; 0
 bb0:	30 e0       	ldi	r19, 0x00	; 0
 bb2:	ae 17       	cp	r26, r30
 bb4:	bf 07       	cpc	r27, r31
 bb6:	50 f4       	brcc	.+20     	; 0xbcc <free+0x5e>
 bb8:	12 96       	adiw	r26, 0x02	; 2
 bba:	4d 91       	ld	r20, X+
 bbc:	5c 91       	ld	r21, X
 bbe:	13 97       	sbiw	r26, 0x03	; 3
 bc0:	9d 01       	movw	r18, r26
 bc2:	41 15       	cp	r20, r1
 bc4:	51 05       	cpc	r21, r1
 bc6:	09 f1       	breq	.+66     	; 0xc0a <free+0x9c>
 bc8:	da 01       	movw	r26, r20
 bca:	f3 cf       	rjmp	.-26     	; 0xbb2 <free+0x44>
 bcc:	b3 83       	std	Z+3, r27	; 0x03
 bce:	a2 83       	std	Z+2, r26	; 0x02
 bd0:	40 81       	ld	r20, Z
 bd2:	51 81       	ldd	r21, Z+1	; 0x01
 bd4:	84 0f       	add	r24, r20
 bd6:	95 1f       	adc	r25, r21
 bd8:	8a 17       	cp	r24, r26
 bda:	9b 07       	cpc	r25, r27
 bdc:	71 f4       	brne	.+28     	; 0xbfa <free+0x8c>
 bde:	8d 91       	ld	r24, X+
 be0:	9c 91       	ld	r25, X
 be2:	11 97       	sbiw	r26, 0x01	; 1
 be4:	84 0f       	add	r24, r20
 be6:	95 1f       	adc	r25, r21
 be8:	02 96       	adiw	r24, 0x02	; 2
 bea:	91 83       	std	Z+1, r25	; 0x01
 bec:	80 83       	st	Z, r24
 bee:	12 96       	adiw	r26, 0x02	; 2
 bf0:	8d 91       	ld	r24, X+
 bf2:	9c 91       	ld	r25, X
 bf4:	13 97       	sbiw	r26, 0x03	; 3
 bf6:	93 83       	std	Z+3, r25	; 0x03
 bf8:	82 83       	std	Z+2, r24	; 0x02
 bfa:	21 15       	cp	r18, r1
 bfc:	31 05       	cpc	r19, r1
 bfe:	29 f4       	brne	.+10     	; 0xc0a <free+0x9c>
 c00:	f0 93 e6 02 	sts	0x02E6, r31
 c04:	e0 93 e5 02 	sts	0x02E5, r30
 c08:	3e c0       	rjmp	.+124    	; 0xc86 <free+0x118>
 c0a:	d9 01       	movw	r26, r18
 c0c:	13 96       	adiw	r26, 0x03	; 3
 c0e:	fc 93       	st	X, r31
 c10:	ee 93       	st	-X, r30
 c12:	12 97       	sbiw	r26, 0x02	; 2
 c14:	4d 91       	ld	r20, X+
 c16:	5d 91       	ld	r21, X+
 c18:	a4 0f       	add	r26, r20
 c1a:	b5 1f       	adc	r27, r21
 c1c:	ea 17       	cp	r30, r26
 c1e:	fb 07       	cpc	r31, r27
 c20:	79 f4       	brne	.+30     	; 0xc40 <free+0xd2>
 c22:	80 81       	ld	r24, Z
 c24:	91 81       	ldd	r25, Z+1	; 0x01
 c26:	84 0f       	add	r24, r20
 c28:	95 1f       	adc	r25, r21
 c2a:	02 96       	adiw	r24, 0x02	; 2
 c2c:	d9 01       	movw	r26, r18
 c2e:	11 96       	adiw	r26, 0x01	; 1
 c30:	9c 93       	st	X, r25
 c32:	8e 93       	st	-X, r24
 c34:	82 81       	ldd	r24, Z+2	; 0x02
 c36:	93 81       	ldd	r25, Z+3	; 0x03
 c38:	13 96       	adiw	r26, 0x03	; 3
 c3a:	9c 93       	st	X, r25
 c3c:	8e 93       	st	-X, r24
 c3e:	12 97       	sbiw	r26, 0x02	; 2
 c40:	e0 e0       	ldi	r30, 0x00	; 0
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	8a 81       	ldd	r24, Y+2	; 0x02
 c46:	9b 81       	ldd	r25, Y+3	; 0x03
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	19 f0       	breq	.+6      	; 0xc52 <free+0xe4>
 c4c:	fe 01       	movw	r30, r28
 c4e:	ec 01       	movw	r28, r24
 c50:	f9 cf       	rjmp	.-14     	; 0xc44 <free+0xd6>
 c52:	ce 01       	movw	r24, r28
 c54:	02 96       	adiw	r24, 0x02	; 2
 c56:	28 81       	ld	r18, Y
 c58:	39 81       	ldd	r19, Y+1	; 0x01
 c5a:	82 0f       	add	r24, r18
 c5c:	93 1f       	adc	r25, r19
 c5e:	20 91 e3 02 	lds	r18, 0x02E3
 c62:	30 91 e4 02 	lds	r19, 0x02E4
 c66:	28 17       	cp	r18, r24
 c68:	39 07       	cpc	r19, r25
 c6a:	69 f4       	brne	.+26     	; 0xc86 <free+0x118>
 c6c:	30 97       	sbiw	r30, 0x00	; 0
 c6e:	29 f4       	brne	.+10     	; 0xc7a <free+0x10c>
 c70:	10 92 e6 02 	sts	0x02E6, r1
 c74:	10 92 e5 02 	sts	0x02E5, r1
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <free+0x110>
 c7a:	13 82       	std	Z+3, r1	; 0x03
 c7c:	12 82       	std	Z+2, r1	; 0x02
 c7e:	d0 93 e4 02 	sts	0x02E4, r29
 c82:	c0 93 e3 02 	sts	0x02E3, r28
 c86:	df 91       	pop	r29
 c88:	cf 91       	pop	r28
 c8a:	08 95       	ret

00000c8c <strnlen_P>:
 c8c:	fc 01       	movw	r30, r24
 c8e:	05 90       	lpm	r0, Z+
 c90:	61 50       	subi	r22, 0x01	; 1
 c92:	70 40       	sbci	r23, 0x00	; 0
 c94:	01 10       	cpse	r0, r1
 c96:	d8 f7       	brcc	.-10     	; 0xc8e <strnlen_P+0x2>
 c98:	80 95       	com	r24
 c9a:	90 95       	com	r25
 c9c:	8e 0f       	add	r24, r30
 c9e:	9f 1f       	adc	r25, r31
 ca0:	08 95       	ret

00000ca2 <memset>:
 ca2:	dc 01       	movw	r26, r24
 ca4:	01 c0       	rjmp	.+2      	; 0xca8 <memset+0x6>
 ca6:	6d 93       	st	X+, r22
 ca8:	41 50       	subi	r20, 0x01	; 1
 caa:	50 40       	sbci	r21, 0x00	; 0
 cac:	e0 f7       	brcc	.-8      	; 0xca6 <memset+0x4>
 cae:	08 95       	ret

00000cb0 <strnlen>:
 cb0:	fc 01       	movw	r30, r24
 cb2:	61 50       	subi	r22, 0x01	; 1
 cb4:	70 40       	sbci	r23, 0x00	; 0
 cb6:	01 90       	ld	r0, Z+
 cb8:	01 10       	cpse	r0, r1
 cba:	d8 f7       	brcc	.-10     	; 0xcb2 <strnlen+0x2>
 cbc:	80 95       	com	r24
 cbe:	90 95       	com	r25
 cc0:	8e 0f       	add	r24, r30
 cc2:	9f 1f       	adc	r25, r31
 cc4:	08 95       	ret

00000cc6 <fputc>:
 cc6:	0f 93       	push	r16
 cc8:	1f 93       	push	r17
 cca:	cf 93       	push	r28
 ccc:	df 93       	push	r29
 cce:	18 2f       	mov	r17, r24
 cd0:	09 2f       	mov	r16, r25
 cd2:	eb 01       	movw	r28, r22
 cd4:	8b 81       	ldd	r24, Y+3	; 0x03
 cd6:	81 fd       	sbrc	r24, 1
 cd8:	03 c0       	rjmp	.+6      	; 0xce0 <fputc+0x1a>
 cda:	8f ef       	ldi	r24, 0xFF	; 255
 cdc:	9f ef       	ldi	r25, 0xFF	; 255
 cde:	20 c0       	rjmp	.+64     	; 0xd20 <fputc+0x5a>
 ce0:	82 ff       	sbrs	r24, 2
 ce2:	10 c0       	rjmp	.+32     	; 0xd04 <fputc+0x3e>
 ce4:	4e 81       	ldd	r20, Y+6	; 0x06
 ce6:	5f 81       	ldd	r21, Y+7	; 0x07
 ce8:	2c 81       	ldd	r18, Y+4	; 0x04
 cea:	3d 81       	ldd	r19, Y+5	; 0x05
 cec:	42 17       	cp	r20, r18
 cee:	53 07       	cpc	r21, r19
 cf0:	7c f4       	brge	.+30     	; 0xd10 <fputc+0x4a>
 cf2:	e8 81       	ld	r30, Y
 cf4:	f9 81       	ldd	r31, Y+1	; 0x01
 cf6:	9f 01       	movw	r18, r30
 cf8:	2f 5f       	subi	r18, 0xFF	; 255
 cfa:	3f 4f       	sbci	r19, 0xFF	; 255
 cfc:	39 83       	std	Y+1, r19	; 0x01
 cfe:	28 83       	st	Y, r18
 d00:	10 83       	st	Z, r17
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <fputc+0x4a>
 d04:	e8 85       	ldd	r30, Y+8	; 0x08
 d06:	f9 85       	ldd	r31, Y+9	; 0x09
 d08:	81 2f       	mov	r24, r17
 d0a:	19 95       	eicall
 d0c:	89 2b       	or	r24, r25
 d0e:	29 f7       	brne	.-54     	; 0xcda <fputc+0x14>
 d10:	2e 81       	ldd	r18, Y+6	; 0x06
 d12:	3f 81       	ldd	r19, Y+7	; 0x07
 d14:	2f 5f       	subi	r18, 0xFF	; 255
 d16:	3f 4f       	sbci	r19, 0xFF	; 255
 d18:	3f 83       	std	Y+7, r19	; 0x07
 d1a:	2e 83       	std	Y+6, r18	; 0x06
 d1c:	81 2f       	mov	r24, r17
 d1e:	90 2f       	mov	r25, r16
 d20:	df 91       	pop	r29
 d22:	cf 91       	pop	r28
 d24:	1f 91       	pop	r17
 d26:	0f 91       	pop	r16
 d28:	08 95       	ret

00000d2a <__ultoa_invert>:
 d2a:	fa 01       	movw	r30, r20
 d2c:	aa 27       	eor	r26, r26
 d2e:	28 30       	cpi	r18, 0x08	; 8
 d30:	51 f1       	breq	.+84     	; 0xd86 <__ultoa_invert+0x5c>
 d32:	20 31       	cpi	r18, 0x10	; 16
 d34:	81 f1       	breq	.+96     	; 0xd96 <__ultoa_invert+0x6c>
 d36:	e8 94       	clt
 d38:	6f 93       	push	r22
 d3a:	6e 7f       	andi	r22, 0xFE	; 254
 d3c:	6e 5f       	subi	r22, 0xFE	; 254
 d3e:	7f 4f       	sbci	r23, 0xFF	; 255
 d40:	8f 4f       	sbci	r24, 0xFF	; 255
 d42:	9f 4f       	sbci	r25, 0xFF	; 255
 d44:	af 4f       	sbci	r26, 0xFF	; 255
 d46:	b1 e0       	ldi	r27, 0x01	; 1
 d48:	3e d0       	rcall	.+124    	; 0xdc6 <__ultoa_invert+0x9c>
 d4a:	b4 e0       	ldi	r27, 0x04	; 4
 d4c:	3c d0       	rcall	.+120    	; 0xdc6 <__ultoa_invert+0x9c>
 d4e:	67 0f       	add	r22, r23
 d50:	78 1f       	adc	r23, r24
 d52:	89 1f       	adc	r24, r25
 d54:	9a 1f       	adc	r25, r26
 d56:	a1 1d       	adc	r26, r1
 d58:	68 0f       	add	r22, r24
 d5a:	79 1f       	adc	r23, r25
 d5c:	8a 1f       	adc	r24, r26
 d5e:	91 1d       	adc	r25, r1
 d60:	a1 1d       	adc	r26, r1
 d62:	6a 0f       	add	r22, r26
 d64:	71 1d       	adc	r23, r1
 d66:	81 1d       	adc	r24, r1
 d68:	91 1d       	adc	r25, r1
 d6a:	a1 1d       	adc	r26, r1
 d6c:	20 d0       	rcall	.+64     	; 0xdae <__ultoa_invert+0x84>
 d6e:	09 f4       	brne	.+2      	; 0xd72 <__ultoa_invert+0x48>
 d70:	68 94       	set
 d72:	3f 91       	pop	r19
 d74:	2a e0       	ldi	r18, 0x0A	; 10
 d76:	26 9f       	mul	r18, r22
 d78:	11 24       	eor	r1, r1
 d7a:	30 19       	sub	r19, r0
 d7c:	30 5d       	subi	r19, 0xD0	; 208
 d7e:	31 93       	st	Z+, r19
 d80:	de f6       	brtc	.-74     	; 0xd38 <__ultoa_invert+0xe>
 d82:	cf 01       	movw	r24, r30
 d84:	08 95       	ret
 d86:	46 2f       	mov	r20, r22
 d88:	47 70       	andi	r20, 0x07	; 7
 d8a:	40 5d       	subi	r20, 0xD0	; 208
 d8c:	41 93       	st	Z+, r20
 d8e:	b3 e0       	ldi	r27, 0x03	; 3
 d90:	0f d0       	rcall	.+30     	; 0xdb0 <__ultoa_invert+0x86>
 d92:	c9 f7       	brne	.-14     	; 0xd86 <__ultoa_invert+0x5c>
 d94:	f6 cf       	rjmp	.-20     	; 0xd82 <__ultoa_invert+0x58>
 d96:	46 2f       	mov	r20, r22
 d98:	4f 70       	andi	r20, 0x0F	; 15
 d9a:	40 5d       	subi	r20, 0xD0	; 208
 d9c:	4a 33       	cpi	r20, 0x3A	; 58
 d9e:	18 f0       	brcs	.+6      	; 0xda6 <__ultoa_invert+0x7c>
 da0:	49 5d       	subi	r20, 0xD9	; 217
 da2:	31 fd       	sbrc	r19, 1
 da4:	40 52       	subi	r20, 0x20	; 32
 da6:	41 93       	st	Z+, r20
 da8:	02 d0       	rcall	.+4      	; 0xdae <__ultoa_invert+0x84>
 daa:	a9 f7       	brne	.-22     	; 0xd96 <__ultoa_invert+0x6c>
 dac:	ea cf       	rjmp	.-44     	; 0xd82 <__ultoa_invert+0x58>
 dae:	b4 e0       	ldi	r27, 0x04	; 4
 db0:	a6 95       	lsr	r26
 db2:	97 95       	ror	r25
 db4:	87 95       	ror	r24
 db6:	77 95       	ror	r23
 db8:	67 95       	ror	r22
 dba:	ba 95       	dec	r27
 dbc:	c9 f7       	brne	.-14     	; 0xdb0 <__ultoa_invert+0x86>
 dbe:	00 97       	sbiw	r24, 0x00	; 0
 dc0:	61 05       	cpc	r22, r1
 dc2:	71 05       	cpc	r23, r1
 dc4:	08 95       	ret
 dc6:	9b 01       	movw	r18, r22
 dc8:	ac 01       	movw	r20, r24
 dca:	0a 2e       	mov	r0, r26
 dcc:	06 94       	lsr	r0
 dce:	57 95       	ror	r21
 dd0:	47 95       	ror	r20
 dd2:	37 95       	ror	r19
 dd4:	27 95       	ror	r18
 dd6:	ba 95       	dec	r27
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <__ultoa_invert+0xa2>
 dda:	62 0f       	add	r22, r18
 ddc:	73 1f       	adc	r23, r19
 dde:	84 1f       	adc	r24, r20
 de0:	95 1f       	adc	r25, r21
 de2:	a0 1d       	adc	r26, r0
 de4:	08 95       	ret

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>
