
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800200  00000d4a  00000dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008002e4  008002e4  00000ec2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012da  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080a  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a97  00000000  00000000  00002b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00003624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c0  00000000  00000000  00003e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000047ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	f0 c0       	rjmp	.+480    	; 0x1f6 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e4       	ldi	r30, 0x4A	; 74
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 3e       	cpi	r26, 0xE4	; 228
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a4 ee       	ldi	r26, 0xE4	; 228
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 30       	cpi	r26, 0x05	; 5
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	6e d1       	rcall	.+732    	; 0x3fc <main>
 120:	12 c6       	rjmp	.+3108   	; 0xd46 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_construct_message>:
	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(int8_t *data){//array of uint8_t as input
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,0);
 124:	90 93 e6 02 	sts	0x02E6, r25
 128:	80 93 e5 02 	sts	0x02E5, r24
 12c:	60 93 e7 02 	sts	0x02E7, r22
 130:	66 23       	and	r22, r22
 132:	41 f0       	breq	.+16     	; 0x144 <CAN_construct_message+0x20>
 134:	88 ee       	ldi	r24, 0xE8	; 232
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	fc 01       	movw	r30, r24
 13a:	11 92       	st	Z+, r1
 13c:	2e 2f       	mov	r18, r30
 13e:	28 1b       	sub	r18, r24
 140:	26 17       	cp	r18, r22
 142:	d8 f3       	brcs	.-10     	; 0x13a <CAN_construct_message+0x16>
 144:	08 95       	ret

00000146 <CAN_print>:
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	2b 97       	sbiw	r28, 0x0b	; 11
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	e9 82       	std	Y+1, r14	; 0x01
 168:	fa 82       	std	Y+2, r15	; 0x02
 16a:	c0 2e       	mov	r12, r16
 16c:	0b 83       	std	Y+3, r16	; 0x03
 16e:	1c 83       	std	Y+4, r17	; 0x04
 170:	2d 83       	std	Y+5, r18	; 0x05
 172:	3e 83       	std	Y+6, r19	; 0x06
 174:	4f 83       	std	Y+7, r20	; 0x07
 176:	58 87       	std	Y+8, r21	; 0x08
 178:	69 87       	std	Y+9, r22	; 0x09
 17a:	7a 87       	std	Y+10, r23	; 0x0a
 17c:	8b 87       	std	Y+11, r24	; 0x0b
 17e:	1f 92       	push	r1
 180:	0f 93       	push	r16
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	8f 93       	push	r24
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	8f 93       	push	r24
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	bf d1       	rcall	.+894    	; 0x512 <printf>
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	00 23       	and	r16, r16
 1a2:	d1 f0       	breq	.+52     	; 0x1d8 <CAN_print+0x92>
 1a4:	7e 01       	movw	r14, r28
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	e8 0e       	add	r14, r24
 1aa:	f1 1c       	adc	r15, r1
 1ac:	d1 2c       	mov	r13, r1
 1ae:	0a e1       	ldi	r16, 0x1A	; 26
 1b0:	12 e0       	ldi	r17, 0x02	; 2
 1b2:	f7 01       	movw	r30, r14
 1b4:	21 91       	ld	r18, Z+
 1b6:	7f 01       	movw	r14, r30
 1b8:	82 2f       	mov	r24, r18
 1ba:	99 27       	eor	r25, r25
 1bc:	87 fd       	sbrc	r24, 7
 1be:	90 95       	com	r25
 1c0:	9f 93       	push	r25
 1c2:	2f 93       	push	r18
 1c4:	1f 93       	push	r17
 1c6:	0f 93       	push	r16
 1c8:	a4 d1       	rcall	.+840    	; 0x512 <printf>
 1ca:	d3 94       	inc	r13
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	dc 10       	cpse	r13, r12
 1d6:	ed cf       	rjmp	.-38     	; 0x1b2 <CAN_print+0x6c>
 1d8:	2b 96       	adiw	r28, 0x0b	; 11
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	08 95       	ret

000001f6 <__vector_5>:
		printf("%i\t",message.data[i]);
	}
}


ISR(INT4_vect){//interrupt incoming message
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
	
	//IF there is a message in inbox 0, flag 1<<0, then if there is a message in inbox 1, flag 1<<1 this
	receive_flag = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 e4 02 	sts	0x02E4, r24
}
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <CAN_interrupt_setup>:
	
void CAN_interrupt_setup(void){
	cli();
 214:	f8 94       	cli

	// Use PE4 as external interrupt pin
	DDRE &= ~(1<<PINE4);
 216:	6c 98       	cbi	0x0d, 4	; 13
	
	// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
	EICRB &= ~(1<<ISC40);	//x0
 218:	ea e6       	ldi	r30, 0x6A	; 106
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 83       	st	Z, r24
	EICRB |= (1<<ISC41);	//1x
 222:	80 81       	ld	r24, Z
 224:	82 60       	ori	r24, 0x02	; 2
 226:	80 83       	st	Z, r24
	
	// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
	EIMSK |= (1<<INT4);
 228:	ec 9a       	sbi	0x1d, 4	; 29

	//Enable global interrupt.
	sei();
 22a:	78 94       	sei
 22c:	08 95       	ret

0000022e <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t FLAG_new_message = 0;

void CAN_initialize(void){

	MCP2515_initialize();
 22e:	db d0       	rcall	.+438    	; 0x3e6 <MCP2515_initialize>

	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 230:	4f ef       	ldi	r20, 0xFF	; 255
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	64 e6       	ldi	r22, 0x64	; 100
 236:	80 e6       	ldi	r24, 0x60	; 96
 238:	ba d0       	rcall	.+372    	; 0x3ae <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
 23a:	4f ef       	ldi	r20, 0xFF	; 255
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	64 e6       	ldi	r22, 0x64	; 100
 240:	80 e7       	ldi	r24, 0x70	; 112
 242:	b5 d0       	rcall	.+362    	; 0x3ae <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8b e2       	ldi	r24, 0x2B	; 43
 24c:	b0 d0       	rcall	.+352    	; 0x3ae <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	60 ee       	ldi	r22, 0xE0	; 224
 254:	8f e0       	ldi	r24, 0x0F	; 15
 256:	ab d0       	rcall	.+342    	; 0x3ae <MCP2515_bit_modify>
	
	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 258:	68 e0       	ldi	r22, 0x08	; 8
 25a:	88 e2       	ldi	r24, 0x28	; 40
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	62 df       	rcall	.-316    	; 0x124 <CAN_construct_message>

	CAN_interrupt_setup();
 260:	d9 df       	rcall	.-78     	; 0x214 <CAN_interrupt_setup>
	
	printf("MCP_CANSTAT: %i\n", MCP2515_read(MCP_CANSTAT));//comment out later
 262:	8e e0       	ldi	r24, 0x0E	; 14
 264:	96 d0       	rcall	.+300    	; 0x392 <MCP2515_read>
 266:	9f 93       	push	r25
 268:	8f 93       	push	r24
 26a:	8d e2       	ldi	r24, 0x2D	; 45
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	9f 93       	push	r25
 270:	8f 93       	push	r24
 272:	4f d1       	rcall	.+670    	; 0x512 <printf>
	printf("CAN initialized.\n\n");
 274:	8e e3       	ldi	r24, 0x3E	; 62
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	5d d1       	rcall	.+698    	; 0x534 <puts>
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	08 95       	ret

00000284 <CAN_reception_complete>:
	//Enable global interrupt.
	sei();
}

uint8_t CAN_reception_complete(void){
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
 284:	8c e2       	ldi	r24, 0x2C	; 44
 286:	85 d0       	rcall	.+266    	; 0x392 <MCP2515_read>
 288:	80 ff       	sbrs	r24, 0
 28a:	07 c0       	rjmp	.+14     	; 0x29a <CAN_reception_complete+0x16>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	8c e2       	ldi	r24, 0x2C	; 44
 294:	8c d0       	rcall	.+280    	; 0x3ae <MCP2515_bit_modify>
		return 0;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
	}
	else if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
 29a:	8c e2       	ldi	r24, 0x2C	; 44
 29c:	7a d0       	rcall	.+244    	; 0x392 <MCP2515_read>
 29e:	81 ff       	sbrs	r24, 1
 2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <CAN_reception_complete+0x2c>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	8c e2       	ldi	r24, 0x2C	; 44
 2aa:	81 d0       	rcall	.+258    	; 0x3ae <MCP2515_bit_modify>
		return 1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
	}
	else{
		return -1;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 2b2:	08 95       	ret

000002b4 <CAN_data_receive>:
	return MCP2515_read(adr);
}

uint8_t receive_flag = 0;

void CAN_data_receive(void) {
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
	if(receive_flag){
 2c0:	80 91 e4 02 	lds	r24, 0x02E4
 2c4:	88 23       	and	r24, r24
 2c6:	09 f4       	brne	.+2      	; 0x2ca <CAN_data_receive+0x16>
 2c8:	5d c0       	rjmp	.+186    	; 0x384 <CAN_data_receive+0xd0>
		receive_flag = 0;
 2ca:	10 92 e4 02 	sts	0x02E4, r1
		uint8_t n = CAN_reception_complete();
 2ce:	da df       	rcall	.-76     	; 0x284 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 2d0:	18 2f       	mov	r17, r24
 2d2:	12 95       	swap	r17
 2d4:	10 7f       	andi	r17, 0xF0	; 240
	printf("\nSENT MESSAGE:");
	CAN_print(CAN_send_buffer);
}

int CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 2d6:	81 e6       	ldi	r24, 0x61	; 97
 2d8:	81 0f       	add	r24, r17
 2da:	5b d0       	rcall	.+182    	; 0x392 <MCP2515_read>
 2dc:	ec 01       	movw	r28, r24
 2de:	82 e6       	ldi	r24, 0x62	; 98
 2e0:	81 0f       	add	r24, r17
 2e2:	57 d0       	rcall	.+174    	; 0x392 <MCP2515_read>
void CAN_data_receive(void) {
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	95 95       	asr	r25
 2ea:	87 95       	ror	r24
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	95 95       	asr	r25
 2f2:	87 95       	ror	r24
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	ac 01       	movw	r20, r24
 2fa:	40 7e       	andi	r20, 0xE0	; 224
 2fc:	55 27       	eor	r21, r21
 2fe:	9e 01       	movw	r18, r28
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	22 0f       	add	r18, r18
 306:	33 1f       	adc	r19, r19
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	ea 01       	movw	r28, r20
 30e:	c2 2b       	or	r28, r18
 310:	d3 2b       	or	r29, r19
 312:	d0 93 f1 02 	sts	0x02F1, r29
 316:	c0 93 f0 02 	sts	0x02F0, r28
	printf("\nSENT MESSAGE:");
	CAN_print(CAN_send_buffer);
}

int CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 31a:	85 e6       	ldi	r24, 0x65	; 101
 31c:	81 0f       	add	r24, r17
 31e:	39 d0       	rcall	.+114    	; 0x392 <MCP2515_read>
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
 320:	8f 70       	andi	r24, 0x0F	; 15
 322:	80 93 f2 02 	sts	0x02F2, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 326:	88 23       	and	r24, r24
 328:	79 f0       	breq	.+30     	; 0x348 <CAN_data_receive+0x94>
 32a:	10 e0       	ldi	r17, 0x00	; 0
 32c:	c2 ef       	ldi	r28, 0xF2	; 242
 32e:	d2 e0       	ldi	r29, 0x02	; 2
	printf("\nSENT MESSAGE:");
	CAN_print(CAN_send_buffer);
}

int CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 330:	86 e6       	ldi	r24, 0x66	; 102
 332:	81 0f       	add	r24, r17
 334:	2e d0       	rcall	.+92     	; 0x392 <MCP2515_read>
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
 336:	e1 2f       	mov	r30, r17
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	e0 51       	subi	r30, 0x10	; 16
 33c:	fd 4f       	sbci	r31, 0xFD	; 253
 33e:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 340:	1f 5f       	subi	r17, 0xFF	; 255
 342:	88 81       	ld	r24, Y
 344:	18 17       	cp	r17, r24
 346:	a0 f3       	brcs	.-24     	; 0x330 <CAN_data_receive+0x7c>
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
			}
		}
		printf("\nRECIVED MESSAGE:");
 348:	80 e5       	ldi	r24, 0x50	; 80
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	e0 d0       	rcall	.+448    	; 0x512 <printf>
		CAN_print(CAN_receive_buffer);
 352:	e0 90 f0 02 	lds	r14, 0x02F0
 356:	f0 90 f1 02 	lds	r15, 0x02F1
 35a:	00 91 f2 02 	lds	r16, 0x02F2
 35e:	10 91 f3 02 	lds	r17, 0x02F3
 362:	20 91 f4 02 	lds	r18, 0x02F4
 366:	30 91 f5 02 	lds	r19, 0x02F5
 36a:	40 91 f6 02 	lds	r20, 0x02F6
 36e:	50 91 f7 02 	lds	r21, 0x02F7
 372:	60 91 f8 02 	lds	r22, 0x02F8
 376:	70 91 f9 02 	lds	r23, 0x02F9
 37a:	80 91 fa 02 	lds	r24, 0x02FA
 37e:	e3 de       	rcall	.-570    	; 0x146 <CAN_print>
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
	}
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	08 95       	ret

00000392 <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
 396:	43 d0       	rcall	.+134    	; 0x41e <SPI_select>
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	35 d0       	rcall	.+106    	; 0x406 <SPI_send>
 39c:	8c 2f       	mov	r24, r28
 39e:	33 d0       	rcall	.+102    	; 0x406 <SPI_send>
 3a0:	37 d0       	rcall	.+110    	; 0x410 <SPI_receive>
 3a2:	c8 2f       	mov	r28, r24
 3a4:	3e d0       	rcall	.+124    	; 0x422 <SPI_deselect>
 3a6:	8c 2f       	mov	r24, r28
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	18 2f       	mov	r17, r24
 3b6:	d6 2f       	mov	r29, r22
 3b8:	c4 2f       	mov	r28, r20
	SPI_select();
 3ba:	31 d0       	rcall	.+98     	; 0x41e <SPI_select>
	SPI_send(MCP_BITMOD);
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	23 d0       	rcall	.+70     	; 0x406 <SPI_send>
	SPI_send(adr);
 3c0:	81 2f       	mov	r24, r17
 3c2:	21 d0       	rcall	.+66     	; 0x406 <SPI_send>
	SPI_send(mask);
 3c4:	8d 2f       	mov	r24, r29
 3c6:	1f d0       	rcall	.+62     	; 0x406 <SPI_send>
	SPI_send(data);
 3c8:	8c 2f       	mov	r24, r28
 3ca:	1d d0       	rcall	.+58     	; 0x406 <SPI_send>
	SPI_deselect();
 3cc:	2a d0       	rcall	.+84     	; 0x422 <SPI_deselect>
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	08 95       	ret

000003d6 <MCP2515_reset>:


void MCP2515_reset(void){
	printf("Resetting MCP2515\n");
 3d6:	82 ea       	ldi	r24, 0xA2	; 162
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	ac d0       	rcall	.+344    	; 0x534 <puts>
	SPI_select();
 3dc:	20 d0       	rcall	.+64     	; 0x41e <SPI_select>
	SPI_send(MCP_RESET);
 3de:	80 ec       	ldi	r24, 0xC0	; 192
 3e0:	12 d0       	rcall	.+36     	; 0x406 <SPI_send>
	SPI_deselect();
 3e2:	1f c0       	rjmp	.+62     	; 0x422 <SPI_deselect>
 3e4:	08 95       	ret

000003e6 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
 3e6:	1f d0       	rcall	.+62     	; 0x426 <SPI_initialize>
	MCP2515_reset();
 3e8:	f6 cf       	rjmp	.-20     	; 0x3d6 <MCP2515_reset>
 3ea:	08 95       	ret

000003ec <init>:
	return 1;
}


void init(void){
	printf("Initializing...\n");
 3ec:	84 eb       	ldi	r24, 0xB4	; 180
 3ee:	92 e0       	ldi	r25, 0x02	; 2
 3f0:	a1 d0       	rcall	.+322    	; 0x534 <puts>
	init_UART(UBRR);		
 3f2:	87 e6       	ldi	r24, 0x67	; 103
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	33 d0       	rcall	.+102    	; 0x45e <init_UART>
	CAN_initialize();
 3f8:	1a cf       	rjmp	.-460    	; 0x22e <CAN_initialize>
 3fa:	08 95       	ret

000003fc <main>:

void init(void);

int main(void)
{
	cli();
 3fc:	f8 94       	cli
	init();
 3fe:	f6 df       	rcall	.-20     	; 0x3ec <init>
	sei();
 400:	78 94       	sei
		
		if(~sendCAN){
			//printf("Waiting for message ...\n");
			//printf("Status: %x\n",MCP2515_read_status());
			//printf("Error?:%i\n",MCP2515_read(MCP_EFLG));
			CAN_data_receive();
 402:	58 df       	rcall	.-336    	; 0x2b4 <CAN_data_receive>
 404:	fe cf       	rjmp	.-4      	; 0x402 <main+0x6>

00000406 <SPI_send>:


void SPI_send(char data) {
	
	// Start the transmission
	SPDR = data;
 406:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 408:	0d b4       	in	r0, 0x2d	; 45
 40a:	07 fe       	sbrs	r0, 7
 40c:	fd cf       	rjmp	.-6      	; 0x408 <SPI_send+0x2>

}
 40e:	08 95       	ret

00000410 <SPI_receive>:


char SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	f9 df       	rcall	.-14     	; 0x406 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
 414:	0d b4       	in	r0, 0x2d	; 45
 416:	07 fe       	sbrs	r0, 7
 418:	fd cf       	rjmp	.-6      	; 0x414 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
 41a:	8e b5       	in	r24, 0x2e	; 46
}
 41c:	08 95       	ret

0000041e <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
 41e:	2f 98       	cbi	0x05, 7	; 5
 420:	08 95       	ret

00000422 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
 422:	2f 9a       	sbi	0x05, 7	; 5
 424:	08 95       	ret

00000426 <SPI_initialize>:


void SPI_initialize(void){

	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS)|(1<<PB0); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
 426:	84 b1       	in	r24, 0x04	; 4
 428:	87 68       	ori	r24, 0x87	; 135
 42a:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 42c:	8c b5       	in	r24, 0x2c	; 44
 42e:	81 65       	ori	r24, 0x51	; 81
 430:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
 432:	f7 df       	rcall	.-18     	; 0x422 <SPI_deselect>
	printf("SPI communication initialized.\n");
 434:	84 ec       	ldi	r24, 0xC4	; 196
 436:	92 e0       	ldi	r25, 0x02	; 2
 438:	7d c0       	rjmp	.+250    	; 0x534 <puts>
 43a:	08 95       	ret

0000043c <send_UART>:



void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
 43c:	e0 ec       	ldi	r30, 0xC0	; 192
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	90 81       	ld	r25, Z
 442:	95 ff       	sbrs	r25, 5
 444:	fd cf       	rjmp	.-6      	; 0x440 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
 446:	80 93 c6 00 	sts	0x00C6, r24
 44a:	08 95       	ret

0000044c <recieve_UART>:



unsigned int recieve_UART(void){
		
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */ 
 44c:	e0 ec       	ldi	r30, 0xC0	; 192
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	88 23       	and	r24, r24
 454:	ec f7       	brge	.-6      	; 0x450 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
 456:	80 91 c6 00 	lds	r24, 0x00C6
}
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	08 95       	ret

0000045e <init_UART>:


void init_UART(unsigned int ubrr){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 45e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 462:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 466:	88 e1       	ldi	r24, 0x18	; 24
 468:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	80 93 c2 00 	sts	0x00C2, r24
	

 	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
 472:	66 e2       	ldi	r22, 0x26	; 38
 474:	72 e0       	ldi	r23, 0x02	; 2
 476:	8e e1       	ldi	r24, 0x1E	; 30
 478:	92 e0       	ldi	r25, 0x02	; 2
 47a:	01 c0       	rjmp	.+2      	; 0x47e <fdevopen>
 47c:	08 95       	ret

0000047e <fdevopen>:
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	ec 01       	movw	r28, r24
 488:	8b 01       	movw	r16, r22
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	31 f4       	brne	.+12     	; 0x49a <fdevopen+0x1c>
 48e:	61 15       	cp	r22, r1
 490:	71 05       	cpc	r23, r1
 492:	19 f4       	brne	.+6      	; 0x49a <fdevopen+0x1c>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	37 c0       	rjmp	.+110    	; 0x508 <fdevopen+0x8a>
 49a:	6e e0       	ldi	r22, 0x0E	; 14
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	63 d2       	rcall	.+1222   	; 0x96a <calloc>
 4a4:	fc 01       	movw	r30, r24
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	a9 f3       	breq	.-22     	; 0x494 <fdevopen+0x16>
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	83 83       	std	Z+3, r24	; 0x03
 4ae:	01 15       	cp	r16, r1
 4b0:	11 05       	cpc	r17, r1
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <fdevopen+0x52>
 4b4:	13 87       	std	Z+11, r17	; 0x0b
 4b6:	02 87       	std	Z+10, r16	; 0x0a
 4b8:	81 e8       	ldi	r24, 0x81	; 129
 4ba:	83 83       	std	Z+3, r24	; 0x03
 4bc:	80 91 fb 02 	lds	r24, 0x02FB
 4c0:	90 91 fc 02 	lds	r25, 0x02FC
 4c4:	89 2b       	or	r24, r25
 4c6:	21 f4       	brne	.+8      	; 0x4d0 <fdevopen+0x52>
 4c8:	f0 93 fc 02 	sts	0x02FC, r31
 4cc:	e0 93 fb 02 	sts	0x02FB, r30
 4d0:	20 97       	sbiw	r28, 0x00	; 0
 4d2:	c9 f0       	breq	.+50     	; 0x506 <fdevopen+0x88>
 4d4:	d1 87       	std	Z+9, r29	; 0x09
 4d6:	c0 87       	std	Z+8, r28	; 0x08
 4d8:	83 81       	ldd	r24, Z+3	; 0x03
 4da:	82 60       	ori	r24, 0x02	; 2
 4dc:	83 83       	std	Z+3, r24	; 0x03
 4de:	80 91 fd 02 	lds	r24, 0x02FD
 4e2:	90 91 fe 02 	lds	r25, 0x02FE
 4e6:	89 2b       	or	r24, r25
 4e8:	71 f4       	brne	.+28     	; 0x506 <fdevopen+0x88>
 4ea:	f0 93 fe 02 	sts	0x02FE, r31
 4ee:	e0 93 fd 02 	sts	0x02FD, r30
 4f2:	80 91 ff 02 	lds	r24, 0x02FF
 4f6:	90 91 00 03 	lds	r25, 0x0300
 4fa:	89 2b       	or	r24, r25
 4fc:	21 f4       	brne	.+8      	; 0x506 <fdevopen+0x88>
 4fe:	f0 93 00 03 	sts	0x0300, r31
 502:	e0 93 ff 02 	sts	0x02FF, r30
 506:	cf 01       	movw	r24, r30
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	08 95       	ret

00000512 <printf>:
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	fe 01       	movw	r30, r28
 51c:	36 96       	adiw	r30, 0x06	; 6
 51e:	61 91       	ld	r22, Z+
 520:	71 91       	ld	r23, Z+
 522:	af 01       	movw	r20, r30
 524:	80 91 fd 02 	lds	r24, 0x02FD
 528:	90 91 fe 02 	lds	r25, 0x02FE
 52c:	30 d0       	rcall	.+96     	; 0x58e <vfprintf>
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <puts>:
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	e0 91 fd 02 	lds	r30, 0x02FD
 540:	f0 91 fe 02 	lds	r31, 0x02FE
 544:	23 81       	ldd	r18, Z+3	; 0x03
 546:	21 ff       	sbrs	r18, 1
 548:	1b c0       	rjmp	.+54     	; 0x580 <puts+0x4c>
 54a:	ec 01       	movw	r28, r24
 54c:	00 e0       	ldi	r16, 0x00	; 0
 54e:	10 e0       	ldi	r17, 0x00	; 0
 550:	89 91       	ld	r24, Y+
 552:	60 91 fd 02 	lds	r22, 0x02FD
 556:	70 91 fe 02 	lds	r23, 0x02FE
 55a:	db 01       	movw	r26, r22
 55c:	18 96       	adiw	r26, 0x08	; 8
 55e:	ed 91       	ld	r30, X+
 560:	fc 91       	ld	r31, X
 562:	19 97       	sbiw	r26, 0x09	; 9
 564:	88 23       	and	r24, r24
 566:	31 f0       	breq	.+12     	; 0x574 <puts+0x40>
 568:	19 95       	eicall
 56a:	89 2b       	or	r24, r25
 56c:	89 f3       	breq	.-30     	; 0x550 <puts+0x1c>
 56e:	0f ef       	ldi	r16, 0xFF	; 255
 570:	1f ef       	ldi	r17, 0xFF	; 255
 572:	ee cf       	rjmp	.-36     	; 0x550 <puts+0x1c>
 574:	8a e0       	ldi	r24, 0x0A	; 10
 576:	19 95       	eicall
 578:	89 2b       	or	r24, r25
 57a:	11 f4       	brne	.+4      	; 0x580 <puts+0x4c>
 57c:	c8 01       	movw	r24, r16
 57e:	02 c0       	rjmp	.+4      	; 0x584 <puts+0x50>
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	9f ef       	ldi	r25, 0xFF	; 255
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <vfprintf>:
 58e:	2f 92       	push	r2
 590:	3f 92       	push	r3
 592:	4f 92       	push	r4
 594:	5f 92       	push	r5
 596:	6f 92       	push	r6
 598:	7f 92       	push	r7
 59a:	8f 92       	push	r8
 59c:	9f 92       	push	r9
 59e:	af 92       	push	r10
 5a0:	bf 92       	push	r11
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	2c 97       	sbiw	r28, 0x0c	; 12
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	7c 01       	movw	r14, r24
 5c4:	6b 01       	movw	r12, r22
 5c6:	8a 01       	movw	r16, r20
 5c8:	fc 01       	movw	r30, r24
 5ca:	17 82       	std	Z+7, r1	; 0x07
 5cc:	16 82       	std	Z+6, r1	; 0x06
 5ce:	83 81       	ldd	r24, Z+3	; 0x03
 5d0:	81 ff       	sbrs	r24, 1
 5d2:	b0 c1       	rjmp	.+864    	; 0x934 <vfprintf+0x3a6>
 5d4:	ce 01       	movw	r24, r28
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	4c 01       	movw	r8, r24
 5da:	f7 01       	movw	r30, r14
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	f6 01       	movw	r30, r12
 5e0:	93 fd       	sbrc	r25, 3
 5e2:	85 91       	lpm	r24, Z+
 5e4:	93 ff       	sbrs	r25, 3
 5e6:	81 91       	ld	r24, Z+
 5e8:	6f 01       	movw	r12, r30
 5ea:	88 23       	and	r24, r24
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <vfprintf+0x62>
 5ee:	9e c1       	rjmp	.+828    	; 0x92c <vfprintf+0x39e>
 5f0:	85 32       	cpi	r24, 0x25	; 37
 5f2:	39 f4       	brne	.+14     	; 0x602 <vfprintf+0x74>
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	6f 01       	movw	r12, r30
 5fe:	85 32       	cpi	r24, 0x25	; 37
 600:	21 f4       	brne	.+8      	; 0x60a <vfprintf+0x7c>
 602:	b7 01       	movw	r22, r14
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0f d3       	rcall	.+1566   	; 0xc26 <fputc>
 608:	e8 cf       	rjmp	.-48     	; 0x5da <vfprintf+0x4c>
 60a:	51 2c       	mov	r5, r1
 60c:	31 2c       	mov	r3, r1
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	20 32       	cpi	r18, 0x20	; 32
 612:	a0 f4       	brcc	.+40     	; 0x63c <vfprintf+0xae>
 614:	8b 32       	cpi	r24, 0x2B	; 43
 616:	69 f0       	breq	.+26     	; 0x632 <vfprintf+0xa4>
 618:	30 f4       	brcc	.+12     	; 0x626 <vfprintf+0x98>
 61a:	80 32       	cpi	r24, 0x20	; 32
 61c:	59 f0       	breq	.+22     	; 0x634 <vfprintf+0xa6>
 61e:	83 32       	cpi	r24, 0x23	; 35
 620:	69 f4       	brne	.+26     	; 0x63c <vfprintf+0xae>
 622:	20 61       	ori	r18, 0x10	; 16
 624:	2c c0       	rjmp	.+88     	; 0x67e <vfprintf+0xf0>
 626:	8d 32       	cpi	r24, 0x2D	; 45
 628:	39 f0       	breq	.+14     	; 0x638 <vfprintf+0xaa>
 62a:	80 33       	cpi	r24, 0x30	; 48
 62c:	39 f4       	brne	.+14     	; 0x63c <vfprintf+0xae>
 62e:	21 60       	ori	r18, 0x01	; 1
 630:	26 c0       	rjmp	.+76     	; 0x67e <vfprintf+0xf0>
 632:	22 60       	ori	r18, 0x02	; 2
 634:	24 60       	ori	r18, 0x04	; 4
 636:	23 c0       	rjmp	.+70     	; 0x67e <vfprintf+0xf0>
 638:	28 60       	ori	r18, 0x08	; 8
 63a:	21 c0       	rjmp	.+66     	; 0x67e <vfprintf+0xf0>
 63c:	27 fd       	sbrc	r18, 7
 63e:	27 c0       	rjmp	.+78     	; 0x68e <vfprintf+0x100>
 640:	30 ed       	ldi	r19, 0xD0	; 208
 642:	38 0f       	add	r19, r24
 644:	3a 30       	cpi	r19, 0x0A	; 10
 646:	78 f4       	brcc	.+30     	; 0x666 <vfprintf+0xd8>
 648:	26 ff       	sbrs	r18, 6
 64a:	06 c0       	rjmp	.+12     	; 0x658 <vfprintf+0xca>
 64c:	fa e0       	ldi	r31, 0x0A	; 10
 64e:	5f 9e       	mul	r5, r31
 650:	30 0d       	add	r19, r0
 652:	11 24       	eor	r1, r1
 654:	53 2e       	mov	r5, r19
 656:	13 c0       	rjmp	.+38     	; 0x67e <vfprintf+0xf0>
 658:	8a e0       	ldi	r24, 0x0A	; 10
 65a:	38 9e       	mul	r3, r24
 65c:	30 0d       	add	r19, r0
 65e:	11 24       	eor	r1, r1
 660:	33 2e       	mov	r3, r19
 662:	20 62       	ori	r18, 0x20	; 32
 664:	0c c0       	rjmp	.+24     	; 0x67e <vfprintf+0xf0>
 666:	8e 32       	cpi	r24, 0x2E	; 46
 668:	21 f4       	brne	.+8      	; 0x672 <vfprintf+0xe4>
 66a:	26 fd       	sbrc	r18, 6
 66c:	5f c1       	rjmp	.+702    	; 0x92c <vfprintf+0x39e>
 66e:	20 64       	ori	r18, 0x40	; 64
 670:	06 c0       	rjmp	.+12     	; 0x67e <vfprintf+0xf0>
 672:	8c 36       	cpi	r24, 0x6C	; 108
 674:	11 f4       	brne	.+4      	; 0x67a <vfprintf+0xec>
 676:	20 68       	ori	r18, 0x80	; 128
 678:	02 c0       	rjmp	.+4      	; 0x67e <vfprintf+0xf0>
 67a:	88 36       	cpi	r24, 0x68	; 104
 67c:	41 f4       	brne	.+16     	; 0x68e <vfprintf+0x100>
 67e:	f6 01       	movw	r30, r12
 680:	93 fd       	sbrc	r25, 3
 682:	85 91       	lpm	r24, Z+
 684:	93 ff       	sbrs	r25, 3
 686:	81 91       	ld	r24, Z+
 688:	6f 01       	movw	r12, r30
 68a:	81 11       	cpse	r24, r1
 68c:	c1 cf       	rjmp	.-126    	; 0x610 <vfprintf+0x82>
 68e:	98 2f       	mov	r25, r24
 690:	9f 7d       	andi	r25, 0xDF	; 223
 692:	95 54       	subi	r25, 0x45	; 69
 694:	93 30       	cpi	r25, 0x03	; 3
 696:	28 f4       	brcc	.+10     	; 0x6a2 <vfprintf+0x114>
 698:	0c 5f       	subi	r16, 0xFC	; 252
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	ff e3       	ldi	r31, 0x3F	; 63
 69e:	f9 83       	std	Y+1, r31	; 0x01
 6a0:	0d c0       	rjmp	.+26     	; 0x6bc <vfprintf+0x12e>
 6a2:	83 36       	cpi	r24, 0x63	; 99
 6a4:	31 f0       	breq	.+12     	; 0x6b2 <vfprintf+0x124>
 6a6:	83 37       	cpi	r24, 0x73	; 115
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <vfprintf+0x138>
 6aa:	83 35       	cpi	r24, 0x53	; 83
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <vfprintf+0x122>
 6ae:	57 c0       	rjmp	.+174    	; 0x75e <vfprintf+0x1d0>
 6b0:	21 c0       	rjmp	.+66     	; 0x6f4 <vfprintf+0x166>
 6b2:	f8 01       	movw	r30, r16
 6b4:	80 81       	ld	r24, Z
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	0e 5f       	subi	r16, 0xFE	; 254
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	44 24       	eor	r4, r4
 6be:	43 94       	inc	r4
 6c0:	51 2c       	mov	r5, r1
 6c2:	54 01       	movw	r10, r8
 6c4:	14 c0       	rjmp	.+40     	; 0x6ee <vfprintf+0x160>
 6c6:	38 01       	movw	r6, r16
 6c8:	f2 e0       	ldi	r31, 0x02	; 2
 6ca:	6f 0e       	add	r6, r31
 6cc:	71 1c       	adc	r7, r1
 6ce:	f8 01       	movw	r30, r16
 6d0:	a0 80       	ld	r10, Z
 6d2:	b1 80       	ldd	r11, Z+1	; 0x01
 6d4:	26 ff       	sbrs	r18, 6
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <vfprintf+0x150>
 6d8:	65 2d       	mov	r22, r5
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0x154>
 6de:	6f ef       	ldi	r22, 0xFF	; 255
 6e0:	7f ef       	ldi	r23, 0xFF	; 255
 6e2:	c5 01       	movw	r24, r10
 6e4:	2c 87       	std	Y+12, r18	; 0x0c
 6e6:	94 d2       	rcall	.+1320   	; 0xc10 <strnlen>
 6e8:	2c 01       	movw	r4, r24
 6ea:	83 01       	movw	r16, r6
 6ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 6ee:	2f 77       	andi	r18, 0x7F	; 127
 6f0:	22 2e       	mov	r2, r18
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <vfprintf+0x192>
 6f4:	38 01       	movw	r6, r16
 6f6:	f2 e0       	ldi	r31, 0x02	; 2
 6f8:	6f 0e       	add	r6, r31
 6fa:	71 1c       	adc	r7, r1
 6fc:	f8 01       	movw	r30, r16
 6fe:	a0 80       	ld	r10, Z
 700:	b1 80       	ldd	r11, Z+1	; 0x01
 702:	26 ff       	sbrs	r18, 6
 704:	03 c0       	rjmp	.+6      	; 0x70c <vfprintf+0x17e>
 706:	65 2d       	mov	r22, r5
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <vfprintf+0x182>
 70c:	6f ef       	ldi	r22, 0xFF	; 255
 70e:	7f ef       	ldi	r23, 0xFF	; 255
 710:	c5 01       	movw	r24, r10
 712:	2c 87       	std	Y+12, r18	; 0x0c
 714:	6b d2       	rcall	.+1238   	; 0xbec <strnlen_P>
 716:	2c 01       	movw	r4, r24
 718:	2c 85       	ldd	r18, Y+12	; 0x0c
 71a:	20 68       	ori	r18, 0x80	; 128
 71c:	22 2e       	mov	r2, r18
 71e:	83 01       	movw	r16, r6
 720:	23 fc       	sbrc	r2, 3
 722:	19 c0       	rjmp	.+50     	; 0x756 <vfprintf+0x1c8>
 724:	83 2d       	mov	r24, r3
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	48 16       	cp	r4, r24
 72a:	59 06       	cpc	r5, r25
 72c:	a0 f4       	brcc	.+40     	; 0x756 <vfprintf+0x1c8>
 72e:	b7 01       	movw	r22, r14
 730:	80 e2       	ldi	r24, 0x20	; 32
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	78 d2       	rcall	.+1264   	; 0xc26 <fputc>
 736:	3a 94       	dec	r3
 738:	f5 cf       	rjmp	.-22     	; 0x724 <vfprintf+0x196>
 73a:	f5 01       	movw	r30, r10
 73c:	27 fc       	sbrc	r2, 7
 73e:	85 91       	lpm	r24, Z+
 740:	27 fe       	sbrs	r2, 7
 742:	81 91       	ld	r24, Z+
 744:	5f 01       	movw	r10, r30
 746:	b7 01       	movw	r22, r14
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	6d d2       	rcall	.+1242   	; 0xc26 <fputc>
 74c:	31 10       	cpse	r3, r1
 74e:	3a 94       	dec	r3
 750:	f1 e0       	ldi	r31, 0x01	; 1
 752:	4f 1a       	sub	r4, r31
 754:	51 08       	sbc	r5, r1
 756:	41 14       	cp	r4, r1
 758:	51 04       	cpc	r5, r1
 75a:	79 f7       	brne	.-34     	; 0x73a <vfprintf+0x1ac>
 75c:	de c0       	rjmp	.+444    	; 0x91a <vfprintf+0x38c>
 75e:	84 36       	cpi	r24, 0x64	; 100
 760:	11 f0       	breq	.+4      	; 0x766 <vfprintf+0x1d8>
 762:	89 36       	cpi	r24, 0x69	; 105
 764:	31 f5       	brne	.+76     	; 0x7b2 <vfprintf+0x224>
 766:	f8 01       	movw	r30, r16
 768:	27 ff       	sbrs	r18, 7
 76a:	07 c0       	rjmp	.+14     	; 0x77a <vfprintf+0x1ec>
 76c:	60 81       	ld	r22, Z
 76e:	71 81       	ldd	r23, Z+1	; 0x01
 770:	82 81       	ldd	r24, Z+2	; 0x02
 772:	93 81       	ldd	r25, Z+3	; 0x03
 774:	0c 5f       	subi	r16, 0xFC	; 252
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	08 c0       	rjmp	.+16     	; 0x78a <vfprintf+0x1fc>
 77a:	60 81       	ld	r22, Z
 77c:	71 81       	ldd	r23, Z+1	; 0x01
 77e:	88 27       	eor	r24, r24
 780:	77 fd       	sbrc	r23, 7
 782:	80 95       	com	r24
 784:	98 2f       	mov	r25, r24
 786:	0e 5f       	subi	r16, 0xFE	; 254
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	2f 76       	andi	r18, 0x6F	; 111
 78c:	b2 2e       	mov	r11, r18
 78e:	97 ff       	sbrs	r25, 7
 790:	09 c0       	rjmp	.+18     	; 0x7a4 <vfprintf+0x216>
 792:	90 95       	com	r25
 794:	80 95       	com	r24
 796:	70 95       	com	r23
 798:	61 95       	neg	r22
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	8f 4f       	sbci	r24, 0xFF	; 255
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	20 68       	ori	r18, 0x80	; 128
 7a2:	b2 2e       	mov	r11, r18
 7a4:	2a e0       	ldi	r18, 0x0A	; 10
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	a4 01       	movw	r20, r8
 7aa:	6f d2       	rcall	.+1246   	; 0xc8a <__ultoa_invert>
 7ac:	a8 2e       	mov	r10, r24
 7ae:	a8 18       	sub	r10, r8
 7b0:	43 c0       	rjmp	.+134    	; 0x838 <vfprintf+0x2aa>
 7b2:	85 37       	cpi	r24, 0x75	; 117
 7b4:	29 f4       	brne	.+10     	; 0x7c0 <vfprintf+0x232>
 7b6:	2f 7e       	andi	r18, 0xEF	; 239
 7b8:	b2 2e       	mov	r11, r18
 7ba:	2a e0       	ldi	r18, 0x0A	; 10
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	25 c0       	rjmp	.+74     	; 0x80a <vfprintf+0x27c>
 7c0:	f2 2f       	mov	r31, r18
 7c2:	f9 7f       	andi	r31, 0xF9	; 249
 7c4:	bf 2e       	mov	r11, r31
 7c6:	8f 36       	cpi	r24, 0x6F	; 111
 7c8:	c1 f0       	breq	.+48     	; 0x7fa <vfprintf+0x26c>
 7ca:	18 f4       	brcc	.+6      	; 0x7d2 <vfprintf+0x244>
 7cc:	88 35       	cpi	r24, 0x58	; 88
 7ce:	79 f0       	breq	.+30     	; 0x7ee <vfprintf+0x260>
 7d0:	ad c0       	rjmp	.+346    	; 0x92c <vfprintf+0x39e>
 7d2:	80 37       	cpi	r24, 0x70	; 112
 7d4:	19 f0       	breq	.+6      	; 0x7dc <vfprintf+0x24e>
 7d6:	88 37       	cpi	r24, 0x78	; 120
 7d8:	21 f0       	breq	.+8      	; 0x7e2 <vfprintf+0x254>
 7da:	a8 c0       	rjmp	.+336    	; 0x92c <vfprintf+0x39e>
 7dc:	2f 2f       	mov	r18, r31
 7de:	20 61       	ori	r18, 0x10	; 16
 7e0:	b2 2e       	mov	r11, r18
 7e2:	b4 fe       	sbrs	r11, 4
 7e4:	0d c0       	rjmp	.+26     	; 0x800 <vfprintf+0x272>
 7e6:	8b 2d       	mov	r24, r11
 7e8:	84 60       	ori	r24, 0x04	; 4
 7ea:	b8 2e       	mov	r11, r24
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <vfprintf+0x272>
 7ee:	24 ff       	sbrs	r18, 4
 7f0:	0a c0       	rjmp	.+20     	; 0x806 <vfprintf+0x278>
 7f2:	9f 2f       	mov	r25, r31
 7f4:	96 60       	ori	r25, 0x06	; 6
 7f6:	b9 2e       	mov	r11, r25
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <vfprintf+0x278>
 7fa:	28 e0       	ldi	r18, 0x08	; 8
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <vfprintf+0x27c>
 800:	20 e1       	ldi	r18, 0x10	; 16
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <vfprintf+0x27c>
 806:	20 e1       	ldi	r18, 0x10	; 16
 808:	32 e0       	ldi	r19, 0x02	; 2
 80a:	f8 01       	movw	r30, r16
 80c:	b7 fe       	sbrs	r11, 7
 80e:	07 c0       	rjmp	.+14     	; 0x81e <vfprintf+0x290>
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	0c 5f       	subi	r16, 0xFC	; 252
 81a:	1f 4f       	sbci	r17, 0xFF	; 255
 81c:	06 c0       	rjmp	.+12     	; 0x82a <vfprintf+0x29c>
 81e:	60 81       	ld	r22, Z
 820:	71 81       	ldd	r23, Z+1	; 0x01
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	a4 01       	movw	r20, r8
 82c:	2e d2       	rcall	.+1116   	; 0xc8a <__ultoa_invert>
 82e:	a8 2e       	mov	r10, r24
 830:	a8 18       	sub	r10, r8
 832:	fb 2d       	mov	r31, r11
 834:	ff 77       	andi	r31, 0x7F	; 127
 836:	bf 2e       	mov	r11, r31
 838:	b6 fe       	sbrs	r11, 6
 83a:	0b c0       	rjmp	.+22     	; 0x852 <vfprintf+0x2c4>
 83c:	2b 2d       	mov	r18, r11
 83e:	2e 7f       	andi	r18, 0xFE	; 254
 840:	a5 14       	cp	r10, r5
 842:	50 f4       	brcc	.+20     	; 0x858 <vfprintf+0x2ca>
 844:	b4 fe       	sbrs	r11, 4
 846:	0a c0       	rjmp	.+20     	; 0x85c <vfprintf+0x2ce>
 848:	b2 fc       	sbrc	r11, 2
 84a:	08 c0       	rjmp	.+16     	; 0x85c <vfprintf+0x2ce>
 84c:	2b 2d       	mov	r18, r11
 84e:	2e 7e       	andi	r18, 0xEE	; 238
 850:	05 c0       	rjmp	.+10     	; 0x85c <vfprintf+0x2ce>
 852:	7a 2c       	mov	r7, r10
 854:	2b 2d       	mov	r18, r11
 856:	03 c0       	rjmp	.+6      	; 0x85e <vfprintf+0x2d0>
 858:	7a 2c       	mov	r7, r10
 85a:	01 c0       	rjmp	.+2      	; 0x85e <vfprintf+0x2d0>
 85c:	75 2c       	mov	r7, r5
 85e:	24 ff       	sbrs	r18, 4
 860:	0d c0       	rjmp	.+26     	; 0x87c <vfprintf+0x2ee>
 862:	fe 01       	movw	r30, r28
 864:	ea 0d       	add	r30, r10
 866:	f1 1d       	adc	r31, r1
 868:	80 81       	ld	r24, Z
 86a:	80 33       	cpi	r24, 0x30	; 48
 86c:	11 f4       	brne	.+4      	; 0x872 <vfprintf+0x2e4>
 86e:	29 7e       	andi	r18, 0xE9	; 233
 870:	09 c0       	rjmp	.+18     	; 0x884 <vfprintf+0x2f6>
 872:	22 ff       	sbrs	r18, 2
 874:	06 c0       	rjmp	.+12     	; 0x882 <vfprintf+0x2f4>
 876:	73 94       	inc	r7
 878:	73 94       	inc	r7
 87a:	04 c0       	rjmp	.+8      	; 0x884 <vfprintf+0x2f6>
 87c:	82 2f       	mov	r24, r18
 87e:	86 78       	andi	r24, 0x86	; 134
 880:	09 f0       	breq	.+2      	; 0x884 <vfprintf+0x2f6>
 882:	73 94       	inc	r7
 884:	23 fd       	sbrc	r18, 3
 886:	12 c0       	rjmp	.+36     	; 0x8ac <vfprintf+0x31e>
 888:	20 ff       	sbrs	r18, 0
 88a:	06 c0       	rjmp	.+12     	; 0x898 <vfprintf+0x30a>
 88c:	5a 2c       	mov	r5, r10
 88e:	73 14       	cp	r7, r3
 890:	18 f4       	brcc	.+6      	; 0x898 <vfprintf+0x30a>
 892:	53 0c       	add	r5, r3
 894:	57 18       	sub	r5, r7
 896:	73 2c       	mov	r7, r3
 898:	73 14       	cp	r7, r3
 89a:	60 f4       	brcc	.+24     	; 0x8b4 <vfprintf+0x326>
 89c:	b7 01       	movw	r22, r14
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	2c 87       	std	Y+12, r18	; 0x0c
 8a4:	c0 d1       	rcall	.+896    	; 0xc26 <fputc>
 8a6:	73 94       	inc	r7
 8a8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8aa:	f6 cf       	rjmp	.-20     	; 0x898 <vfprintf+0x30a>
 8ac:	73 14       	cp	r7, r3
 8ae:	10 f4       	brcc	.+4      	; 0x8b4 <vfprintf+0x326>
 8b0:	37 18       	sub	r3, r7
 8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <vfprintf+0x328>
 8b4:	31 2c       	mov	r3, r1
 8b6:	24 ff       	sbrs	r18, 4
 8b8:	11 c0       	rjmp	.+34     	; 0x8dc <vfprintf+0x34e>
 8ba:	b7 01       	movw	r22, r14
 8bc:	80 e3       	ldi	r24, 0x30	; 48
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	2c 87       	std	Y+12, r18	; 0x0c
 8c2:	b1 d1       	rcall	.+866    	; 0xc26 <fputc>
 8c4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8c6:	22 ff       	sbrs	r18, 2
 8c8:	16 c0       	rjmp	.+44     	; 0x8f6 <vfprintf+0x368>
 8ca:	21 ff       	sbrs	r18, 1
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <vfprintf+0x346>
 8ce:	88 e5       	ldi	r24, 0x58	; 88
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x34a>
 8d4:	88 e7       	ldi	r24, 0x78	; 120
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	b7 01       	movw	r22, r14
 8da:	0c c0       	rjmp	.+24     	; 0x8f4 <vfprintf+0x366>
 8dc:	82 2f       	mov	r24, r18
 8de:	86 78       	andi	r24, 0x86	; 134
 8e0:	51 f0       	breq	.+20     	; 0x8f6 <vfprintf+0x368>
 8e2:	21 fd       	sbrc	r18, 1
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x35c>
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	01 c0       	rjmp	.+2      	; 0x8ec <vfprintf+0x35e>
 8ea:	8b e2       	ldi	r24, 0x2B	; 43
 8ec:	27 fd       	sbrc	r18, 7
 8ee:	8d e2       	ldi	r24, 0x2D	; 45
 8f0:	b7 01       	movw	r22, r14
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	98 d1       	rcall	.+816    	; 0xc26 <fputc>
 8f6:	a5 14       	cp	r10, r5
 8f8:	30 f4       	brcc	.+12     	; 0x906 <vfprintf+0x378>
 8fa:	b7 01       	movw	r22, r14
 8fc:	80 e3       	ldi	r24, 0x30	; 48
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	92 d1       	rcall	.+804    	; 0xc26 <fputc>
 902:	5a 94       	dec	r5
 904:	f8 cf       	rjmp	.-16     	; 0x8f6 <vfprintf+0x368>
 906:	aa 94       	dec	r10
 908:	f4 01       	movw	r30, r8
 90a:	ea 0d       	add	r30, r10
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	b7 01       	movw	r22, r14
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	88 d1       	rcall	.+784    	; 0xc26 <fputc>
 916:	a1 10       	cpse	r10, r1
 918:	f6 cf       	rjmp	.-20     	; 0x906 <vfprintf+0x378>
 91a:	33 20       	and	r3, r3
 91c:	09 f4       	brne	.+2      	; 0x920 <vfprintf+0x392>
 91e:	5d ce       	rjmp	.-838    	; 0x5da <vfprintf+0x4c>
 920:	b7 01       	movw	r22, r14
 922:	80 e2       	ldi	r24, 0x20	; 32
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	7f d1       	rcall	.+766    	; 0xc26 <fputc>
 928:	3a 94       	dec	r3
 92a:	f7 cf       	rjmp	.-18     	; 0x91a <vfprintf+0x38c>
 92c:	f7 01       	movw	r30, r14
 92e:	86 81       	ldd	r24, Z+6	; 0x06
 930:	97 81       	ldd	r25, Z+7	; 0x07
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x3aa>
 934:	8f ef       	ldi	r24, 0xFF	; 255
 936:	9f ef       	ldi	r25, 0xFF	; 255
 938:	2c 96       	adiw	r28, 0x0c	; 12
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	1f 91       	pop	r17
 94a:	0f 91       	pop	r16
 94c:	ff 90       	pop	r15
 94e:	ef 90       	pop	r14
 950:	df 90       	pop	r13
 952:	cf 90       	pop	r12
 954:	bf 90       	pop	r11
 956:	af 90       	pop	r10
 958:	9f 90       	pop	r9
 95a:	8f 90       	pop	r8
 95c:	7f 90       	pop	r7
 95e:	6f 90       	pop	r6
 960:	5f 90       	pop	r5
 962:	4f 90       	pop	r4
 964:	3f 90       	pop	r3
 966:	2f 90       	pop	r2
 968:	08 95       	ret

0000096a <calloc>:
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	86 9f       	mul	r24, r22
 974:	80 01       	movw	r16, r0
 976:	87 9f       	mul	r24, r23
 978:	10 0d       	add	r17, r0
 97a:	96 9f       	mul	r25, r22
 97c:	10 0d       	add	r17, r0
 97e:	11 24       	eor	r1, r1
 980:	c8 01       	movw	r24, r16
 982:	0d d0       	rcall	.+26     	; 0x99e <malloc>
 984:	ec 01       	movw	r28, r24
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	21 f0       	breq	.+8      	; 0x992 <calloc+0x28>
 98a:	a8 01       	movw	r20, r16
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	38 d1       	rcall	.+624    	; 0xc02 <memset>
 992:	ce 01       	movw	r24, r28
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	08 95       	ret

0000099e <malloc>:
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	82 30       	cpi	r24, 0x02	; 2
 9a4:	91 05       	cpc	r25, r1
 9a6:	10 f4       	brcc	.+4      	; 0x9ac <malloc+0xe>
 9a8:	82 e0       	ldi	r24, 0x02	; 2
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	e0 91 03 03 	lds	r30, 0x0303
 9b0:	f0 91 04 03 	lds	r31, 0x0304
 9b4:	20 e0       	ldi	r18, 0x00	; 0
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	a0 e0       	ldi	r26, 0x00	; 0
 9ba:	b0 e0       	ldi	r27, 0x00	; 0
 9bc:	30 97       	sbiw	r30, 0x00	; 0
 9be:	39 f1       	breq	.+78     	; 0xa0e <malloc+0x70>
 9c0:	40 81       	ld	r20, Z
 9c2:	51 81       	ldd	r21, Z+1	; 0x01
 9c4:	48 17       	cp	r20, r24
 9c6:	59 07       	cpc	r21, r25
 9c8:	b8 f0       	brcs	.+46     	; 0x9f8 <malloc+0x5a>
 9ca:	48 17       	cp	r20, r24
 9cc:	59 07       	cpc	r21, r25
 9ce:	71 f4       	brne	.+28     	; 0x9ec <malloc+0x4e>
 9d0:	82 81       	ldd	r24, Z+2	; 0x02
 9d2:	93 81       	ldd	r25, Z+3	; 0x03
 9d4:	10 97       	sbiw	r26, 0x00	; 0
 9d6:	29 f0       	breq	.+10     	; 0x9e2 <malloc+0x44>
 9d8:	13 96       	adiw	r26, 0x03	; 3
 9da:	9c 93       	st	X, r25
 9dc:	8e 93       	st	-X, r24
 9de:	12 97       	sbiw	r26, 0x02	; 2
 9e0:	2c c0       	rjmp	.+88     	; 0xa3a <malloc+0x9c>
 9e2:	90 93 04 03 	sts	0x0304, r25
 9e6:	80 93 03 03 	sts	0x0303, r24
 9ea:	27 c0       	rjmp	.+78     	; 0xa3a <malloc+0x9c>
 9ec:	21 15       	cp	r18, r1
 9ee:	31 05       	cpc	r19, r1
 9f0:	31 f0       	breq	.+12     	; 0x9fe <malloc+0x60>
 9f2:	42 17       	cp	r20, r18
 9f4:	53 07       	cpc	r21, r19
 9f6:	18 f0       	brcs	.+6      	; 0x9fe <malloc+0x60>
 9f8:	a9 01       	movw	r20, r18
 9fa:	db 01       	movw	r26, r22
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <malloc+0x62>
 9fe:	ef 01       	movw	r28, r30
 a00:	9a 01       	movw	r18, r20
 a02:	bd 01       	movw	r22, r26
 a04:	df 01       	movw	r26, r30
 a06:	02 80       	ldd	r0, Z+2	; 0x02
 a08:	f3 81       	ldd	r31, Z+3	; 0x03
 a0a:	e0 2d       	mov	r30, r0
 a0c:	d7 cf       	rjmp	.-82     	; 0x9bc <malloc+0x1e>
 a0e:	21 15       	cp	r18, r1
 a10:	31 05       	cpc	r19, r1
 a12:	f9 f0       	breq	.+62     	; 0xa52 <malloc+0xb4>
 a14:	28 1b       	sub	r18, r24
 a16:	39 0b       	sbc	r19, r25
 a18:	24 30       	cpi	r18, 0x04	; 4
 a1a:	31 05       	cpc	r19, r1
 a1c:	80 f4       	brcc	.+32     	; 0xa3e <malloc+0xa0>
 a1e:	8a 81       	ldd	r24, Y+2	; 0x02
 a20:	9b 81       	ldd	r25, Y+3	; 0x03
 a22:	61 15       	cp	r22, r1
 a24:	71 05       	cpc	r23, r1
 a26:	21 f0       	breq	.+8      	; 0xa30 <malloc+0x92>
 a28:	fb 01       	movw	r30, r22
 a2a:	93 83       	std	Z+3, r25	; 0x03
 a2c:	82 83       	std	Z+2, r24	; 0x02
 a2e:	04 c0       	rjmp	.+8      	; 0xa38 <malloc+0x9a>
 a30:	90 93 04 03 	sts	0x0304, r25
 a34:	80 93 03 03 	sts	0x0303, r24
 a38:	fe 01       	movw	r30, r28
 a3a:	32 96       	adiw	r30, 0x02	; 2
 a3c:	44 c0       	rjmp	.+136    	; 0xac6 <malloc+0x128>
 a3e:	fe 01       	movw	r30, r28
 a40:	e2 0f       	add	r30, r18
 a42:	f3 1f       	adc	r31, r19
 a44:	81 93       	st	Z+, r24
 a46:	91 93       	st	Z+, r25
 a48:	22 50       	subi	r18, 0x02	; 2
 a4a:	31 09       	sbc	r19, r1
 a4c:	39 83       	std	Y+1, r19	; 0x01
 a4e:	28 83       	st	Y, r18
 a50:	3a c0       	rjmp	.+116    	; 0xac6 <malloc+0x128>
 a52:	20 91 01 03 	lds	r18, 0x0301
 a56:	30 91 02 03 	lds	r19, 0x0302
 a5a:	23 2b       	or	r18, r19
 a5c:	41 f4       	brne	.+16     	; 0xa6e <malloc+0xd0>
 a5e:	20 91 02 02 	lds	r18, 0x0202
 a62:	30 91 03 02 	lds	r19, 0x0203
 a66:	30 93 02 03 	sts	0x0302, r19
 a6a:	20 93 01 03 	sts	0x0301, r18
 a6e:	20 91 00 02 	lds	r18, 0x0200
 a72:	30 91 01 02 	lds	r19, 0x0201
 a76:	21 15       	cp	r18, r1
 a78:	31 05       	cpc	r19, r1
 a7a:	41 f4       	brne	.+16     	; 0xa8c <malloc+0xee>
 a7c:	2d b7       	in	r18, 0x3d	; 61
 a7e:	3e b7       	in	r19, 0x3e	; 62
 a80:	40 91 04 02 	lds	r20, 0x0204
 a84:	50 91 05 02 	lds	r21, 0x0205
 a88:	24 1b       	sub	r18, r20
 a8a:	35 0b       	sbc	r19, r21
 a8c:	e0 91 01 03 	lds	r30, 0x0301
 a90:	f0 91 02 03 	lds	r31, 0x0302
 a94:	e2 17       	cp	r30, r18
 a96:	f3 07       	cpc	r31, r19
 a98:	a0 f4       	brcc	.+40     	; 0xac2 <malloc+0x124>
 a9a:	2e 1b       	sub	r18, r30
 a9c:	3f 0b       	sbc	r19, r31
 a9e:	28 17       	cp	r18, r24
 aa0:	39 07       	cpc	r19, r25
 aa2:	78 f0       	brcs	.+30     	; 0xac2 <malloc+0x124>
 aa4:	ac 01       	movw	r20, r24
 aa6:	4e 5f       	subi	r20, 0xFE	; 254
 aa8:	5f 4f       	sbci	r21, 0xFF	; 255
 aaa:	24 17       	cp	r18, r20
 aac:	35 07       	cpc	r19, r21
 aae:	48 f0       	brcs	.+18     	; 0xac2 <malloc+0x124>
 ab0:	4e 0f       	add	r20, r30
 ab2:	5f 1f       	adc	r21, r31
 ab4:	50 93 02 03 	sts	0x0302, r21
 ab8:	40 93 01 03 	sts	0x0301, r20
 abc:	81 93       	st	Z+, r24
 abe:	91 93       	st	Z+, r25
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <malloc+0x128>
 ac2:	e0 e0       	ldi	r30, 0x00	; 0
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	cf 01       	movw	r24, r30
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	08 95       	ret

00000ace <free>:
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	00 97       	sbiw	r24, 0x00	; 0
 ad4:	09 f4       	brne	.+2      	; 0xad8 <free+0xa>
 ad6:	87 c0       	rjmp	.+270    	; 0xbe6 <free+0x118>
 ad8:	fc 01       	movw	r30, r24
 ada:	32 97       	sbiw	r30, 0x02	; 2
 adc:	13 82       	std	Z+3, r1	; 0x03
 ade:	12 82       	std	Z+2, r1	; 0x02
 ae0:	c0 91 03 03 	lds	r28, 0x0303
 ae4:	d0 91 04 03 	lds	r29, 0x0304
 ae8:	20 97       	sbiw	r28, 0x00	; 0
 aea:	81 f4       	brne	.+32     	; 0xb0c <free+0x3e>
 aec:	20 81       	ld	r18, Z
 aee:	31 81       	ldd	r19, Z+1	; 0x01
 af0:	28 0f       	add	r18, r24
 af2:	39 1f       	adc	r19, r25
 af4:	80 91 01 03 	lds	r24, 0x0301
 af8:	90 91 02 03 	lds	r25, 0x0302
 afc:	82 17       	cp	r24, r18
 afe:	93 07       	cpc	r25, r19
 b00:	79 f5       	brne	.+94     	; 0xb60 <free+0x92>
 b02:	f0 93 02 03 	sts	0x0302, r31
 b06:	e0 93 01 03 	sts	0x0301, r30
 b0a:	6d c0       	rjmp	.+218    	; 0xbe6 <free+0x118>
 b0c:	de 01       	movw	r26, r28
 b0e:	20 e0       	ldi	r18, 0x00	; 0
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	ae 17       	cp	r26, r30
 b14:	bf 07       	cpc	r27, r31
 b16:	50 f4       	brcc	.+20     	; 0xb2c <free+0x5e>
 b18:	12 96       	adiw	r26, 0x02	; 2
 b1a:	4d 91       	ld	r20, X+
 b1c:	5c 91       	ld	r21, X
 b1e:	13 97       	sbiw	r26, 0x03	; 3
 b20:	9d 01       	movw	r18, r26
 b22:	41 15       	cp	r20, r1
 b24:	51 05       	cpc	r21, r1
 b26:	09 f1       	breq	.+66     	; 0xb6a <free+0x9c>
 b28:	da 01       	movw	r26, r20
 b2a:	f3 cf       	rjmp	.-26     	; 0xb12 <free+0x44>
 b2c:	b3 83       	std	Z+3, r27	; 0x03
 b2e:	a2 83       	std	Z+2, r26	; 0x02
 b30:	40 81       	ld	r20, Z
 b32:	51 81       	ldd	r21, Z+1	; 0x01
 b34:	84 0f       	add	r24, r20
 b36:	95 1f       	adc	r25, r21
 b38:	8a 17       	cp	r24, r26
 b3a:	9b 07       	cpc	r25, r27
 b3c:	71 f4       	brne	.+28     	; 0xb5a <free+0x8c>
 b3e:	8d 91       	ld	r24, X+
 b40:	9c 91       	ld	r25, X
 b42:	11 97       	sbiw	r26, 0x01	; 1
 b44:	84 0f       	add	r24, r20
 b46:	95 1f       	adc	r25, r21
 b48:	02 96       	adiw	r24, 0x02	; 2
 b4a:	91 83       	std	Z+1, r25	; 0x01
 b4c:	80 83       	st	Z, r24
 b4e:	12 96       	adiw	r26, 0x02	; 2
 b50:	8d 91       	ld	r24, X+
 b52:	9c 91       	ld	r25, X
 b54:	13 97       	sbiw	r26, 0x03	; 3
 b56:	93 83       	std	Z+3, r25	; 0x03
 b58:	82 83       	std	Z+2, r24	; 0x02
 b5a:	21 15       	cp	r18, r1
 b5c:	31 05       	cpc	r19, r1
 b5e:	29 f4       	brne	.+10     	; 0xb6a <free+0x9c>
 b60:	f0 93 04 03 	sts	0x0304, r31
 b64:	e0 93 03 03 	sts	0x0303, r30
 b68:	3e c0       	rjmp	.+124    	; 0xbe6 <free+0x118>
 b6a:	d9 01       	movw	r26, r18
 b6c:	13 96       	adiw	r26, 0x03	; 3
 b6e:	fc 93       	st	X, r31
 b70:	ee 93       	st	-X, r30
 b72:	12 97       	sbiw	r26, 0x02	; 2
 b74:	4d 91       	ld	r20, X+
 b76:	5d 91       	ld	r21, X+
 b78:	a4 0f       	add	r26, r20
 b7a:	b5 1f       	adc	r27, r21
 b7c:	ea 17       	cp	r30, r26
 b7e:	fb 07       	cpc	r31, r27
 b80:	79 f4       	brne	.+30     	; 0xba0 <free+0xd2>
 b82:	80 81       	ld	r24, Z
 b84:	91 81       	ldd	r25, Z+1	; 0x01
 b86:	84 0f       	add	r24, r20
 b88:	95 1f       	adc	r25, r21
 b8a:	02 96       	adiw	r24, 0x02	; 2
 b8c:	d9 01       	movw	r26, r18
 b8e:	11 96       	adiw	r26, 0x01	; 1
 b90:	9c 93       	st	X, r25
 b92:	8e 93       	st	-X, r24
 b94:	82 81       	ldd	r24, Z+2	; 0x02
 b96:	93 81       	ldd	r25, Z+3	; 0x03
 b98:	13 96       	adiw	r26, 0x03	; 3
 b9a:	9c 93       	st	X, r25
 b9c:	8e 93       	st	-X, r24
 b9e:	12 97       	sbiw	r26, 0x02	; 2
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	8a 81       	ldd	r24, Y+2	; 0x02
 ba6:	9b 81       	ldd	r25, Y+3	; 0x03
 ba8:	00 97       	sbiw	r24, 0x00	; 0
 baa:	19 f0       	breq	.+6      	; 0xbb2 <free+0xe4>
 bac:	fe 01       	movw	r30, r28
 bae:	ec 01       	movw	r28, r24
 bb0:	f9 cf       	rjmp	.-14     	; 0xba4 <free+0xd6>
 bb2:	ce 01       	movw	r24, r28
 bb4:	02 96       	adiw	r24, 0x02	; 2
 bb6:	28 81       	ld	r18, Y
 bb8:	39 81       	ldd	r19, Y+1	; 0x01
 bba:	82 0f       	add	r24, r18
 bbc:	93 1f       	adc	r25, r19
 bbe:	20 91 01 03 	lds	r18, 0x0301
 bc2:	30 91 02 03 	lds	r19, 0x0302
 bc6:	28 17       	cp	r18, r24
 bc8:	39 07       	cpc	r19, r25
 bca:	69 f4       	brne	.+26     	; 0xbe6 <free+0x118>
 bcc:	30 97       	sbiw	r30, 0x00	; 0
 bce:	29 f4       	brne	.+10     	; 0xbda <free+0x10c>
 bd0:	10 92 04 03 	sts	0x0304, r1
 bd4:	10 92 03 03 	sts	0x0303, r1
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <free+0x110>
 bda:	13 82       	std	Z+3, r1	; 0x03
 bdc:	12 82       	std	Z+2, r1	; 0x02
 bde:	d0 93 02 03 	sts	0x0302, r29
 be2:	c0 93 01 03 	sts	0x0301, r28
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	08 95       	ret

00000bec <strnlen_P>:
 bec:	fc 01       	movw	r30, r24
 bee:	05 90       	lpm	r0, Z+
 bf0:	61 50       	subi	r22, 0x01	; 1
 bf2:	70 40       	sbci	r23, 0x00	; 0
 bf4:	01 10       	cpse	r0, r1
 bf6:	d8 f7       	brcc	.-10     	; 0xbee <strnlen_P+0x2>
 bf8:	80 95       	com	r24
 bfa:	90 95       	com	r25
 bfc:	8e 0f       	add	r24, r30
 bfe:	9f 1f       	adc	r25, r31
 c00:	08 95       	ret

00000c02 <memset>:
 c02:	dc 01       	movw	r26, r24
 c04:	01 c0       	rjmp	.+2      	; 0xc08 <memset+0x6>
 c06:	6d 93       	st	X+, r22
 c08:	41 50       	subi	r20, 0x01	; 1
 c0a:	50 40       	sbci	r21, 0x00	; 0
 c0c:	e0 f7       	brcc	.-8      	; 0xc06 <memset+0x4>
 c0e:	08 95       	ret

00000c10 <strnlen>:
 c10:	fc 01       	movw	r30, r24
 c12:	61 50       	subi	r22, 0x01	; 1
 c14:	70 40       	sbci	r23, 0x00	; 0
 c16:	01 90       	ld	r0, Z+
 c18:	01 10       	cpse	r0, r1
 c1a:	d8 f7       	brcc	.-10     	; 0xc12 <strnlen+0x2>
 c1c:	80 95       	com	r24
 c1e:	90 95       	com	r25
 c20:	8e 0f       	add	r24, r30
 c22:	9f 1f       	adc	r25, r31
 c24:	08 95       	ret

00000c26 <fputc>:
 c26:	0f 93       	push	r16
 c28:	1f 93       	push	r17
 c2a:	cf 93       	push	r28
 c2c:	df 93       	push	r29
 c2e:	18 2f       	mov	r17, r24
 c30:	09 2f       	mov	r16, r25
 c32:	eb 01       	movw	r28, r22
 c34:	8b 81       	ldd	r24, Y+3	; 0x03
 c36:	81 fd       	sbrc	r24, 1
 c38:	03 c0       	rjmp	.+6      	; 0xc40 <fputc+0x1a>
 c3a:	8f ef       	ldi	r24, 0xFF	; 255
 c3c:	9f ef       	ldi	r25, 0xFF	; 255
 c3e:	20 c0       	rjmp	.+64     	; 0xc80 <fputc+0x5a>
 c40:	82 ff       	sbrs	r24, 2
 c42:	10 c0       	rjmp	.+32     	; 0xc64 <fputc+0x3e>
 c44:	4e 81       	ldd	r20, Y+6	; 0x06
 c46:	5f 81       	ldd	r21, Y+7	; 0x07
 c48:	2c 81       	ldd	r18, Y+4	; 0x04
 c4a:	3d 81       	ldd	r19, Y+5	; 0x05
 c4c:	42 17       	cp	r20, r18
 c4e:	53 07       	cpc	r21, r19
 c50:	7c f4       	brge	.+30     	; 0xc70 <fputc+0x4a>
 c52:	e8 81       	ld	r30, Y
 c54:	f9 81       	ldd	r31, Y+1	; 0x01
 c56:	9f 01       	movw	r18, r30
 c58:	2f 5f       	subi	r18, 0xFF	; 255
 c5a:	3f 4f       	sbci	r19, 0xFF	; 255
 c5c:	39 83       	std	Y+1, r19	; 0x01
 c5e:	28 83       	st	Y, r18
 c60:	10 83       	st	Z, r17
 c62:	06 c0       	rjmp	.+12     	; 0xc70 <fputc+0x4a>
 c64:	e8 85       	ldd	r30, Y+8	; 0x08
 c66:	f9 85       	ldd	r31, Y+9	; 0x09
 c68:	81 2f       	mov	r24, r17
 c6a:	19 95       	eicall
 c6c:	89 2b       	or	r24, r25
 c6e:	29 f7       	brne	.-54     	; 0xc3a <fputc+0x14>
 c70:	2e 81       	ldd	r18, Y+6	; 0x06
 c72:	3f 81       	ldd	r19, Y+7	; 0x07
 c74:	2f 5f       	subi	r18, 0xFF	; 255
 c76:	3f 4f       	sbci	r19, 0xFF	; 255
 c78:	3f 83       	std	Y+7, r19	; 0x07
 c7a:	2e 83       	std	Y+6, r18	; 0x06
 c7c:	81 2f       	mov	r24, r17
 c7e:	90 2f       	mov	r25, r16
 c80:	df 91       	pop	r29
 c82:	cf 91       	pop	r28
 c84:	1f 91       	pop	r17
 c86:	0f 91       	pop	r16
 c88:	08 95       	ret

00000c8a <__ultoa_invert>:
 c8a:	fa 01       	movw	r30, r20
 c8c:	aa 27       	eor	r26, r26
 c8e:	28 30       	cpi	r18, 0x08	; 8
 c90:	51 f1       	breq	.+84     	; 0xce6 <__ultoa_invert+0x5c>
 c92:	20 31       	cpi	r18, 0x10	; 16
 c94:	81 f1       	breq	.+96     	; 0xcf6 <__ultoa_invert+0x6c>
 c96:	e8 94       	clt
 c98:	6f 93       	push	r22
 c9a:	6e 7f       	andi	r22, 0xFE	; 254
 c9c:	6e 5f       	subi	r22, 0xFE	; 254
 c9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ca0:	8f 4f       	sbci	r24, 0xFF	; 255
 ca2:	9f 4f       	sbci	r25, 0xFF	; 255
 ca4:	af 4f       	sbci	r26, 0xFF	; 255
 ca6:	b1 e0       	ldi	r27, 0x01	; 1
 ca8:	3e d0       	rcall	.+124    	; 0xd26 <__ultoa_invert+0x9c>
 caa:	b4 e0       	ldi	r27, 0x04	; 4
 cac:	3c d0       	rcall	.+120    	; 0xd26 <__ultoa_invert+0x9c>
 cae:	67 0f       	add	r22, r23
 cb0:	78 1f       	adc	r23, r24
 cb2:	89 1f       	adc	r24, r25
 cb4:	9a 1f       	adc	r25, r26
 cb6:	a1 1d       	adc	r26, r1
 cb8:	68 0f       	add	r22, r24
 cba:	79 1f       	adc	r23, r25
 cbc:	8a 1f       	adc	r24, r26
 cbe:	91 1d       	adc	r25, r1
 cc0:	a1 1d       	adc	r26, r1
 cc2:	6a 0f       	add	r22, r26
 cc4:	71 1d       	adc	r23, r1
 cc6:	81 1d       	adc	r24, r1
 cc8:	91 1d       	adc	r25, r1
 cca:	a1 1d       	adc	r26, r1
 ccc:	20 d0       	rcall	.+64     	; 0xd0e <__ultoa_invert+0x84>
 cce:	09 f4       	brne	.+2      	; 0xcd2 <__ultoa_invert+0x48>
 cd0:	68 94       	set
 cd2:	3f 91       	pop	r19
 cd4:	2a e0       	ldi	r18, 0x0A	; 10
 cd6:	26 9f       	mul	r18, r22
 cd8:	11 24       	eor	r1, r1
 cda:	30 19       	sub	r19, r0
 cdc:	30 5d       	subi	r19, 0xD0	; 208
 cde:	31 93       	st	Z+, r19
 ce0:	de f6       	brtc	.-74     	; 0xc98 <__ultoa_invert+0xe>
 ce2:	cf 01       	movw	r24, r30
 ce4:	08 95       	ret
 ce6:	46 2f       	mov	r20, r22
 ce8:	47 70       	andi	r20, 0x07	; 7
 cea:	40 5d       	subi	r20, 0xD0	; 208
 cec:	41 93       	st	Z+, r20
 cee:	b3 e0       	ldi	r27, 0x03	; 3
 cf0:	0f d0       	rcall	.+30     	; 0xd10 <__ultoa_invert+0x86>
 cf2:	c9 f7       	brne	.-14     	; 0xce6 <__ultoa_invert+0x5c>
 cf4:	f6 cf       	rjmp	.-20     	; 0xce2 <__ultoa_invert+0x58>
 cf6:	46 2f       	mov	r20, r22
 cf8:	4f 70       	andi	r20, 0x0F	; 15
 cfa:	40 5d       	subi	r20, 0xD0	; 208
 cfc:	4a 33       	cpi	r20, 0x3A	; 58
 cfe:	18 f0       	brcs	.+6      	; 0xd06 <__ultoa_invert+0x7c>
 d00:	49 5d       	subi	r20, 0xD9	; 217
 d02:	31 fd       	sbrc	r19, 1
 d04:	40 52       	subi	r20, 0x20	; 32
 d06:	41 93       	st	Z+, r20
 d08:	02 d0       	rcall	.+4      	; 0xd0e <__ultoa_invert+0x84>
 d0a:	a9 f7       	brne	.-22     	; 0xcf6 <__ultoa_invert+0x6c>
 d0c:	ea cf       	rjmp	.-44     	; 0xce2 <__ultoa_invert+0x58>
 d0e:	b4 e0       	ldi	r27, 0x04	; 4
 d10:	a6 95       	lsr	r26
 d12:	97 95       	ror	r25
 d14:	87 95       	ror	r24
 d16:	77 95       	ror	r23
 d18:	67 95       	ror	r22
 d1a:	ba 95       	dec	r27
 d1c:	c9 f7       	brne	.-14     	; 0xd10 <__ultoa_invert+0x86>
 d1e:	00 97       	sbiw	r24, 0x00	; 0
 d20:	61 05       	cpc	r22, r1
 d22:	71 05       	cpc	r23, r1
 d24:	08 95       	ret
 d26:	9b 01       	movw	r18, r22
 d28:	ac 01       	movw	r20, r24
 d2a:	0a 2e       	mov	r0, r26
 d2c:	06 94       	lsr	r0
 d2e:	57 95       	ror	r21
 d30:	47 95       	ror	r20
 d32:	37 95       	ror	r19
 d34:	27 95       	ror	r18
 d36:	ba 95       	dec	r27
 d38:	c9 f7       	brne	.-14     	; 0xd2c <__ultoa_invert+0xa2>
 d3a:	62 0f       	add	r22, r18
 d3c:	73 1f       	adc	r23, r19
 d3e:	84 1f       	adc	r24, r20
 d40:	95 1f       	adc	r25, r21
 d42:	a0 1d       	adc	r26, r0
 d44:	08 95       	ret

00000d46 <_exit>:
 d46:	f8 94       	cli

00000d48 <__stop_program>:
 d48:	ff cf       	rjmp	.-2      	; 0xd48 <__stop_program>
