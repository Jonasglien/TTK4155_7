
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c0  00800100  00001c18  00001cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  008003c0  008003c0  00001f6c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000357e  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d7c  00000000  00000000  00005826  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f72  00000000  00000000  000065a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000938  00000000  00000000  00007514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b05  00000000  00000000  00007e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002517  00000000  00000000  00008951  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c8  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_2>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	43 61       	ori	r20, 0x13	; 19
      72:	6c 69       	ori	r22, 0x9C	; 156
      74:	62 72       	andi	r22, 0x22	; 34
      76:	61 74       	andi	r22, 0x41	; 65
      78:	65 00       	.word	0x0065	; ????

0000007a <debug_entry_0>:
      7a:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

00000085 <option_entry_1>:
      85:	43 6f 6e 74 72 61 73 74 00                          Contrast.

0000008e <option_entry_0>:
      8e:	4d 75 73 69 63 00                                   Music.

00000094 <mainmenu_entry_3>:
      94:	4f 70 74 69 6f 6e 73 00                             Options.

0000009c <mainmenu_entry_2>:
      9c:	44 65 62 75 67 00                                   Debug.

000000a2 <mainmenu_entry_1>:
      a2:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d4 e0       	ldi	r29, 0x04	; 4
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	13 e0       	ldi	r17, 0x03	; 3
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e8 e1       	ldi	r30, 0x18	; 24
      c0:	fc e1       	ldi	r31, 0x1C	; 28
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 3c       	cpi	r26, 0xC0	; 192
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	24 e0       	ldi	r18, 0x04	; 4
      d0:	a0 ec       	ldi	r26, 0xC0	; 192
      d2:	b3 e0       	ldi	r27, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a7 33       	cpi	r26, 0x37	; 55
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 04 04 	call	0x808	; 0x808 <main>
      e2:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <readADC>:
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	91 05       	cpc	r25, r1
      ee:	71 f0       	breq	.+28     	; 0x10c <readADC+0x22>
      f0:	1c f4       	brge	.+6      	; 0xf8 <readADC+0xe>
      f2:	01 97       	sbiw	r24, 0x01	; 1
      f4:	39 f0       	breq	.+14     	; 0x104 <readADC+0x1a>
      f6:	1c c0       	rjmp	.+56     	; 0x130 <readADC+0x46>
      f8:	83 30       	cpi	r24, 0x03	; 3
      fa:	91 05       	cpc	r25, r1
      fc:	59 f0       	breq	.+22     	; 0x114 <readADC+0x2a>
      fe:	04 97       	sbiw	r24, 0x04	; 4
     100:	69 f0       	breq	.+26     	; 0x11c <readADC+0x32>
     102:	16 c0       	rjmp	.+44     	; 0x130 <readADC+0x46>
     104:	84 e1       	ldi	r24, 0x14	; 20
     106:	80 93 00 14 	sts	0x1400, r24
     10a:	0b c0       	rjmp	.+22     	; 0x122 <readADC+0x38>
     10c:	85 e1       	ldi	r24, 0x15	; 21
     10e:	80 93 00 14 	sts	0x1400, r24
     112:	07 c0       	rjmp	.+14     	; 0x122 <readADC+0x38>
     114:	86 e1       	ldi	r24, 0x16	; 22
     116:	80 93 00 14 	sts	0x1400, r24
     11a:	03 c0       	rjmp	.+6      	; 0x122 <readADC+0x38>
     11c:	87 e1       	ldi	r24, 0x17	; 23
     11e:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     122:	82 e5       	ldi	r24, 0x52	; 82
     124:	8a 95       	dec	r24
     126:	f1 f7       	brne	.-4      	; 0x124 <readADC+0x3a>
     128:	80 91 00 14 	lds	r24, 0x1400
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	08 95       	ret
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	08 95       	ret

00000136 <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     136:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     138:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     13a:	85 b7       	in	r24, 0x35	; 53
     13c:	81 60       	ori	r24, 0x01	; 1
     13e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     140:	85 b7       	in	r24, 0x35	; 53
     142:	82 60       	ori	r24, 0x02	; 2
     144:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     146:	85 b7       	in	r24, 0x35	; 53
     148:	84 60       	ori	r24, 0x04	; 4
     14a:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     14c:	85 b7       	in	r24, 0x35	; 53
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     152:	8b b7       	in	r24, 0x3b	; 59
     154:	80 64       	ori	r24, 0x40	; 64
     156:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     158:	8b b7       	in	r24, 0x3b	; 59
     15a:	80 68       	ori	r24, 0x80	; 128
     15c:	8b bf       	out	0x3b, r24	; 59
     15e:	08 95       	ret

00000160 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	2f 93       	push	r18
     174:	3f 93       	push	r19
     176:	4f 93       	push	r20
     178:	5f 93       	push	r21
     17a:	6f 93       	push	r22
     17c:	7f 93       	push	r23
     17e:	8f 93       	push	r24
     180:	9f 93       	push	r25
     182:	af 93       	push	r26
     184:	bf 93       	push	r27
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ef 93       	push	r30
     18c:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     18e:	80 e1       	ldi	r24, 0x10	; 16
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	9f 93       	push	r25
     194:	8f 93       	push	r24
     196:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     19a:	82 e5       	ldi	r24, 0x52	; 82
     19c:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1a0:	f8 2e       	mov	r15, r24
     1a2:	e9 2e       	mov	r14, r25
     1a4:	8c e4       	ldi	r24, 0x4C	; 76
     1a6:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1aa:	18 2f       	mov	r17, r24
     1ac:	09 2f       	mov	r16, r25
     1ae:	89 e5       	ldi	r24, 0x59	; 89
     1b0:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1b4:	c8 2f       	mov	r28, r24
     1b6:	d9 2f       	mov	r29, r25
     1b8:	88 e5       	ldi	r24, 0x58	; 88
     1ba:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1be:	ef 92       	push	r14
     1c0:	ff 92       	push	r15
     1c2:	0f 93       	push	r16
     1c4:	1f 93       	push	r17
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	9f 93       	push	r25
     1cc:	8f 93       	push	r24
     1ce:	89 e3       	ldi	r24, 0x39	; 57
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	9f 93       	push	r25
     1d4:	8f 93       	push	r24
     1d6:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
	menu_right_button_flag();
     1da:	0e 94 33 05 	call	0xa66	; 0xa66 <menu_right_button_flag>
     1de:	8d b7       	in	r24, 0x3d	; 61
     1e0:	9e b7       	in	r25, 0x3e	; 62
     1e2:	0c 96       	adiw	r24, 0x0c	; 12
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	9e bf       	out	0x3e, r25	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	8d bf       	out	0x3d, r24	; 61
}
     1ee:	ff 91       	pop	r31
     1f0:	ef 91       	pop	r30
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	bf 91       	pop	r27
     1f8:	af 91       	pop	r26
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	7f 91       	pop	r23
     200:	6f 91       	pop	r22
     202:	5f 91       	pop	r21
     204:	4f 91       	pop	r20
     206:	3f 91       	pop	r19
     208:	2f 91       	pop	r18
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	ef 90       	pop	r14
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	2f 93       	push	r18
     228:	3f 93       	push	r19
     22a:	4f 93       	push	r20
     22c:	5f 93       	push	r21
     22e:	6f 93       	push	r22
     230:	7f 93       	push	r23
     232:	8f 93       	push	r24
     234:	9f 93       	push	r25
     236:	af 93       	push	r26
     238:	bf 93       	push	r27
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	menu_left_button_flag();
     23e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <menu_left_button_flag>
     242:	ff 91       	pop	r31
     244:	ef 91       	pop	r30
     246:	bf 91       	pop	r27
     248:	af 91       	pop	r26
     24a:	9f 91       	pop	r25
     24c:	8f 91       	pop	r24
     24e:	7f 91       	pop	r23
     250:	6f 91       	pop	r22
     252:	5f 91       	pop	r21
     254:	4f 91       	pop	r20
     256:	3f 91       	pop	r19
     258:	2f 91       	pop	r18
     25a:	0f 90       	pop	r0
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	0f 90       	pop	r0
     260:	1f 90       	pop	r1
     262:	18 95       	reti

00000264 <calibrate_joystick>:
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	c4 e6       	ldi	r28, 0x64	; 100
     26e:	d0 e0       	ldi	r29, 0x00	; 0
     270:	00 91 ca 03 	lds	r16, 0x03CA
     274:	10 91 cb 03 	lds	r17, 0x03CB
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     280:	01 58       	subi	r16, 0x81	; 129
     282:	1f 4f       	sbci	r17, 0xFF	; 255
     284:	08 1b       	sub	r16, r24
     286:	19 0b       	sbc	r17, r25
     288:	10 93 cb 03 	sts	0x03CB, r17
     28c:	00 93 ca 03 	sts	0x03CA, r16
     290:	00 91 c8 03 	lds	r16, 0x03C8
     294:	10 91 c9 03 	lds	r17, 0x03C9
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     2a0:	01 58       	subi	r16, 0x81	; 129
     2a2:	1f 4f       	sbci	r17, 0xFF	; 255
     2a4:	08 1b       	sub	r16, r24
     2a6:	19 0b       	sbc	r17, r25
     2a8:	10 93 c9 03 	sts	0x03C9, r17
     2ac:	00 93 c8 03 	sts	0x03C8, r16
     2b0:	21 97       	sbiw	r28, 0x01	; 1
     2b2:	20 97       	sbiw	r28, 0x00	; 0
     2b4:	e9 f6       	brne	.-70     	; 0x270 <calibrate_joystick+0xc>
     2b6:	80 91 ca 03 	lds	r24, 0x03CA
     2ba:	90 91 cb 03 	lds	r25, 0x03CB
     2be:	24 e6       	ldi	r18, 0x64	; 100
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	b9 01       	movw	r22, r18
     2c4:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     2c8:	70 93 cb 03 	sts	0x03CB, r23
     2cc:	60 93 ca 03 	sts	0x03CA, r22
     2d0:	80 91 c8 03 	lds	r24, 0x03C8
     2d4:	90 91 c9 03 	lds	r25, 0x03C9
     2d8:	b9 01       	movw	r22, r18
     2da:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divmodhi4>
     2de:	70 93 c9 03 	sts	0x03C9, r23
     2e2:	60 93 c8 03 	sts	0x03C8, r22
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <signal_to_range>:
     2f0:	2f 92       	push	r2
     2f2:	3f 92       	push	r3
     2f4:	4f 92       	push	r4
     2f6:	5f 92       	push	r5
     2f8:	6f 92       	push	r6
     2fa:	7f 92       	push	r7
     2fc:	8f 92       	push	r8
     2fe:	9f 92       	push	r9
     300:	af 92       	push	r10
     302:	bf 92       	push	r11
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	00 d0       	rcall	.+0      	; 0x316 <signal_to_range+0x26>
     316:	00 d0       	rcall	.+0      	; 0x318 <signal_to_range+0x28>
     318:	00 d0       	rcall	.+0      	; 0x31a <signal_to_range+0x2a>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	3c 01       	movw	r6, r24
     320:	7a 83       	std	Y+2, r23	; 0x02
     322:	69 83       	std	Y+1, r22	; 0x01
     324:	5c 83       	std	Y+4, r21	; 0x04
     326:	4b 83       	std	Y+3, r20	; 0x03
     328:	3e 83       	std	Y+6, r19	; 0x06
     32a:	2d 83       	std	Y+5, r18	; 0x05
     32c:	18 01       	movw	r2, r16
     32e:	85 01       	movw	r16, r10
     330:	b9 01       	movw	r22, r18
     332:	88 27       	eor	r24, r24
     334:	77 fd       	sbrc	r23, 7
     336:	80 95       	com	r24
     338:	98 2f       	mov	r25, r24
     33a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__floatsisf>
     33e:	4b 01       	movw	r8, r22
     340:	5c 01       	movw	r10, r24
     342:	b3 01       	movw	r22, r6
     344:	6e 0d       	add	r22, r14
     346:	7f 1d       	adc	r23, r15
     348:	29 81       	ldd	r18, Y+1	; 0x01
     34a:	3a 81       	ldd	r19, Y+2	; 0x02
     34c:	62 1b       	sub	r22, r18
     34e:	73 0b       	sbc	r23, r19
     350:	88 27       	eor	r24, r24
     352:	77 fd       	sbrc	r23, 7
     354:	80 95       	com	r24
     356:	98 2f       	mov	r25, r24
     358:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__floatsisf>
     35c:	2b 01       	movw	r4, r22
     35e:	3c 01       	movw	r6, r24
     360:	b1 01       	movw	r22, r2
     362:	8d 81       	ldd	r24, Y+5	; 0x05
     364:	9e 81       	ldd	r25, Y+6	; 0x06
     366:	68 1b       	sub	r22, r24
     368:	79 0b       	sbc	r23, r25
     36a:	88 27       	eor	r24, r24
     36c:	77 fd       	sbrc	r23, 7
     36e:	80 95       	com	r24
     370:	98 2f       	mov	r25, r24
     372:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__floatsisf>
     376:	9b 01       	movw	r18, r22
     378:	ac 01       	movw	r20, r24
     37a:	c3 01       	movw	r24, r6
     37c:	b2 01       	movw	r22, r4
     37e:	0e 94 39 08 	call	0x1072	; 0x1072 <__mulsf3>
     382:	2b 01       	movw	r4, r22
     384:	3c 01       	movw	r6, r24
     386:	6b 81       	ldd	r22, Y+3	; 0x03
     388:	7c 81       	ldd	r23, Y+4	; 0x04
     38a:	e9 81       	ldd	r30, Y+1	; 0x01
     38c:	fa 81       	ldd	r31, Y+2	; 0x02
     38e:	6e 1b       	sub	r22, r30
     390:	7f 0b       	sbc	r23, r31
     392:	88 27       	eor	r24, r24
     394:	77 fd       	sbrc	r23, 7
     396:	80 95       	com	r24
     398:	98 2f       	mov	r25, r24
     39a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__floatsisf>
     39e:	9b 01       	movw	r18, r22
     3a0:	ac 01       	movw	r20, r24
     3a2:	c3 01       	movw	r24, r6
     3a4:	b2 01       	movw	r22, r4
     3a6:	0e 94 12 07 	call	0xe24	; 0xe24 <__divsf3>
     3aa:	9b 01       	movw	r18, r22
     3ac:	ac 01       	movw	r20, r24
     3ae:	c5 01       	movw	r24, r10
     3b0:	b4 01       	movw	r22, r8
     3b2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__addsf3>
     3b6:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fixsfsi>
     3ba:	c1 01       	movw	r24, r2
     3bc:	80 1b       	sub	r24, r16
     3be:	91 0b       	sbc	r25, r17
     3c0:	68 17       	cp	r22, r24
     3c2:	79 07       	cpc	r23, r25
     3c4:	74 f5       	brge	.+92     	; 0x422 <signal_to_range+0x132>
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ca:	80 0f       	add	r24, r16
     3cc:	91 1f       	adc	r25, r17
     3ce:	86 17       	cp	r24, r22
     3d0:	97 07       	cpc	r25, r23
     3d2:	4c f5       	brge	.+82     	; 0x426 <signal_to_range+0x136>
     3d4:	f8 01       	movw	r30, r16
     3d6:	11 23       	and	r17, r17
     3d8:	0c f4       	brge	.+2      	; 0x3dc <signal_to_range+0xec>
     3da:	31 96       	adiw	r30, 0x01	; 1
     3dc:	f5 95       	asr	r31
     3de:	e7 95       	ror	r30
     3e0:	d8 01       	movw	r26, r16
     3e2:	12 c0       	rjmp	.+36     	; 0x408 <signal_to_range+0x118>
     3e4:	8a 0f       	add	r24, r26
     3e6:	9b 1f       	adc	r25, r27
     3e8:	ac 01       	movw	r20, r24
     3ea:	4e 0f       	add	r20, r30
     3ec:	5f 1f       	adc	r21, r31
     3ee:	64 17       	cp	r22, r20
     3f0:	75 07       	cpc	r23, r21
     3f2:	14 f0       	brlt	.+4      	; 0x3f8 <signal_to_range+0x108>
     3f4:	69 01       	movw	r12, r18
     3f6:	0b c0       	rjmp	.+22     	; 0x40e <signal_to_range+0x11e>
     3f8:	c6 01       	movw	r24, r12
     3fa:	8e 1b       	sub	r24, r30
     3fc:	9f 0b       	sbc	r25, r31
     3fe:	86 17       	cp	r24, r22
     400:	97 07       	cpc	r25, r23
     402:	14 f0       	brlt	.+4      	; 0x408 <signal_to_range+0x118>
     404:	c0 1a       	sub	r12, r16
     406:	d1 0a       	sbc	r13, r17
     408:	c6 01       	movw	r24, r12
     40a:	80 1b       	sub	r24, r16
     40c:	91 0b       	sbc	r25, r17
     40e:	96 01       	movw	r18, r12
     410:	20 0f       	add	r18, r16
     412:	31 1f       	adc	r19, r17
     414:	62 17       	cp	r22, r18
     416:	73 07       	cpc	r23, r19
     418:	2c f7       	brge	.-54     	; 0x3e4 <signal_to_range+0xf4>
     41a:	86 17       	cp	r24, r22
     41c:	97 07       	cpc	r25, r23
     41e:	14 f7       	brge	.-60     	; 0x3e4 <signal_to_range+0xf4>
     420:	04 c0       	rjmp	.+8      	; 0x42a <signal_to_range+0x13a>
     422:	61 01       	movw	r12, r2
     424:	02 c0       	rjmp	.+4      	; 0x42a <signal_to_range+0x13a>
     426:	cd 80       	ldd	r12, Y+5	; 0x05
     428:	de 80       	ldd	r13, Y+6	; 0x06
     42a:	c6 01       	movw	r24, r12
     42c:	26 96       	adiw	r28, 0x06	; 6
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	3f 90       	pop	r3
     45a:	2f 90       	pop	r2
     45c:	08 95       	ret

0000045e <read_control_input>:
     45e:	af 92       	push	r10
     460:	bf 92       	push	r11
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	82 35       	cpi	r24, 0x52	; 82
     470:	09 f4       	brne	.+2      	; 0x474 <read_control_input+0x16>
     472:	74 c0       	rjmp	.+232    	; 0x55c <__stack+0x5d>
     474:	20 f4       	brcc	.+8      	; 0x47e <read_control_input+0x20>
     476:	8c 34       	cpi	r24, 0x4C	; 76
     478:	09 f4       	brne	.+2      	; 0x47c <read_control_input+0x1e>
     47a:	4e c0       	rjmp	.+156    	; 0x518 <__stack+0x19>
     47c:	91 c0       	rjmp	.+290    	; 0x5a0 <__stack+0xa1>
     47e:	88 35       	cpi	r24, 0x58	; 88
     480:	19 f0       	breq	.+6      	; 0x488 <read_control_input+0x2a>
     482:	89 35       	cpi	r24, 0x59	; 89
     484:	29 f1       	breq	.+74     	; 0x4d0 <read_control_input+0x72>
     486:	8c c0       	rjmp	.+280    	; 0x5a0 <__stack+0xa1>
     488:	c0 90 c6 03 	lds	r12, 0x03C6
     48c:	d0 90 c7 03 	lds	r13, 0x03C7
     490:	e0 90 ca 03 	lds	r14, 0x03CA
     494:	f0 90 cb 03 	lds	r15, 0x03CB
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fa e0       	ldi	r31, 0x0A	; 10
     4a4:	af 2e       	mov	r10, r31
     4a6:	b1 2c       	mov	r11, r1
     4a8:	f0 2d       	mov	r31, r0
     4aa:	04 e6       	ldi	r16, 0x64	; 100
     4ac:	10 e0       	ldi	r17, 0x00	; 0
     4ae:	2c e9       	ldi	r18, 0x9C	; 156
     4b0:	3f ef       	ldi	r19, 0xFF	; 255
     4b2:	4f ef       	ldi	r20, 0xFF	; 255
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     4be:	90 93 c7 03 	sts	0x03C7, r25
     4c2:	80 93 c6 03 	sts	0x03C6, r24
     4c6:	80 91 c6 03 	lds	r24, 0x03C6
     4ca:	90 91 c7 03 	lds	r25, 0x03C7
     4ce:	6a c0       	rjmp	.+212    	; 0x5a4 <__stack+0xa5>
     4d0:	c0 90 c4 03 	lds	r12, 0x03C4
     4d4:	d0 90 c5 03 	lds	r13, 0x03C5
     4d8:	e0 90 c8 03 	lds	r14, 0x03C8
     4dc:	f0 90 c9 03 	lds	r15, 0x03C9
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     4e8:	0f 2e       	mov	r0, r31
     4ea:	fa e0       	ldi	r31, 0x0A	; 10
     4ec:	af 2e       	mov	r10, r31
     4ee:	b1 2c       	mov	r11, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	04 e6       	ldi	r16, 0x64	; 100
     4f4:	10 e0       	ldi	r17, 0x00	; 0
     4f6:	2c e9       	ldi	r18, 0x9C	; 156
     4f8:	3f ef       	ldi	r19, 0xFF	; 255
     4fa:	4f ef       	ldi	r20, 0xFF	; 255
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     506:	90 93 c5 03 	sts	0x03C5, r25
     50a:	80 93 c4 03 	sts	0x03C4, r24
     50e:	80 91 c4 03 	lds	r24, 0x03C4
     512:	90 91 c5 03 	lds	r25, 0x03C5
     516:	46 c0       	rjmp	.+140    	; 0x5a4 <__stack+0xa5>
     518:	c0 90 c2 03 	lds	r12, 0x03C2
     51c:	d0 90 c3 03 	lds	r13, 0x03C3
     520:	83 e0       	ldi	r24, 0x03	; 3
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     528:	0f 2e       	mov	r0, r31
     52a:	fa e0       	ldi	r31, 0x0A	; 10
     52c:	af 2e       	mov	r10, r31
     52e:	b1 2c       	mov	r11, r1
     530:	f0 2d       	mov	r31, r0
     532:	e1 2c       	mov	r14, r1
     534:	f1 2c       	mov	r15, r1
     536:	04 e6       	ldi	r16, 0x64	; 100
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	4f ef       	ldi	r20, 0xFF	; 255
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     54a:	90 93 c3 03 	sts	0x03C3, r25
     54e:	80 93 c2 03 	sts	0x03C2, r24
     552:	80 91 c2 03 	lds	r24, 0x03C2
     556:	90 91 c3 03 	lds	r25, 0x03C3
     55a:	24 c0       	rjmp	.+72     	; 0x5a4 <__stack+0xa5>
     55c:	c0 90 c0 03 	lds	r12, 0x03C0
     560:	d0 90 c1 03 	lds	r13, 0x03C1
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     56c:	0f 2e       	mov	r0, r31
     56e:	fa e0       	ldi	r31, 0x0A	; 10
     570:	af 2e       	mov	r10, r31
     572:	b1 2c       	mov	r11, r1
     574:	f0 2d       	mov	r31, r0
     576:	e1 2c       	mov	r14, r1
     578:	f1 2c       	mov	r15, r1
     57a:	04 e6       	ldi	r16, 0x64	; 100
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     58e:	90 93 c1 03 	sts	0x03C1, r25
     592:	80 93 c0 03 	sts	0x03C0, r24
     596:	80 91 c0 03 	lds	r24, 0x03C0
     59a:	90 91 c1 03 	lds	r25, 0x03C1
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__stack+0xa5>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	08 95       	ret

000005b6 <initialize_control_input>:
     5b6:	0e 94 32 01 	call	0x264	; 0x264 <calibrate_joystick>
     5ba:	88 e5       	ldi	r24, 0x58	; 88
     5bc:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5c0:	90 93 c7 03 	sts	0x03C7, r25
     5c4:	80 93 c6 03 	sts	0x03C6, r24
     5c8:	89 e5       	ldi	r24, 0x59	; 89
     5ca:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5ce:	90 93 c5 03 	sts	0x03C5, r25
     5d2:	80 93 c4 03 	sts	0x03C4, r24
     5d6:	8c e4       	ldi	r24, 0x4C	; 76
     5d8:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5dc:	90 93 c3 03 	sts	0x03C3, r25
     5e0:	80 93 c2 03 	sts	0x03C2, r24
     5e4:	82 e5       	ldi	r24, 0x52	; 82
     5e6:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5ea:	90 93 c1 03 	sts	0x03C1, r25
     5ee:	80 93 c0 03 	sts	0x03C0, r24
     5f2:	20 91 c8 03 	lds	r18, 0x03C8
     5f6:	30 91 c9 03 	lds	r19, 0x03C9
     5fa:	80 91 ca 03 	lds	r24, 0x03CA
     5fe:	90 91 cb 03 	lds	r25, 0x03CB
     602:	3f 93       	push	r19
     604:	2f 93       	push	r18
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	82 e5       	ldi	r24, 0x52	; 82
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
     616:	60 91 c0 03 	lds	r22, 0x03C0
     61a:	70 91 c1 03 	lds	r23, 0x03C1
     61e:	40 91 c2 03 	lds	r20, 0x03C2
     622:	50 91 c3 03 	lds	r21, 0x03C3
     626:	20 91 c4 03 	lds	r18, 0x03C4
     62a:	30 91 c5 03 	lds	r19, 0x03C5
     62e:	80 91 c6 03 	lds	r24, 0x03C6
     632:	90 91 c7 03 	lds	r25, 0x03C7
     636:	7f 93       	push	r23
     638:	6f 93       	push	r22
     63a:	5f 93       	push	r21
     63c:	4f 93       	push	r20
     63e:	3f 93       	push	r19
     640:	2f 93       	push	r18
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	8b e7       	ldi	r24, 0x7B	; 123
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
     652:	8d b7       	in	r24, 0x3d	; 61
     654:	9e b7       	in	r25, 0x3e	; 62
     656:	40 96       	adiw	r24, 0x10	; 16
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	9e bf       	out	0x3e, r25	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	8d bf       	out	0x3d, r24	; 61
     662:	08 95       	ret

00000664 <SRAM_test>:
	sei();//enable interrupts
}

#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     674:	84 ea       	ldi	r24, 0xA4	; 164
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 81 09 	call	0x1302	; 0x1302 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     67c:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     680:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     682:	0e 94 17 09 	call	0x122e	; 0x122e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     686:	c0 e0       	ldi	r28, 0x00	; 0
     688:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     68a:	00 e0       	ldi	r16, 0x00	; 0
     68c:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     68e:	0f 2e       	mov	r0, r31
     690:	fa eb       	ldi	r31, 0xBA	; 186
     692:	ef 2e       	mov	r14, r31
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	ff 2e       	mov	r15, r31
     698:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     69a:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     69e:	fe 01       	movw	r30, r28
     6a0:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     6a2:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     6a4:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     6a6:	28 17       	cp	r18, r24
     6a8:	a9 f0       	breq	.+42     	; 0x6d4 <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     6aa:	99 27       	eor	r25, r25
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	1f 92       	push	r1
     6b2:	2f 93       	push	r18
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	ff 92       	push	r15
     6ba:	ef 92       	push	r14
     6bc:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
			write_errors++;
     6c0:	0f 5f       	subi	r16, 0xFF	; 255
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	8d b7       	in	r24, 0x3d	; 61
     6c6:	9e b7       	in	r25, 0x3e	; 62
     6c8:	08 96       	adiw	r24, 0x08	; 8
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	9e bf       	out	0x3e, r25	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	c1 15       	cp	r28, r1
     6d8:	98 e0       	ldi	r25, 0x08	; 8
     6da:	d9 07       	cpc	r29, r25
     6dc:	f1 f6       	brne	.-68     	; 0x69a <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     6de:	c6 01       	movw	r24, r12
     6e0:	0e 94 17 09 	call	0x122e	; 0x122e <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6e4:	c0 e0       	ldi	r28, 0x00	; 0
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     6e8:	e1 2c       	mov	r14, r1
     6ea:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f3 ef       	ldi	r31, 0xF3	; 243
     6f0:	cf 2e       	mov	r12, r31
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	df 2e       	mov	r13, r31
     6f6:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     6f8:	0e 94 12 09 	call	0x1224	; 0x1224 <rand>
     6fc:	fe 01       	movw	r30, r28
     6fe:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     700:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     702:	28 17       	cp	r18, r24
     704:	b1 f0       	breq	.+44     	; 0x732 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     706:	99 27       	eor	r25, r25
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	1f 92       	push	r1
     70e:	2f 93       	push	r18
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	df 92       	push	r13
     716:	cf 92       	push	r12
     718:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
			retrieval_errors++;
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	e8 1a       	sub	r14, r24
     720:	f8 0a       	sbc	r15, r24
     722:	8d b7       	in	r24, 0x3d	; 61
     724:	9e b7       	in	r25, 0x3e	; 62
     726:	08 96       	adiw	r24, 0x08	; 8
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	9e bf       	out	0x3e, r25	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     732:	21 96       	adiw	r28, 0x01	; 1
     734:	c1 15       	cp	r28, r1
     736:	98 e0       	ldi	r25, 0x08	; 8
     738:	d9 07       	cpc	r29, r25
     73a:	f1 f6       	brne	.-68     	; 0x6f8 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     73c:	ff 92       	push	r15
     73e:	ef 92       	push	r14
     740:	1f 93       	push	r17
     742:	0f 93       	push	r16
     744:	80 e3       	ldi	r24, 0x30	; 48
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	08 95       	ret

0000076e <initalize>:




void initalize(void){
	cli();//disable interrupts
     76e:	f8 94       	cli
	init_UART(UBBR);
     770:	8f e1       	ldi	r24, 0x1F	; 31
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 a2 06 	call	0xd44	; 0xd44 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     778:	87 e8       	ldi	r24, 0x87	; 135
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	80 e9       	ldi	r24, 0x90	; 144
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	8c e9       	ldi	r24, 0x9C	; 156
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	81 ea       	ldi	r24, 0xA1	; 161
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     79c:	85 b7       	in	r24, 0x35	; 53
     79e:	80 68       	ori	r24, 0x80	; 128
     7a0:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     7a2:	80 b7       	in	r24, 0x30	; 48
     7a4:	80 62       	ori	r24, 0x20	; 32
     7a6:	80 bf       	out	0x30, r24	; 48
	
	oled_ini();
     7a8:	0e 94 a6 05 	call	0xb4c	; 0xb4c <oled_ini>
	sram_init();
     7ac:	0e 94 33 06 	call	0xc66	; 0xc66 <sram_init>
	//bootscreen();
	write_screen();
     7b0:	0e 94 53 06 	call	0xca6	; 0xca6 <write_screen>
	
	
	printf("OLED successfully initialized\n");
     7b4:	87 ee       	ldi	r24, 0xE7	; 231
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 81 09 	call	0x1302	; 0x1302 <puts>
	initialize_menu();
     7bc:	0e 94 81 04 	call	0x902	; 0x902 <initialize_menu>
	
	initialize_control_input();
     7c0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <initialize_control_input>
	printf("control input successfully initialized\n\n");
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 81 09 	call	0x1302	; 0x1302 <puts>
	SRAM_test();
     7cc:	0e 94 32 03 	call	0x664	; 0x664 <SRAM_test>
	printf("SRAM successfully initialized\n");
     7d0:	8d e2       	ldi	r24, 0x2D	; 45
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	0e 94 81 09 	call	0x1302	; 0x1302 <puts>
	initalize_interrupts();
     7d8:	0e 94 9b 00 	call	0x136	; 0x136 <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     7dc:	8b e4       	ldi	r24, 0x4B	; 75
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 81 09 	call	0x1302	; 0x1302 <puts>
	printf("Interrupts activated\n");
     7e4:	8f e6       	ldi	r24, 0x6F	; 111
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	0e 94 81 09 	call	0x1302	; 0x1302 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     7ec:	84 e8       	ldi	r24, 0x84	; 132
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 81 09 	call	0x1302	; 0x1302 <puts>
	sei();//enable interrupts
     7f4:	78 94       	sei
     7f6:	8d b7       	in	r24, 0x3d	; 61
     7f8:	9e b7       	in	r25, 0x3e	; 62
     7fa:	08 96       	adiw	r24, 0x08	; 8
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	9e bf       	out	0x3e, r25	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	8d bf       	out	0x3d, r24	; 61
     806:	08 95       	ret

00000808 <main>:


int main(void)
{
	
	initalize();
     808:	0e 94 b7 03 	call	0x76e	; 0x76e <initalize>
	
	sram_init();
     80c:	0e 94 33 06 	call	0xc66	; 0xc66 <sram_init>
	oled_goto_line(7);
     810:	87 e0       	ldi	r24, 0x07	; 7
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_goto_line>
	//sram_write_string(" - BYGGERN - G17");
	
	
	cli();
     818:	f8 94       	cli
	MCP2515_initialize();
     81a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP2515_initialize>
	
	
	
	for (int i = 0; i< 256; i++){
     81e:	c0 e0       	ldi	r28, 0x00	; 0
     820:	d0 e0       	ldi	r29, 0x00	; 0
		MCP2515_write(0b00000000,i);
		printf("Value of i: %i\t value of reg:\t%i\n",i,MCP2515_read(0b00000000));
     822:	0d e9       	ldi	r16, 0x9D	; 157
     824:	13 e0       	ldi	r17, 0x03	; 3
	MCP2515_initialize();
	
	
	
	for (int i = 0; i< 256; i++){
		MCP2515_write(0b00000000,i);
     826:	6c 2f       	mov	r22, r28
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 32 04 	call	0x864	; 0x864 <MCP2515_write>
		printf("Value of i: %i\t value of reg:\t%i\n",i,MCP2515_read(0b00000000));
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     834:	1f 92       	push	r1
     836:	8f 93       	push	r24
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	1f 93       	push	r17
     83e:	0f 93       	push	r16
     840:	0e 94 6d 09 	call	0x12da	; 0x12da <printf>
	cli();
	MCP2515_initialize();
	
	
	
	for (int i = 0; i< 256; i++){
     844:	21 96       	adiw	r28, 0x01	; 1
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	c1 15       	cp	r28, r1
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	d8 07       	cpc	r29, r24
     858:	31 f7       	brne	.-52     	; 0x826 <main+0x1e>
     85a:	ff cf       	rjmp	.-2      	; 0x85a <main+0x52>

0000085c <MCP2515_select>:
	PORTB |= (1 << PB4);
	PORTB &= ~(1 << PB4);
}

void MCP2515_select(void){
	PORTB &= ~(1 << PB4);
     85c:	c4 98       	cbi	0x18, 4	; 24
     85e:	08 95       	ret

00000860 <MCP2515_deselect>:
}

void MCP2515_deselect(void){
	PORTB |= (1 << PB4);
     860:	c4 9a       	sbi	0x18, 4	; 24
     862:	08 95       	ret

00000864 <MCP2515_write>:
	MCP2515_bit_modify(MCP_CANCTRL,0b11100000,MODE_CONFIG);
	MCP2515_bit_modify(MCP_CANCTRL,0b11100000,MODE_LOOPBACK);
	//MCP2515_bit_modify(MCP_CANCTRL,0b11100000,0x00);
}

void MCP2515_write(uint8_t adr, unsigned char data){
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	d8 2f       	mov	r29, r24
     86a:	c6 2f       	mov	r28, r22
	MCP2515_select();
     86c:	0e 94 2e 04 	call	0x85c	; 0x85c <MCP2515_select>
	SPI_send(MCP_WRITE);
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	SPI_send(adr);
     876:	8d 2f       	mov	r24, r29
     878:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	SPI_send(data);
     87c:	8c 2f       	mov	r24, r28
     87e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	MCP2515_deselect();
     882:	0e 94 30 04 	call	0x860	; 0x860 <MCP2515_deselect>
}
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <MCP2515_read>:
	SPI_send(MCP_READ);
	SPI_send(0x00);
	MCP2515_deselect();
}

uint8_t MCP2515_read(uint8_t adr){
     88c:	cf 93       	push	r28
     88e:	c8 2f       	mov	r28, r24
	MCP2515_select();
     890:	0e 94 2e 04 	call	0x85c	; 0x85c <MCP2515_select>
	SPI_send(MCP_READ);
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	SPI_send(adr);
     89a:	8c 2f       	mov	r24, r28
     89c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	uint8_t received_data = SPI_read();
     8a0:	0e 94 92 06 	call	0xd24	; 0xd24 <SPI_read>
     8a4:	c8 2f       	mov	r28, r24
	MCP2515_deselect();
     8a6:	0e 94 30 04 	call	0x860	; 0x860 <MCP2515_deselect>
	return received_data;
}
     8aa:	8c 2f       	mov	r24, r28
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <MCP2515_bit_modify>:
	uint8_t recieved_status = SPI_read();
	MCP2515_deselect();
	return recieved_status;
}

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	18 2f       	mov	r17, r24
     8b8:	d6 2f       	mov	r29, r22
     8ba:	c4 2f       	mov	r28, r20
	MCP2515_select();
     8bc:	0e 94 2e 04 	call	0x85c	; 0x85c <MCP2515_select>
	SPI_send(MCP_BITMOD);
     8c0:	85 e0       	ldi	r24, 0x05	; 5
     8c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	SPI_send(adr);
     8c6:	81 2f       	mov	r24, r17
     8c8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	SPI_send(mask);
     8cc:	8d 2f       	mov	r24, r29
     8ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	SPI_send(data);
     8d2:	8c 2f       	mov	r24, r28
     8d4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	MCP2515_deselect();
     8d8:	0e 94 30 04 	call	0x860	; 0x860 <MCP2515_deselect>
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	08 95       	ret

000008e4 <MCP2515_initialize>:

#include "MCP2515_driver.h"


void MCP2515_initialize(void){
	SPI_initialize();
     8e4:	0e 94 86 06 	call	0xd0c	; 0xd0c <SPI_initialize>
	MCP2515_deselect();
     8e8:	0e 94 30 04 	call	0x860	; 0x860 <MCP2515_deselect>
	MCP2515_bit_modify(MCP_CANCTRL,0b11100000,MODE_CONFIG);
     8ec:	40 e8       	ldi	r20, 0x80	; 128
     8ee:	60 ee       	ldi	r22, 0xE0	; 224
     8f0:	8f e0       	ldi	r24, 0x0F	; 15
     8f2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANCTRL,0b11100000,MODE_LOOPBACK);
     8f6:	40 e4       	ldi	r20, 0x40	; 64
     8f8:	60 ee       	ldi	r22, 0xE0	; 224
     8fa:	8f e0       	ldi	r24, 0x0F	; 15
     8fc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCP2515_bit_modify>
     900:	08 95       	ret

00000902 <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     906:	c3 e2       	ldi	r28, 0x23	; 35
     908:	d4 e0       	ldi	r29, 0x04	; 4
     90a:	d0 93 0a 04 	sts	0x040A, r29
     90e:	c0 93 09 04 	sts	0x0409, r28
	new_menu->ptr_child = ptr_child;
     912:	10 92 0c 04 	sts	0x040C, r1
     916:	10 92 0b 04 	sts	0x040B, r1
	new_menu->ptr_parent = ptr_parent;
     91a:	10 92 0e 04 	sts	0x040E, r1
     91e:	10 92 0d 04 	sts	0x040D, r1
	
	new_menu->title = title;
     922:	e5 e0       	ldi	r30, 0x05	; 5
     924:	f4 e0       	ldi	r31, 0x04	; 4
     926:	82 ea       	ldi	r24, 0xA2	; 162
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	91 83       	std	Z+1, r25	; 0x01
     92c:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	90 93 08 04 	sts	0x0408, r25
     936:	80 93 07 04 	sts	0x0407, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     93a:	27 ed       	ldi	r18, 0xD7	; 215
     93c:	33 e0       	ldi	r19, 0x03	; 3
     93e:	30 93 28 04 	sts	0x0428, r19
     942:	20 93 27 04 	sts	0x0427, r18
	new_menu->ptr_child = ptr_child;
     946:	6f e0       	ldi	r22, 0x0F	; 15
     948:	74 e0       	ldi	r23, 0x04	; 4
     94a:	70 93 2a 04 	sts	0x042A, r23
     94e:	60 93 29 04 	sts	0x0429, r22
	new_menu->ptr_parent = ptr_parent;
     952:	10 92 2c 04 	sts	0x042C, r1
     956:	10 92 2b 04 	sts	0x042B, r1
	
	new_menu->title = title;
     95a:	4c e9       	ldi	r20, 0x9C	; 156
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	59 83       	std	Y+1, r21	; 0x01
     960:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     962:	90 93 26 04 	sts	0x0426, r25
     966:	80 93 25 04 	sts	0x0425, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     96a:	f0 93 dc 03 	sts	0x03DC, r31
     96e:	e0 93 db 03 	sts	0x03DB, r30
	new_menu->ptr_child = ptr_child;
     972:	c1 ef       	ldi	r28, 0xF1	; 241
     974:	d3 e0       	ldi	r29, 0x03	; 3
     976:	d0 93 de 03 	sts	0x03DE, r29
     97a:	c0 93 dd 03 	sts	0x03DD, r28
	new_menu->ptr_parent = ptr_parent;
     97e:	10 92 e0 03 	sts	0x03E0, r1
     982:	10 92 df 03 	sts	0x03DF, r1
	
	new_menu->title = title;
     986:	44 e9       	ldi	r20, 0x94	; 148
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	d9 01       	movw	r26, r18
     98c:	4d 93       	st	X+, r20
     98e:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     990:	90 93 da 03 	sts	0x03DA, r25
     994:	80 93 d9 03 	sts	0x03D9, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     998:	2b ef       	ldi	r18, 0xFB	; 251
     99a:	33 e0       	ldi	r19, 0x03	; 3
     99c:	30 93 f6 03 	sts	0x03F6, r19
     9a0:	20 93 f5 03 	sts	0x03F5, r18
	new_menu->ptr_child = ptr_child;
     9a4:	10 92 f8 03 	sts	0x03F8, r1
     9a8:	10 92 f7 03 	sts	0x03F7, r1
	new_menu->ptr_parent = ptr_parent;
     9ac:	f0 93 fa 03 	sts	0x03FA, r31
     9b0:	e0 93 f9 03 	sts	0x03F9, r30
	
	new_menu->title = title;
     9b4:	8e e8       	ldi	r24, 0x8E	; 142
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	99 83       	std	Y+1, r25	; 0x01
     9ba:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 f4 03 	sts	0x03F4, r25
     9c4:	80 93 f3 03 	sts	0x03F3, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     9c8:	d0 93 00 04 	sts	0x0400, r29
     9cc:	c0 93 ff 03 	sts	0x03FF, r28
	new_menu->ptr_child = ptr_child;
     9d0:	10 92 02 04 	sts	0x0402, r1
     9d4:	10 92 01 04 	sts	0x0401, r1
	new_menu->ptr_parent = ptr_parent;
     9d8:	f0 93 04 04 	sts	0x0404, r31
     9dc:	e0 93 03 04 	sts	0x0403, r30
	
	new_menu->title = title;
     9e0:	45 e8       	ldi	r20, 0x85	; 133
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	d9 01       	movw	r26, r18
     9e6:	4d 93       	st	X+, r20
     9e8:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     9ea:	90 93 fe 03 	sts	0x03FE, r25
     9ee:	80 93 fd 03 	sts	0x03FD, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     9f2:	c9 e1       	ldi	r28, 0x19	; 25
     9f4:	d4 e0       	ldi	r29, 0x04	; 4
     9f6:	d0 93 14 04 	sts	0x0414, r29
     9fa:	c0 93 13 04 	sts	0x0413, r28
	new_menu->ptr_child = ptr_child;
     9fe:	10 92 16 04 	sts	0x0416, r1
     a02:	10 92 15 04 	sts	0x0415, r1
	new_menu->ptr_parent = ptr_parent;
     a06:	f0 93 18 04 	sts	0x0418, r31
     a0a:	e0 93 17 04 	sts	0x0417, r30
	
	new_menu->title = title;
     a0e:	2a e7       	ldi	r18, 0x7A	; 122
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	db 01       	movw	r26, r22
     a14:	2d 93       	st	X+, r18
     a16:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     a18:	90 93 12 04 	sts	0x0412, r25
     a1c:	80 93 11 04 	sts	0x0411, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     a20:	70 93 1e 04 	sts	0x041E, r23
     a24:	60 93 1d 04 	sts	0x041D, r22
	new_menu->ptr_child = ptr_child;
     a28:	10 92 20 04 	sts	0x0420, r1
     a2c:	10 92 1f 04 	sts	0x041F, r1
	new_menu->ptr_parent = ptr_parent;
     a30:	f0 93 22 04 	sts	0x0422, r31
     a34:	e0 93 21 04 	sts	0x0421, r30
	
	new_menu->title = title;
     a38:	20 e7       	ldi	r18, 0x70	; 112
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	39 83       	std	Y+1, r19	; 0x01
     a3e:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     a40:	90 93 1c 04 	sts	0x041C, r25
     a44:	80 93 1b 04 	sts	0x041B, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     a48:	f0 93 d4 03 	sts	0x03D4, r31
     a4c:	e0 93 d3 03 	sts	0x03D3, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     a50:	f0 93 d6 03 	sts	0x03D6, r31
     a54:	e0 93 d5 03 	sts	0x03D5, r30
	
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <menu_left_button_flag>:
	return 0;
	
}

void menu_left_button_flag(void){
	left_button_flag = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 cc 03 	sts	0x03CC, r24
     a64:	08 95       	ret

00000a66 <menu_right_button_flag>:
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 cd 03 	sts	0x03CD, r24
     a6c:	08 95       	ret

00000a6e <oled_home>:
	}
}

void oled_home(void)
{
	page_sram = 0;
     a6e:	10 92 d2 03 	sts	0x03D2, r1
     a72:	10 92 d1 03 	sts	0x03D1, r1
	col_sram = 0;
     a76:	10 92 d0 03 	sts	0x03D0, r1
     a7a:	10 92 cf 03 	sts	0x03CF, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     a7e:	e0 91 0e 01 	lds	r30, 0x010E
     a82:	f0 91 0f 01 	lds	r31, 0x010F
     a86:	81 e2       	ldi	r24, 0x21	; 33
     a88:	80 83       	st	Z, r24
     a8a:	e0 91 0e 01 	lds	r30, 0x010E
     a8e:	f0 91 0f 01 	lds	r31, 0x010F
     a92:	10 82       	st	Z, r1
     a94:	e0 91 0e 01 	lds	r30, 0x010E
     a98:	f0 91 0f 01 	lds	r31, 0x010F
     a9c:	8f e7       	ldi	r24, 0x7F	; 127
     a9e:	80 83       	st	Z, r24
     aa0:	e0 91 0e 01 	lds	r30, 0x010E
     aa4:	f0 91 0f 01 	lds	r31, 0x010F
     aa8:	82 e2       	ldi	r24, 0x22	; 34
     aaa:	80 83       	st	Z, r24
     aac:	e0 91 0e 01 	lds	r30, 0x010E
     ab0:	f0 91 0f 01 	lds	r31, 0x010F
     ab4:	10 82       	st	Z, r1
     ab6:	e0 91 0e 01 	lds	r30, 0x010E
     aba:	f0 91 0f 01 	lds	r31, 0x010F
     abe:	87 e0       	ldi	r24, 0x07	; 7
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <oled_goto_line>:
	//write_c(0x10);
}



void oled_goto_line(unsigned int line){
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	ec 01       	movw	r28, r24
	oled_home();
     aca:	0e 94 37 05 	call	0xa6e	; 0xa6e <oled_home>
	page_sram = line;
     ace:	d0 93 d2 03 	sts	0x03D2, r29
     ad2:	c0 93 d1 03 	sts	0x03D1, r28
	if(line%8){
     ad6:	ce 01       	movw	r24, r28
     ad8:	87 70       	andi	r24, 0x07	; 7
     ada:	99 27       	eor	r25, r25
     adc:	89 2b       	or	r24, r25
     ade:	89 f0       	breq	.+34     	; 0xb02 <oled_goto_line+0x3e>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     ae0:	e0 91 0e 01 	lds	r30, 0x010E
     ae4:	f0 91 0f 01 	lds	r31, 0x010F
     ae8:	10 82       	st	Z, r1
     aea:	e0 91 0e 01 	lds	r30, 0x010E
     aee:	f0 91 0f 01 	lds	r31, 0x010F
     af2:	80 e1       	ldi	r24, 0x10	; 16
     af4:	80 83       	st	Z, r24
	oled_home();
	page_sram = line;
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
     af6:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     af8:	e0 91 0e 01 	lds	r30, 0x010E
     afc:	f0 91 0f 01 	lds	r31, 0x010F
     b00:	c0 83       	st	Z, r28
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <oled_clear_line>:

void oled_goto_column(unsigned int column){
	col_sram = column%128;
}

void oled_clear_line(unsigned int line){
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	ec 01       	movw	r28, r24
	oled_goto_line(line);
     b0e:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_goto_line>
	if(line < 8){
     b12:	28 97       	sbiw	r28, 0x08	; 8
     b14:	50 f4       	brcc	.+20     	; 0xb2a <oled_clear_line+0x22>
     b16:	80 e8       	ldi	r24, 0x80	; 128
     b18:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
     b1a:	e0 91 0c 01 	lds	r30, 0x010C
     b1e:	f0 91 0d 01 	lds	r31, 0x010D
     b22:	10 82       	st	Z, r1
     b24:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	c1 f7       	brne	.-16     	; 0xb1a <oled_clear_line+0x12>
			write_d(0b00000000);
		}
	}
} 
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <oled_reset>:

}


void oled_reset(void)
{		
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 84 05 	call	0xb08	; 0xb08 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
     b3e:	21 96       	adiw	r28, 0x01	; 1
     b40:	c8 30       	cpi	r28, 0x08	; 8
     b42:	d1 05       	cpc	r29, r1
     b44:	c9 f7       	brne	.-14     	; 0xb38 <oled_reset+0x8>
		oled_clear_line(i);
	}
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
     b4c:	85 b7       	in	r24, 0x35	; 53
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b52:	80 b7       	in	r24, 0x30	; 48
     b54:	80 62       	ori	r24, 0x20	; 32
     b56:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     b58:	e0 91 0e 01 	lds	r30, 0x010E
     b5c:	f0 91 0f 01 	lds	r31, 0x010F
     b60:	8e ea       	ldi	r24, 0xAE	; 174
     b62:	80 83       	st	Z, r24
     b64:	e0 91 0e 01 	lds	r30, 0x010E
     b68:	f0 91 0f 01 	lds	r31, 0x010F
     b6c:	81 ea       	ldi	r24, 0xA1	; 161
     b6e:	80 83       	st	Z, r24
     b70:	e0 91 0e 01 	lds	r30, 0x010E
     b74:	f0 91 0f 01 	lds	r31, 0x010F
     b78:	8a ed       	ldi	r24, 0xDA	; 218
     b7a:	80 83       	st	Z, r24
     b7c:	e0 91 0e 01 	lds	r30, 0x010E
     b80:	f0 91 0f 01 	lds	r31, 0x010F
     b84:	82 e1       	ldi	r24, 0x12	; 18
     b86:	80 83       	st	Z, r24
     b88:	e0 91 0e 01 	lds	r30, 0x010E
     b8c:	f0 91 0f 01 	lds	r31, 0x010F
     b90:	88 ec       	ldi	r24, 0xC8	; 200
     b92:	80 83       	st	Z, r24
     b94:	e0 91 0e 01 	lds	r30, 0x010E
     b98:	f0 91 0f 01 	lds	r31, 0x010F
     b9c:	88 ea       	ldi	r24, 0xA8	; 168
     b9e:	80 83       	st	Z, r24
     ba0:	e0 91 0e 01 	lds	r30, 0x010E
     ba4:	f0 91 0f 01 	lds	r31, 0x010F
     ba8:	8f e3       	ldi	r24, 0x3F	; 63
     baa:	80 83       	st	Z, r24
     bac:	e0 91 0e 01 	lds	r30, 0x010E
     bb0:	f0 91 0f 01 	lds	r31, 0x010F
     bb4:	85 ed       	ldi	r24, 0xD5	; 213
     bb6:	80 83       	st	Z, r24
     bb8:	e0 91 0e 01 	lds	r30, 0x010E
     bbc:	f0 91 0f 01 	lds	r31, 0x010F
     bc0:	80 e8       	ldi	r24, 0x80	; 128
     bc2:	80 83       	st	Z, r24
     bc4:	e0 91 0e 01 	lds	r30, 0x010E
     bc8:	f0 91 0f 01 	lds	r31, 0x010F
     bcc:	81 e8       	ldi	r24, 0x81	; 129
     bce:	80 83       	st	Z, r24
     bd0:	e0 91 0e 01 	lds	r30, 0x010E
     bd4:	f0 91 0f 01 	lds	r31, 0x010F
     bd8:	80 e5       	ldi	r24, 0x50	; 80
     bda:	80 83       	st	Z, r24
     bdc:	e0 91 0e 01 	lds	r30, 0x010E
     be0:	f0 91 0f 01 	lds	r31, 0x010F
     be4:	89 ed       	ldi	r24, 0xD9	; 217
     be6:	80 83       	st	Z, r24
     be8:	e0 91 0e 01 	lds	r30, 0x010E
     bec:	f0 91 0f 01 	lds	r31, 0x010F
     bf0:	81 e2       	ldi	r24, 0x21	; 33
     bf2:	80 83       	st	Z, r24
     bf4:	e0 91 0e 01 	lds	r30, 0x010E
     bf8:	f0 91 0f 01 	lds	r31, 0x010F
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	80 83       	st	Z, r24
     c00:	e0 91 0e 01 	lds	r30, 0x010E
     c04:	f0 91 0f 01 	lds	r31, 0x010F
     c08:	10 82       	st	Z, r1
     c0a:	e0 91 0e 01 	lds	r30, 0x010E
     c0e:	f0 91 0f 01 	lds	r31, 0x010F
     c12:	8b ed       	ldi	r24, 0xDB	; 219
     c14:	80 83       	st	Z, r24
     c16:	e0 91 0e 01 	lds	r30, 0x010E
     c1a:	f0 91 0f 01 	lds	r31, 0x010F
     c1e:	80 e3       	ldi	r24, 0x30	; 48
     c20:	80 83       	st	Z, r24
     c22:	e0 91 0e 01 	lds	r30, 0x010E
     c26:	f0 91 0f 01 	lds	r31, 0x010F
     c2a:	8d ea       	ldi	r24, 0xAD	; 173
     c2c:	80 83       	st	Z, r24
     c2e:	e0 91 0e 01 	lds	r30, 0x010E
     c32:	f0 91 0f 01 	lds	r31, 0x010F
     c36:	10 82       	st	Z, r1
     c38:	e0 91 0e 01 	lds	r30, 0x010E
     c3c:	f0 91 0f 01 	lds	r31, 0x010F
     c40:	84 ea       	ldi	r24, 0xA4	; 164
     c42:	80 83       	st	Z, r24
     c44:	e0 91 0e 01 	lds	r30, 0x010E
     c48:	f0 91 0f 01 	lds	r31, 0x010F
     c4c:	86 ea       	ldi	r24, 0xA6	; 166
     c4e:	80 83       	st	Z, r24
     c50:	e0 91 0e 01 	lds	r30, 0x010E
     c54:	f0 91 0f 01 	lds	r31, 0x010F
     c58:	8f ea       	ldi	r24, 0xAF	; 175
     c5a:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
     c5c:	0e 94 98 05 	call	0xb30	; 0xb30 <oled_reset>
	oled_home();
     c60:	0e 94 37 05 	call	0xa6e	; 0xa6e <oled_home>
     c64:	08 95       	ret

00000c66 <sram_init>:
	}else{
		return 0;
	}
}

void sram_init(void){
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
     c70:	9c 01       	movw	r18, r24
     c72:	24 0f       	add	r18, r20
     c74:	35 1f       	adc	r19, r21
     c76:	e0 91 0a 01 	lds	r30, 0x010A
     c7a:	f0 91 0b 01 	lds	r31, 0x010B
     c7e:	e2 0f       	add	r30, r18
     c80:	f3 1f       	adc	r31, r19
     c82:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	80 38       	cpi	r24, 0x80	; 128
     c88:	91 05       	cpc	r25, r1
     c8a:	91 f7       	brne	.-28     	; 0xc70 <sram_init+0xa>
     c8c:	40 58       	subi	r20, 0x80	; 128
     c8e:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
     c90:	41 15       	cp	r20, r1
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	58 07       	cpc	r21, r24
     c96:	19 f0       	breq	.+6      	; 0xc9e <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
     c98:	87 2f       	mov	r24, r23
     c9a:	96 2f       	mov	r25, r22
     c9c:	e9 cf       	rjmp	.-46     	; 0xc70 <sram_init+0xa>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
		}
	}
	edited = 0b11111111;
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	80 93 ce 03 	sts	0x03CE, r24
     ca4:	08 95       	ret

00000ca6 <write_screen>:
		sram_pixel(-x+x0,y0+sqrt((pow(radius,2)-pow(x,2))));
	}
}


void write_screen(void){//update all the pages that are edited
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	c0 e0       	ldi	r28, 0x00	; 0
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
     cb6:	00 e0       	ldi	r16, 0x00	; 0
     cb8:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
     cba:	e1 2c       	mov	r14, r1
     cbc:	f1 2c       	mov	r15, r1
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
     cbe:	c8 01       	movw	r24, r16
     cc0:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_goto_line>
		for(unsigned int k = 0; k < 128; k++){
     cc4:	2e 2d       	mov	r18, r14
     cc6:	3f 2d       	mov	r19, r15
			write_d(ext_ram[r*128 + k]);
     cc8:	a9 01       	movw	r20, r18
     cca:	4c 0f       	add	r20, r28
     ccc:	5d 1f       	adc	r21, r29
     cce:	e0 91 0a 01 	lds	r30, 0x010A
     cd2:	f0 91 0b 01 	lds	r31, 0x010B
     cd6:	e4 0f       	add	r30, r20
     cd8:	f5 1f       	adc	r31, r21
     cda:	80 81       	ld	r24, Z
}


void write_d(uint8_t data)
{
	*oled_data = data;
     cdc:	e0 91 0c 01 	lds	r30, 0x010C
     ce0:	f0 91 0d 01 	lds	r31, 0x010D
     ce4:	80 83       	st	Z, r24
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	20 38       	cpi	r18, 0x80	; 128
     cec:	31 05       	cpc	r19, r1
     cee:	61 f7       	brne	.-40     	; 0xcc8 <write_screen+0x22>
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
     cf0:	0f 5f       	subi	r16, 0xFF	; 255
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	c0 58       	subi	r28, 0x80	; 128
     cf6:	df 4f       	sbci	r29, 0xFF	; 255
     cf8:	08 30       	cpi	r16, 0x08	; 8
     cfa:	11 05       	cpc	r17, r1
     cfc:	01 f7       	brne	.-64     	; 0xcbe <write_screen+0x18>
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
			write_d(ext_ram[r*128 + k]);
		}
	}
}
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	08 95       	ret

00000d0c <SPI_initialize>:
 */ 
#include "SPI.h"


void SPI_initialize(void){
	DDRB |=	(1 << PB5) | (1 << PB7) | (1 << PB4);
     d0c:	87 b3       	in	r24, 0x17	; 23
     d0e:	80 6b       	ori	r24, 0xB0	; 176
     d10:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6);
     d12:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1 << PB4);
     d14:	c4 9a       	sbi	0x18, 4	; 24
	//BIT_ON(SPCR,SPIE);		//SPI INTERRUPT ENABLE
	//BIT_OFF(SPCR,DORD);		//transmit the most significant bit first, change to ON if we transmit the Least significant first
	BIT_ON(SPCR,MSTR);		//MASTER/SLAVE SELECT, set to 1 for master, 0 for slave (master wanted)
     d16:	6c 9a       	sbi	0x0d, 4	; 13
	//BIT_ON(SPCR,CPOL);		//CLOCK POLARITY, NO IDEA WHAT WE NEED!!!!!!!!!!!!!
	//BIT_ON(SPCR,CPHA);		//CLOCK PHASE, NO IDEA!!!!!!!!!!!
	//BIT_ON(SPCR,SPR1);		//SPI CLOCK RATE SELECT, BIT 1
	//BIT_ON(SPCR,SPR0);		//SPI CLOCK RATE SELECT, BIT 0
	BIT_ON(SPCR,SPE);		//SPI ENABLE, overrides the normal pins function (we want this)
     d18:	6e 9a       	sbi	0x0d, 6	; 13
     d1a:	08 95       	ret

00000d1c <SPI_send>:
}


void SPI_send(char data) {
	//Start the transmission
	SPDR = data;
     d1c:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     d1e:	77 9b       	sbis	0x0e, 7	; 14
     d20:	fe cf       	rjmp	.-4      	; 0xd1e <SPI_send+0x2>
}
     d22:	08 95       	ret

00000d24 <SPI_read>:



char SPI_read(void){
	//Send dummy data to read from slave
	SPI_send(0);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SPI_send>
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
     d2a:	77 9b       	sbis	0x0e, 7	; 14
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <SPI_read+0x6>

	return SPDR;
     d2e:	8f b1       	in	r24, 0x0f	; 15
}
     d30:	08 95       	ret

00000d32 <send_UART>:
     d32:	5d 9b       	sbis	0x0b, 5	; 11
     d34:	fe cf       	rjmp	.-4      	; 0xd32 <send_UART>
     d36:	8c b9       	out	0x0c, r24	; 12
     d38:	08 95       	ret

00000d3a <recieve_UART>:
     d3a:	5f 9b       	sbis	0x0b, 7	; 11
     d3c:	fe cf       	rjmp	.-4      	; 0xd3a <recieve_UART>
     d3e:	8c b1       	in	r24, 0x0c	; 12
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	08 95       	ret

00000d44 <init_UART>:
     d44:	90 bd       	out	0x20, r25	; 32
     d46:	89 b9       	out	0x09, r24	; 9
     d48:	88 e1       	ldi	r24, 0x18	; 24
     d4a:	8a b9       	out	0x0a, r24	; 10
     d4c:	6d e9       	ldi	r22, 0x9D	; 157
     d4e:	76 e0       	ldi	r23, 0x06	; 6
     d50:	89 e9       	ldi	r24, 0x99	; 153
     d52:	96 e0       	ldi	r25, 0x06	; 6
     d54:	0e 94 22 09 	call	0x1244	; 0x1244 <fdevopen>
     d58:	08 95       	ret

00000d5a <__subsf3>:
     d5a:	50 58       	subi	r21, 0x80	; 128

00000d5c <__addsf3>:
     d5c:	bb 27       	eor	r27, r27
     d5e:	aa 27       	eor	r26, r26
     d60:	0e d0       	rcall	.+28     	; 0xd7e <__addsf3x>
     d62:	4d c1       	rjmp	.+666    	; 0xffe <__fp_round>
     d64:	3e d1       	rcall	.+636    	; 0xfe2 <__fp_pscA>
     d66:	30 f0       	brcs	.+12     	; 0xd74 <__addsf3+0x18>
     d68:	43 d1       	rcall	.+646    	; 0xff0 <__fp_pscB>
     d6a:	20 f0       	brcs	.+8      	; 0xd74 <__addsf3+0x18>
     d6c:	31 f4       	brne	.+12     	; 0xd7a <__addsf3+0x1e>
     d6e:	9f 3f       	cpi	r25, 0xFF	; 255
     d70:	11 f4       	brne	.+4      	; 0xd76 <__addsf3+0x1a>
     d72:	1e f4       	brtc	.+6      	; 0xd7a <__addsf3+0x1e>
     d74:	33 c1       	rjmp	.+614    	; 0xfdc <__fp_nan>
     d76:	0e f4       	brtc	.+2      	; 0xd7a <__addsf3+0x1e>
     d78:	e0 95       	com	r30
     d7a:	e7 fb       	bst	r30, 7
     d7c:	29 c1       	rjmp	.+594    	; 0xfd0 <__fp_inf>

00000d7e <__addsf3x>:
     d7e:	e9 2f       	mov	r30, r25
     d80:	4f d1       	rcall	.+670    	; 0x1020 <__fp_split3>
     d82:	80 f3       	brcs	.-32     	; 0xd64 <__addsf3+0x8>
     d84:	ba 17       	cp	r27, r26
     d86:	62 07       	cpc	r22, r18
     d88:	73 07       	cpc	r23, r19
     d8a:	84 07       	cpc	r24, r20
     d8c:	95 07       	cpc	r25, r21
     d8e:	18 f0       	brcs	.+6      	; 0xd96 <__addsf3x+0x18>
     d90:	71 f4       	brne	.+28     	; 0xdae <__addsf3x+0x30>
     d92:	9e f5       	brtc	.+102    	; 0xdfa <__addsf3x+0x7c>
     d94:	67 c1       	rjmp	.+718    	; 0x1064 <__fp_zero>
     d96:	0e f4       	brtc	.+2      	; 0xd9a <__addsf3x+0x1c>
     d98:	e0 95       	com	r30
     d9a:	0b 2e       	mov	r0, r27
     d9c:	ba 2f       	mov	r27, r26
     d9e:	a0 2d       	mov	r26, r0
     da0:	0b 01       	movw	r0, r22
     da2:	b9 01       	movw	r22, r18
     da4:	90 01       	movw	r18, r0
     da6:	0c 01       	movw	r0, r24
     da8:	ca 01       	movw	r24, r20
     daa:	a0 01       	movw	r20, r0
     dac:	11 24       	eor	r1, r1
     dae:	ff 27       	eor	r31, r31
     db0:	59 1b       	sub	r21, r25
     db2:	99 f0       	breq	.+38     	; 0xdda <__addsf3x+0x5c>
     db4:	59 3f       	cpi	r21, 0xF9	; 249
     db6:	50 f4       	brcc	.+20     	; 0xdcc <__addsf3x+0x4e>
     db8:	50 3e       	cpi	r21, 0xE0	; 224
     dba:	68 f1       	brcs	.+90     	; 0xe16 <__addsf3x+0x98>
     dbc:	1a 16       	cp	r1, r26
     dbe:	f0 40       	sbci	r31, 0x00	; 0
     dc0:	a2 2f       	mov	r26, r18
     dc2:	23 2f       	mov	r18, r19
     dc4:	34 2f       	mov	r19, r20
     dc6:	44 27       	eor	r20, r20
     dc8:	58 5f       	subi	r21, 0xF8	; 248
     dca:	f3 cf       	rjmp	.-26     	; 0xdb2 <__addsf3x+0x34>
     dcc:	46 95       	lsr	r20
     dce:	37 95       	ror	r19
     dd0:	27 95       	ror	r18
     dd2:	a7 95       	ror	r26
     dd4:	f0 40       	sbci	r31, 0x00	; 0
     dd6:	53 95       	inc	r21
     dd8:	c9 f7       	brne	.-14     	; 0xdcc <__addsf3x+0x4e>
     dda:	7e f4       	brtc	.+30     	; 0xdfa <__addsf3x+0x7c>
     ddc:	1f 16       	cp	r1, r31
     dde:	ba 0b       	sbc	r27, r26
     de0:	62 0b       	sbc	r22, r18
     de2:	73 0b       	sbc	r23, r19
     de4:	84 0b       	sbc	r24, r20
     de6:	ba f0       	brmi	.+46     	; 0xe16 <__addsf3x+0x98>
     de8:	91 50       	subi	r25, 0x01	; 1
     dea:	a1 f0       	breq	.+40     	; 0xe14 <__addsf3x+0x96>
     dec:	ff 0f       	add	r31, r31
     dee:	bb 1f       	adc	r27, r27
     df0:	66 1f       	adc	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	88 1f       	adc	r24, r24
     df6:	c2 f7       	brpl	.-16     	; 0xde8 <__addsf3x+0x6a>
     df8:	0e c0       	rjmp	.+28     	; 0xe16 <__addsf3x+0x98>
     dfa:	ba 0f       	add	r27, r26
     dfc:	62 1f       	adc	r22, r18
     dfe:	73 1f       	adc	r23, r19
     e00:	84 1f       	adc	r24, r20
     e02:	48 f4       	brcc	.+18     	; 0xe16 <__addsf3x+0x98>
     e04:	87 95       	ror	r24
     e06:	77 95       	ror	r23
     e08:	67 95       	ror	r22
     e0a:	b7 95       	ror	r27
     e0c:	f7 95       	ror	r31
     e0e:	9e 3f       	cpi	r25, 0xFE	; 254
     e10:	08 f0       	brcs	.+2      	; 0xe14 <__addsf3x+0x96>
     e12:	b3 cf       	rjmp	.-154    	; 0xd7a <__addsf3+0x1e>
     e14:	93 95       	inc	r25
     e16:	88 0f       	add	r24, r24
     e18:	08 f0       	brcs	.+2      	; 0xe1c <__addsf3x+0x9e>
     e1a:	99 27       	eor	r25, r25
     e1c:	ee 0f       	add	r30, r30
     e1e:	97 95       	ror	r25
     e20:	87 95       	ror	r24
     e22:	08 95       	ret

00000e24 <__divsf3>:
     e24:	0c d0       	rcall	.+24     	; 0xe3e <__divsf3x>
     e26:	eb c0       	rjmp	.+470    	; 0xffe <__fp_round>
     e28:	e3 d0       	rcall	.+454    	; 0xff0 <__fp_pscB>
     e2a:	40 f0       	brcs	.+16     	; 0xe3c <__divsf3+0x18>
     e2c:	da d0       	rcall	.+436    	; 0xfe2 <__fp_pscA>
     e2e:	30 f0       	brcs	.+12     	; 0xe3c <__divsf3+0x18>
     e30:	21 f4       	brne	.+8      	; 0xe3a <__divsf3+0x16>
     e32:	5f 3f       	cpi	r21, 0xFF	; 255
     e34:	19 f0       	breq	.+6      	; 0xe3c <__divsf3+0x18>
     e36:	cc c0       	rjmp	.+408    	; 0xfd0 <__fp_inf>
     e38:	51 11       	cpse	r21, r1
     e3a:	15 c1       	rjmp	.+554    	; 0x1066 <__fp_szero>
     e3c:	cf c0       	rjmp	.+414    	; 0xfdc <__fp_nan>

00000e3e <__divsf3x>:
     e3e:	f0 d0       	rcall	.+480    	; 0x1020 <__fp_split3>
     e40:	98 f3       	brcs	.-26     	; 0xe28 <__divsf3+0x4>

00000e42 <__divsf3_pse>:
     e42:	99 23       	and	r25, r25
     e44:	c9 f3       	breq	.-14     	; 0xe38 <__divsf3+0x14>
     e46:	55 23       	and	r21, r21
     e48:	b1 f3       	breq	.-20     	; 0xe36 <__divsf3+0x12>
     e4a:	95 1b       	sub	r25, r21
     e4c:	55 0b       	sbc	r21, r21
     e4e:	bb 27       	eor	r27, r27
     e50:	aa 27       	eor	r26, r26
     e52:	62 17       	cp	r22, r18
     e54:	73 07       	cpc	r23, r19
     e56:	84 07       	cpc	r24, r20
     e58:	38 f0       	brcs	.+14     	; 0xe68 <__divsf3_pse+0x26>
     e5a:	9f 5f       	subi	r25, 0xFF	; 255
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	aa 1f       	adc	r26, r26
     e66:	a9 f3       	breq	.-22     	; 0xe52 <__divsf3_pse+0x10>
     e68:	33 d0       	rcall	.+102    	; 0xed0 <__divsf3_pse+0x8e>
     e6a:	0e 2e       	mov	r0, r30
     e6c:	3a f0       	brmi	.+14     	; 0xe7c <__divsf3_pse+0x3a>
     e6e:	e0 e8       	ldi	r30, 0x80	; 128
     e70:	30 d0       	rcall	.+96     	; 0xed2 <__divsf3_pse+0x90>
     e72:	91 50       	subi	r25, 0x01	; 1
     e74:	50 40       	sbci	r21, 0x00	; 0
     e76:	e6 95       	lsr	r30
     e78:	00 1c       	adc	r0, r0
     e7a:	ca f7       	brpl	.-14     	; 0xe6e <__divsf3_pse+0x2c>
     e7c:	29 d0       	rcall	.+82     	; 0xed0 <__divsf3_pse+0x8e>
     e7e:	fe 2f       	mov	r31, r30
     e80:	27 d0       	rcall	.+78     	; 0xed0 <__divsf3_pse+0x8e>
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	bb 1f       	adc	r27, r27
     e8a:	26 17       	cp	r18, r22
     e8c:	37 07       	cpc	r19, r23
     e8e:	48 07       	cpc	r20, r24
     e90:	ab 07       	cpc	r26, r27
     e92:	b0 e8       	ldi	r27, 0x80	; 128
     e94:	09 f0       	breq	.+2      	; 0xe98 <__divsf3_pse+0x56>
     e96:	bb 0b       	sbc	r27, r27
     e98:	80 2d       	mov	r24, r0
     e9a:	bf 01       	movw	r22, r30
     e9c:	ff 27       	eor	r31, r31
     e9e:	93 58       	subi	r25, 0x83	; 131
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	2a f0       	brmi	.+10     	; 0xeae <__divsf3_pse+0x6c>
     ea4:	9e 3f       	cpi	r25, 0xFE	; 254
     ea6:	51 05       	cpc	r21, r1
     ea8:	68 f0       	brcs	.+26     	; 0xec4 <__divsf3_pse+0x82>
     eaa:	92 c0       	rjmp	.+292    	; 0xfd0 <__fp_inf>
     eac:	dc c0       	rjmp	.+440    	; 0x1066 <__fp_szero>
     eae:	5f 3f       	cpi	r21, 0xFF	; 255
     eb0:	ec f3       	brlt	.-6      	; 0xeac <__divsf3_pse+0x6a>
     eb2:	98 3e       	cpi	r25, 0xE8	; 232
     eb4:	dc f3       	brlt	.-10     	; 0xeac <__divsf3_pse+0x6a>
     eb6:	86 95       	lsr	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f7 95       	ror	r31
     ec0:	9f 5f       	subi	r25, 0xFF	; 255
     ec2:	c9 f7       	brne	.-14     	; 0xeb6 <__divsf3_pse+0x74>
     ec4:	88 0f       	add	r24, r24
     ec6:	91 1d       	adc	r25, r1
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	97 f9       	bld	r25, 7
     ece:	08 95       	ret
     ed0:	e1 e0       	ldi	r30, 0x01	; 1
     ed2:	66 0f       	add	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	88 1f       	adc	r24, r24
     ed8:	bb 1f       	adc	r27, r27
     eda:	62 17       	cp	r22, r18
     edc:	73 07       	cpc	r23, r19
     ede:	84 07       	cpc	r24, r20
     ee0:	ba 07       	cpc	r27, r26
     ee2:	20 f0       	brcs	.+8      	; 0xeec <__divsf3_pse+0xaa>
     ee4:	62 1b       	sub	r22, r18
     ee6:	73 0b       	sbc	r23, r19
     ee8:	84 0b       	sbc	r24, r20
     eea:	ba 0b       	sbc	r27, r26
     eec:	ee 1f       	adc	r30, r30
     eee:	88 f7       	brcc	.-30     	; 0xed2 <__divsf3_pse+0x90>
     ef0:	e0 95       	com	r30
     ef2:	08 95       	ret

00000ef4 <__fixsfsi>:
     ef4:	04 d0       	rcall	.+8      	; 0xefe <__fixunssfsi>
     ef6:	68 94       	set
     ef8:	b1 11       	cpse	r27, r1
     efa:	b5 c0       	rjmp	.+362    	; 0x1066 <__fp_szero>
     efc:	08 95       	ret

00000efe <__fixunssfsi>:
     efe:	98 d0       	rcall	.+304    	; 0x1030 <__fp_splitA>
     f00:	88 f0       	brcs	.+34     	; 0xf24 <__fixunssfsi+0x26>
     f02:	9f 57       	subi	r25, 0x7F	; 127
     f04:	90 f0       	brcs	.+36     	; 0xf2a <__fixunssfsi+0x2c>
     f06:	b9 2f       	mov	r27, r25
     f08:	99 27       	eor	r25, r25
     f0a:	b7 51       	subi	r27, 0x17	; 23
     f0c:	a0 f0       	brcs	.+40     	; 0xf36 <__fixunssfsi+0x38>
     f0e:	d1 f0       	breq	.+52     	; 0xf44 <__fixunssfsi+0x46>
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	1a f0       	brmi	.+6      	; 0xf20 <__fixunssfsi+0x22>
     f1a:	ba 95       	dec	r27
     f1c:	c9 f7       	brne	.-14     	; 0xf10 <__fixunssfsi+0x12>
     f1e:	12 c0       	rjmp	.+36     	; 0xf44 <__fixunssfsi+0x46>
     f20:	b1 30       	cpi	r27, 0x01	; 1
     f22:	81 f0       	breq	.+32     	; 0xf44 <__fixunssfsi+0x46>
     f24:	9f d0       	rcall	.+318    	; 0x1064 <__fp_zero>
     f26:	b1 e0       	ldi	r27, 0x01	; 1
     f28:	08 95       	ret
     f2a:	9c c0       	rjmp	.+312    	; 0x1064 <__fp_zero>
     f2c:	67 2f       	mov	r22, r23
     f2e:	78 2f       	mov	r23, r24
     f30:	88 27       	eor	r24, r24
     f32:	b8 5f       	subi	r27, 0xF8	; 248
     f34:	39 f0       	breq	.+14     	; 0xf44 <__fixunssfsi+0x46>
     f36:	b9 3f       	cpi	r27, 0xF9	; 249
     f38:	cc f3       	brlt	.-14     	; 0xf2c <__fixunssfsi+0x2e>
     f3a:	86 95       	lsr	r24
     f3c:	77 95       	ror	r23
     f3e:	67 95       	ror	r22
     f40:	b3 95       	inc	r27
     f42:	d9 f7       	brne	.-10     	; 0xf3a <__fixunssfsi+0x3c>
     f44:	3e f4       	brtc	.+14     	; 0xf54 <__fixunssfsi+0x56>
     f46:	90 95       	com	r25
     f48:	80 95       	com	r24
     f4a:	70 95       	com	r23
     f4c:	61 95       	neg	r22
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	08 95       	ret

00000f56 <__floatunsisf>:
     f56:	e8 94       	clt
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <__floatsisf+0x12>

00000f5a <__floatsisf>:
     f5a:	97 fb       	bst	r25, 7
     f5c:	3e f4       	brtc	.+14     	; 0xf6c <__floatsisf+0x12>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	99 23       	and	r25, r25
     f6e:	a9 f0       	breq	.+42     	; 0xf9a <__floatsisf+0x40>
     f70:	f9 2f       	mov	r31, r25
     f72:	96 e9       	ldi	r25, 0x96	; 150
     f74:	bb 27       	eor	r27, r27
     f76:	93 95       	inc	r25
     f78:	f6 95       	lsr	r31
     f7a:	87 95       	ror	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b7 95       	ror	r27
     f82:	f1 11       	cpse	r31, r1
     f84:	f8 cf       	rjmp	.-16     	; 0xf76 <__floatsisf+0x1c>
     f86:	fa f4       	brpl	.+62     	; 0xfc6 <__floatsisf+0x6c>
     f88:	bb 0f       	add	r27, r27
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__floatsisf+0x36>
     f8c:	60 ff       	sbrs	r22, 0
     f8e:	1b c0       	rjmp	.+54     	; 0xfc6 <__floatsisf+0x6c>
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <__floatsisf+0x6c>
     f9a:	88 23       	and	r24, r24
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <__floatsisf+0x48>
     f9e:	96 e9       	ldi	r25, 0x96	; 150
     fa0:	11 c0       	rjmp	.+34     	; 0xfc4 <__floatsisf+0x6a>
     fa2:	77 23       	and	r23, r23
     fa4:	21 f0       	breq	.+8      	; 0xfae <__floatsisf+0x54>
     fa6:	9e e8       	ldi	r25, 0x8E	; 142
     fa8:	87 2f       	mov	r24, r23
     faa:	76 2f       	mov	r23, r22
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <__floatsisf+0x5e>
     fae:	66 23       	and	r22, r22
     fb0:	71 f0       	breq	.+28     	; 0xfce <__floatsisf+0x74>
     fb2:	96 e8       	ldi	r25, 0x86	; 134
     fb4:	86 2f       	mov	r24, r22
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	2a f0       	brmi	.+10     	; 0xfc6 <__floatsisf+0x6c>
     fbc:	9a 95       	dec	r25
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	da f7       	brpl	.-10     	; 0xfbc <__floatsisf+0x62>
     fc6:	88 0f       	add	r24, r24
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	97 f9       	bld	r25, 7
     fce:	08 95       	ret

00000fd0 <__fp_inf>:
     fd0:	97 f9       	bld	r25, 7
     fd2:	9f 67       	ori	r25, 0x7F	; 127
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	08 95       	ret

00000fdc <__fp_nan>:
     fdc:	9f ef       	ldi	r25, 0xFF	; 255
     fde:	80 ec       	ldi	r24, 0xC0	; 192
     fe0:	08 95       	ret

00000fe2 <__fp_pscA>:
     fe2:	00 24       	eor	r0, r0
     fe4:	0a 94       	dec	r0
     fe6:	16 16       	cp	r1, r22
     fe8:	17 06       	cpc	r1, r23
     fea:	18 06       	cpc	r1, r24
     fec:	09 06       	cpc	r0, r25
     fee:	08 95       	ret

00000ff0 <__fp_pscB>:
     ff0:	00 24       	eor	r0, r0
     ff2:	0a 94       	dec	r0
     ff4:	12 16       	cp	r1, r18
     ff6:	13 06       	cpc	r1, r19
     ff8:	14 06       	cpc	r1, r20
     ffa:	05 06       	cpc	r0, r21
     ffc:	08 95       	ret

00000ffe <__fp_round>:
     ffe:	09 2e       	mov	r0, r25
    1000:	03 94       	inc	r0
    1002:	00 0c       	add	r0, r0
    1004:	11 f4       	brne	.+4      	; 0x100a <__fp_round+0xc>
    1006:	88 23       	and	r24, r24
    1008:	52 f0       	brmi	.+20     	; 0x101e <__fp_round+0x20>
    100a:	bb 0f       	add	r27, r27
    100c:	40 f4       	brcc	.+16     	; 0x101e <__fp_round+0x20>
    100e:	bf 2b       	or	r27, r31
    1010:	11 f4       	brne	.+4      	; 0x1016 <__fp_round+0x18>
    1012:	60 ff       	sbrs	r22, 0
    1014:	04 c0       	rjmp	.+8      	; 0x101e <__fp_round+0x20>
    1016:	6f 5f       	subi	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8f 4f       	sbci	r24, 0xFF	; 255
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	08 95       	ret

00001020 <__fp_split3>:
    1020:	57 fd       	sbrc	r21, 7
    1022:	90 58       	subi	r25, 0x80	; 128
    1024:	44 0f       	add	r20, r20
    1026:	55 1f       	adc	r21, r21
    1028:	59 f0       	breq	.+22     	; 0x1040 <__fp_splitA+0x10>
    102a:	5f 3f       	cpi	r21, 0xFF	; 255
    102c:	71 f0       	breq	.+28     	; 0x104a <__fp_splitA+0x1a>
    102e:	47 95       	ror	r20

00001030 <__fp_splitA>:
    1030:	88 0f       	add	r24, r24
    1032:	97 fb       	bst	r25, 7
    1034:	99 1f       	adc	r25, r25
    1036:	61 f0       	breq	.+24     	; 0x1050 <__fp_splitA+0x20>
    1038:	9f 3f       	cpi	r25, 0xFF	; 255
    103a:	79 f0       	breq	.+30     	; 0x105a <__fp_splitA+0x2a>
    103c:	87 95       	ror	r24
    103e:	08 95       	ret
    1040:	12 16       	cp	r1, r18
    1042:	13 06       	cpc	r1, r19
    1044:	14 06       	cpc	r1, r20
    1046:	55 1f       	adc	r21, r21
    1048:	f2 cf       	rjmp	.-28     	; 0x102e <__fp_split3+0xe>
    104a:	46 95       	lsr	r20
    104c:	f1 df       	rcall	.-30     	; 0x1030 <__fp_splitA>
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <__fp_splitA+0x30>
    1050:	16 16       	cp	r1, r22
    1052:	17 06       	cpc	r1, r23
    1054:	18 06       	cpc	r1, r24
    1056:	99 1f       	adc	r25, r25
    1058:	f1 cf       	rjmp	.-30     	; 0x103c <__fp_splitA+0xc>
    105a:	86 95       	lsr	r24
    105c:	71 05       	cpc	r23, r1
    105e:	61 05       	cpc	r22, r1
    1060:	08 94       	sec
    1062:	08 95       	ret

00001064 <__fp_zero>:
    1064:	e8 94       	clt

00001066 <__fp_szero>:
    1066:	bb 27       	eor	r27, r27
    1068:	66 27       	eor	r22, r22
    106a:	77 27       	eor	r23, r23
    106c:	cb 01       	movw	r24, r22
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret

00001072 <__mulsf3>:
    1072:	0b d0       	rcall	.+22     	; 0x108a <__mulsf3x>
    1074:	c4 cf       	rjmp	.-120    	; 0xffe <__fp_round>
    1076:	b5 df       	rcall	.-150    	; 0xfe2 <__fp_pscA>
    1078:	28 f0       	brcs	.+10     	; 0x1084 <__mulsf3+0x12>
    107a:	ba df       	rcall	.-140    	; 0xff0 <__fp_pscB>
    107c:	18 f0       	brcs	.+6      	; 0x1084 <__mulsf3+0x12>
    107e:	95 23       	and	r25, r21
    1080:	09 f0       	breq	.+2      	; 0x1084 <__mulsf3+0x12>
    1082:	a6 cf       	rjmp	.-180    	; 0xfd0 <__fp_inf>
    1084:	ab cf       	rjmp	.-170    	; 0xfdc <__fp_nan>
    1086:	11 24       	eor	r1, r1
    1088:	ee cf       	rjmp	.-36     	; 0x1066 <__fp_szero>

0000108a <__mulsf3x>:
    108a:	ca df       	rcall	.-108    	; 0x1020 <__fp_split3>
    108c:	a0 f3       	brcs	.-24     	; 0x1076 <__mulsf3+0x4>

0000108e <__mulsf3_pse>:
    108e:	95 9f       	mul	r25, r21
    1090:	d1 f3       	breq	.-12     	; 0x1086 <__mulsf3+0x14>
    1092:	95 0f       	add	r25, r21
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	55 1f       	adc	r21, r21
    1098:	62 9f       	mul	r22, r18
    109a:	f0 01       	movw	r30, r0
    109c:	72 9f       	mul	r23, r18
    109e:	bb 27       	eor	r27, r27
    10a0:	f0 0d       	add	r31, r0
    10a2:	b1 1d       	adc	r27, r1
    10a4:	63 9f       	mul	r22, r19
    10a6:	aa 27       	eor	r26, r26
    10a8:	f0 0d       	add	r31, r0
    10aa:	b1 1d       	adc	r27, r1
    10ac:	aa 1f       	adc	r26, r26
    10ae:	64 9f       	mul	r22, r20
    10b0:	66 27       	eor	r22, r22
    10b2:	b0 0d       	add	r27, r0
    10b4:	a1 1d       	adc	r26, r1
    10b6:	66 1f       	adc	r22, r22
    10b8:	82 9f       	mul	r24, r18
    10ba:	22 27       	eor	r18, r18
    10bc:	b0 0d       	add	r27, r0
    10be:	a1 1d       	adc	r26, r1
    10c0:	62 1f       	adc	r22, r18
    10c2:	73 9f       	mul	r23, r19
    10c4:	b0 0d       	add	r27, r0
    10c6:	a1 1d       	adc	r26, r1
    10c8:	62 1f       	adc	r22, r18
    10ca:	83 9f       	mul	r24, r19
    10cc:	a0 0d       	add	r26, r0
    10ce:	61 1d       	adc	r22, r1
    10d0:	22 1f       	adc	r18, r18
    10d2:	74 9f       	mul	r23, r20
    10d4:	33 27       	eor	r19, r19
    10d6:	a0 0d       	add	r26, r0
    10d8:	61 1d       	adc	r22, r1
    10da:	23 1f       	adc	r18, r19
    10dc:	84 9f       	mul	r24, r20
    10de:	60 0d       	add	r22, r0
    10e0:	21 1d       	adc	r18, r1
    10e2:	82 2f       	mov	r24, r18
    10e4:	76 2f       	mov	r23, r22
    10e6:	6a 2f       	mov	r22, r26
    10e8:	11 24       	eor	r1, r1
    10ea:	9f 57       	subi	r25, 0x7F	; 127
    10ec:	50 40       	sbci	r21, 0x00	; 0
    10ee:	8a f0       	brmi	.+34     	; 0x1112 <__mulsf3_pse+0x84>
    10f0:	e1 f0       	breq	.+56     	; 0x112a <__mulsf3_pse+0x9c>
    10f2:	88 23       	and	r24, r24
    10f4:	4a f0       	brmi	.+18     	; 0x1108 <__mulsf3_pse+0x7a>
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	bb 1f       	adc	r27, r27
    10fc:	66 1f       	adc	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	91 50       	subi	r25, 0x01	; 1
    1104:	50 40       	sbci	r21, 0x00	; 0
    1106:	a9 f7       	brne	.-22     	; 0x10f2 <__mulsf3_pse+0x64>
    1108:	9e 3f       	cpi	r25, 0xFE	; 254
    110a:	51 05       	cpc	r21, r1
    110c:	70 f0       	brcs	.+28     	; 0x112a <__mulsf3_pse+0x9c>
    110e:	60 cf       	rjmp	.-320    	; 0xfd0 <__fp_inf>
    1110:	aa cf       	rjmp	.-172    	; 0x1066 <__fp_szero>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	ec f3       	brlt	.-6      	; 0x1110 <__mulsf3_pse+0x82>
    1116:	98 3e       	cpi	r25, 0xE8	; 232
    1118:	dc f3       	brlt	.-10     	; 0x1110 <__mulsf3_pse+0x82>
    111a:	86 95       	lsr	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f7 95       	ror	r31
    1124:	e7 95       	ror	r30
    1126:	9f 5f       	subi	r25, 0xFF	; 255
    1128:	c1 f7       	brne	.-16     	; 0x111a <__mulsf3_pse+0x8c>
    112a:	fe 2b       	or	r31, r30
    112c:	88 0f       	add	r24, r24
    112e:	91 1d       	adc	r25, r1
    1130:	96 95       	lsr	r25
    1132:	87 95       	ror	r24
    1134:	97 f9       	bld	r25, 7
    1136:	08 95       	ret

00001138 <__divmodhi4>:
    1138:	97 fb       	bst	r25, 7
    113a:	07 2e       	mov	r0, r23
    113c:	16 f4       	brtc	.+4      	; 0x1142 <__divmodhi4+0xa>
    113e:	00 94       	com	r0
    1140:	07 d0       	rcall	.+14     	; 0x1150 <__divmodhi4_neg1>
    1142:	77 fd       	sbrc	r23, 7
    1144:	09 d0       	rcall	.+18     	; 0x1158 <__divmodhi4_neg2>
    1146:	0e 94 b0 08 	call	0x1160	; 0x1160 <__udivmodhi4>
    114a:	07 fc       	sbrc	r0, 7
    114c:	05 d0       	rcall	.+10     	; 0x1158 <__divmodhi4_neg2>
    114e:	3e f4       	brtc	.+14     	; 0x115e <__divmodhi4_exit>

00001150 <__divmodhi4_neg1>:
    1150:	90 95       	com	r25
    1152:	81 95       	neg	r24
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <__divmodhi4_neg2>:
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255

0000115e <__divmodhi4_exit>:
    115e:	08 95       	ret

00001160 <__udivmodhi4>:
    1160:	aa 1b       	sub	r26, r26
    1162:	bb 1b       	sub	r27, r27
    1164:	51 e1       	ldi	r21, 0x11	; 17
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <__udivmodhi4_ep>

00001168 <__udivmodhi4_loop>:
    1168:	aa 1f       	adc	r26, r26
    116a:	bb 1f       	adc	r27, r27
    116c:	a6 17       	cp	r26, r22
    116e:	b7 07       	cpc	r27, r23
    1170:	10 f0       	brcs	.+4      	; 0x1176 <__udivmodhi4_ep>
    1172:	a6 1b       	sub	r26, r22
    1174:	b7 0b       	sbc	r27, r23

00001176 <__udivmodhi4_ep>:
    1176:	88 1f       	adc	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	5a 95       	dec	r21
    117c:	a9 f7       	brne	.-22     	; 0x1168 <__udivmodhi4_loop>
    117e:	80 95       	com	r24
    1180:	90 95       	com	r25
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	08 95       	ret

00001188 <do_rand>:
    1188:	8f 92       	push	r8
    118a:	9f 92       	push	r9
    118c:	af 92       	push	r10
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	ec 01       	movw	r28, r24
    119e:	68 81       	ld	r22, Y
    11a0:	79 81       	ldd	r23, Y+1	; 0x01
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	61 15       	cp	r22, r1
    11a8:	71 05       	cpc	r23, r1
    11aa:	81 05       	cpc	r24, r1
    11ac:	91 05       	cpc	r25, r1
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <do_rand+0x30>
    11b0:	64 e2       	ldi	r22, 0x24	; 36
    11b2:	79 ed       	ldi	r23, 0xD9	; 217
    11b4:	8b e5       	ldi	r24, 0x5B	; 91
    11b6:	97 e0       	ldi	r25, 0x07	; 7
    11b8:	2d e1       	ldi	r18, 0x1D	; 29
    11ba:	33 ef       	ldi	r19, 0xF3	; 243
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__divmodsi4>
    11c4:	49 01       	movw	r8, r18
    11c6:	5a 01       	movw	r10, r20
    11c8:	9b 01       	movw	r18, r22
    11ca:	ac 01       	movw	r20, r24
    11cc:	a7 ea       	ldi	r26, 0xA7	; 167
    11ce:	b1 e4       	ldi	r27, 0x41	; 65
    11d0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__muluhisi3>
    11d4:	6b 01       	movw	r12, r22
    11d6:	7c 01       	movw	r14, r24
    11d8:	ac ee       	ldi	r26, 0xEC	; 236
    11da:	b4 ef       	ldi	r27, 0xF4	; 244
    11dc:	a5 01       	movw	r20, r10
    11de:	94 01       	movw	r18, r8
    11e0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulohisi3>
    11e4:	c6 0e       	add	r12, r22
    11e6:	d7 1e       	adc	r13, r23
    11e8:	e8 1e       	adc	r14, r24
    11ea:	f9 1e       	adc	r15, r25
    11ec:	f7 fe       	sbrs	r15, 7
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <do_rand+0x74>
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	c8 1a       	sub	r12, r24
    11f4:	d1 08       	sbc	r13, r1
    11f6:	e1 08       	sbc	r14, r1
    11f8:	80 e8       	ldi	r24, 0x80	; 128
    11fa:	f8 0a       	sbc	r15, r24
    11fc:	c8 82       	st	Y, r12
    11fe:	d9 82       	std	Y+1, r13	; 0x01
    1200:	ea 82       	std	Y+2, r14	; 0x02
    1202:	fb 82       	std	Y+3, r15	; 0x03
    1204:	c6 01       	movw	r24, r12
    1206:	9f 77       	andi	r25, 0x7F	; 127
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	08 95       	ret

0000121e <rand_r>:
    121e:	0e 94 c4 08 	call	0x1188	; 0x1188 <do_rand>
    1222:	08 95       	ret

00001224 <rand>:
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	0e 94 c4 08 	call	0x1188	; 0x1188 <do_rand>
    122c:	08 95       	ret

0000122e <srand>:
    122e:	a0 e0       	ldi	r26, 0x00	; 0
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	80 93 00 01 	sts	0x0100, r24
    1236:	90 93 01 01 	sts	0x0101, r25
    123a:	a0 93 02 01 	sts	0x0102, r26
    123e:	b0 93 03 01 	sts	0x0103, r27
    1242:	08 95       	ret

00001244 <fdevopen>:
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	ec 01       	movw	r28, r24
    124e:	8b 01       	movw	r16, r22
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	31 f4       	brne	.+12     	; 0x1260 <fdevopen+0x1c>
    1254:	61 15       	cp	r22, r1
    1256:	71 05       	cpc	r23, r1
    1258:	19 f4       	brne	.+6      	; 0x1260 <fdevopen+0x1c>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	38 c0       	rjmp	.+112    	; 0x12d0 <fdevopen+0x8c>
    1260:	6e e0       	ldi	r22, 0x0E	; 14
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 80 0b 	call	0x1700	; 0x1700 <calloc>
    126c:	fc 01       	movw	r30, r24
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	a1 f3       	breq	.-24     	; 0x125a <fdevopen+0x16>
    1272:	80 e8       	ldi	r24, 0x80	; 128
    1274:	83 83       	std	Z+3, r24	; 0x03
    1276:	01 15       	cp	r16, r1
    1278:	11 05       	cpc	r17, r1
    127a:	71 f0       	breq	.+28     	; 0x1298 <fdevopen+0x54>
    127c:	13 87       	std	Z+11, r17	; 0x0b
    127e:	02 87       	std	Z+10, r16	; 0x0a
    1280:	81 e8       	ldi	r24, 0x81	; 129
    1282:	83 83       	std	Z+3, r24	; 0x03
    1284:	80 91 2d 04 	lds	r24, 0x042D
    1288:	90 91 2e 04 	lds	r25, 0x042E
    128c:	89 2b       	or	r24, r25
    128e:	21 f4       	brne	.+8      	; 0x1298 <fdevopen+0x54>
    1290:	f0 93 2e 04 	sts	0x042E, r31
    1294:	e0 93 2d 04 	sts	0x042D, r30
    1298:	20 97       	sbiw	r28, 0x00	; 0
    129a:	c9 f0       	breq	.+50     	; 0x12ce <fdevopen+0x8a>
    129c:	d1 87       	std	Z+9, r29	; 0x09
    129e:	c0 87       	std	Z+8, r28	; 0x08
    12a0:	83 81       	ldd	r24, Z+3	; 0x03
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	83 83       	std	Z+3, r24	; 0x03
    12a6:	80 91 2f 04 	lds	r24, 0x042F
    12aa:	90 91 30 04 	lds	r25, 0x0430
    12ae:	89 2b       	or	r24, r25
    12b0:	71 f4       	brne	.+28     	; 0x12ce <fdevopen+0x8a>
    12b2:	f0 93 30 04 	sts	0x0430, r31
    12b6:	e0 93 2f 04 	sts	0x042F, r30
    12ba:	80 91 31 04 	lds	r24, 0x0431
    12be:	90 91 32 04 	lds	r25, 0x0432
    12c2:	89 2b       	or	r24, r25
    12c4:	21 f4       	brne	.+8      	; 0x12ce <fdevopen+0x8a>
    12c6:	f0 93 32 04 	sts	0x0432, r31
    12ca:	e0 93 31 04 	sts	0x0431, r30
    12ce:	cf 01       	movw	r24, r30
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <printf>:
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e3 e7       	ldi	r30, 0x73	; 115
    12e0:	f9 e0       	ldi	r31, 0x09	; 9
    12e2:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__prologue_saves__+0x20>
    12e6:	fe 01       	movw	r30, r28
    12e8:	35 96       	adiw	r30, 0x05	; 5
    12ea:	61 91       	ld	r22, Z+
    12ec:	71 91       	ld	r23, Z+
    12ee:	af 01       	movw	r20, r30
    12f0:	80 91 2f 04 	lds	r24, 0x042F
    12f4:	90 91 30 04 	lds	r25, 0x0430
    12f8:	0e 94 ae 09 	call	0x135c	; 0x135c <vfprintf>
    12fc:	e2 e0       	ldi	r30, 0x02	; 2
    12fe:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__epilogue_restores__+0x20>

00001302 <puts>:
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	e0 91 2f 04 	lds	r30, 0x042F
    130e:	f0 91 30 04 	lds	r31, 0x0430
    1312:	23 81       	ldd	r18, Z+3	; 0x03
    1314:	21 ff       	sbrs	r18, 1
    1316:	1b c0       	rjmp	.+54     	; 0x134e <puts+0x4c>
    1318:	ec 01       	movw	r28, r24
    131a:	00 e0       	ldi	r16, 0x00	; 0
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	89 91       	ld	r24, Y+
    1320:	60 91 2f 04 	lds	r22, 0x042F
    1324:	70 91 30 04 	lds	r23, 0x0430
    1328:	db 01       	movw	r26, r22
    132a:	18 96       	adiw	r26, 0x08	; 8
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	19 97       	sbiw	r26, 0x09	; 9
    1332:	88 23       	and	r24, r24
    1334:	31 f0       	breq	.+12     	; 0x1342 <puts+0x40>
    1336:	09 95       	icall
    1338:	89 2b       	or	r24, r25
    133a:	89 f3       	breq	.-30     	; 0x131e <puts+0x1c>
    133c:	0f ef       	ldi	r16, 0xFF	; 255
    133e:	1f ef       	ldi	r17, 0xFF	; 255
    1340:	ee cf       	rjmp	.-36     	; 0x131e <puts+0x1c>
    1342:	8a e0       	ldi	r24, 0x0A	; 10
    1344:	09 95       	icall
    1346:	89 2b       	or	r24, r25
    1348:	11 f4       	brne	.+4      	; 0x134e <puts+0x4c>
    134a:	c8 01       	movw	r24, r16
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <puts+0x50>
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	9f ef       	ldi	r25, 0xFF	; 255
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <vfprintf>:
    135c:	ac e0       	ldi	r26, 0x0C	; 12
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 eb       	ldi	r30, 0xB4	; 180
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__prologue_saves__>
    1368:	7c 01       	movw	r14, r24
    136a:	6b 01       	movw	r12, r22
    136c:	8a 01       	movw	r16, r20
    136e:	fc 01       	movw	r30, r24
    1370:	17 82       	std	Z+7, r1	; 0x07
    1372:	16 82       	std	Z+6, r1	; 0x06
    1374:	83 81       	ldd	r24, Z+3	; 0x03
    1376:	81 ff       	sbrs	r24, 1
    1378:	bd c1       	rjmp	.+890    	; 0x16f4 <vfprintf+0x398>
    137a:	ce 01       	movw	r24, r28
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	4c 01       	movw	r8, r24
    1380:	f7 01       	movw	r30, r14
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	f6 01       	movw	r30, r12
    1386:	93 fd       	sbrc	r25, 3
    1388:	85 91       	lpm	r24, Z+
    138a:	93 ff       	sbrs	r25, 3
    138c:	81 91       	ld	r24, Z+
    138e:	6f 01       	movw	r12, r30
    1390:	88 23       	and	r24, r24
    1392:	09 f4       	brne	.+2      	; 0x1396 <vfprintf+0x3a>
    1394:	ab c1       	rjmp	.+854    	; 0x16ec <vfprintf+0x390>
    1396:	85 32       	cpi	r24, 0x25	; 37
    1398:	39 f4       	brne	.+14     	; 0x13a8 <vfprintf+0x4c>
    139a:	93 fd       	sbrc	r25, 3
    139c:	85 91       	lpm	r24, Z+
    139e:	93 ff       	sbrs	r25, 3
    13a0:	81 91       	ld	r24, Z+
    13a2:	6f 01       	movw	r12, r30
    13a4:	85 32       	cpi	r24, 0x25	; 37
    13a6:	29 f4       	brne	.+10     	; 0x13b2 <vfprintf+0x56>
    13a8:	b7 01       	movw	r22, r14
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    13b0:	e7 cf       	rjmp	.-50     	; 0x1380 <vfprintf+0x24>
    13b2:	51 2c       	mov	r5, r1
    13b4:	31 2c       	mov	r3, r1
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	20 32       	cpi	r18, 0x20	; 32
    13ba:	a0 f4       	brcc	.+40     	; 0x13e4 <vfprintf+0x88>
    13bc:	8b 32       	cpi	r24, 0x2B	; 43
    13be:	69 f0       	breq	.+26     	; 0x13da <vfprintf+0x7e>
    13c0:	30 f4       	brcc	.+12     	; 0x13ce <vfprintf+0x72>
    13c2:	80 32       	cpi	r24, 0x20	; 32
    13c4:	59 f0       	breq	.+22     	; 0x13dc <vfprintf+0x80>
    13c6:	83 32       	cpi	r24, 0x23	; 35
    13c8:	69 f4       	brne	.+26     	; 0x13e4 <vfprintf+0x88>
    13ca:	20 61       	ori	r18, 0x10	; 16
    13cc:	2c c0       	rjmp	.+88     	; 0x1426 <vfprintf+0xca>
    13ce:	8d 32       	cpi	r24, 0x2D	; 45
    13d0:	39 f0       	breq	.+14     	; 0x13e0 <vfprintf+0x84>
    13d2:	80 33       	cpi	r24, 0x30	; 48
    13d4:	39 f4       	brne	.+14     	; 0x13e4 <vfprintf+0x88>
    13d6:	21 60       	ori	r18, 0x01	; 1
    13d8:	26 c0       	rjmp	.+76     	; 0x1426 <vfprintf+0xca>
    13da:	22 60       	ori	r18, 0x02	; 2
    13dc:	24 60       	ori	r18, 0x04	; 4
    13de:	23 c0       	rjmp	.+70     	; 0x1426 <vfprintf+0xca>
    13e0:	28 60       	ori	r18, 0x08	; 8
    13e2:	21 c0       	rjmp	.+66     	; 0x1426 <vfprintf+0xca>
    13e4:	27 fd       	sbrc	r18, 7
    13e6:	27 c0       	rjmp	.+78     	; 0x1436 <vfprintf+0xda>
    13e8:	30 ed       	ldi	r19, 0xD0	; 208
    13ea:	38 0f       	add	r19, r24
    13ec:	3a 30       	cpi	r19, 0x0A	; 10
    13ee:	78 f4       	brcc	.+30     	; 0x140e <vfprintf+0xb2>
    13f0:	26 ff       	sbrs	r18, 6
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <vfprintf+0xa4>
    13f4:	fa e0       	ldi	r31, 0x0A	; 10
    13f6:	5f 9e       	mul	r5, r31
    13f8:	30 0d       	add	r19, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	53 2e       	mov	r5, r19
    13fe:	13 c0       	rjmp	.+38     	; 0x1426 <vfprintf+0xca>
    1400:	8a e0       	ldi	r24, 0x0A	; 10
    1402:	38 9e       	mul	r3, r24
    1404:	30 0d       	add	r19, r0
    1406:	11 24       	eor	r1, r1
    1408:	33 2e       	mov	r3, r19
    140a:	20 62       	ori	r18, 0x20	; 32
    140c:	0c c0       	rjmp	.+24     	; 0x1426 <vfprintf+0xca>
    140e:	8e 32       	cpi	r24, 0x2E	; 46
    1410:	21 f4       	brne	.+8      	; 0x141a <vfprintf+0xbe>
    1412:	26 fd       	sbrc	r18, 6
    1414:	6b c1       	rjmp	.+726    	; 0x16ec <vfprintf+0x390>
    1416:	20 64       	ori	r18, 0x40	; 64
    1418:	06 c0       	rjmp	.+12     	; 0x1426 <vfprintf+0xca>
    141a:	8c 36       	cpi	r24, 0x6C	; 108
    141c:	11 f4       	brne	.+4      	; 0x1422 <vfprintf+0xc6>
    141e:	20 68       	ori	r18, 0x80	; 128
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <vfprintf+0xca>
    1422:	88 36       	cpi	r24, 0x68	; 104
    1424:	41 f4       	brne	.+16     	; 0x1436 <vfprintf+0xda>
    1426:	f6 01       	movw	r30, r12
    1428:	93 fd       	sbrc	r25, 3
    142a:	85 91       	lpm	r24, Z+
    142c:	93 ff       	sbrs	r25, 3
    142e:	81 91       	ld	r24, Z+
    1430:	6f 01       	movw	r12, r30
    1432:	81 11       	cpse	r24, r1
    1434:	c1 cf       	rjmp	.-126    	; 0x13b8 <vfprintf+0x5c>
    1436:	98 2f       	mov	r25, r24
    1438:	9f 7d       	andi	r25, 0xDF	; 223
    143a:	95 54       	subi	r25, 0x45	; 69
    143c:	93 30       	cpi	r25, 0x03	; 3
    143e:	28 f4       	brcc	.+10     	; 0x144a <vfprintf+0xee>
    1440:	0c 5f       	subi	r16, 0xFC	; 252
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	ff e3       	ldi	r31, 0x3F	; 63
    1446:	f9 83       	std	Y+1, r31	; 0x01
    1448:	0d c0       	rjmp	.+26     	; 0x1464 <vfprintf+0x108>
    144a:	83 36       	cpi	r24, 0x63	; 99
    144c:	31 f0       	breq	.+12     	; 0x145a <vfprintf+0xfe>
    144e:	83 37       	cpi	r24, 0x73	; 115
    1450:	71 f0       	breq	.+28     	; 0x146e <vfprintf+0x112>
    1452:	83 35       	cpi	r24, 0x53	; 83
    1454:	09 f0       	breq	.+2      	; 0x1458 <vfprintf+0xfc>
    1456:	5b c0       	rjmp	.+182    	; 0x150e <vfprintf+0x1b2>
    1458:	22 c0       	rjmp	.+68     	; 0x149e <vfprintf+0x142>
    145a:	f8 01       	movw	r30, r16
    145c:	80 81       	ld	r24, Z
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	0e 5f       	subi	r16, 0xFE	; 254
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
    1464:	44 24       	eor	r4, r4
    1466:	43 94       	inc	r4
    1468:	51 2c       	mov	r5, r1
    146a:	54 01       	movw	r10, r8
    146c:	15 c0       	rjmp	.+42     	; 0x1498 <vfprintf+0x13c>
    146e:	38 01       	movw	r6, r16
    1470:	f2 e0       	ldi	r31, 0x02	; 2
    1472:	6f 0e       	add	r6, r31
    1474:	71 1c       	adc	r7, r1
    1476:	f8 01       	movw	r30, r16
    1478:	a0 80       	ld	r10, Z
    147a:	b1 80       	ldd	r11, Z+1	; 0x01
    147c:	26 ff       	sbrs	r18, 6
    147e:	03 c0       	rjmp	.+6      	; 0x1486 <vfprintf+0x12a>
    1480:	65 2d       	mov	r22, r5
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <vfprintf+0x12e>
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	c5 01       	movw	r24, r10
    148c:	2c 87       	std	Y+12, r18	; 0x0c
    148e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <strnlen>
    1492:	2c 01       	movw	r4, r24
    1494:	83 01       	movw	r16, r6
    1496:	2c 85       	ldd	r18, Y+12	; 0x0c
    1498:	2f 77       	andi	r18, 0x7F	; 127
    149a:	22 2e       	mov	r2, r18
    149c:	17 c0       	rjmp	.+46     	; 0x14cc <vfprintf+0x170>
    149e:	38 01       	movw	r6, r16
    14a0:	f2 e0       	ldi	r31, 0x02	; 2
    14a2:	6f 0e       	add	r6, r31
    14a4:	71 1c       	adc	r7, r1
    14a6:	f8 01       	movw	r30, r16
    14a8:	a0 80       	ld	r10, Z
    14aa:	b1 80       	ldd	r11, Z+1	; 0x01
    14ac:	26 ff       	sbrs	r18, 6
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <vfprintf+0x15a>
    14b0:	65 2d       	mov	r22, r5
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x15e>
    14b6:	6f ef       	ldi	r22, 0xFF	; 255
    14b8:	7f ef       	ldi	r23, 0xFF	; 255
    14ba:	c5 01       	movw	r24, r10
    14bc:	2c 87       	std	Y+12, r18	; 0x0c
    14be:	0e 94 c3 0c 	call	0x1986	; 0x1986 <strnlen_P>
    14c2:	2c 01       	movw	r4, r24
    14c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c6:	20 68       	ori	r18, 0x80	; 128
    14c8:	22 2e       	mov	r2, r18
    14ca:	83 01       	movw	r16, r6
    14cc:	23 fc       	sbrc	r2, 3
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <vfprintf+0x1aa>
    14d0:	83 2d       	mov	r24, r3
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	48 16       	cp	r4, r24
    14d6:	59 06       	cpc	r5, r25
    14d8:	b0 f4       	brcc	.+44     	; 0x1506 <vfprintf+0x1aa>
    14da:	b7 01       	movw	r22, r14
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    14e4:	3a 94       	dec	r3
    14e6:	f4 cf       	rjmp	.-24     	; 0x14d0 <vfprintf+0x174>
    14e8:	f5 01       	movw	r30, r10
    14ea:	27 fc       	sbrc	r2, 7
    14ec:	85 91       	lpm	r24, Z+
    14ee:	27 fe       	sbrs	r2, 7
    14f0:	81 91       	ld	r24, Z+
    14f2:	5f 01       	movw	r10, r30
    14f4:	b7 01       	movw	r22, r14
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    14fc:	31 10       	cpse	r3, r1
    14fe:	3a 94       	dec	r3
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	4f 1a       	sub	r4, r31
    1504:	51 08       	sbc	r5, r1
    1506:	41 14       	cp	r4, r1
    1508:	51 04       	cpc	r5, r1
    150a:	71 f7       	brne	.-36     	; 0x14e8 <vfprintf+0x18c>
    150c:	e5 c0       	rjmp	.+458    	; 0x16d8 <vfprintf+0x37c>
    150e:	84 36       	cpi	r24, 0x64	; 100
    1510:	11 f0       	breq	.+4      	; 0x1516 <vfprintf+0x1ba>
    1512:	89 36       	cpi	r24, 0x69	; 105
    1514:	39 f5       	brne	.+78     	; 0x1564 <vfprintf+0x208>
    1516:	f8 01       	movw	r30, r16
    1518:	27 ff       	sbrs	r18, 7
    151a:	07 c0       	rjmp	.+14     	; 0x152a <vfprintf+0x1ce>
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	0c 5f       	subi	r16, 0xFC	; 252
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	08 c0       	rjmp	.+16     	; 0x153a <vfprintf+0x1de>
    152a:	60 81       	ld	r22, Z
    152c:	71 81       	ldd	r23, Z+1	; 0x01
    152e:	88 27       	eor	r24, r24
    1530:	77 fd       	sbrc	r23, 7
    1532:	80 95       	com	r24
    1534:	98 2f       	mov	r25, r24
    1536:	0e 5f       	subi	r16, 0xFE	; 254
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	2f 76       	andi	r18, 0x6F	; 111
    153c:	b2 2e       	mov	r11, r18
    153e:	97 ff       	sbrs	r25, 7
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <vfprintf+0x1f8>
    1542:	90 95       	com	r25
    1544:	80 95       	com	r24
    1546:	70 95       	com	r23
    1548:	61 95       	neg	r22
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	8f 4f       	sbci	r24, 0xFF	; 255
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	20 68       	ori	r18, 0x80	; 128
    1552:	b2 2e       	mov	r11, r18
    1554:	2a e0       	ldi	r18, 0x0A	; 10
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	a4 01       	movw	r20, r8
    155a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__ultoa_invert>
    155e:	a8 2e       	mov	r10, r24
    1560:	a8 18       	sub	r10, r8
    1562:	44 c0       	rjmp	.+136    	; 0x15ec <vfprintf+0x290>
    1564:	85 37       	cpi	r24, 0x75	; 117
    1566:	29 f4       	brne	.+10     	; 0x1572 <vfprintf+0x216>
    1568:	2f 7e       	andi	r18, 0xEF	; 239
    156a:	b2 2e       	mov	r11, r18
    156c:	2a e0       	ldi	r18, 0x0A	; 10
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	25 c0       	rjmp	.+74     	; 0x15bc <vfprintf+0x260>
    1572:	f2 2f       	mov	r31, r18
    1574:	f9 7f       	andi	r31, 0xF9	; 249
    1576:	bf 2e       	mov	r11, r31
    1578:	8f 36       	cpi	r24, 0x6F	; 111
    157a:	c1 f0       	breq	.+48     	; 0x15ac <vfprintf+0x250>
    157c:	18 f4       	brcc	.+6      	; 0x1584 <vfprintf+0x228>
    157e:	88 35       	cpi	r24, 0x58	; 88
    1580:	79 f0       	breq	.+30     	; 0x15a0 <vfprintf+0x244>
    1582:	b4 c0       	rjmp	.+360    	; 0x16ec <vfprintf+0x390>
    1584:	80 37       	cpi	r24, 0x70	; 112
    1586:	19 f0       	breq	.+6      	; 0x158e <vfprintf+0x232>
    1588:	88 37       	cpi	r24, 0x78	; 120
    158a:	21 f0       	breq	.+8      	; 0x1594 <vfprintf+0x238>
    158c:	af c0       	rjmp	.+350    	; 0x16ec <vfprintf+0x390>
    158e:	2f 2f       	mov	r18, r31
    1590:	20 61       	ori	r18, 0x10	; 16
    1592:	b2 2e       	mov	r11, r18
    1594:	b4 fe       	sbrs	r11, 4
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <vfprintf+0x256>
    1598:	8b 2d       	mov	r24, r11
    159a:	84 60       	ori	r24, 0x04	; 4
    159c:	b8 2e       	mov	r11, r24
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <vfprintf+0x256>
    15a0:	24 ff       	sbrs	r18, 4
    15a2:	0a c0       	rjmp	.+20     	; 0x15b8 <vfprintf+0x25c>
    15a4:	9f 2f       	mov	r25, r31
    15a6:	96 60       	ori	r25, 0x06	; 6
    15a8:	b9 2e       	mov	r11, r25
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <vfprintf+0x25c>
    15ac:	28 e0       	ldi	r18, 0x08	; 8
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <vfprintf+0x260>
    15b2:	20 e1       	ldi	r18, 0x10	; 16
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <vfprintf+0x260>
    15b8:	20 e1       	ldi	r18, 0x10	; 16
    15ba:	32 e0       	ldi	r19, 0x02	; 2
    15bc:	f8 01       	movw	r30, r16
    15be:	b7 fe       	sbrs	r11, 7
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <vfprintf+0x274>
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	0c 5f       	subi	r16, 0xFC	; 252
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <vfprintf+0x280>
    15d0:	60 81       	ld	r22, Z
    15d2:	71 81       	ldd	r23, Z+1	; 0x01
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 5f       	subi	r16, 0xFE	; 254
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	a4 01       	movw	r20, r8
    15de:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__ultoa_invert>
    15e2:	a8 2e       	mov	r10, r24
    15e4:	a8 18       	sub	r10, r8
    15e6:	fb 2d       	mov	r31, r11
    15e8:	ff 77       	andi	r31, 0x7F	; 127
    15ea:	bf 2e       	mov	r11, r31
    15ec:	b6 fe       	sbrs	r11, 6
    15ee:	0b c0       	rjmp	.+22     	; 0x1606 <vfprintf+0x2aa>
    15f0:	2b 2d       	mov	r18, r11
    15f2:	2e 7f       	andi	r18, 0xFE	; 254
    15f4:	a5 14       	cp	r10, r5
    15f6:	50 f4       	brcc	.+20     	; 0x160c <vfprintf+0x2b0>
    15f8:	b4 fe       	sbrs	r11, 4
    15fa:	0a c0       	rjmp	.+20     	; 0x1610 <vfprintf+0x2b4>
    15fc:	b2 fc       	sbrc	r11, 2
    15fe:	08 c0       	rjmp	.+16     	; 0x1610 <vfprintf+0x2b4>
    1600:	2b 2d       	mov	r18, r11
    1602:	2e 7e       	andi	r18, 0xEE	; 238
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <vfprintf+0x2b4>
    1606:	7a 2c       	mov	r7, r10
    1608:	2b 2d       	mov	r18, r11
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <vfprintf+0x2b6>
    160c:	7a 2c       	mov	r7, r10
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <vfprintf+0x2b6>
    1610:	75 2c       	mov	r7, r5
    1612:	24 ff       	sbrs	r18, 4
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <vfprintf+0x2d4>
    1616:	fe 01       	movw	r30, r28
    1618:	ea 0d       	add	r30, r10
    161a:	f1 1d       	adc	r31, r1
    161c:	80 81       	ld	r24, Z
    161e:	80 33       	cpi	r24, 0x30	; 48
    1620:	11 f4       	brne	.+4      	; 0x1626 <vfprintf+0x2ca>
    1622:	29 7e       	andi	r18, 0xE9	; 233
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <vfprintf+0x2dc>
    1626:	22 ff       	sbrs	r18, 2
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <vfprintf+0x2da>
    162a:	73 94       	inc	r7
    162c:	73 94       	inc	r7
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <vfprintf+0x2dc>
    1630:	82 2f       	mov	r24, r18
    1632:	86 78       	andi	r24, 0x86	; 134
    1634:	09 f0       	breq	.+2      	; 0x1638 <vfprintf+0x2dc>
    1636:	73 94       	inc	r7
    1638:	23 fd       	sbrc	r18, 3
    163a:	13 c0       	rjmp	.+38     	; 0x1662 <vfprintf+0x306>
    163c:	20 ff       	sbrs	r18, 0
    163e:	06 c0       	rjmp	.+12     	; 0x164c <vfprintf+0x2f0>
    1640:	5a 2c       	mov	r5, r10
    1642:	73 14       	cp	r7, r3
    1644:	18 f4       	brcc	.+6      	; 0x164c <vfprintf+0x2f0>
    1646:	53 0c       	add	r5, r3
    1648:	57 18       	sub	r5, r7
    164a:	73 2c       	mov	r7, r3
    164c:	73 14       	cp	r7, r3
    164e:	68 f4       	brcc	.+26     	; 0x166a <vfprintf+0x30e>
    1650:	b7 01       	movw	r22, r14
    1652:	80 e2       	ldi	r24, 0x20	; 32
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	2c 87       	std	Y+12, r18	; 0x0c
    1658:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    165c:	73 94       	inc	r7
    165e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1660:	f5 cf       	rjmp	.-22     	; 0x164c <vfprintf+0x2f0>
    1662:	73 14       	cp	r7, r3
    1664:	10 f4       	brcc	.+4      	; 0x166a <vfprintf+0x30e>
    1666:	37 18       	sub	r3, r7
    1668:	01 c0       	rjmp	.+2      	; 0x166c <vfprintf+0x310>
    166a:	31 2c       	mov	r3, r1
    166c:	24 ff       	sbrs	r18, 4
    166e:	12 c0       	rjmp	.+36     	; 0x1694 <vfprintf+0x338>
    1670:	b7 01       	movw	r22, r14
    1672:	80 e3       	ldi	r24, 0x30	; 48
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	2c 87       	std	Y+12, r18	; 0x0c
    1678:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    167c:	2c 85       	ldd	r18, Y+12	; 0x0c
    167e:	22 ff       	sbrs	r18, 2
    1680:	17 c0       	rjmp	.+46     	; 0x16b0 <vfprintf+0x354>
    1682:	21 ff       	sbrs	r18, 1
    1684:	03 c0       	rjmp	.+6      	; 0x168c <vfprintf+0x330>
    1686:	88 e5       	ldi	r24, 0x58	; 88
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <vfprintf+0x334>
    168c:	88 e7       	ldi	r24, 0x78	; 120
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	b7 01       	movw	r22, r14
    1692:	0c c0       	rjmp	.+24     	; 0x16ac <vfprintf+0x350>
    1694:	82 2f       	mov	r24, r18
    1696:	86 78       	andi	r24, 0x86	; 134
    1698:	59 f0       	breq	.+22     	; 0x16b0 <vfprintf+0x354>
    169a:	21 fd       	sbrc	r18, 1
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <vfprintf+0x346>
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <vfprintf+0x348>
    16a2:	8b e2       	ldi	r24, 0x2B	; 43
    16a4:	27 fd       	sbrc	r18, 7
    16a6:	8d e2       	ldi	r24, 0x2D	; 45
    16a8:	b7 01       	movw	r22, r14
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    16b0:	a5 14       	cp	r10, r5
    16b2:	38 f4       	brcc	.+14     	; 0x16c2 <vfprintf+0x366>
    16b4:	b7 01       	movw	r22, r14
    16b6:	80 e3       	ldi	r24, 0x30	; 48
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    16be:	5a 94       	dec	r5
    16c0:	f7 cf       	rjmp	.-18     	; 0x16b0 <vfprintf+0x354>
    16c2:	aa 94       	dec	r10
    16c4:	f4 01       	movw	r30, r8
    16c6:	ea 0d       	add	r30, r10
    16c8:	f1 1d       	adc	r31, r1
    16ca:	80 81       	ld	r24, Z
    16cc:	b7 01       	movw	r22, r14
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    16d4:	a1 10       	cpse	r10, r1
    16d6:	f5 cf       	rjmp	.-22     	; 0x16c2 <vfprintf+0x366>
    16d8:	33 20       	and	r3, r3
    16da:	09 f4       	brne	.+2      	; 0x16de <vfprintf+0x382>
    16dc:	51 ce       	rjmp	.-862    	; 0x1380 <vfprintf+0x24>
    16de:	b7 01       	movw	r22, r14
    16e0:	80 e2       	ldi	r24, 0x20	; 32
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <fputc>
    16e8:	3a 94       	dec	r3
    16ea:	f6 cf       	rjmp	.-20     	; 0x16d8 <vfprintf+0x37c>
    16ec:	f7 01       	movw	r30, r14
    16ee:	86 81       	ldd	r24, Z+6	; 0x06
    16f0:	97 81       	ldd	r25, Z+7	; 0x07
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <vfprintf+0x39c>
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	9f ef       	ldi	r25, 0xFF	; 255
    16f8:	2c 96       	adiw	r28, 0x0c	; 12
    16fa:	e2 e1       	ldi	r30, 0x12	; 18
    16fc:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__epilogue_restores__>

00001700 <calloc>:
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	86 9f       	mul	r24, r22
    170a:	80 01       	movw	r16, r0
    170c:	87 9f       	mul	r24, r23
    170e:	10 0d       	add	r17, r0
    1710:	96 9f       	mul	r25, r22
    1712:	10 0d       	add	r17, r0
    1714:	11 24       	eor	r1, r1
    1716:	c8 01       	movw	r24, r16
    1718:	0e 94 9c 0b 	call	0x1738	; 0x1738 <malloc>
    171c:	ec 01       	movw	r28, r24
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	29 f0       	breq	.+10     	; 0x172c <calloc+0x2c>
    1722:	a8 01       	movw	r20, r16
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	0e 94 ce 0c 	call	0x199c	; 0x199c <memset>
    172c:	ce 01       	movw	r24, r28
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	08 95       	ret

00001738 <malloc>:
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	91 05       	cpc	r25, r1
    1740:	10 f4       	brcc	.+4      	; 0x1746 <malloc+0xe>
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	e0 91 35 04 	lds	r30, 0x0435
    174a:	f0 91 36 04 	lds	r31, 0x0436
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	a0 e0       	ldi	r26, 0x00	; 0
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	30 97       	sbiw	r30, 0x00	; 0
    1758:	39 f1       	breq	.+78     	; 0x17a8 <malloc+0x70>
    175a:	40 81       	ld	r20, Z
    175c:	51 81       	ldd	r21, Z+1	; 0x01
    175e:	48 17       	cp	r20, r24
    1760:	59 07       	cpc	r21, r25
    1762:	b8 f0       	brcs	.+46     	; 0x1792 <malloc+0x5a>
    1764:	48 17       	cp	r20, r24
    1766:	59 07       	cpc	r21, r25
    1768:	71 f4       	brne	.+28     	; 0x1786 <malloc+0x4e>
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	10 97       	sbiw	r26, 0x00	; 0
    1770:	29 f0       	breq	.+10     	; 0x177c <malloc+0x44>
    1772:	13 96       	adiw	r26, 0x03	; 3
    1774:	9c 93       	st	X, r25
    1776:	8e 93       	st	-X, r24
    1778:	12 97       	sbiw	r26, 0x02	; 2
    177a:	2c c0       	rjmp	.+88     	; 0x17d4 <malloc+0x9c>
    177c:	90 93 36 04 	sts	0x0436, r25
    1780:	80 93 35 04 	sts	0x0435, r24
    1784:	27 c0       	rjmp	.+78     	; 0x17d4 <malloc+0x9c>
    1786:	21 15       	cp	r18, r1
    1788:	31 05       	cpc	r19, r1
    178a:	31 f0       	breq	.+12     	; 0x1798 <malloc+0x60>
    178c:	42 17       	cp	r20, r18
    178e:	53 07       	cpc	r21, r19
    1790:	18 f0       	brcs	.+6      	; 0x1798 <malloc+0x60>
    1792:	a9 01       	movw	r20, r18
    1794:	db 01       	movw	r26, r22
    1796:	01 c0       	rjmp	.+2      	; 0x179a <malloc+0x62>
    1798:	ef 01       	movw	r28, r30
    179a:	9a 01       	movw	r18, r20
    179c:	bd 01       	movw	r22, r26
    179e:	df 01       	movw	r26, r30
    17a0:	02 80       	ldd	r0, Z+2	; 0x02
    17a2:	f3 81       	ldd	r31, Z+3	; 0x03
    17a4:	e0 2d       	mov	r30, r0
    17a6:	d7 cf       	rjmp	.-82     	; 0x1756 <malloc+0x1e>
    17a8:	21 15       	cp	r18, r1
    17aa:	31 05       	cpc	r19, r1
    17ac:	f9 f0       	breq	.+62     	; 0x17ec <malloc+0xb4>
    17ae:	28 1b       	sub	r18, r24
    17b0:	39 0b       	sbc	r19, r25
    17b2:	24 30       	cpi	r18, 0x04	; 4
    17b4:	31 05       	cpc	r19, r1
    17b6:	80 f4       	brcc	.+32     	; 0x17d8 <malloc+0xa0>
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	61 15       	cp	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	21 f0       	breq	.+8      	; 0x17ca <malloc+0x92>
    17c2:	fb 01       	movw	r30, r22
    17c4:	93 83       	std	Z+3, r25	; 0x03
    17c6:	82 83       	std	Z+2, r24	; 0x02
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <malloc+0x9a>
    17ca:	90 93 36 04 	sts	0x0436, r25
    17ce:	80 93 35 04 	sts	0x0435, r24
    17d2:	fe 01       	movw	r30, r28
    17d4:	32 96       	adiw	r30, 0x02	; 2
    17d6:	44 c0       	rjmp	.+136    	; 0x1860 <malloc+0x128>
    17d8:	fe 01       	movw	r30, r28
    17da:	e2 0f       	add	r30, r18
    17dc:	f3 1f       	adc	r31, r19
    17de:	81 93       	st	Z+, r24
    17e0:	91 93       	st	Z+, r25
    17e2:	22 50       	subi	r18, 0x02	; 2
    17e4:	31 09       	sbc	r19, r1
    17e6:	39 83       	std	Y+1, r19	; 0x01
    17e8:	28 83       	st	Y, r18
    17ea:	3a c0       	rjmp	.+116    	; 0x1860 <malloc+0x128>
    17ec:	20 91 33 04 	lds	r18, 0x0433
    17f0:	30 91 34 04 	lds	r19, 0x0434
    17f4:	23 2b       	or	r18, r19
    17f6:	41 f4       	brne	.+16     	; 0x1808 <malloc+0xd0>
    17f8:	20 91 06 01 	lds	r18, 0x0106
    17fc:	30 91 07 01 	lds	r19, 0x0107
    1800:	30 93 34 04 	sts	0x0434, r19
    1804:	20 93 33 04 	sts	0x0433, r18
    1808:	20 91 04 01 	lds	r18, 0x0104
    180c:	30 91 05 01 	lds	r19, 0x0105
    1810:	21 15       	cp	r18, r1
    1812:	31 05       	cpc	r19, r1
    1814:	41 f4       	brne	.+16     	; 0x1826 <malloc+0xee>
    1816:	2d b7       	in	r18, 0x3d	; 61
    1818:	3e b7       	in	r19, 0x3e	; 62
    181a:	40 91 08 01 	lds	r20, 0x0108
    181e:	50 91 09 01 	lds	r21, 0x0109
    1822:	24 1b       	sub	r18, r20
    1824:	35 0b       	sbc	r19, r21
    1826:	e0 91 33 04 	lds	r30, 0x0433
    182a:	f0 91 34 04 	lds	r31, 0x0434
    182e:	e2 17       	cp	r30, r18
    1830:	f3 07       	cpc	r31, r19
    1832:	a0 f4       	brcc	.+40     	; 0x185c <malloc+0x124>
    1834:	2e 1b       	sub	r18, r30
    1836:	3f 0b       	sbc	r19, r31
    1838:	28 17       	cp	r18, r24
    183a:	39 07       	cpc	r19, r25
    183c:	78 f0       	brcs	.+30     	; 0x185c <malloc+0x124>
    183e:	ac 01       	movw	r20, r24
    1840:	4e 5f       	subi	r20, 0xFE	; 254
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	24 17       	cp	r18, r20
    1846:	35 07       	cpc	r19, r21
    1848:	48 f0       	brcs	.+18     	; 0x185c <malloc+0x124>
    184a:	4e 0f       	add	r20, r30
    184c:	5f 1f       	adc	r21, r31
    184e:	50 93 34 04 	sts	0x0434, r21
    1852:	40 93 33 04 	sts	0x0433, r20
    1856:	81 93       	st	Z+, r24
    1858:	91 93       	st	Z+, r25
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <malloc+0x128>
    185c:	e0 e0       	ldi	r30, 0x00	; 0
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	cf 01       	movw	r24, r30
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <free>:
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	09 f4       	brne	.+2      	; 0x1872 <free+0xa>
    1870:	87 c0       	rjmp	.+270    	; 0x1980 <free+0x118>
    1872:	fc 01       	movw	r30, r24
    1874:	32 97       	sbiw	r30, 0x02	; 2
    1876:	13 82       	std	Z+3, r1	; 0x03
    1878:	12 82       	std	Z+2, r1	; 0x02
    187a:	c0 91 35 04 	lds	r28, 0x0435
    187e:	d0 91 36 04 	lds	r29, 0x0436
    1882:	20 97       	sbiw	r28, 0x00	; 0
    1884:	81 f4       	brne	.+32     	; 0x18a6 <free+0x3e>
    1886:	20 81       	ld	r18, Z
    1888:	31 81       	ldd	r19, Z+1	; 0x01
    188a:	28 0f       	add	r18, r24
    188c:	39 1f       	adc	r19, r25
    188e:	80 91 33 04 	lds	r24, 0x0433
    1892:	90 91 34 04 	lds	r25, 0x0434
    1896:	82 17       	cp	r24, r18
    1898:	93 07       	cpc	r25, r19
    189a:	79 f5       	brne	.+94     	; 0x18fa <free+0x92>
    189c:	f0 93 34 04 	sts	0x0434, r31
    18a0:	e0 93 33 04 	sts	0x0433, r30
    18a4:	6d c0       	rjmp	.+218    	; 0x1980 <free+0x118>
    18a6:	de 01       	movw	r26, r28
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	ae 17       	cp	r26, r30
    18ae:	bf 07       	cpc	r27, r31
    18b0:	50 f4       	brcc	.+20     	; 0x18c6 <free+0x5e>
    18b2:	12 96       	adiw	r26, 0x02	; 2
    18b4:	4d 91       	ld	r20, X+
    18b6:	5c 91       	ld	r21, X
    18b8:	13 97       	sbiw	r26, 0x03	; 3
    18ba:	9d 01       	movw	r18, r26
    18bc:	41 15       	cp	r20, r1
    18be:	51 05       	cpc	r21, r1
    18c0:	09 f1       	breq	.+66     	; 0x1904 <free+0x9c>
    18c2:	da 01       	movw	r26, r20
    18c4:	f3 cf       	rjmp	.-26     	; 0x18ac <free+0x44>
    18c6:	b3 83       	std	Z+3, r27	; 0x03
    18c8:	a2 83       	std	Z+2, r26	; 0x02
    18ca:	40 81       	ld	r20, Z
    18cc:	51 81       	ldd	r21, Z+1	; 0x01
    18ce:	84 0f       	add	r24, r20
    18d0:	95 1f       	adc	r25, r21
    18d2:	8a 17       	cp	r24, r26
    18d4:	9b 07       	cpc	r25, r27
    18d6:	71 f4       	brne	.+28     	; 0x18f4 <free+0x8c>
    18d8:	8d 91       	ld	r24, X+
    18da:	9c 91       	ld	r25, X
    18dc:	11 97       	sbiw	r26, 0x01	; 1
    18de:	84 0f       	add	r24, r20
    18e0:	95 1f       	adc	r25, r21
    18e2:	02 96       	adiw	r24, 0x02	; 2
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	12 96       	adiw	r26, 0x02	; 2
    18ea:	8d 91       	ld	r24, X+
    18ec:	9c 91       	ld	r25, X
    18ee:	13 97       	sbiw	r26, 0x03	; 3
    18f0:	93 83       	std	Z+3, r25	; 0x03
    18f2:	82 83       	std	Z+2, r24	; 0x02
    18f4:	21 15       	cp	r18, r1
    18f6:	31 05       	cpc	r19, r1
    18f8:	29 f4       	brne	.+10     	; 0x1904 <free+0x9c>
    18fa:	f0 93 36 04 	sts	0x0436, r31
    18fe:	e0 93 35 04 	sts	0x0435, r30
    1902:	3e c0       	rjmp	.+124    	; 0x1980 <free+0x118>
    1904:	d9 01       	movw	r26, r18
    1906:	13 96       	adiw	r26, 0x03	; 3
    1908:	fc 93       	st	X, r31
    190a:	ee 93       	st	-X, r30
    190c:	12 97       	sbiw	r26, 0x02	; 2
    190e:	4d 91       	ld	r20, X+
    1910:	5d 91       	ld	r21, X+
    1912:	a4 0f       	add	r26, r20
    1914:	b5 1f       	adc	r27, r21
    1916:	ea 17       	cp	r30, r26
    1918:	fb 07       	cpc	r31, r27
    191a:	79 f4       	brne	.+30     	; 0x193a <free+0xd2>
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	84 0f       	add	r24, r20
    1922:	95 1f       	adc	r25, r21
    1924:	02 96       	adiw	r24, 0x02	; 2
    1926:	d9 01       	movw	r26, r18
    1928:	11 96       	adiw	r26, 0x01	; 1
    192a:	9c 93       	st	X, r25
    192c:	8e 93       	st	-X, r24
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	13 96       	adiw	r26, 0x03	; 3
    1934:	9c 93       	st	X, r25
    1936:	8e 93       	st	-X, r24
    1938:	12 97       	sbiw	r26, 0x02	; 2
    193a:	e0 e0       	ldi	r30, 0x00	; 0
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	19 f0       	breq	.+6      	; 0x194c <free+0xe4>
    1946:	fe 01       	movw	r30, r28
    1948:	ec 01       	movw	r28, r24
    194a:	f9 cf       	rjmp	.-14     	; 0x193e <free+0xd6>
    194c:	ce 01       	movw	r24, r28
    194e:	02 96       	adiw	r24, 0x02	; 2
    1950:	28 81       	ld	r18, Y
    1952:	39 81       	ldd	r19, Y+1	; 0x01
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	20 91 33 04 	lds	r18, 0x0433
    195c:	30 91 34 04 	lds	r19, 0x0434
    1960:	28 17       	cp	r18, r24
    1962:	39 07       	cpc	r19, r25
    1964:	69 f4       	brne	.+26     	; 0x1980 <free+0x118>
    1966:	30 97       	sbiw	r30, 0x00	; 0
    1968:	29 f4       	brne	.+10     	; 0x1974 <free+0x10c>
    196a:	10 92 36 04 	sts	0x0436, r1
    196e:	10 92 35 04 	sts	0x0435, r1
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <free+0x110>
    1974:	13 82       	std	Z+3, r1	; 0x03
    1976:	12 82       	std	Z+2, r1	; 0x02
    1978:	d0 93 34 04 	sts	0x0434, r29
    197c:	c0 93 33 04 	sts	0x0433, r28
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <strnlen_P>:
    1986:	fc 01       	movw	r30, r24
    1988:	05 90       	lpm	r0, Z+
    198a:	61 50       	subi	r22, 0x01	; 1
    198c:	70 40       	sbci	r23, 0x00	; 0
    198e:	01 10       	cpse	r0, r1
    1990:	d8 f7       	brcc	.-10     	; 0x1988 <strnlen_P+0x2>
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	8e 0f       	add	r24, r30
    1998:	9f 1f       	adc	r25, r31
    199a:	08 95       	ret

0000199c <memset>:
    199c:	dc 01       	movw	r26, r24
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <memset+0x6>
    19a0:	6d 93       	st	X+, r22
    19a2:	41 50       	subi	r20, 0x01	; 1
    19a4:	50 40       	sbci	r21, 0x00	; 0
    19a6:	e0 f7       	brcc	.-8      	; 0x19a0 <memset+0x4>
    19a8:	08 95       	ret

000019aa <strnlen>:
    19aa:	fc 01       	movw	r30, r24
    19ac:	61 50       	subi	r22, 0x01	; 1
    19ae:	70 40       	sbci	r23, 0x00	; 0
    19b0:	01 90       	ld	r0, Z+
    19b2:	01 10       	cpse	r0, r1
    19b4:	d8 f7       	brcc	.-10     	; 0x19ac <strnlen+0x2>
    19b6:	80 95       	com	r24
    19b8:	90 95       	com	r25
    19ba:	8e 0f       	add	r24, r30
    19bc:	9f 1f       	adc	r25, r31
    19be:	08 95       	ret

000019c0 <fputc>:
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	18 2f       	mov	r17, r24
    19ca:	09 2f       	mov	r16, r25
    19cc:	eb 01       	movw	r28, r22
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 fd       	sbrc	r24, 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <fputc+0x1a>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	20 c0       	rjmp	.+64     	; 0x1a1a <fputc+0x5a>
    19da:	82 ff       	sbrs	r24, 2
    19dc:	10 c0       	rjmp	.+32     	; 0x19fe <fputc+0x3e>
    19de:	4e 81       	ldd	r20, Y+6	; 0x06
    19e0:	5f 81       	ldd	r21, Y+7	; 0x07
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	42 17       	cp	r20, r18
    19e8:	53 07       	cpc	r21, r19
    19ea:	7c f4       	brge	.+30     	; 0x1a0a <fputc+0x4a>
    19ec:	e8 81       	ld	r30, Y
    19ee:	f9 81       	ldd	r31, Y+1	; 0x01
    19f0:	9f 01       	movw	r18, r30
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	39 83       	std	Y+1, r19	; 0x01
    19f8:	28 83       	st	Y, r18
    19fa:	10 83       	st	Z, r17
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <fputc+0x4a>
    19fe:	e8 85       	ldd	r30, Y+8	; 0x08
    1a00:	f9 85       	ldd	r31, Y+9	; 0x09
    1a02:	81 2f       	mov	r24, r17
    1a04:	09 95       	icall
    1a06:	89 2b       	or	r24, r25
    1a08:	29 f7       	brne	.-54     	; 0x19d4 <fputc+0x14>
    1a0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	3f 83       	std	Y+7, r19	; 0x07
    1a14:	2e 83       	std	Y+6, r18	; 0x06
    1a16:	81 2f       	mov	r24, r17
    1a18:	90 2f       	mov	r25, r16
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <__ultoa_invert>:
    1a24:	fa 01       	movw	r30, r20
    1a26:	aa 27       	eor	r26, r26
    1a28:	28 30       	cpi	r18, 0x08	; 8
    1a2a:	51 f1       	breq	.+84     	; 0x1a80 <__ultoa_invert+0x5c>
    1a2c:	20 31       	cpi	r18, 0x10	; 16
    1a2e:	81 f1       	breq	.+96     	; 0x1a90 <__ultoa_invert+0x6c>
    1a30:	e8 94       	clt
    1a32:	6f 93       	push	r22
    1a34:	6e 7f       	andi	r22, 0xFE	; 254
    1a36:	6e 5f       	subi	r22, 0xFE	; 254
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	af 4f       	sbci	r26, 0xFF	; 255
    1a40:	b1 e0       	ldi	r27, 0x01	; 1
    1a42:	3e d0       	rcall	.+124    	; 0x1ac0 <__ultoa_invert+0x9c>
    1a44:	b4 e0       	ldi	r27, 0x04	; 4
    1a46:	3c d0       	rcall	.+120    	; 0x1ac0 <__ultoa_invert+0x9c>
    1a48:	67 0f       	add	r22, r23
    1a4a:	78 1f       	adc	r23, r24
    1a4c:	89 1f       	adc	r24, r25
    1a4e:	9a 1f       	adc	r25, r26
    1a50:	a1 1d       	adc	r26, r1
    1a52:	68 0f       	add	r22, r24
    1a54:	79 1f       	adc	r23, r25
    1a56:	8a 1f       	adc	r24, r26
    1a58:	91 1d       	adc	r25, r1
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	6a 0f       	add	r22, r26
    1a5e:	71 1d       	adc	r23, r1
    1a60:	81 1d       	adc	r24, r1
    1a62:	91 1d       	adc	r25, r1
    1a64:	a1 1d       	adc	r26, r1
    1a66:	20 d0       	rcall	.+64     	; 0x1aa8 <__ultoa_invert+0x84>
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <__ultoa_invert+0x48>
    1a6a:	68 94       	set
    1a6c:	3f 91       	pop	r19
    1a6e:	2a e0       	ldi	r18, 0x0A	; 10
    1a70:	26 9f       	mul	r18, r22
    1a72:	11 24       	eor	r1, r1
    1a74:	30 19       	sub	r19, r0
    1a76:	30 5d       	subi	r19, 0xD0	; 208
    1a78:	31 93       	st	Z+, r19
    1a7a:	de f6       	brtc	.-74     	; 0x1a32 <__ultoa_invert+0xe>
    1a7c:	cf 01       	movw	r24, r30
    1a7e:	08 95       	ret
    1a80:	46 2f       	mov	r20, r22
    1a82:	47 70       	andi	r20, 0x07	; 7
    1a84:	40 5d       	subi	r20, 0xD0	; 208
    1a86:	41 93       	st	Z+, r20
    1a88:	b3 e0       	ldi	r27, 0x03	; 3
    1a8a:	0f d0       	rcall	.+30     	; 0x1aaa <__ultoa_invert+0x86>
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <__ultoa_invert+0x5c>
    1a8e:	f6 cf       	rjmp	.-20     	; 0x1a7c <__ultoa_invert+0x58>
    1a90:	46 2f       	mov	r20, r22
    1a92:	4f 70       	andi	r20, 0x0F	; 15
    1a94:	40 5d       	subi	r20, 0xD0	; 208
    1a96:	4a 33       	cpi	r20, 0x3A	; 58
    1a98:	18 f0       	brcs	.+6      	; 0x1aa0 <__ultoa_invert+0x7c>
    1a9a:	49 5d       	subi	r20, 0xD9	; 217
    1a9c:	31 fd       	sbrc	r19, 1
    1a9e:	40 52       	subi	r20, 0x20	; 32
    1aa0:	41 93       	st	Z+, r20
    1aa2:	02 d0       	rcall	.+4      	; 0x1aa8 <__ultoa_invert+0x84>
    1aa4:	a9 f7       	brne	.-22     	; 0x1a90 <__ultoa_invert+0x6c>
    1aa6:	ea cf       	rjmp	.-44     	; 0x1a7c <__ultoa_invert+0x58>
    1aa8:	b4 e0       	ldi	r27, 0x04	; 4
    1aaa:	a6 95       	lsr	r26
    1aac:	97 95       	ror	r25
    1aae:	87 95       	ror	r24
    1ab0:	77 95       	ror	r23
    1ab2:	67 95       	ror	r22
    1ab4:	ba 95       	dec	r27
    1ab6:	c9 f7       	brne	.-14     	; 0x1aaa <__ultoa_invert+0x86>
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	61 05       	cpc	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	08 95       	ret
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	0a 2e       	mov	r0, r26
    1ac6:	06 94       	lsr	r0
    1ac8:	57 95       	ror	r21
    1aca:	47 95       	ror	r20
    1acc:	37 95       	ror	r19
    1ace:	27 95       	ror	r18
    1ad0:	ba 95       	dec	r27
    1ad2:	c9 f7       	brne	.-14     	; 0x1ac6 <__ultoa_invert+0xa2>
    1ad4:	62 0f       	add	r22, r18
    1ad6:	73 1f       	adc	r23, r19
    1ad8:	84 1f       	adc	r24, r20
    1ada:	95 1f       	adc	r25, r21
    1adc:	a0 1d       	adc	r26, r0
    1ade:	08 95       	ret

00001ae0 <__divmodsi4>:
    1ae0:	05 2e       	mov	r0, r21
    1ae2:	97 fb       	bst	r25, 7
    1ae4:	1e f4       	brtc	.+6      	; 0x1aec <__divmodsi4+0xc>
    1ae6:	00 94       	com	r0
    1ae8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__negsi2>
    1aec:	57 fd       	sbrc	r21, 7
    1aee:	07 d0       	rcall	.+14     	; 0x1afe <__divmodsi4_neg2>
    1af0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__udivmodsi4>
    1af4:	07 fc       	sbrc	r0, 7
    1af6:	03 d0       	rcall	.+6      	; 0x1afe <__divmodsi4_neg2>
    1af8:	4e f4       	brtc	.+18     	; 0x1b0c <__divmodsi4_exit>
    1afa:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__negsi2>

00001afe <__divmodsi4_neg2>:
    1afe:	50 95       	com	r21
    1b00:	40 95       	com	r20
    1b02:	30 95       	com	r19
    1b04:	21 95       	neg	r18
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	4f 4f       	sbci	r20, 0xFF	; 255
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255

00001b0c <__divmodsi4_exit>:
    1b0c:	08 95       	ret

00001b0e <__negsi2>:
    1b0e:	90 95       	com	r25
    1b10:	80 95       	com	r24
    1b12:	70 95       	com	r23
    1b14:	61 95       	neg	r22
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	08 95       	ret

00001b1e <__muluhisi3>:
    1b1e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__umulhisi3>
    1b22:	a5 9f       	mul	r26, r21
    1b24:	90 0d       	add	r25, r0
    1b26:	b4 9f       	mul	r27, r20
    1b28:	90 0d       	add	r25, r0
    1b2a:	a4 9f       	mul	r26, r20
    1b2c:	80 0d       	add	r24, r0
    1b2e:	91 1d       	adc	r25, r1
    1b30:	11 24       	eor	r1, r1
    1b32:	08 95       	ret

00001b34 <__mulshisi3>:
    1b34:	b7 ff       	sbrs	r27, 7
    1b36:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__muluhisi3>

00001b3a <__mulohisi3>:
    1b3a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__muluhisi3>
    1b3e:	82 1b       	sub	r24, r18
    1b40:	93 0b       	sbc	r25, r19
    1b42:	08 95       	ret

00001b44 <__prologue_saves__>:
    1b44:	2f 92       	push	r2
    1b46:	3f 92       	push	r3
    1b48:	4f 92       	push	r4
    1b4a:	5f 92       	push	r5
    1b4c:	6f 92       	push	r6
    1b4e:	7f 92       	push	r7
    1b50:	8f 92       	push	r8
    1b52:	9f 92       	push	r9
    1b54:	af 92       	push	r10
    1b56:	bf 92       	push	r11
    1b58:	cf 92       	push	r12
    1b5a:	df 92       	push	r13
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	ca 1b       	sub	r28, r26
    1b6e:	db 0b       	sbc	r29, r27
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	09 94       	ijmp

00001b7c <__epilogue_restores__>:
    1b7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1b7e:	39 88       	ldd	r3, Y+17	; 0x11
    1b80:	48 88       	ldd	r4, Y+16	; 0x10
    1b82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1b90:	c8 84       	ldd	r12, Y+8	; 0x08
    1b92:	df 80       	ldd	r13, Y+7	; 0x07
    1b94:	ee 80       	ldd	r14, Y+6	; 0x06
    1b96:	fd 80       	ldd	r15, Y+5	; 0x05
    1b98:	0c 81       	ldd	r16, Y+4	; 0x04
    1b9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1b9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1ba0:	ce 0f       	add	r28, r30
    1ba2:	d1 1d       	adc	r29, r1
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	ed 01       	movw	r28, r26
    1bb0:	08 95       	ret

00001bb2 <__udivmodsi4>:
    1bb2:	a1 e2       	ldi	r26, 0x21	; 33
    1bb4:	1a 2e       	mov	r1, r26
    1bb6:	aa 1b       	sub	r26, r26
    1bb8:	bb 1b       	sub	r27, r27
    1bba:	fd 01       	movw	r30, r26
    1bbc:	0d c0       	rjmp	.+26     	; 0x1bd8 <__udivmodsi4_ep>

00001bbe <__udivmodsi4_loop>:
    1bbe:	aa 1f       	adc	r26, r26
    1bc0:	bb 1f       	adc	r27, r27
    1bc2:	ee 1f       	adc	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	a2 17       	cp	r26, r18
    1bc8:	b3 07       	cpc	r27, r19
    1bca:	e4 07       	cpc	r30, r20
    1bcc:	f5 07       	cpc	r31, r21
    1bce:	20 f0       	brcs	.+8      	; 0x1bd8 <__udivmodsi4_ep>
    1bd0:	a2 1b       	sub	r26, r18
    1bd2:	b3 0b       	sbc	r27, r19
    1bd4:	e4 0b       	sbc	r30, r20
    1bd6:	f5 0b       	sbc	r31, r21

00001bd8 <__udivmodsi4_ep>:
    1bd8:	66 1f       	adc	r22, r22
    1bda:	77 1f       	adc	r23, r23
    1bdc:	88 1f       	adc	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	1a 94       	dec	r1
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <__udivmodsi4_loop>
    1be4:	60 95       	com	r22
    1be6:	70 95       	com	r23
    1be8:	80 95       	com	r24
    1bea:	90 95       	com	r25
    1bec:	9b 01       	movw	r18, r22
    1bee:	ac 01       	movw	r20, r24
    1bf0:	bd 01       	movw	r22, r26
    1bf2:	cf 01       	movw	r24, r30
    1bf4:	08 95       	ret

00001bf6 <__umulhisi3>:
    1bf6:	a2 9f       	mul	r26, r18
    1bf8:	b0 01       	movw	r22, r0
    1bfa:	b3 9f       	mul	r27, r19
    1bfc:	c0 01       	movw	r24, r0
    1bfe:	a3 9f       	mul	r26, r19
    1c00:	70 0d       	add	r23, r0
    1c02:	81 1d       	adc	r24, r1
    1c04:	11 24       	eor	r1, r1
    1c06:	91 1d       	adc	r25, r1
    1c08:	b2 9f       	mul	r27, r18
    1c0a:	70 0d       	add	r23, r0
    1c0c:	81 1d       	adc	r24, r1
    1c0e:	11 24       	eor	r1, r1
    1c10:	91 1d       	adc	r25, r1
    1c12:	08 95       	ret

00001c14 <_exit>:
    1c14:	f8 94       	cli

00001c16 <__stop_program>:
    1c16:	ff cf       	rjmp	.-2      	; 0x1c16 <__stop_program>
