
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a0  00800100  00001bb4  00001c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  008003a0  008003a0  00001ee8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a8  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003356  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d19  00000000  00000000  00005542  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ee1  00000000  00000000  0000625b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008c0  00000000  00000000  0000713c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a88  00000000  00000000  000079fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023af  00000000  00000000  00008484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0000a833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_2>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	43 61       	ori	r20, 0x13	; 19
      72:	6c 69       	ori	r22, 0x9C	; 156
      74:	62 72       	andi	r22, 0x22	; 34
      76:	61 74       	andi	r22, 0x41	; 65
      78:	65 00       	.word	0x0065	; ????

0000007a <debug_entry_0>:
      7a:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

00000085 <option_entry_1>:
      85:	43 6f 6e 74 72 61 73 74 00                          Contrast.

0000008e <option_entry_0>:
      8e:	4d 75 73 69 63 00                                   Music.

00000094 <mainmenu_entry_3>:
      94:	4f 70 74 69 6f 6e 73 00                             Options.

0000009c <mainmenu_entry_2>:
      9c:	44 65 62 75 67 00                                   Debug.

000000a2 <mainmenu_entry_1>:
      a2:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d4 e0       	ldi	r29, 0x04	; 4
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	13 e0       	ldi	r17, 0x03	; 3
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e4 eb       	ldi	r30, 0xB4	; 180
      c0:	fb e1       	ldi	r31, 0x1B	; 27
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 3a       	cpi	r26, 0xA0	; 160
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	24 e0       	ldi	r18, 0x04	; 4
      d0:	a0 ea       	ldi	r26, 0xA0	; 160
      d2:	b3 e0       	ldi	r27, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a7 31       	cpi	r26, 0x17	; 23
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 04 04 	call	0x808	; 0x808 <main>
      e2:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <readADC>:
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	91 05       	cpc	r25, r1
      ee:	71 f0       	breq	.+28     	; 0x10c <readADC+0x22>
      f0:	1c f4       	brge	.+6      	; 0xf8 <readADC+0xe>
      f2:	01 97       	sbiw	r24, 0x01	; 1
      f4:	39 f0       	breq	.+14     	; 0x104 <readADC+0x1a>
      f6:	1c c0       	rjmp	.+56     	; 0x130 <readADC+0x46>
      f8:	83 30       	cpi	r24, 0x03	; 3
      fa:	91 05       	cpc	r25, r1
      fc:	59 f0       	breq	.+22     	; 0x114 <readADC+0x2a>
      fe:	04 97       	sbiw	r24, 0x04	; 4
     100:	69 f0       	breq	.+26     	; 0x11c <readADC+0x32>
     102:	16 c0       	rjmp	.+44     	; 0x130 <readADC+0x46>
     104:	84 e1       	ldi	r24, 0x14	; 20
     106:	80 93 00 14 	sts	0x1400, r24
     10a:	0b c0       	rjmp	.+22     	; 0x122 <readADC+0x38>
     10c:	85 e1       	ldi	r24, 0x15	; 21
     10e:	80 93 00 14 	sts	0x1400, r24
     112:	07 c0       	rjmp	.+14     	; 0x122 <readADC+0x38>
     114:	86 e1       	ldi	r24, 0x16	; 22
     116:	80 93 00 14 	sts	0x1400, r24
     11a:	03 c0       	rjmp	.+6      	; 0x122 <readADC+0x38>
     11c:	87 e1       	ldi	r24, 0x17	; 23
     11e:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     122:	82 e5       	ldi	r24, 0x52	; 82
     124:	8a 95       	dec	r24
     126:	f1 f7       	brne	.-4      	; 0x124 <readADC+0x3a>
     128:	80 91 00 14 	lds	r24, 0x1400
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	08 95       	ret
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	08 95       	ret

00000136 <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     136:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     138:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     13a:	85 b7       	in	r24, 0x35	; 53
     13c:	81 60       	ori	r24, 0x01	; 1
     13e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     140:	85 b7       	in	r24, 0x35	; 53
     142:	82 60       	ori	r24, 0x02	; 2
     144:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     146:	85 b7       	in	r24, 0x35	; 53
     148:	84 60       	ori	r24, 0x04	; 4
     14a:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     14c:	85 b7       	in	r24, 0x35	; 53
     14e:	88 60       	ori	r24, 0x08	; 8
     150:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     152:	8b b7       	in	r24, 0x3b	; 59
     154:	80 64       	ori	r24, 0x40	; 64
     156:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     158:	8b b7       	in	r24, 0x3b	; 59
     15a:	80 68       	ori	r24, 0x80	; 128
     15c:	8b bf       	out	0x3b, r24	; 59
     15e:	08 95       	ret

00000160 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	2f 93       	push	r18
     174:	3f 93       	push	r19
     176:	4f 93       	push	r20
     178:	5f 93       	push	r21
     17a:	6f 93       	push	r22
     17c:	7f 93       	push	r23
     17e:	8f 93       	push	r24
     180:	9f 93       	push	r25
     182:	af 93       	push	r26
     184:	bf 93       	push	r27
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ef 93       	push	r30
     18c:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     18e:	80 e1       	ldi	r24, 0x10	; 16
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	9f 93       	push	r25
     194:	8f 93       	push	r24
     196:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     19a:	82 e5       	ldi	r24, 0x52	; 82
     19c:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1a0:	f8 2e       	mov	r15, r24
     1a2:	e9 2e       	mov	r14, r25
     1a4:	8c e4       	ldi	r24, 0x4C	; 76
     1a6:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1aa:	18 2f       	mov	r17, r24
     1ac:	09 2f       	mov	r16, r25
     1ae:	89 e5       	ldi	r24, 0x59	; 89
     1b0:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1b4:	c8 2f       	mov	r28, r24
     1b6:	d9 2f       	mov	r29, r25
     1b8:	88 e5       	ldi	r24, 0x58	; 88
     1ba:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     1be:	ef 92       	push	r14
     1c0:	ff 92       	push	r15
     1c2:	0f 93       	push	r16
     1c4:	1f 93       	push	r17
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	9f 93       	push	r25
     1cc:	8f 93       	push	r24
     1ce:	89 e3       	ldi	r24, 0x39	; 57
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	9f 93       	push	r25
     1d4:	8f 93       	push	r24
     1d6:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
	menu_right_button_flag();
     1da:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <menu_right_button_flag>
     1de:	8d b7       	in	r24, 0x3d	; 61
     1e0:	9e b7       	in	r25, 0x3e	; 62
     1e2:	0c 96       	adiw	r24, 0x0c	; 12
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	9e bf       	out	0x3e, r25	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	8d bf       	out	0x3d, r24	; 61
}
     1ee:	ff 91       	pop	r31
     1f0:	ef 91       	pop	r30
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	bf 91       	pop	r27
     1f8:	af 91       	pop	r26
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	7f 91       	pop	r23
     200:	6f 91       	pop	r22
     202:	5f 91       	pop	r21
     204:	4f 91       	pop	r20
     206:	3f 91       	pop	r19
     208:	2f 91       	pop	r18
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	ef 90       	pop	r14
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	2f 93       	push	r18
     228:	3f 93       	push	r19
     22a:	4f 93       	push	r20
     22c:	5f 93       	push	r21
     22e:	6f 93       	push	r22
     230:	7f 93       	push	r23
     232:	8f 93       	push	r24
     234:	9f 93       	push	r25
     236:	af 93       	push	r26
     238:	bf 93       	push	r27
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	menu_left_button_flag();
     23e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <menu_left_button_flag>
     242:	ff 91       	pop	r31
     244:	ef 91       	pop	r30
     246:	bf 91       	pop	r27
     248:	af 91       	pop	r26
     24a:	9f 91       	pop	r25
     24c:	8f 91       	pop	r24
     24e:	7f 91       	pop	r23
     250:	6f 91       	pop	r22
     252:	5f 91       	pop	r21
     254:	4f 91       	pop	r20
     256:	3f 91       	pop	r19
     258:	2f 91       	pop	r18
     25a:	0f 90       	pop	r0
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	0f 90       	pop	r0
     260:	1f 90       	pop	r1
     262:	18 95       	reti

00000264 <calibrate_joystick>:
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	c4 e6       	ldi	r28, 0x64	; 100
     26e:	d0 e0       	ldi	r29, 0x00	; 0
     270:	00 91 aa 03 	lds	r16, 0x03AA
     274:	10 91 ab 03 	lds	r17, 0x03AB
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     280:	01 58       	subi	r16, 0x81	; 129
     282:	1f 4f       	sbci	r17, 0xFF	; 255
     284:	08 1b       	sub	r16, r24
     286:	19 0b       	sbc	r17, r25
     288:	10 93 ab 03 	sts	0x03AB, r17
     28c:	00 93 aa 03 	sts	0x03AA, r16
     290:	00 91 a8 03 	lds	r16, 0x03A8
     294:	10 91 a9 03 	lds	r17, 0x03A9
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     2a0:	01 58       	subi	r16, 0x81	; 129
     2a2:	1f 4f       	sbci	r17, 0xFF	; 255
     2a4:	08 1b       	sub	r16, r24
     2a6:	19 0b       	sbc	r17, r25
     2a8:	10 93 a9 03 	sts	0x03A9, r17
     2ac:	00 93 a8 03 	sts	0x03A8, r16
     2b0:	21 97       	sbiw	r28, 0x01	; 1
     2b2:	20 97       	sbiw	r28, 0x00	; 0
     2b4:	e9 f6       	brne	.-70     	; 0x270 <calibrate_joystick+0xc>
     2b6:	80 91 aa 03 	lds	r24, 0x03AA
     2ba:	90 91 ab 03 	lds	r25, 0x03AB
     2be:	24 e6       	ldi	r18, 0x64	; 100
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	b9 01       	movw	r22, r18
     2c4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__divmodhi4>
     2c8:	70 93 ab 03 	sts	0x03AB, r23
     2cc:	60 93 aa 03 	sts	0x03AA, r22
     2d0:	80 91 a8 03 	lds	r24, 0x03A8
     2d4:	90 91 a9 03 	lds	r25, 0x03A9
     2d8:	b9 01       	movw	r22, r18
     2da:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__divmodhi4>
     2de:	70 93 a9 03 	sts	0x03A9, r23
     2e2:	60 93 a8 03 	sts	0x03A8, r22
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <signal_to_range>:
     2f0:	2f 92       	push	r2
     2f2:	3f 92       	push	r3
     2f4:	4f 92       	push	r4
     2f6:	5f 92       	push	r5
     2f8:	6f 92       	push	r6
     2fa:	7f 92       	push	r7
     2fc:	8f 92       	push	r8
     2fe:	9f 92       	push	r9
     300:	af 92       	push	r10
     302:	bf 92       	push	r11
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	00 d0       	rcall	.+0      	; 0x316 <signal_to_range+0x26>
     316:	00 d0       	rcall	.+0      	; 0x318 <signal_to_range+0x28>
     318:	00 d0       	rcall	.+0      	; 0x31a <signal_to_range+0x2a>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	3c 01       	movw	r6, r24
     320:	7a 83       	std	Y+2, r23	; 0x02
     322:	69 83       	std	Y+1, r22	; 0x01
     324:	5c 83       	std	Y+4, r21	; 0x04
     326:	4b 83       	std	Y+3, r20	; 0x03
     328:	3e 83       	std	Y+6, r19	; 0x06
     32a:	2d 83       	std	Y+5, r18	; 0x05
     32c:	18 01       	movw	r2, r16
     32e:	85 01       	movw	r16, r10
     330:	b9 01       	movw	r22, r18
     332:	88 27       	eor	r24, r24
     334:	77 fd       	sbrc	r23, 7
     336:	80 95       	com	r24
     338:	98 2f       	mov	r25, r24
     33a:	0e 94 7b 07 	call	0xef6	; 0xef6 <__floatsisf>
     33e:	4b 01       	movw	r8, r22
     340:	5c 01       	movw	r10, r24
     342:	b3 01       	movw	r22, r6
     344:	6e 0d       	add	r22, r14
     346:	7f 1d       	adc	r23, r15
     348:	29 81       	ldd	r18, Y+1	; 0x01
     34a:	3a 81       	ldd	r19, Y+2	; 0x02
     34c:	62 1b       	sub	r22, r18
     34e:	73 0b       	sbc	r23, r19
     350:	88 27       	eor	r24, r24
     352:	77 fd       	sbrc	r23, 7
     354:	80 95       	com	r24
     356:	98 2f       	mov	r25, r24
     358:	0e 94 7b 07 	call	0xef6	; 0xef6 <__floatsisf>
     35c:	2b 01       	movw	r4, r22
     35e:	3c 01       	movw	r6, r24
     360:	b1 01       	movw	r22, r2
     362:	8d 81       	ldd	r24, Y+5	; 0x05
     364:	9e 81       	ldd	r25, Y+6	; 0x06
     366:	68 1b       	sub	r22, r24
     368:	79 0b       	sbc	r23, r25
     36a:	88 27       	eor	r24, r24
     36c:	77 fd       	sbrc	r23, 7
     36e:	80 95       	com	r24
     370:	98 2f       	mov	r25, r24
     372:	0e 94 7b 07 	call	0xef6	; 0xef6 <__floatsisf>
     376:	9b 01       	movw	r18, r22
     378:	ac 01       	movw	r20, r24
     37a:	c3 01       	movw	r24, r6
     37c:	b2 01       	movw	r22, r4
     37e:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3>
     382:	2b 01       	movw	r4, r22
     384:	3c 01       	movw	r6, r24
     386:	6b 81       	ldd	r22, Y+3	; 0x03
     388:	7c 81       	ldd	r23, Y+4	; 0x04
     38a:	e9 81       	ldd	r30, Y+1	; 0x01
     38c:	fa 81       	ldd	r31, Y+2	; 0x02
     38e:	6e 1b       	sub	r22, r30
     390:	7f 0b       	sbc	r23, r31
     392:	88 27       	eor	r24, r24
     394:	77 fd       	sbrc	r23, 7
     396:	80 95       	com	r24
     398:	98 2f       	mov	r25, r24
     39a:	0e 94 7b 07 	call	0xef6	; 0xef6 <__floatsisf>
     39e:	9b 01       	movw	r18, r22
     3a0:	ac 01       	movw	r20, r24
     3a2:	c3 01       	movw	r24, r6
     3a4:	b2 01       	movw	r22, r4
     3a6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
     3aa:	9b 01       	movw	r18, r22
     3ac:	ac 01       	movw	r20, r24
     3ae:	c5 01       	movw	r24, r10
     3b0:	b4 01       	movw	r22, r8
     3b2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__addsf3>
     3b6:	0e 94 48 07 	call	0xe90	; 0xe90 <__fixsfsi>
     3ba:	c1 01       	movw	r24, r2
     3bc:	80 1b       	sub	r24, r16
     3be:	91 0b       	sbc	r25, r17
     3c0:	68 17       	cp	r22, r24
     3c2:	79 07       	cpc	r23, r25
     3c4:	74 f5       	brge	.+92     	; 0x422 <signal_to_range+0x132>
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ca:	80 0f       	add	r24, r16
     3cc:	91 1f       	adc	r25, r17
     3ce:	86 17       	cp	r24, r22
     3d0:	97 07       	cpc	r25, r23
     3d2:	4c f5       	brge	.+82     	; 0x426 <signal_to_range+0x136>
     3d4:	f8 01       	movw	r30, r16
     3d6:	11 23       	and	r17, r17
     3d8:	0c f4       	brge	.+2      	; 0x3dc <signal_to_range+0xec>
     3da:	31 96       	adiw	r30, 0x01	; 1
     3dc:	f5 95       	asr	r31
     3de:	e7 95       	ror	r30
     3e0:	d8 01       	movw	r26, r16
     3e2:	12 c0       	rjmp	.+36     	; 0x408 <signal_to_range+0x118>
     3e4:	8a 0f       	add	r24, r26
     3e6:	9b 1f       	adc	r25, r27
     3e8:	ac 01       	movw	r20, r24
     3ea:	4e 0f       	add	r20, r30
     3ec:	5f 1f       	adc	r21, r31
     3ee:	64 17       	cp	r22, r20
     3f0:	75 07       	cpc	r23, r21
     3f2:	14 f0       	brlt	.+4      	; 0x3f8 <signal_to_range+0x108>
     3f4:	69 01       	movw	r12, r18
     3f6:	0b c0       	rjmp	.+22     	; 0x40e <signal_to_range+0x11e>
     3f8:	c6 01       	movw	r24, r12
     3fa:	8e 1b       	sub	r24, r30
     3fc:	9f 0b       	sbc	r25, r31
     3fe:	86 17       	cp	r24, r22
     400:	97 07       	cpc	r25, r23
     402:	14 f0       	brlt	.+4      	; 0x408 <signal_to_range+0x118>
     404:	c0 1a       	sub	r12, r16
     406:	d1 0a       	sbc	r13, r17
     408:	c6 01       	movw	r24, r12
     40a:	80 1b       	sub	r24, r16
     40c:	91 0b       	sbc	r25, r17
     40e:	96 01       	movw	r18, r12
     410:	20 0f       	add	r18, r16
     412:	31 1f       	adc	r19, r17
     414:	62 17       	cp	r22, r18
     416:	73 07       	cpc	r23, r19
     418:	2c f7       	brge	.-54     	; 0x3e4 <signal_to_range+0xf4>
     41a:	86 17       	cp	r24, r22
     41c:	97 07       	cpc	r25, r23
     41e:	14 f7       	brge	.-60     	; 0x3e4 <signal_to_range+0xf4>
     420:	04 c0       	rjmp	.+8      	; 0x42a <signal_to_range+0x13a>
     422:	61 01       	movw	r12, r2
     424:	02 c0       	rjmp	.+4      	; 0x42a <signal_to_range+0x13a>
     426:	cd 80       	ldd	r12, Y+5	; 0x05
     428:	de 80       	ldd	r13, Y+6	; 0x06
     42a:	c6 01       	movw	r24, r12
     42c:	26 96       	adiw	r28, 0x06	; 6
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	3f 90       	pop	r3
     45a:	2f 90       	pop	r2
     45c:	08 95       	ret

0000045e <read_control_input>:
     45e:	af 92       	push	r10
     460:	bf 92       	push	r11
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	82 35       	cpi	r24, 0x52	; 82
     470:	09 f4       	brne	.+2      	; 0x474 <read_control_input+0x16>
     472:	74 c0       	rjmp	.+232    	; 0x55c <__stack+0x5d>
     474:	20 f4       	brcc	.+8      	; 0x47e <read_control_input+0x20>
     476:	8c 34       	cpi	r24, 0x4C	; 76
     478:	09 f4       	brne	.+2      	; 0x47c <read_control_input+0x1e>
     47a:	4e c0       	rjmp	.+156    	; 0x518 <__stack+0x19>
     47c:	91 c0       	rjmp	.+290    	; 0x5a0 <__stack+0xa1>
     47e:	88 35       	cpi	r24, 0x58	; 88
     480:	19 f0       	breq	.+6      	; 0x488 <read_control_input+0x2a>
     482:	89 35       	cpi	r24, 0x59	; 89
     484:	29 f1       	breq	.+74     	; 0x4d0 <read_control_input+0x72>
     486:	8c c0       	rjmp	.+280    	; 0x5a0 <__stack+0xa1>
     488:	c0 90 a6 03 	lds	r12, 0x03A6
     48c:	d0 90 a7 03 	lds	r13, 0x03A7
     490:	e0 90 aa 03 	lds	r14, 0x03AA
     494:	f0 90 ab 03 	lds	r15, 0x03AB
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fa e0       	ldi	r31, 0x0A	; 10
     4a4:	af 2e       	mov	r10, r31
     4a6:	b1 2c       	mov	r11, r1
     4a8:	f0 2d       	mov	r31, r0
     4aa:	04 e6       	ldi	r16, 0x64	; 100
     4ac:	10 e0       	ldi	r17, 0x00	; 0
     4ae:	2c e9       	ldi	r18, 0x9C	; 156
     4b0:	3f ef       	ldi	r19, 0xFF	; 255
     4b2:	4f ef       	ldi	r20, 0xFF	; 255
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     4be:	90 93 a7 03 	sts	0x03A7, r25
     4c2:	80 93 a6 03 	sts	0x03A6, r24
     4c6:	80 91 a6 03 	lds	r24, 0x03A6
     4ca:	90 91 a7 03 	lds	r25, 0x03A7
     4ce:	6a c0       	rjmp	.+212    	; 0x5a4 <__stack+0xa5>
     4d0:	c0 90 a4 03 	lds	r12, 0x03A4
     4d4:	d0 90 a5 03 	lds	r13, 0x03A5
     4d8:	e0 90 a8 03 	lds	r14, 0x03A8
     4dc:	f0 90 a9 03 	lds	r15, 0x03A9
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     4e8:	0f 2e       	mov	r0, r31
     4ea:	fa e0       	ldi	r31, 0x0A	; 10
     4ec:	af 2e       	mov	r10, r31
     4ee:	b1 2c       	mov	r11, r1
     4f0:	f0 2d       	mov	r31, r0
     4f2:	04 e6       	ldi	r16, 0x64	; 100
     4f4:	10 e0       	ldi	r17, 0x00	; 0
     4f6:	2c e9       	ldi	r18, 0x9C	; 156
     4f8:	3f ef       	ldi	r19, 0xFF	; 255
     4fa:	4f ef       	ldi	r20, 0xFF	; 255
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     506:	90 93 a5 03 	sts	0x03A5, r25
     50a:	80 93 a4 03 	sts	0x03A4, r24
     50e:	80 91 a4 03 	lds	r24, 0x03A4
     512:	90 91 a5 03 	lds	r25, 0x03A5
     516:	46 c0       	rjmp	.+140    	; 0x5a4 <__stack+0xa5>
     518:	c0 90 a2 03 	lds	r12, 0x03A2
     51c:	d0 90 a3 03 	lds	r13, 0x03A3
     520:	83 e0       	ldi	r24, 0x03	; 3
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     528:	0f 2e       	mov	r0, r31
     52a:	fa e0       	ldi	r31, 0x0A	; 10
     52c:	af 2e       	mov	r10, r31
     52e:	b1 2c       	mov	r11, r1
     530:	f0 2d       	mov	r31, r0
     532:	e1 2c       	mov	r14, r1
     534:	f1 2c       	mov	r15, r1
     536:	04 e6       	ldi	r16, 0x64	; 100
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	4f ef       	ldi	r20, 0xFF	; 255
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     54a:	90 93 a3 03 	sts	0x03A3, r25
     54e:	80 93 a2 03 	sts	0x03A2, r24
     552:	80 91 a2 03 	lds	r24, 0x03A2
     556:	90 91 a3 03 	lds	r25, 0x03A3
     55a:	24 c0       	rjmp	.+72     	; 0x5a4 <__stack+0xa5>
     55c:	c0 90 a0 03 	lds	r12, 0x03A0
     560:	d0 90 a1 03 	lds	r13, 0x03A1
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 75 00 	call	0xea	; 0xea <readADC>
     56c:	0f 2e       	mov	r0, r31
     56e:	fa e0       	ldi	r31, 0x0A	; 10
     570:	af 2e       	mov	r10, r31
     572:	b1 2c       	mov	r11, r1
     574:	f0 2d       	mov	r31, r0
     576:	e1 2c       	mov	r14, r1
     578:	f1 2c       	mov	r15, r1
     57a:	04 e6       	ldi	r16, 0x64	; 100
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <signal_to_range>
     58e:	90 93 a1 03 	sts	0x03A1, r25
     592:	80 93 a0 03 	sts	0x03A0, r24
     596:	80 91 a0 03 	lds	r24, 0x03A0
     59a:	90 91 a1 03 	lds	r25, 0x03A1
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__stack+0xa5>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	08 95       	ret

000005b6 <initialize_control_input>:
     5b6:	0e 94 32 01 	call	0x264	; 0x264 <calibrate_joystick>
     5ba:	88 e5       	ldi	r24, 0x58	; 88
     5bc:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5c0:	90 93 a7 03 	sts	0x03A7, r25
     5c4:	80 93 a6 03 	sts	0x03A6, r24
     5c8:	89 e5       	ldi	r24, 0x59	; 89
     5ca:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5ce:	90 93 a5 03 	sts	0x03A5, r25
     5d2:	80 93 a4 03 	sts	0x03A4, r24
     5d6:	8c e4       	ldi	r24, 0x4C	; 76
     5d8:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5dc:	90 93 a3 03 	sts	0x03A3, r25
     5e0:	80 93 a2 03 	sts	0x03A2, r24
     5e4:	82 e5       	ldi	r24, 0x52	; 82
     5e6:	0e 94 2f 02 	call	0x45e	; 0x45e <read_control_input>
     5ea:	90 93 a1 03 	sts	0x03A1, r25
     5ee:	80 93 a0 03 	sts	0x03A0, r24
     5f2:	20 91 a8 03 	lds	r18, 0x03A8
     5f6:	30 91 a9 03 	lds	r19, 0x03A9
     5fa:	80 91 aa 03 	lds	r24, 0x03AA
     5fe:	90 91 ab 03 	lds	r25, 0x03AB
     602:	3f 93       	push	r19
     604:	2f 93       	push	r18
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	82 e5       	ldi	r24, 0x52	; 82
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     616:	60 91 a0 03 	lds	r22, 0x03A0
     61a:	70 91 a1 03 	lds	r23, 0x03A1
     61e:	40 91 a2 03 	lds	r20, 0x03A2
     622:	50 91 a3 03 	lds	r21, 0x03A3
     626:	20 91 a4 03 	lds	r18, 0x03A4
     62a:	30 91 a5 03 	lds	r19, 0x03A5
     62e:	80 91 a6 03 	lds	r24, 0x03A6
     632:	90 91 a7 03 	lds	r25, 0x03A7
     636:	7f 93       	push	r23
     638:	6f 93       	push	r22
     63a:	5f 93       	push	r21
     63c:	4f 93       	push	r20
     63e:	3f 93       	push	r19
     640:	2f 93       	push	r18
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	8b e7       	ldi	r24, 0x7B	; 123
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     652:	8d b7       	in	r24, 0x3d	; 61
     654:	9e b7       	in	r25, 0x3e	; 62
     656:	40 96       	adiw	r24, 0x10	; 16
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	9e bf       	out	0x3e, r25	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	8d bf       	out	0x3d, r24	; 61
     662:	08 95       	ret

00000664 <SRAM_test>:
	sei();//enable interrupts
}

#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     674:	84 ea       	ldi	r24, 0xA4	; 164
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 4f 09 	call	0x129e	; 0x129e <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     67c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <rand>
     680:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     682:	0e 94 e5 08 	call	0x11ca	; 0x11ca <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     686:	c0 e0       	ldi	r28, 0x00	; 0
     688:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     68a:	00 e0       	ldi	r16, 0x00	; 0
     68c:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     68e:	0f 2e       	mov	r0, r31
     690:	fa eb       	ldi	r31, 0xBA	; 186
     692:	ef 2e       	mov	r14, r31
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	ff 2e       	mov	r15, r31
     698:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     69a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <rand>
     69e:	fe 01       	movw	r30, r28
     6a0:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     6a2:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     6a4:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     6a6:	28 17       	cp	r18, r24
     6a8:	a9 f0       	breq	.+42     	; 0x6d4 <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     6aa:	99 27       	eor	r25, r25
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	1f 92       	push	r1
     6b2:	2f 93       	push	r18
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	ff 92       	push	r15
     6ba:	ef 92       	push	r14
     6bc:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
			write_errors++;
     6c0:	0f 5f       	subi	r16, 0xFF	; 255
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	8d b7       	in	r24, 0x3d	; 61
     6c6:	9e b7       	in	r25, 0x3e	; 62
     6c8:	08 96       	adiw	r24, 0x08	; 8
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	9e bf       	out	0x3e, r25	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	c1 15       	cp	r28, r1
     6d8:	98 e0       	ldi	r25, 0x08	; 8
     6da:	d9 07       	cpc	r29, r25
     6dc:	f1 f6       	brne	.-68     	; 0x69a <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     6de:	c6 01       	movw	r24, r12
     6e0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6e4:	c0 e0       	ldi	r28, 0x00	; 0
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     6e8:	e1 2c       	mov	r14, r1
     6ea:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f3 ef       	ldi	r31, 0xF3	; 243
     6f0:	cf 2e       	mov	r12, r31
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	df 2e       	mov	r13, r31
     6f6:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     6f8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <rand>
     6fc:	fe 01       	movw	r30, r28
     6fe:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     700:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     702:	28 17       	cp	r18, r24
     704:	b1 f0       	breq	.+44     	; 0x732 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     706:	99 27       	eor	r25, r25
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	1f 92       	push	r1
     70e:	2f 93       	push	r18
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	df 92       	push	r13
     716:	cf 92       	push	r12
     718:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
			retrieval_errors++;
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	e8 1a       	sub	r14, r24
     720:	f8 0a       	sbc	r15, r24
     722:	8d b7       	in	r24, 0x3d	; 61
     724:	9e b7       	in	r25, 0x3e	; 62
     726:	08 96       	adiw	r24, 0x08	; 8
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	9e bf       	out	0x3e, r25	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     732:	21 96       	adiw	r28, 0x01	; 1
     734:	c1 15       	cp	r28, r1
     736:	98 e0       	ldi	r25, 0x08	; 8
     738:	d9 07       	cpc	r29, r25
     73a:	f1 f6       	brne	.-68     	; 0x6f8 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     73c:	ff 92       	push	r15
     73e:	ef 92       	push	r14
     740:	1f 93       	push	r17
     742:	0f 93       	push	r16
     744:	80 e3       	ldi	r24, 0x30	; 48
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	08 95       	ret

0000076e <initalize>:




void initalize(void){
	cli();//disable interrupts
     76e:	f8 94       	cli
	init_UART(UBBR);
     770:	8f e1       	ldi	r24, 0x1F	; 31
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 70 06 	call	0xce0	; 0xce0 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     778:	87 e8       	ldi	r24, 0x87	; 135
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	80 e9       	ldi	r24, 0x90	; 144
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	8c e9       	ldi	r24, 0x9C	; 156
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	81 ea       	ldi	r24, 0xA1	; 161
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     79c:	85 b7       	in	r24, 0x35	; 53
     79e:	80 68       	ori	r24, 0x80	; 128
     7a0:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     7a2:	80 b7       	in	r24, 0x30	; 48
     7a4:	80 62       	ori	r24, 0x20	; 32
     7a6:	80 bf       	out	0x30, r24	; 48
	
	oled_ini();
     7a8:	0e 94 5b 05 	call	0xab6	; 0xab6 <oled_ini>
	sram_init();
     7ac:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <sram_init>
	//bootscreen();
	write_screen();
     7b0:	0e 94 08 06 	call	0xc10	; 0xc10 <write_screen>
	
	
	printf("OLED successfully initialized\n");
     7b4:	87 ee       	ldi	r24, 0xE7	; 231
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 4f 09 	call	0x129e	; 0x129e <puts>
	initialize_menu();
     7bc:	0e 94 36 04 	call	0x86c	; 0x86c <initialize_menu>
	
	initialize_control_input();
     7c0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <initialize_control_input>
	printf("control input successfully initialized\n\n");
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 4f 09 	call	0x129e	; 0x129e <puts>
	SRAM_test();
     7cc:	0e 94 32 03 	call	0x664	; 0x664 <SRAM_test>
	printf("SRAM successfully initialized\n");
     7d0:	8d e2       	ldi	r24, 0x2D	; 45
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	0e 94 4f 09 	call	0x129e	; 0x129e <puts>
	initalize_interrupts();
     7d8:	0e 94 9b 00 	call	0x136	; 0x136 <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     7dc:	8b e4       	ldi	r24, 0x4B	; 75
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 4f 09 	call	0x129e	; 0x129e <puts>
	printf("Interrupts activated\n");
     7e4:	8f e6       	ldi	r24, 0x6F	; 111
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	0e 94 4f 09 	call	0x129e	; 0x129e <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     7ec:	84 e8       	ldi	r24, 0x84	; 132
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 4f 09 	call	0x129e	; 0x129e <puts>
	sei();//enable interrupts
     7f4:	78 94       	sei
     7f6:	8d b7       	in	r24, 0x3d	; 61
     7f8:	9e b7       	in	r25, 0x3e	; 62
     7fa:	08 96       	adiw	r24, 0x08	; 8
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	9e bf       	out	0x3e, r25	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	8d bf       	out	0x3d, r24	; 61
     806:	08 95       	ret

00000808 <main>:


int main(void)
{
	
	initalize();
     808:	0e 94 b7 03 	call	0x76e	; 0x76e <initalize>
	
	sram_init();
     80c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <sram_init>
	oled_goto_line(7);
     810:	87 e0       	ldi	r24, 0x07	; 7
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 17 05 	call	0xa2e	; 0xa2e <oled_goto_line>
	//sram_write_string(" - BYGGERN - G17");
	
	
	cli();
     818:	f8 94       	cli
	SPI_initialize();
     81a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <SPI_initialize>
	int i = SPI_read_instruction(0b00010000);
     81e:	80 e1       	ldi	r24, 0x10	; 16
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 54 06 	call	0xca8	; 0xca8 <SPI_read_instruction>
	printf("%i",i);
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	8d e9       	ldi	r24, 0x9D	; 157
     82c:	93 e0       	ldi	r25, 0x03	; 3
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
	}
	while (1)
	{
		int i = SPI_read_instruction(0b00000000);
		_delay_ms(10);
		printf("%i",i);
     83e:	cd e9       	ldi	r28, 0x9D	; 157
     840:	d3 e0       	ldi	r29, 0x03	; 3
	if(test > 0xfff){
		printf("ASDASF");
	}
	while (1)
	{
		int i = SPI_read_instruction(0b00000000);
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 54 06 	call	0xca8	; 0xca8 <SPI_read_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84a:	ef ef       	ldi	r30, 0xFF	; 255
     84c:	ff e2       	ldi	r31, 0x2F	; 47
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <main+0x46>
     852:	00 c0       	rjmp	.+0      	; 0x854 <main+0x4c>
     854:	00 00       	nop
		_delay_ms(10);
		printf("%i",i);
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	eb cf       	rjmp	.-42     	; 0x842 <main+0x3a>

0000086c <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     870:	c3 e0       	ldi	r28, 0x03	; 3
     872:	d4 e0       	ldi	r29, 0x04	; 4
     874:	d0 93 ea 03 	sts	0x03EA, r29
     878:	c0 93 e9 03 	sts	0x03E9, r28
	new_menu->ptr_child = ptr_child;
     87c:	10 92 ec 03 	sts	0x03EC, r1
     880:	10 92 eb 03 	sts	0x03EB, r1
	new_menu->ptr_parent = ptr_parent;
     884:	10 92 ee 03 	sts	0x03EE, r1
     888:	10 92 ed 03 	sts	0x03ED, r1
	
	new_menu->title = title;
     88c:	e5 ee       	ldi	r30, 0xE5	; 229
     88e:	f3 e0       	ldi	r31, 0x03	; 3
     890:	82 ea       	ldi	r24, 0xA2	; 162
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	91 83       	std	Z+1, r25	; 0x01
     896:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 e8 03 	sts	0x03E8, r25
     8a0:	80 93 e7 03 	sts	0x03E7, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     8a4:	27 eb       	ldi	r18, 0xB7	; 183
     8a6:	33 e0       	ldi	r19, 0x03	; 3
     8a8:	30 93 08 04 	sts	0x0408, r19
     8ac:	20 93 07 04 	sts	0x0407, r18
	new_menu->ptr_child = ptr_child;
     8b0:	6f ee       	ldi	r22, 0xEF	; 239
     8b2:	73 e0       	ldi	r23, 0x03	; 3
     8b4:	70 93 0a 04 	sts	0x040A, r23
     8b8:	60 93 09 04 	sts	0x0409, r22
	new_menu->ptr_parent = ptr_parent;
     8bc:	10 92 0c 04 	sts	0x040C, r1
     8c0:	10 92 0b 04 	sts	0x040B, r1
	
	new_menu->title = title;
     8c4:	4c e9       	ldi	r20, 0x9C	; 156
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	59 83       	std	Y+1, r21	; 0x01
     8ca:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     8cc:	90 93 06 04 	sts	0x0406, r25
     8d0:	80 93 05 04 	sts	0x0405, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     8d4:	f0 93 bc 03 	sts	0x03BC, r31
     8d8:	e0 93 bb 03 	sts	0x03BB, r30
	new_menu->ptr_child = ptr_child;
     8dc:	c1 ed       	ldi	r28, 0xD1	; 209
     8de:	d3 e0       	ldi	r29, 0x03	; 3
     8e0:	d0 93 be 03 	sts	0x03BE, r29
     8e4:	c0 93 bd 03 	sts	0x03BD, r28
	new_menu->ptr_parent = ptr_parent;
     8e8:	10 92 c0 03 	sts	0x03C0, r1
     8ec:	10 92 bf 03 	sts	0x03BF, r1
	
	new_menu->title = title;
     8f0:	44 e9       	ldi	r20, 0x94	; 148
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	d9 01       	movw	r26, r18
     8f6:	4d 93       	st	X+, r20
     8f8:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     8fa:	90 93 ba 03 	sts	0x03BA, r25
     8fe:	80 93 b9 03 	sts	0x03B9, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     902:	2b ed       	ldi	r18, 0xDB	; 219
     904:	33 e0       	ldi	r19, 0x03	; 3
     906:	30 93 d6 03 	sts	0x03D6, r19
     90a:	20 93 d5 03 	sts	0x03D5, r18
	new_menu->ptr_child = ptr_child;
     90e:	10 92 d8 03 	sts	0x03D8, r1
     912:	10 92 d7 03 	sts	0x03D7, r1
	new_menu->ptr_parent = ptr_parent;
     916:	f0 93 da 03 	sts	0x03DA, r31
     91a:	e0 93 d9 03 	sts	0x03D9, r30
	
	new_menu->title = title;
     91e:	8e e8       	ldi	r24, 0x8E	; 142
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	99 83       	std	Y+1, r25	; 0x01
     924:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 d4 03 	sts	0x03D4, r25
     92e:	80 93 d3 03 	sts	0x03D3, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     932:	d0 93 e0 03 	sts	0x03E0, r29
     936:	c0 93 df 03 	sts	0x03DF, r28
	new_menu->ptr_child = ptr_child;
     93a:	10 92 e2 03 	sts	0x03E2, r1
     93e:	10 92 e1 03 	sts	0x03E1, r1
	new_menu->ptr_parent = ptr_parent;
     942:	f0 93 e4 03 	sts	0x03E4, r31
     946:	e0 93 e3 03 	sts	0x03E3, r30
	
	new_menu->title = title;
     94a:	45 e8       	ldi	r20, 0x85	; 133
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	d9 01       	movw	r26, r18
     950:	4d 93       	st	X+, r20
     952:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     954:	90 93 de 03 	sts	0x03DE, r25
     958:	80 93 dd 03 	sts	0x03DD, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     95c:	c9 ef       	ldi	r28, 0xF9	; 249
     95e:	d3 e0       	ldi	r29, 0x03	; 3
     960:	d0 93 f4 03 	sts	0x03F4, r29
     964:	c0 93 f3 03 	sts	0x03F3, r28
	new_menu->ptr_child = ptr_child;
     968:	10 92 f6 03 	sts	0x03F6, r1
     96c:	10 92 f5 03 	sts	0x03F5, r1
	new_menu->ptr_parent = ptr_parent;
     970:	f0 93 f8 03 	sts	0x03F8, r31
     974:	e0 93 f7 03 	sts	0x03F7, r30
	
	new_menu->title = title;
     978:	2a e7       	ldi	r18, 0x7A	; 122
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	db 01       	movw	r26, r22
     97e:	2d 93       	st	X+, r18
     980:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     982:	90 93 f2 03 	sts	0x03F2, r25
     986:	80 93 f1 03 	sts	0x03F1, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     98a:	70 93 fe 03 	sts	0x03FE, r23
     98e:	60 93 fd 03 	sts	0x03FD, r22
	new_menu->ptr_child = ptr_child;
     992:	10 92 00 04 	sts	0x0400, r1
     996:	10 92 ff 03 	sts	0x03FF, r1
	new_menu->ptr_parent = ptr_parent;
     99a:	f0 93 02 04 	sts	0x0402, r31
     99e:	e0 93 01 04 	sts	0x0401, r30
	
	new_menu->title = title;
     9a2:	20 e7       	ldi	r18, 0x70	; 112
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	39 83       	std	Y+1, r19	; 0x01
     9a8:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     9aa:	90 93 fc 03 	sts	0x03FC, r25
     9ae:	80 93 fb 03 	sts	0x03FB, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     9b2:	f0 93 b4 03 	sts	0x03B4, r31
     9b6:	e0 93 b3 03 	sts	0x03B3, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     9ba:	f0 93 b6 03 	sts	0x03B6, r31
     9be:	e0 93 b5 03 	sts	0x03B5, r30
	
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <menu_left_button_flag>:
	return 0;
	
}

void menu_left_button_flag(void){
	left_button_flag = 1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 ac 03 	sts	0x03AC, r24
     9ce:	08 95       	ret

000009d0 <menu_right_button_flag>:
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 ad 03 	sts	0x03AD, r24
     9d6:	08 95       	ret

000009d8 <oled_home>:
	}
}

void oled_home(void)
{
	page_sram = 0;
     9d8:	10 92 b2 03 	sts	0x03B2, r1
     9dc:	10 92 b1 03 	sts	0x03B1, r1
	col_sram = 0;
     9e0:	10 92 b0 03 	sts	0x03B0, r1
     9e4:	10 92 af 03 	sts	0x03AF, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     9e8:	e0 91 0e 01 	lds	r30, 0x010E
     9ec:	f0 91 0f 01 	lds	r31, 0x010F
     9f0:	81 e2       	ldi	r24, 0x21	; 33
     9f2:	80 83       	st	Z, r24
     9f4:	e0 91 0e 01 	lds	r30, 0x010E
     9f8:	f0 91 0f 01 	lds	r31, 0x010F
     9fc:	10 82       	st	Z, r1
     9fe:	e0 91 0e 01 	lds	r30, 0x010E
     a02:	f0 91 0f 01 	lds	r31, 0x010F
     a06:	8f e7       	ldi	r24, 0x7F	; 127
     a08:	80 83       	st	Z, r24
     a0a:	e0 91 0e 01 	lds	r30, 0x010E
     a0e:	f0 91 0f 01 	lds	r31, 0x010F
     a12:	82 e2       	ldi	r24, 0x22	; 34
     a14:	80 83       	st	Z, r24
     a16:	e0 91 0e 01 	lds	r30, 0x010E
     a1a:	f0 91 0f 01 	lds	r31, 0x010F
     a1e:	10 82       	st	Z, r1
     a20:	e0 91 0e 01 	lds	r30, 0x010E
     a24:	f0 91 0f 01 	lds	r31, 0x010F
     a28:	87 e0       	ldi	r24, 0x07	; 7
     a2a:	80 83       	st	Z, r24
     a2c:	08 95       	ret

00000a2e <oled_goto_line>:
	//write_c(0x10);
}



void oled_goto_line(unsigned int line){
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ec 01       	movw	r28, r24
	oled_home();
     a34:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <oled_home>
	page_sram = line;
     a38:	d0 93 b2 03 	sts	0x03B2, r29
     a3c:	c0 93 b1 03 	sts	0x03B1, r28
	if(line%8){
     a40:	ce 01       	movw	r24, r28
     a42:	87 70       	andi	r24, 0x07	; 7
     a44:	99 27       	eor	r25, r25
     a46:	89 2b       	or	r24, r25
     a48:	89 f0       	breq	.+34     	; 0xa6c <oled_goto_line+0x3e>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     a4a:	e0 91 0e 01 	lds	r30, 0x010E
     a4e:	f0 91 0f 01 	lds	r31, 0x010F
     a52:	10 82       	st	Z, r1
     a54:	e0 91 0e 01 	lds	r30, 0x010E
     a58:	f0 91 0f 01 	lds	r31, 0x010F
     a5c:	80 e1       	ldi	r24, 0x10	; 16
     a5e:	80 83       	st	Z, r24
	oled_home();
	page_sram = line;
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
     a60:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     a62:	e0 91 0e 01 	lds	r30, 0x010E
     a66:	f0 91 0f 01 	lds	r31, 0x010F
     a6a:	c0 83       	st	Z, r28
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <oled_clear_line>:

void oled_goto_column(unsigned int column){
	col_sram = column%128;
}

void oled_clear_line(unsigned int line){
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
	oled_goto_line(line);
     a78:	0e 94 17 05 	call	0xa2e	; 0xa2e <oled_goto_line>
	if(line < 8){
     a7c:	28 97       	sbiw	r28, 0x08	; 8
     a7e:	50 f4       	brcc	.+20     	; 0xa94 <oled_clear_line+0x22>
     a80:	80 e8       	ldi	r24, 0x80	; 128
     a82:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
     a84:	e0 91 0c 01 	lds	r30, 0x010C
     a88:	f0 91 0d 01 	lds	r31, 0x010D
     a8c:	10 82       	st	Z, r1
     a8e:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	c1 f7       	brne	.-16     	; 0xa84 <oled_clear_line+0x12>
			write_d(0b00000000);
		}
	}
} 
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <oled_reset>:

}


void oled_reset(void)
{		
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
     a9e:	c0 e0       	ldi	r28, 0x00	; 0
     aa0:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
     aa2:	ce 01       	movw	r24, r28
     aa4:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
     aa8:	21 96       	adiw	r28, 0x01	; 1
     aaa:	c8 30       	cpi	r28, 0x08	; 8
     aac:	d1 05       	cpc	r29, r1
     aae:	c9 f7       	brne	.-14     	; 0xaa2 <oled_reset+0x8>
		oled_clear_line(i);
	}
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
     ab6:	85 b7       	in	r24, 0x35	; 53
     ab8:	80 68       	ori	r24, 0x80	; 128
     aba:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     abc:	80 b7       	in	r24, 0x30	; 48
     abe:	80 62       	ori	r24, 0x20	; 32
     ac0:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
     ac2:	e0 91 0e 01 	lds	r30, 0x010E
     ac6:	f0 91 0f 01 	lds	r31, 0x010F
     aca:	8e ea       	ldi	r24, 0xAE	; 174
     acc:	80 83       	st	Z, r24
     ace:	e0 91 0e 01 	lds	r30, 0x010E
     ad2:	f0 91 0f 01 	lds	r31, 0x010F
     ad6:	81 ea       	ldi	r24, 0xA1	; 161
     ad8:	80 83       	st	Z, r24
     ada:	e0 91 0e 01 	lds	r30, 0x010E
     ade:	f0 91 0f 01 	lds	r31, 0x010F
     ae2:	8a ed       	ldi	r24, 0xDA	; 218
     ae4:	80 83       	st	Z, r24
     ae6:	e0 91 0e 01 	lds	r30, 0x010E
     aea:	f0 91 0f 01 	lds	r31, 0x010F
     aee:	82 e1       	ldi	r24, 0x12	; 18
     af0:	80 83       	st	Z, r24
     af2:	e0 91 0e 01 	lds	r30, 0x010E
     af6:	f0 91 0f 01 	lds	r31, 0x010F
     afa:	88 ec       	ldi	r24, 0xC8	; 200
     afc:	80 83       	st	Z, r24
     afe:	e0 91 0e 01 	lds	r30, 0x010E
     b02:	f0 91 0f 01 	lds	r31, 0x010F
     b06:	88 ea       	ldi	r24, 0xA8	; 168
     b08:	80 83       	st	Z, r24
     b0a:	e0 91 0e 01 	lds	r30, 0x010E
     b0e:	f0 91 0f 01 	lds	r31, 0x010F
     b12:	8f e3       	ldi	r24, 0x3F	; 63
     b14:	80 83       	st	Z, r24
     b16:	e0 91 0e 01 	lds	r30, 0x010E
     b1a:	f0 91 0f 01 	lds	r31, 0x010F
     b1e:	85 ed       	ldi	r24, 0xD5	; 213
     b20:	80 83       	st	Z, r24
     b22:	e0 91 0e 01 	lds	r30, 0x010E
     b26:	f0 91 0f 01 	lds	r31, 0x010F
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	80 83       	st	Z, r24
     b2e:	e0 91 0e 01 	lds	r30, 0x010E
     b32:	f0 91 0f 01 	lds	r31, 0x010F
     b36:	81 e8       	ldi	r24, 0x81	; 129
     b38:	80 83       	st	Z, r24
     b3a:	e0 91 0e 01 	lds	r30, 0x010E
     b3e:	f0 91 0f 01 	lds	r31, 0x010F
     b42:	80 e5       	ldi	r24, 0x50	; 80
     b44:	80 83       	st	Z, r24
     b46:	e0 91 0e 01 	lds	r30, 0x010E
     b4a:	f0 91 0f 01 	lds	r31, 0x010F
     b4e:	89 ed       	ldi	r24, 0xD9	; 217
     b50:	80 83       	st	Z, r24
     b52:	e0 91 0e 01 	lds	r30, 0x010E
     b56:	f0 91 0f 01 	lds	r31, 0x010F
     b5a:	81 e2       	ldi	r24, 0x21	; 33
     b5c:	80 83       	st	Z, r24
     b5e:	e0 91 0e 01 	lds	r30, 0x010E
     b62:	f0 91 0f 01 	lds	r31, 0x010F
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	80 83       	st	Z, r24
     b6a:	e0 91 0e 01 	lds	r30, 0x010E
     b6e:	f0 91 0f 01 	lds	r31, 0x010F
     b72:	10 82       	st	Z, r1
     b74:	e0 91 0e 01 	lds	r30, 0x010E
     b78:	f0 91 0f 01 	lds	r31, 0x010F
     b7c:	8b ed       	ldi	r24, 0xDB	; 219
     b7e:	80 83       	st	Z, r24
     b80:	e0 91 0e 01 	lds	r30, 0x010E
     b84:	f0 91 0f 01 	lds	r31, 0x010F
     b88:	80 e3       	ldi	r24, 0x30	; 48
     b8a:	80 83       	st	Z, r24
     b8c:	e0 91 0e 01 	lds	r30, 0x010E
     b90:	f0 91 0f 01 	lds	r31, 0x010F
     b94:	8d ea       	ldi	r24, 0xAD	; 173
     b96:	80 83       	st	Z, r24
     b98:	e0 91 0e 01 	lds	r30, 0x010E
     b9c:	f0 91 0f 01 	lds	r31, 0x010F
     ba0:	10 82       	st	Z, r1
     ba2:	e0 91 0e 01 	lds	r30, 0x010E
     ba6:	f0 91 0f 01 	lds	r31, 0x010F
     baa:	84 ea       	ldi	r24, 0xA4	; 164
     bac:	80 83       	st	Z, r24
     bae:	e0 91 0e 01 	lds	r30, 0x010E
     bb2:	f0 91 0f 01 	lds	r31, 0x010F
     bb6:	86 ea       	ldi	r24, 0xA6	; 166
     bb8:	80 83       	st	Z, r24
     bba:	e0 91 0e 01 	lds	r30, 0x010E
     bbe:	f0 91 0f 01 	lds	r31, 0x010F
     bc2:	8f ea       	ldi	r24, 0xAF	; 175
     bc4:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
     bc6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <oled_reset>
	oled_home();
     bca:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <oled_home>
     bce:	08 95       	ret

00000bd0 <sram_init>:
	}else{
		return 0;
	}
}

void sram_init(void){
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	14 c0       	rjmp	.+40     	; 0xc02 <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
     bda:	9c 01       	movw	r18, r24
     bdc:	24 0f       	add	r18, r20
     bde:	35 1f       	adc	r19, r21
     be0:	e0 91 0a 01 	lds	r30, 0x010A
     be4:	f0 91 0b 01 	lds	r31, 0x010B
     be8:	e2 0f       	add	r30, r18
     bea:	f3 1f       	adc	r31, r19
     bec:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	80 38       	cpi	r24, 0x80	; 128
     bf2:	91 05       	cpc	r25, r1
     bf4:	91 f7       	brne	.-28     	; 0xbda <sram_init+0xa>
     bf6:	40 58       	subi	r20, 0x80	; 128
     bf8:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
     bfa:	41 15       	cp	r20, r1
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	58 07       	cpc	r21, r24
     c00:	19 f0       	breq	.+6      	; 0xc08 <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
     c02:	87 2f       	mov	r24, r23
     c04:	96 2f       	mov	r25, r22
     c06:	e9 cf       	rjmp	.-46     	; 0xbda <sram_init+0xa>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
		}
	}
	edited = 0b11111111;
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	80 93 ae 03 	sts	0x03AE, r24
     c0e:	08 95       	ret

00000c10 <write_screen>:
		sram_pixel(-x+x0,y0+sqrt((pow(radius,2)-pow(x,2))));
	}
}


void write_screen(void){//update all the pages that are edited
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	c0 e0       	ldi	r28, 0x00	; 0
     c1e:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
     c20:	00 e0       	ldi	r16, 0x00	; 0
     c22:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
     c24:	e1 2c       	mov	r14, r1
     c26:	f1 2c       	mov	r15, r1
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
     c28:	c8 01       	movw	r24, r16
     c2a:	0e 94 17 05 	call	0xa2e	; 0xa2e <oled_goto_line>
		for(unsigned int k = 0; k < 128; k++){
     c2e:	2e 2d       	mov	r18, r14
     c30:	3f 2d       	mov	r19, r15
			write_d(ext_ram[r*128 + k]);
     c32:	a9 01       	movw	r20, r18
     c34:	4c 0f       	add	r20, r28
     c36:	5d 1f       	adc	r21, r29
     c38:	e0 91 0a 01 	lds	r30, 0x010A
     c3c:	f0 91 0b 01 	lds	r31, 0x010B
     c40:	e4 0f       	add	r30, r20
     c42:	f5 1f       	adc	r31, r21
     c44:	80 81       	ld	r24, Z
}


void write_d(uint8_t data)
{
	*oled_data = data;
     c46:	e0 91 0c 01 	lds	r30, 0x010C
     c4a:	f0 91 0d 01 	lds	r31, 0x010D
     c4e:	80 83       	st	Z, r24
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
     c50:	2f 5f       	subi	r18, 0xFF	; 255
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	20 38       	cpi	r18, 0x80	; 128
     c56:	31 05       	cpc	r19, r1
     c58:	61 f7       	brne	.-40     	; 0xc32 <write_screen+0x22>
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
     c5a:	0f 5f       	subi	r16, 0xFF	; 255
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
     c5e:	c0 58       	subi	r28, 0x80	; 128
     c60:	df 4f       	sbci	r29, 0xFF	; 255
     c62:	08 30       	cpi	r16, 0x08	; 8
     c64:	11 05       	cpc	r17, r1
     c66:	01 f7       	brne	.-64     	; 0xc28 <write_screen+0x18>
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
			write_d(ext_ram[r*128 + k]);
		}
	}
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	08 95       	ret

00000c76 <SPI_select>:
	PORTB |= (1 << PB4);
	PORTB &= ~(1 << PB4);
}

void SPI_select(void){
	PORTB &= ~(1 << PB4);
     c76:	c4 98       	cbi	0x18, 4	; 24
     c78:	08 95       	ret

00000c7a <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << PB4);
     c7a:	c4 9a       	sbi	0x18, 4	; 24
     c7c:	08 95       	ret

00000c7e <SPI_initialize>:
	SPI_deselect();
	return received_data;
}

void SPI_initialize(void){
	DDRB |=	(1 << PB5) | (1 << PB7) | (1 << PB4);
     c7e:	87 b3       	in	r24, 0x17	; 23
     c80:	80 6b       	ori	r24, 0xB0	; 176
     c82:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6);
     c84:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1 << PB4);
     c86:	c4 9a       	sbi	0x18, 4	; 24
	//BIT_ON(SPCR,SPIE);		//SPI INTERRUPT ENABLE
	//BIT_OFF(SPCR,DORD);		//transmit the most significant bit first, change to ON if we transmit the Least significant first
	BIT_ON(SPCR,MSTR);		//MASTER/SLAVE SELECT, set to 1 for master, 0 for slave (master wanted)
     c88:	6c 9a       	sbi	0x0d, 4	; 13
	//BIT_ON(SPCR,CPOL);		//CLOCK POLARITY, NO IDEA WHAT WE NEED!!!!!!!!!!!!!
	//BIT_ON(SPCR,CPHA);		//CLOCK PHASE, NO IDEA!!!!!!!!!!!
	//BIT_ON(SPCR,SPR1);		//SPI CLOCK RATE SELECT, BIT 1
	//BIT_ON(SPCR,SPR0);		//SPI CLOCK RATE SELECT, BIT 0
	BIT_ON(SPCR,SPE);		//SPI ENABLE, overrides the normal pins function (we want this)
     c8a:	6e 9a       	sbi	0x0d, 6	; 13
	//sei();
	SPI_deselect();
     c8c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SPI_deselect>
     c90:	08 95       	ret

00000c92 <SPI_send>:
}


void SPI_send(char data) {
	//Start the transmission
	SPDR = data;
     c92:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     c94:	77 9b       	sbis	0x0e, 7	; 14
     c96:	fe cf       	rjmp	.-4      	; 0xc94 <SPI_send+0x2>
}
     c98:	08 95       	ret

00000c9a <SPI_read>:



char SPI_read(void){
	//Send dummy data to read from slave
	SPI_send(0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 49 06 	call	0xc92	; 0xc92 <SPI_send>
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
     ca0:	77 9b       	sbis	0x0e, 7	; 14
     ca2:	fe cf       	rjmp	.-4      	; 0xca0 <SPI_read+0x6>

	return SPDR;
     ca4:	8f b1       	in	r24, 0x0f	; 15
}
     ca6:	08 95       	ret

00000ca8 <SPI_read_instruction>:
	SPI_send(0b00000011);
	SPI_send(0b11111111);
	SPI_deselect();
}

unsigned int SPI_read_instruction(char adr){
     ca8:	cf 93       	push	r28
     caa:	c8 2f       	mov	r28, r24
	SPI_select();
     cac:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_select>
	SPI_send(0b00000011);
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	0e 94 49 06 	call	0xc92	; 0xc92 <SPI_send>
	SPI_send(adr);
     cb6:	8c 2f       	mov	r24, r28
     cb8:	0e 94 49 06 	call	0xc92	; 0xc92 <SPI_send>
	unsigned int received_data = SPI_read();
     cbc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <SPI_read>
     cc0:	c8 2f       	mov	r28, r24
	SPI_deselect();
     cc2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <SPI_deselect>
	return received_data;
}
     cc6:	8c 2f       	mov	r24, r28
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <send_UART>:
     cce:	5d 9b       	sbis	0x0b, 5	; 11
     cd0:	fe cf       	rjmp	.-4      	; 0xcce <send_UART>
     cd2:	8c b9       	out	0x0c, r24	; 12
     cd4:	08 95       	ret

00000cd6 <recieve_UART>:
     cd6:	5f 9b       	sbis	0x0b, 7	; 11
     cd8:	fe cf       	rjmp	.-4      	; 0xcd6 <recieve_UART>
     cda:	8c b1       	in	r24, 0x0c	; 12
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	08 95       	ret

00000ce0 <init_UART>:
     ce0:	90 bd       	out	0x20, r25	; 32
     ce2:	89 b9       	out	0x09, r24	; 9
     ce4:	88 e1       	ldi	r24, 0x18	; 24
     ce6:	8a b9       	out	0x0a, r24	; 10
     ce8:	6b e6       	ldi	r22, 0x6B	; 107
     cea:	76 e0       	ldi	r23, 0x06	; 6
     cec:	87 e6       	ldi	r24, 0x67	; 103
     cee:	96 e0       	ldi	r25, 0x06	; 6
     cf0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <fdevopen>
     cf4:	08 95       	ret

00000cf6 <__subsf3>:
     cf6:	50 58       	subi	r21, 0x80	; 128

00000cf8 <__addsf3>:
     cf8:	bb 27       	eor	r27, r27
     cfa:	aa 27       	eor	r26, r26
     cfc:	0e d0       	rcall	.+28     	; 0xd1a <__addsf3x>
     cfe:	4d c1       	rjmp	.+666    	; 0xf9a <__fp_round>
     d00:	3e d1       	rcall	.+636    	; 0xf7e <__fp_pscA>
     d02:	30 f0       	brcs	.+12     	; 0xd10 <__addsf3+0x18>
     d04:	43 d1       	rcall	.+646    	; 0xf8c <__fp_pscB>
     d06:	20 f0       	brcs	.+8      	; 0xd10 <__addsf3+0x18>
     d08:	31 f4       	brne	.+12     	; 0xd16 <__addsf3+0x1e>
     d0a:	9f 3f       	cpi	r25, 0xFF	; 255
     d0c:	11 f4       	brne	.+4      	; 0xd12 <__addsf3+0x1a>
     d0e:	1e f4       	brtc	.+6      	; 0xd16 <__addsf3+0x1e>
     d10:	33 c1       	rjmp	.+614    	; 0xf78 <__fp_nan>
     d12:	0e f4       	brtc	.+2      	; 0xd16 <__addsf3+0x1e>
     d14:	e0 95       	com	r30
     d16:	e7 fb       	bst	r30, 7
     d18:	29 c1       	rjmp	.+594    	; 0xf6c <__fp_inf>

00000d1a <__addsf3x>:
     d1a:	e9 2f       	mov	r30, r25
     d1c:	4f d1       	rcall	.+670    	; 0xfbc <__fp_split3>
     d1e:	80 f3       	brcs	.-32     	; 0xd00 <__addsf3+0x8>
     d20:	ba 17       	cp	r27, r26
     d22:	62 07       	cpc	r22, r18
     d24:	73 07       	cpc	r23, r19
     d26:	84 07       	cpc	r24, r20
     d28:	95 07       	cpc	r25, r21
     d2a:	18 f0       	brcs	.+6      	; 0xd32 <__addsf3x+0x18>
     d2c:	71 f4       	brne	.+28     	; 0xd4a <__addsf3x+0x30>
     d2e:	9e f5       	brtc	.+102    	; 0xd96 <__addsf3x+0x7c>
     d30:	67 c1       	rjmp	.+718    	; 0x1000 <__fp_zero>
     d32:	0e f4       	brtc	.+2      	; 0xd36 <__addsf3x+0x1c>
     d34:	e0 95       	com	r30
     d36:	0b 2e       	mov	r0, r27
     d38:	ba 2f       	mov	r27, r26
     d3a:	a0 2d       	mov	r26, r0
     d3c:	0b 01       	movw	r0, r22
     d3e:	b9 01       	movw	r22, r18
     d40:	90 01       	movw	r18, r0
     d42:	0c 01       	movw	r0, r24
     d44:	ca 01       	movw	r24, r20
     d46:	a0 01       	movw	r20, r0
     d48:	11 24       	eor	r1, r1
     d4a:	ff 27       	eor	r31, r31
     d4c:	59 1b       	sub	r21, r25
     d4e:	99 f0       	breq	.+38     	; 0xd76 <__addsf3x+0x5c>
     d50:	59 3f       	cpi	r21, 0xF9	; 249
     d52:	50 f4       	brcc	.+20     	; 0xd68 <__addsf3x+0x4e>
     d54:	50 3e       	cpi	r21, 0xE0	; 224
     d56:	68 f1       	brcs	.+90     	; 0xdb2 <__addsf3x+0x98>
     d58:	1a 16       	cp	r1, r26
     d5a:	f0 40       	sbci	r31, 0x00	; 0
     d5c:	a2 2f       	mov	r26, r18
     d5e:	23 2f       	mov	r18, r19
     d60:	34 2f       	mov	r19, r20
     d62:	44 27       	eor	r20, r20
     d64:	58 5f       	subi	r21, 0xF8	; 248
     d66:	f3 cf       	rjmp	.-26     	; 0xd4e <__addsf3x+0x34>
     d68:	46 95       	lsr	r20
     d6a:	37 95       	ror	r19
     d6c:	27 95       	ror	r18
     d6e:	a7 95       	ror	r26
     d70:	f0 40       	sbci	r31, 0x00	; 0
     d72:	53 95       	inc	r21
     d74:	c9 f7       	brne	.-14     	; 0xd68 <__addsf3x+0x4e>
     d76:	7e f4       	brtc	.+30     	; 0xd96 <__addsf3x+0x7c>
     d78:	1f 16       	cp	r1, r31
     d7a:	ba 0b       	sbc	r27, r26
     d7c:	62 0b       	sbc	r22, r18
     d7e:	73 0b       	sbc	r23, r19
     d80:	84 0b       	sbc	r24, r20
     d82:	ba f0       	brmi	.+46     	; 0xdb2 <__addsf3x+0x98>
     d84:	91 50       	subi	r25, 0x01	; 1
     d86:	a1 f0       	breq	.+40     	; 0xdb0 <__addsf3x+0x96>
     d88:	ff 0f       	add	r31, r31
     d8a:	bb 1f       	adc	r27, r27
     d8c:	66 1f       	adc	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	88 1f       	adc	r24, r24
     d92:	c2 f7       	brpl	.-16     	; 0xd84 <__addsf3x+0x6a>
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <__addsf3x+0x98>
     d96:	ba 0f       	add	r27, r26
     d98:	62 1f       	adc	r22, r18
     d9a:	73 1f       	adc	r23, r19
     d9c:	84 1f       	adc	r24, r20
     d9e:	48 f4       	brcc	.+18     	; 0xdb2 <__addsf3x+0x98>
     da0:	87 95       	ror	r24
     da2:	77 95       	ror	r23
     da4:	67 95       	ror	r22
     da6:	b7 95       	ror	r27
     da8:	f7 95       	ror	r31
     daa:	9e 3f       	cpi	r25, 0xFE	; 254
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <__addsf3x+0x96>
     dae:	b3 cf       	rjmp	.-154    	; 0xd16 <__addsf3+0x1e>
     db0:	93 95       	inc	r25
     db2:	88 0f       	add	r24, r24
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <__addsf3x+0x9e>
     db6:	99 27       	eor	r25, r25
     db8:	ee 0f       	add	r30, r30
     dba:	97 95       	ror	r25
     dbc:	87 95       	ror	r24
     dbe:	08 95       	ret

00000dc0 <__divsf3>:
     dc0:	0c d0       	rcall	.+24     	; 0xdda <__divsf3x>
     dc2:	eb c0       	rjmp	.+470    	; 0xf9a <__fp_round>
     dc4:	e3 d0       	rcall	.+454    	; 0xf8c <__fp_pscB>
     dc6:	40 f0       	brcs	.+16     	; 0xdd8 <__divsf3+0x18>
     dc8:	da d0       	rcall	.+436    	; 0xf7e <__fp_pscA>
     dca:	30 f0       	brcs	.+12     	; 0xdd8 <__divsf3+0x18>
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <__divsf3+0x16>
     dce:	5f 3f       	cpi	r21, 0xFF	; 255
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__divsf3+0x18>
     dd2:	cc c0       	rjmp	.+408    	; 0xf6c <__fp_inf>
     dd4:	51 11       	cpse	r21, r1
     dd6:	15 c1       	rjmp	.+554    	; 0x1002 <__fp_szero>
     dd8:	cf c0       	rjmp	.+414    	; 0xf78 <__fp_nan>

00000dda <__divsf3x>:
     dda:	f0 d0       	rcall	.+480    	; 0xfbc <__fp_split3>
     ddc:	98 f3       	brcs	.-26     	; 0xdc4 <__divsf3+0x4>

00000dde <__divsf3_pse>:
     dde:	99 23       	and	r25, r25
     de0:	c9 f3       	breq	.-14     	; 0xdd4 <__divsf3+0x14>
     de2:	55 23       	and	r21, r21
     de4:	b1 f3       	breq	.-20     	; 0xdd2 <__divsf3+0x12>
     de6:	95 1b       	sub	r25, r21
     de8:	55 0b       	sbc	r21, r21
     dea:	bb 27       	eor	r27, r27
     dec:	aa 27       	eor	r26, r26
     dee:	62 17       	cp	r22, r18
     df0:	73 07       	cpc	r23, r19
     df2:	84 07       	cpc	r24, r20
     df4:	38 f0       	brcs	.+14     	; 0xe04 <__divsf3_pse+0x26>
     df6:	9f 5f       	subi	r25, 0xFF	; 255
     df8:	5f 4f       	sbci	r21, 0xFF	; 255
     dfa:	22 0f       	add	r18, r18
     dfc:	33 1f       	adc	r19, r19
     dfe:	44 1f       	adc	r20, r20
     e00:	aa 1f       	adc	r26, r26
     e02:	a9 f3       	breq	.-22     	; 0xdee <__divsf3_pse+0x10>
     e04:	33 d0       	rcall	.+102    	; 0xe6c <__divsf3_pse+0x8e>
     e06:	0e 2e       	mov	r0, r30
     e08:	3a f0       	brmi	.+14     	; 0xe18 <__divsf3_pse+0x3a>
     e0a:	e0 e8       	ldi	r30, 0x80	; 128
     e0c:	30 d0       	rcall	.+96     	; 0xe6e <__divsf3_pse+0x90>
     e0e:	91 50       	subi	r25, 0x01	; 1
     e10:	50 40       	sbci	r21, 0x00	; 0
     e12:	e6 95       	lsr	r30
     e14:	00 1c       	adc	r0, r0
     e16:	ca f7       	brpl	.-14     	; 0xe0a <__divsf3_pse+0x2c>
     e18:	29 d0       	rcall	.+82     	; 0xe6c <__divsf3_pse+0x8e>
     e1a:	fe 2f       	mov	r31, r30
     e1c:	27 d0       	rcall	.+78     	; 0xe6c <__divsf3_pse+0x8e>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	bb 1f       	adc	r27, r27
     e26:	26 17       	cp	r18, r22
     e28:	37 07       	cpc	r19, r23
     e2a:	48 07       	cpc	r20, r24
     e2c:	ab 07       	cpc	r26, r27
     e2e:	b0 e8       	ldi	r27, 0x80	; 128
     e30:	09 f0       	breq	.+2      	; 0xe34 <__divsf3_pse+0x56>
     e32:	bb 0b       	sbc	r27, r27
     e34:	80 2d       	mov	r24, r0
     e36:	bf 01       	movw	r22, r30
     e38:	ff 27       	eor	r31, r31
     e3a:	93 58       	subi	r25, 0x83	; 131
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	2a f0       	brmi	.+10     	; 0xe4a <__divsf3_pse+0x6c>
     e40:	9e 3f       	cpi	r25, 0xFE	; 254
     e42:	51 05       	cpc	r21, r1
     e44:	68 f0       	brcs	.+26     	; 0xe60 <__divsf3_pse+0x82>
     e46:	92 c0       	rjmp	.+292    	; 0xf6c <__fp_inf>
     e48:	dc c0       	rjmp	.+440    	; 0x1002 <__fp_szero>
     e4a:	5f 3f       	cpi	r21, 0xFF	; 255
     e4c:	ec f3       	brlt	.-6      	; 0xe48 <__divsf3_pse+0x6a>
     e4e:	98 3e       	cpi	r25, 0xE8	; 232
     e50:	dc f3       	brlt	.-10     	; 0xe48 <__divsf3_pse+0x6a>
     e52:	86 95       	lsr	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b7 95       	ror	r27
     e5a:	f7 95       	ror	r31
     e5c:	9f 5f       	subi	r25, 0xFF	; 255
     e5e:	c9 f7       	brne	.-14     	; 0xe52 <__divsf3_pse+0x74>
     e60:	88 0f       	add	r24, r24
     e62:	91 1d       	adc	r25, r1
     e64:	96 95       	lsr	r25
     e66:	87 95       	ror	r24
     e68:	97 f9       	bld	r25, 7
     e6a:	08 95       	ret
     e6c:	e1 e0       	ldi	r30, 0x01	; 1
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	bb 1f       	adc	r27, r27
     e76:	62 17       	cp	r22, r18
     e78:	73 07       	cpc	r23, r19
     e7a:	84 07       	cpc	r24, r20
     e7c:	ba 07       	cpc	r27, r26
     e7e:	20 f0       	brcs	.+8      	; 0xe88 <__divsf3_pse+0xaa>
     e80:	62 1b       	sub	r22, r18
     e82:	73 0b       	sbc	r23, r19
     e84:	84 0b       	sbc	r24, r20
     e86:	ba 0b       	sbc	r27, r26
     e88:	ee 1f       	adc	r30, r30
     e8a:	88 f7       	brcc	.-30     	; 0xe6e <__divsf3_pse+0x90>
     e8c:	e0 95       	com	r30
     e8e:	08 95       	ret

00000e90 <__fixsfsi>:
     e90:	04 d0       	rcall	.+8      	; 0xe9a <__fixunssfsi>
     e92:	68 94       	set
     e94:	b1 11       	cpse	r27, r1
     e96:	b5 c0       	rjmp	.+362    	; 0x1002 <__fp_szero>
     e98:	08 95       	ret

00000e9a <__fixunssfsi>:
     e9a:	98 d0       	rcall	.+304    	; 0xfcc <__fp_splitA>
     e9c:	88 f0       	brcs	.+34     	; 0xec0 <__fixunssfsi+0x26>
     e9e:	9f 57       	subi	r25, 0x7F	; 127
     ea0:	90 f0       	brcs	.+36     	; 0xec6 <__fixunssfsi+0x2c>
     ea2:	b9 2f       	mov	r27, r25
     ea4:	99 27       	eor	r25, r25
     ea6:	b7 51       	subi	r27, 0x17	; 23
     ea8:	a0 f0       	brcs	.+40     	; 0xed2 <__fixunssfsi+0x38>
     eaa:	d1 f0       	breq	.+52     	; 0xee0 <__fixunssfsi+0x46>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	1a f0       	brmi	.+6      	; 0xebc <__fixunssfsi+0x22>
     eb6:	ba 95       	dec	r27
     eb8:	c9 f7       	brne	.-14     	; 0xeac <__fixunssfsi+0x12>
     eba:	12 c0       	rjmp	.+36     	; 0xee0 <__fixunssfsi+0x46>
     ebc:	b1 30       	cpi	r27, 0x01	; 1
     ebe:	81 f0       	breq	.+32     	; 0xee0 <__fixunssfsi+0x46>
     ec0:	9f d0       	rcall	.+318    	; 0x1000 <__fp_zero>
     ec2:	b1 e0       	ldi	r27, 0x01	; 1
     ec4:	08 95       	ret
     ec6:	9c c0       	rjmp	.+312    	; 0x1000 <__fp_zero>
     ec8:	67 2f       	mov	r22, r23
     eca:	78 2f       	mov	r23, r24
     ecc:	88 27       	eor	r24, r24
     ece:	b8 5f       	subi	r27, 0xF8	; 248
     ed0:	39 f0       	breq	.+14     	; 0xee0 <__fixunssfsi+0x46>
     ed2:	b9 3f       	cpi	r27, 0xF9	; 249
     ed4:	cc f3       	brlt	.-14     	; 0xec8 <__fixunssfsi+0x2e>
     ed6:	86 95       	lsr	r24
     ed8:	77 95       	ror	r23
     eda:	67 95       	ror	r22
     edc:	b3 95       	inc	r27
     ede:	d9 f7       	brne	.-10     	; 0xed6 <__fixunssfsi+0x3c>
     ee0:	3e f4       	brtc	.+14     	; 0xef0 <__fixunssfsi+0x56>
     ee2:	90 95       	com	r25
     ee4:	80 95       	com	r24
     ee6:	70 95       	com	r23
     ee8:	61 95       	neg	r22
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	08 95       	ret

00000ef2 <__floatunsisf>:
     ef2:	e8 94       	clt
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <__floatsisf+0x12>

00000ef6 <__floatsisf>:
     ef6:	97 fb       	bst	r25, 7
     ef8:	3e f4       	brtc	.+14     	; 0xf08 <__floatsisf+0x12>
     efa:	90 95       	com	r25
     efc:	80 95       	com	r24
     efe:	70 95       	com	r23
     f00:	61 95       	neg	r22
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	99 23       	and	r25, r25
     f0a:	a9 f0       	breq	.+42     	; 0xf36 <__floatsisf+0x40>
     f0c:	f9 2f       	mov	r31, r25
     f0e:	96 e9       	ldi	r25, 0x96	; 150
     f10:	bb 27       	eor	r27, r27
     f12:	93 95       	inc	r25
     f14:	f6 95       	lsr	r31
     f16:	87 95       	ror	r24
     f18:	77 95       	ror	r23
     f1a:	67 95       	ror	r22
     f1c:	b7 95       	ror	r27
     f1e:	f1 11       	cpse	r31, r1
     f20:	f8 cf       	rjmp	.-16     	; 0xf12 <__floatsisf+0x1c>
     f22:	fa f4       	brpl	.+62     	; 0xf62 <__floatsisf+0x6c>
     f24:	bb 0f       	add	r27, r27
     f26:	11 f4       	brne	.+4      	; 0xf2c <__floatsisf+0x36>
     f28:	60 ff       	sbrs	r22, 0
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <__floatsisf+0x6c>
     f2c:	6f 5f       	subi	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	8f 4f       	sbci	r24, 0xFF	; 255
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <__floatsisf+0x6c>
     f36:	88 23       	and	r24, r24
     f38:	11 f0       	breq	.+4      	; 0xf3e <__floatsisf+0x48>
     f3a:	96 e9       	ldi	r25, 0x96	; 150
     f3c:	11 c0       	rjmp	.+34     	; 0xf60 <__floatsisf+0x6a>
     f3e:	77 23       	and	r23, r23
     f40:	21 f0       	breq	.+8      	; 0xf4a <__floatsisf+0x54>
     f42:	9e e8       	ldi	r25, 0x8E	; 142
     f44:	87 2f       	mov	r24, r23
     f46:	76 2f       	mov	r23, r22
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <__floatsisf+0x5e>
     f4a:	66 23       	and	r22, r22
     f4c:	71 f0       	breq	.+28     	; 0xf6a <__floatsisf+0x74>
     f4e:	96 e8       	ldi	r25, 0x86	; 134
     f50:	86 2f       	mov	r24, r22
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	2a f0       	brmi	.+10     	; 0xf62 <__floatsisf+0x6c>
     f58:	9a 95       	dec	r25
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	da f7       	brpl	.-10     	; 0xf58 <__floatsisf+0x62>
     f62:	88 0f       	add	r24, r24
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	97 f9       	bld	r25, 7
     f6a:	08 95       	ret

00000f6c <__fp_inf>:
     f6c:	97 f9       	bld	r25, 7
     f6e:	9f 67       	ori	r25, 0x7F	; 127
     f70:	80 e8       	ldi	r24, 0x80	; 128
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	08 95       	ret

00000f78 <__fp_nan>:
     f78:	9f ef       	ldi	r25, 0xFF	; 255
     f7a:	80 ec       	ldi	r24, 0xC0	; 192
     f7c:	08 95       	ret

00000f7e <__fp_pscA>:
     f7e:	00 24       	eor	r0, r0
     f80:	0a 94       	dec	r0
     f82:	16 16       	cp	r1, r22
     f84:	17 06       	cpc	r1, r23
     f86:	18 06       	cpc	r1, r24
     f88:	09 06       	cpc	r0, r25
     f8a:	08 95       	ret

00000f8c <__fp_pscB>:
     f8c:	00 24       	eor	r0, r0
     f8e:	0a 94       	dec	r0
     f90:	12 16       	cp	r1, r18
     f92:	13 06       	cpc	r1, r19
     f94:	14 06       	cpc	r1, r20
     f96:	05 06       	cpc	r0, r21
     f98:	08 95       	ret

00000f9a <__fp_round>:
     f9a:	09 2e       	mov	r0, r25
     f9c:	03 94       	inc	r0
     f9e:	00 0c       	add	r0, r0
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <__fp_round+0xc>
     fa2:	88 23       	and	r24, r24
     fa4:	52 f0       	brmi	.+20     	; 0xfba <__fp_round+0x20>
     fa6:	bb 0f       	add	r27, r27
     fa8:	40 f4       	brcc	.+16     	; 0xfba <__fp_round+0x20>
     faa:	bf 2b       	or	r27, r31
     fac:	11 f4       	brne	.+4      	; 0xfb2 <__fp_round+0x18>
     fae:	60 ff       	sbrs	r22, 0
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <__fp_round+0x20>
     fb2:	6f 5f       	subi	r22, 0xFF	; 255
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	08 95       	ret

00000fbc <__fp_split3>:
     fbc:	57 fd       	sbrc	r21, 7
     fbe:	90 58       	subi	r25, 0x80	; 128
     fc0:	44 0f       	add	r20, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	59 f0       	breq	.+22     	; 0xfdc <__fp_splitA+0x10>
     fc6:	5f 3f       	cpi	r21, 0xFF	; 255
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <__fp_splitA+0x1a>
     fca:	47 95       	ror	r20

00000fcc <__fp_splitA>:
     fcc:	88 0f       	add	r24, r24
     fce:	97 fb       	bst	r25, 7
     fd0:	99 1f       	adc	r25, r25
     fd2:	61 f0       	breq	.+24     	; 0xfec <__fp_splitA+0x20>
     fd4:	9f 3f       	cpi	r25, 0xFF	; 255
     fd6:	79 f0       	breq	.+30     	; 0xff6 <__fp_splitA+0x2a>
     fd8:	87 95       	ror	r24
     fda:	08 95       	ret
     fdc:	12 16       	cp	r1, r18
     fde:	13 06       	cpc	r1, r19
     fe0:	14 06       	cpc	r1, r20
     fe2:	55 1f       	adc	r21, r21
     fe4:	f2 cf       	rjmp	.-28     	; 0xfca <__fp_split3+0xe>
     fe6:	46 95       	lsr	r20
     fe8:	f1 df       	rcall	.-30     	; 0xfcc <__fp_splitA>
     fea:	08 c0       	rjmp	.+16     	; 0xffc <__fp_splitA+0x30>
     fec:	16 16       	cp	r1, r22
     fee:	17 06       	cpc	r1, r23
     ff0:	18 06       	cpc	r1, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	f1 cf       	rjmp	.-30     	; 0xfd8 <__fp_splitA+0xc>
     ff6:	86 95       	lsr	r24
     ff8:	71 05       	cpc	r23, r1
     ffa:	61 05       	cpc	r22, r1
     ffc:	08 94       	sec
     ffe:	08 95       	ret

00001000 <__fp_zero>:
    1000:	e8 94       	clt

00001002 <__fp_szero>:
    1002:	bb 27       	eor	r27, r27
    1004:	66 27       	eor	r22, r22
    1006:	77 27       	eor	r23, r23
    1008:	cb 01       	movw	r24, r22
    100a:	97 f9       	bld	r25, 7
    100c:	08 95       	ret

0000100e <__mulsf3>:
    100e:	0b d0       	rcall	.+22     	; 0x1026 <__mulsf3x>
    1010:	c4 cf       	rjmp	.-120    	; 0xf9a <__fp_round>
    1012:	b5 df       	rcall	.-150    	; 0xf7e <__fp_pscA>
    1014:	28 f0       	brcs	.+10     	; 0x1020 <__mulsf3+0x12>
    1016:	ba df       	rcall	.-140    	; 0xf8c <__fp_pscB>
    1018:	18 f0       	brcs	.+6      	; 0x1020 <__mulsf3+0x12>
    101a:	95 23       	and	r25, r21
    101c:	09 f0       	breq	.+2      	; 0x1020 <__mulsf3+0x12>
    101e:	a6 cf       	rjmp	.-180    	; 0xf6c <__fp_inf>
    1020:	ab cf       	rjmp	.-170    	; 0xf78 <__fp_nan>
    1022:	11 24       	eor	r1, r1
    1024:	ee cf       	rjmp	.-36     	; 0x1002 <__fp_szero>

00001026 <__mulsf3x>:
    1026:	ca df       	rcall	.-108    	; 0xfbc <__fp_split3>
    1028:	a0 f3       	brcs	.-24     	; 0x1012 <__mulsf3+0x4>

0000102a <__mulsf3_pse>:
    102a:	95 9f       	mul	r25, r21
    102c:	d1 f3       	breq	.-12     	; 0x1022 <__mulsf3+0x14>
    102e:	95 0f       	add	r25, r21
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	55 1f       	adc	r21, r21
    1034:	62 9f       	mul	r22, r18
    1036:	f0 01       	movw	r30, r0
    1038:	72 9f       	mul	r23, r18
    103a:	bb 27       	eor	r27, r27
    103c:	f0 0d       	add	r31, r0
    103e:	b1 1d       	adc	r27, r1
    1040:	63 9f       	mul	r22, r19
    1042:	aa 27       	eor	r26, r26
    1044:	f0 0d       	add	r31, r0
    1046:	b1 1d       	adc	r27, r1
    1048:	aa 1f       	adc	r26, r26
    104a:	64 9f       	mul	r22, r20
    104c:	66 27       	eor	r22, r22
    104e:	b0 0d       	add	r27, r0
    1050:	a1 1d       	adc	r26, r1
    1052:	66 1f       	adc	r22, r22
    1054:	82 9f       	mul	r24, r18
    1056:	22 27       	eor	r18, r18
    1058:	b0 0d       	add	r27, r0
    105a:	a1 1d       	adc	r26, r1
    105c:	62 1f       	adc	r22, r18
    105e:	73 9f       	mul	r23, r19
    1060:	b0 0d       	add	r27, r0
    1062:	a1 1d       	adc	r26, r1
    1064:	62 1f       	adc	r22, r18
    1066:	83 9f       	mul	r24, r19
    1068:	a0 0d       	add	r26, r0
    106a:	61 1d       	adc	r22, r1
    106c:	22 1f       	adc	r18, r18
    106e:	74 9f       	mul	r23, r20
    1070:	33 27       	eor	r19, r19
    1072:	a0 0d       	add	r26, r0
    1074:	61 1d       	adc	r22, r1
    1076:	23 1f       	adc	r18, r19
    1078:	84 9f       	mul	r24, r20
    107a:	60 0d       	add	r22, r0
    107c:	21 1d       	adc	r18, r1
    107e:	82 2f       	mov	r24, r18
    1080:	76 2f       	mov	r23, r22
    1082:	6a 2f       	mov	r22, r26
    1084:	11 24       	eor	r1, r1
    1086:	9f 57       	subi	r25, 0x7F	; 127
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	8a f0       	brmi	.+34     	; 0x10ae <__mulsf3_pse+0x84>
    108c:	e1 f0       	breq	.+56     	; 0x10c6 <__mulsf3_pse+0x9c>
    108e:	88 23       	and	r24, r24
    1090:	4a f0       	brmi	.+18     	; 0x10a4 <__mulsf3_pse+0x7a>
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	bb 1f       	adc	r27, r27
    1098:	66 1f       	adc	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	50 40       	sbci	r21, 0x00	; 0
    10a2:	a9 f7       	brne	.-22     	; 0x108e <__mulsf3_pse+0x64>
    10a4:	9e 3f       	cpi	r25, 0xFE	; 254
    10a6:	51 05       	cpc	r21, r1
    10a8:	70 f0       	brcs	.+28     	; 0x10c6 <__mulsf3_pse+0x9c>
    10aa:	60 cf       	rjmp	.-320    	; 0xf6c <__fp_inf>
    10ac:	aa cf       	rjmp	.-172    	; 0x1002 <__fp_szero>
    10ae:	5f 3f       	cpi	r21, 0xFF	; 255
    10b0:	ec f3       	brlt	.-6      	; 0x10ac <__mulsf3_pse+0x82>
    10b2:	98 3e       	cpi	r25, 0xE8	; 232
    10b4:	dc f3       	brlt	.-10     	; 0x10ac <__mulsf3_pse+0x82>
    10b6:	86 95       	lsr	r24
    10b8:	77 95       	ror	r23
    10ba:	67 95       	ror	r22
    10bc:	b7 95       	ror	r27
    10be:	f7 95       	ror	r31
    10c0:	e7 95       	ror	r30
    10c2:	9f 5f       	subi	r25, 0xFF	; 255
    10c4:	c1 f7       	brne	.-16     	; 0x10b6 <__mulsf3_pse+0x8c>
    10c6:	fe 2b       	or	r31, r30
    10c8:	88 0f       	add	r24, r24
    10ca:	91 1d       	adc	r25, r1
    10cc:	96 95       	lsr	r25
    10ce:	87 95       	ror	r24
    10d0:	97 f9       	bld	r25, 7
    10d2:	08 95       	ret

000010d4 <__divmodhi4>:
    10d4:	97 fb       	bst	r25, 7
    10d6:	07 2e       	mov	r0, r23
    10d8:	16 f4       	brtc	.+4      	; 0x10de <__divmodhi4+0xa>
    10da:	00 94       	com	r0
    10dc:	07 d0       	rcall	.+14     	; 0x10ec <__divmodhi4_neg1>
    10de:	77 fd       	sbrc	r23, 7
    10e0:	09 d0       	rcall	.+18     	; 0x10f4 <__divmodhi4_neg2>
    10e2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__udivmodhi4>
    10e6:	07 fc       	sbrc	r0, 7
    10e8:	05 d0       	rcall	.+10     	; 0x10f4 <__divmodhi4_neg2>
    10ea:	3e f4       	brtc	.+14     	; 0x10fa <__divmodhi4_exit>

000010ec <__divmodhi4_neg1>:
    10ec:	90 95       	com	r25
    10ee:	81 95       	neg	r24
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	08 95       	ret

000010f4 <__divmodhi4_neg2>:
    10f4:	70 95       	com	r23
    10f6:	61 95       	neg	r22
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255

000010fa <__divmodhi4_exit>:
    10fa:	08 95       	ret

000010fc <__udivmodhi4>:
    10fc:	aa 1b       	sub	r26, r26
    10fe:	bb 1b       	sub	r27, r27
    1100:	51 e1       	ldi	r21, 0x11	; 17
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <__udivmodhi4_ep>

00001104 <__udivmodhi4_loop>:
    1104:	aa 1f       	adc	r26, r26
    1106:	bb 1f       	adc	r27, r27
    1108:	a6 17       	cp	r26, r22
    110a:	b7 07       	cpc	r27, r23
    110c:	10 f0       	brcs	.+4      	; 0x1112 <__udivmodhi4_ep>
    110e:	a6 1b       	sub	r26, r22
    1110:	b7 0b       	sbc	r27, r23

00001112 <__udivmodhi4_ep>:
    1112:	88 1f       	adc	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	5a 95       	dec	r21
    1118:	a9 f7       	brne	.-22     	; 0x1104 <__udivmodhi4_loop>
    111a:	80 95       	com	r24
    111c:	90 95       	com	r25
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	08 95       	ret

00001124 <do_rand>:
    1124:	8f 92       	push	r8
    1126:	9f 92       	push	r9
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ec 01       	movw	r28, r24
    113a:	68 81       	ld	r22, Y
    113c:	79 81       	ldd	r23, Y+1	; 0x01
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03
    1142:	61 15       	cp	r22, r1
    1144:	71 05       	cpc	r23, r1
    1146:	81 05       	cpc	r24, r1
    1148:	91 05       	cpc	r25, r1
    114a:	21 f4       	brne	.+8      	; 0x1154 <do_rand+0x30>
    114c:	64 e2       	ldi	r22, 0x24	; 36
    114e:	79 ed       	ldi	r23, 0xD9	; 217
    1150:	8b e5       	ldi	r24, 0x5B	; 91
    1152:	97 e0       	ldi	r25, 0x07	; 7
    1154:	2d e1       	ldi	r18, 0x1D	; 29
    1156:	33 ef       	ldi	r19, 0xF3	; 243
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__divmodsi4>
    1160:	49 01       	movw	r8, r18
    1162:	5a 01       	movw	r10, r20
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	a7 ea       	ldi	r26, 0xA7	; 167
    116a:	b1 e4       	ldi	r27, 0x41	; 65
    116c:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__muluhisi3>
    1170:	6b 01       	movw	r12, r22
    1172:	7c 01       	movw	r14, r24
    1174:	ac ee       	ldi	r26, 0xEC	; 236
    1176:	b4 ef       	ldi	r27, 0xF4	; 244
    1178:	a5 01       	movw	r20, r10
    117a:	94 01       	movw	r18, r8
    117c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__mulohisi3>
    1180:	c6 0e       	add	r12, r22
    1182:	d7 1e       	adc	r13, r23
    1184:	e8 1e       	adc	r14, r24
    1186:	f9 1e       	adc	r15, r25
    1188:	f7 fe       	sbrs	r15, 7
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <do_rand+0x74>
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	c8 1a       	sub	r12, r24
    1190:	d1 08       	sbc	r13, r1
    1192:	e1 08       	sbc	r14, r1
    1194:	80 e8       	ldi	r24, 0x80	; 128
    1196:	f8 0a       	sbc	r15, r24
    1198:	c8 82       	st	Y, r12
    119a:	d9 82       	std	Y+1, r13	; 0x01
    119c:	ea 82       	std	Y+2, r14	; 0x02
    119e:	fb 82       	std	Y+3, r15	; 0x03
    11a0:	c6 01       	movw	r24, r12
    11a2:	9f 77       	andi	r25, 0x7F	; 127
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	8f 90       	pop	r8
    11b8:	08 95       	ret

000011ba <rand_r>:
    11ba:	0e 94 92 08 	call	0x1124	; 0x1124 <do_rand>
    11be:	08 95       	ret

000011c0 <rand>:
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 92 08 	call	0x1124	; 0x1124 <do_rand>
    11c8:	08 95       	ret

000011ca <srand>:
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	80 93 00 01 	sts	0x0100, r24
    11d2:	90 93 01 01 	sts	0x0101, r25
    11d6:	a0 93 02 01 	sts	0x0102, r26
    11da:	b0 93 03 01 	sts	0x0103, r27
    11de:	08 95       	ret

000011e0 <fdevopen>:
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
    11ea:	8b 01       	movw	r16, r22
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	31 f4       	brne	.+12     	; 0x11fc <fdevopen+0x1c>
    11f0:	61 15       	cp	r22, r1
    11f2:	71 05       	cpc	r23, r1
    11f4:	19 f4       	brne	.+6      	; 0x11fc <fdevopen+0x1c>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	38 c0       	rjmp	.+112    	; 0x126c <fdevopen+0x8c>
    11fc:	6e e0       	ldi	r22, 0x0E	; 14
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 4e 0b 	call	0x169c	; 0x169c <calloc>
    1208:	fc 01       	movw	r30, r24
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	a1 f3       	breq	.-24     	; 0x11f6 <fdevopen+0x16>
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	83 83       	std	Z+3, r24	; 0x03
    1212:	01 15       	cp	r16, r1
    1214:	11 05       	cpc	r17, r1
    1216:	71 f0       	breq	.+28     	; 0x1234 <fdevopen+0x54>
    1218:	13 87       	std	Z+11, r17	; 0x0b
    121a:	02 87       	std	Z+10, r16	; 0x0a
    121c:	81 e8       	ldi	r24, 0x81	; 129
    121e:	83 83       	std	Z+3, r24	; 0x03
    1220:	80 91 0d 04 	lds	r24, 0x040D
    1224:	90 91 0e 04 	lds	r25, 0x040E
    1228:	89 2b       	or	r24, r25
    122a:	21 f4       	brne	.+8      	; 0x1234 <fdevopen+0x54>
    122c:	f0 93 0e 04 	sts	0x040E, r31
    1230:	e0 93 0d 04 	sts	0x040D, r30
    1234:	20 97       	sbiw	r28, 0x00	; 0
    1236:	c9 f0       	breq	.+50     	; 0x126a <fdevopen+0x8a>
    1238:	d1 87       	std	Z+9, r29	; 0x09
    123a:	c0 87       	std	Z+8, r28	; 0x08
    123c:	83 81       	ldd	r24, Z+3	; 0x03
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	83 83       	std	Z+3, r24	; 0x03
    1242:	80 91 0f 04 	lds	r24, 0x040F
    1246:	90 91 10 04 	lds	r25, 0x0410
    124a:	89 2b       	or	r24, r25
    124c:	71 f4       	brne	.+28     	; 0x126a <fdevopen+0x8a>
    124e:	f0 93 10 04 	sts	0x0410, r31
    1252:	e0 93 0f 04 	sts	0x040F, r30
    1256:	80 91 11 04 	lds	r24, 0x0411
    125a:	90 91 12 04 	lds	r25, 0x0412
    125e:	89 2b       	or	r24, r25
    1260:	21 f4       	brne	.+8      	; 0x126a <fdevopen+0x8a>
    1262:	f0 93 12 04 	sts	0x0412, r31
    1266:	e0 93 11 04 	sts	0x0411, r30
    126a:	cf 01       	movw	r24, r30
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <printf>:
    1276:	a0 e0       	ldi	r26, 0x00	; 0
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e1 e4       	ldi	r30, 0x41	; 65
    127c:	f9 e0       	ldi	r31, 0x09	; 9
    127e:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x20>
    1282:	fe 01       	movw	r30, r28
    1284:	35 96       	adiw	r30, 0x05	; 5
    1286:	61 91       	ld	r22, Z+
    1288:	71 91       	ld	r23, Z+
    128a:	af 01       	movw	r20, r30
    128c:	80 91 0f 04 	lds	r24, 0x040F
    1290:	90 91 10 04 	lds	r25, 0x0410
    1294:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <vfprintf>
    1298:	e2 e0       	ldi	r30, 0x02	; 2
    129a:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x20>

0000129e <puts>:
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	e0 91 0f 04 	lds	r30, 0x040F
    12aa:	f0 91 10 04 	lds	r31, 0x0410
    12ae:	23 81       	ldd	r18, Z+3	; 0x03
    12b0:	21 ff       	sbrs	r18, 1
    12b2:	1b c0       	rjmp	.+54     	; 0x12ea <puts+0x4c>
    12b4:	ec 01       	movw	r28, r24
    12b6:	00 e0       	ldi	r16, 0x00	; 0
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	89 91       	ld	r24, Y+
    12bc:	60 91 0f 04 	lds	r22, 0x040F
    12c0:	70 91 10 04 	lds	r23, 0x0410
    12c4:	db 01       	movw	r26, r22
    12c6:	18 96       	adiw	r26, 0x08	; 8
    12c8:	ed 91       	ld	r30, X+
    12ca:	fc 91       	ld	r31, X
    12cc:	19 97       	sbiw	r26, 0x09	; 9
    12ce:	88 23       	and	r24, r24
    12d0:	31 f0       	breq	.+12     	; 0x12de <puts+0x40>
    12d2:	09 95       	icall
    12d4:	89 2b       	or	r24, r25
    12d6:	89 f3       	breq	.-30     	; 0x12ba <puts+0x1c>
    12d8:	0f ef       	ldi	r16, 0xFF	; 255
    12da:	1f ef       	ldi	r17, 0xFF	; 255
    12dc:	ee cf       	rjmp	.-36     	; 0x12ba <puts+0x1c>
    12de:	8a e0       	ldi	r24, 0x0A	; 10
    12e0:	09 95       	icall
    12e2:	89 2b       	or	r24, r25
    12e4:	11 f4       	brne	.+4      	; 0x12ea <puts+0x4c>
    12e6:	c8 01       	movw	r24, r16
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <puts+0x50>
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <vfprintf>:
    12f8:	ac e0       	ldi	r26, 0x0C	; 12
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e2 e8       	ldi	r30, 0x82	; 130
    12fe:	f9 e0       	ldi	r31, 0x09	; 9
    1300:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__prologue_saves__>
    1304:	7c 01       	movw	r14, r24
    1306:	6b 01       	movw	r12, r22
    1308:	8a 01       	movw	r16, r20
    130a:	fc 01       	movw	r30, r24
    130c:	17 82       	std	Z+7, r1	; 0x07
    130e:	16 82       	std	Z+6, r1	; 0x06
    1310:	83 81       	ldd	r24, Z+3	; 0x03
    1312:	81 ff       	sbrs	r24, 1
    1314:	bd c1       	rjmp	.+890    	; 0x1690 <vfprintf+0x398>
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	4c 01       	movw	r8, r24
    131c:	f7 01       	movw	r30, r14
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	f6 01       	movw	r30, r12
    1322:	93 fd       	sbrc	r25, 3
    1324:	85 91       	lpm	r24, Z+
    1326:	93 ff       	sbrs	r25, 3
    1328:	81 91       	ld	r24, Z+
    132a:	6f 01       	movw	r12, r30
    132c:	88 23       	and	r24, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <vfprintf+0x3a>
    1330:	ab c1       	rjmp	.+854    	; 0x1688 <vfprintf+0x390>
    1332:	85 32       	cpi	r24, 0x25	; 37
    1334:	39 f4       	brne	.+14     	; 0x1344 <vfprintf+0x4c>
    1336:	93 fd       	sbrc	r25, 3
    1338:	85 91       	lpm	r24, Z+
    133a:	93 ff       	sbrs	r25, 3
    133c:	81 91       	ld	r24, Z+
    133e:	6f 01       	movw	r12, r30
    1340:	85 32       	cpi	r24, 0x25	; 37
    1342:	29 f4       	brne	.+10     	; 0x134e <vfprintf+0x56>
    1344:	b7 01       	movw	r22, r14
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    134c:	e7 cf       	rjmp	.-50     	; 0x131c <vfprintf+0x24>
    134e:	51 2c       	mov	r5, r1
    1350:	31 2c       	mov	r3, r1
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	20 32       	cpi	r18, 0x20	; 32
    1356:	a0 f4       	brcc	.+40     	; 0x1380 <vfprintf+0x88>
    1358:	8b 32       	cpi	r24, 0x2B	; 43
    135a:	69 f0       	breq	.+26     	; 0x1376 <vfprintf+0x7e>
    135c:	30 f4       	brcc	.+12     	; 0x136a <vfprintf+0x72>
    135e:	80 32       	cpi	r24, 0x20	; 32
    1360:	59 f0       	breq	.+22     	; 0x1378 <vfprintf+0x80>
    1362:	83 32       	cpi	r24, 0x23	; 35
    1364:	69 f4       	brne	.+26     	; 0x1380 <vfprintf+0x88>
    1366:	20 61       	ori	r18, 0x10	; 16
    1368:	2c c0       	rjmp	.+88     	; 0x13c2 <vfprintf+0xca>
    136a:	8d 32       	cpi	r24, 0x2D	; 45
    136c:	39 f0       	breq	.+14     	; 0x137c <vfprintf+0x84>
    136e:	80 33       	cpi	r24, 0x30	; 48
    1370:	39 f4       	brne	.+14     	; 0x1380 <vfprintf+0x88>
    1372:	21 60       	ori	r18, 0x01	; 1
    1374:	26 c0       	rjmp	.+76     	; 0x13c2 <vfprintf+0xca>
    1376:	22 60       	ori	r18, 0x02	; 2
    1378:	24 60       	ori	r18, 0x04	; 4
    137a:	23 c0       	rjmp	.+70     	; 0x13c2 <vfprintf+0xca>
    137c:	28 60       	ori	r18, 0x08	; 8
    137e:	21 c0       	rjmp	.+66     	; 0x13c2 <vfprintf+0xca>
    1380:	27 fd       	sbrc	r18, 7
    1382:	27 c0       	rjmp	.+78     	; 0x13d2 <vfprintf+0xda>
    1384:	30 ed       	ldi	r19, 0xD0	; 208
    1386:	38 0f       	add	r19, r24
    1388:	3a 30       	cpi	r19, 0x0A	; 10
    138a:	78 f4       	brcc	.+30     	; 0x13aa <vfprintf+0xb2>
    138c:	26 ff       	sbrs	r18, 6
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0xa4>
    1390:	fa e0       	ldi	r31, 0x0A	; 10
    1392:	5f 9e       	mul	r5, r31
    1394:	30 0d       	add	r19, r0
    1396:	11 24       	eor	r1, r1
    1398:	53 2e       	mov	r5, r19
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <vfprintf+0xca>
    139c:	8a e0       	ldi	r24, 0x0A	; 10
    139e:	38 9e       	mul	r3, r24
    13a0:	30 0d       	add	r19, r0
    13a2:	11 24       	eor	r1, r1
    13a4:	33 2e       	mov	r3, r19
    13a6:	20 62       	ori	r18, 0x20	; 32
    13a8:	0c c0       	rjmp	.+24     	; 0x13c2 <vfprintf+0xca>
    13aa:	8e 32       	cpi	r24, 0x2E	; 46
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <vfprintf+0xbe>
    13ae:	26 fd       	sbrc	r18, 6
    13b0:	6b c1       	rjmp	.+726    	; 0x1688 <vfprintf+0x390>
    13b2:	20 64       	ori	r18, 0x40	; 64
    13b4:	06 c0       	rjmp	.+12     	; 0x13c2 <vfprintf+0xca>
    13b6:	8c 36       	cpi	r24, 0x6C	; 108
    13b8:	11 f4       	brne	.+4      	; 0x13be <vfprintf+0xc6>
    13ba:	20 68       	ori	r18, 0x80	; 128
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfprintf+0xca>
    13be:	88 36       	cpi	r24, 0x68	; 104
    13c0:	41 f4       	brne	.+16     	; 0x13d2 <vfprintf+0xda>
    13c2:	f6 01       	movw	r30, r12
    13c4:	93 fd       	sbrc	r25, 3
    13c6:	85 91       	lpm	r24, Z+
    13c8:	93 ff       	sbrs	r25, 3
    13ca:	81 91       	ld	r24, Z+
    13cc:	6f 01       	movw	r12, r30
    13ce:	81 11       	cpse	r24, r1
    13d0:	c1 cf       	rjmp	.-126    	; 0x1354 <vfprintf+0x5c>
    13d2:	98 2f       	mov	r25, r24
    13d4:	9f 7d       	andi	r25, 0xDF	; 223
    13d6:	95 54       	subi	r25, 0x45	; 69
    13d8:	93 30       	cpi	r25, 0x03	; 3
    13da:	28 f4       	brcc	.+10     	; 0x13e6 <vfprintf+0xee>
    13dc:	0c 5f       	subi	r16, 0xFC	; 252
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	ff e3       	ldi	r31, 0x3F	; 63
    13e2:	f9 83       	std	Y+1, r31	; 0x01
    13e4:	0d c0       	rjmp	.+26     	; 0x1400 <vfprintf+0x108>
    13e6:	83 36       	cpi	r24, 0x63	; 99
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <vfprintf+0xfe>
    13ea:	83 37       	cpi	r24, 0x73	; 115
    13ec:	71 f0       	breq	.+28     	; 0x140a <vfprintf+0x112>
    13ee:	83 35       	cpi	r24, 0x53	; 83
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <vfprintf+0xfc>
    13f2:	5b c0       	rjmp	.+182    	; 0x14aa <vfprintf+0x1b2>
    13f4:	22 c0       	rjmp	.+68     	; 0x143a <vfprintf+0x142>
    13f6:	f8 01       	movw	r30, r16
    13f8:	80 81       	ld	r24, Z
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	0e 5f       	subi	r16, 0xFE	; 254
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	44 24       	eor	r4, r4
    1402:	43 94       	inc	r4
    1404:	51 2c       	mov	r5, r1
    1406:	54 01       	movw	r10, r8
    1408:	15 c0       	rjmp	.+42     	; 0x1434 <vfprintf+0x13c>
    140a:	38 01       	movw	r6, r16
    140c:	f2 e0       	ldi	r31, 0x02	; 2
    140e:	6f 0e       	add	r6, r31
    1410:	71 1c       	adc	r7, r1
    1412:	f8 01       	movw	r30, r16
    1414:	a0 80       	ld	r10, Z
    1416:	b1 80       	ldd	r11, Z+1	; 0x01
    1418:	26 ff       	sbrs	r18, 6
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <vfprintf+0x12a>
    141c:	65 2d       	mov	r22, r5
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <vfprintf+0x12e>
    1422:	6f ef       	ldi	r22, 0xFF	; 255
    1424:	7f ef       	ldi	r23, 0xFF	; 255
    1426:	c5 01       	movw	r24, r10
    1428:	2c 87       	std	Y+12, r18	; 0x0c
    142a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <strnlen>
    142e:	2c 01       	movw	r4, r24
    1430:	83 01       	movw	r16, r6
    1432:	2c 85       	ldd	r18, Y+12	; 0x0c
    1434:	2f 77       	andi	r18, 0x7F	; 127
    1436:	22 2e       	mov	r2, r18
    1438:	17 c0       	rjmp	.+46     	; 0x1468 <vfprintf+0x170>
    143a:	38 01       	movw	r6, r16
    143c:	f2 e0       	ldi	r31, 0x02	; 2
    143e:	6f 0e       	add	r6, r31
    1440:	71 1c       	adc	r7, r1
    1442:	f8 01       	movw	r30, r16
    1444:	a0 80       	ld	r10, Z
    1446:	b1 80       	ldd	r11, Z+1	; 0x01
    1448:	26 ff       	sbrs	r18, 6
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <vfprintf+0x15a>
    144c:	65 2d       	mov	r22, r5
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <vfprintf+0x15e>
    1452:	6f ef       	ldi	r22, 0xFF	; 255
    1454:	7f ef       	ldi	r23, 0xFF	; 255
    1456:	c5 01       	movw	r24, r10
    1458:	2c 87       	std	Y+12, r18	; 0x0c
    145a:	0e 94 91 0c 	call	0x1922	; 0x1922 <strnlen_P>
    145e:	2c 01       	movw	r4, r24
    1460:	2c 85       	ldd	r18, Y+12	; 0x0c
    1462:	20 68       	ori	r18, 0x80	; 128
    1464:	22 2e       	mov	r2, r18
    1466:	83 01       	movw	r16, r6
    1468:	23 fc       	sbrc	r2, 3
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <vfprintf+0x1aa>
    146c:	83 2d       	mov	r24, r3
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	48 16       	cp	r4, r24
    1472:	59 06       	cpc	r5, r25
    1474:	b0 f4       	brcc	.+44     	; 0x14a2 <vfprintf+0x1aa>
    1476:	b7 01       	movw	r22, r14
    1478:	80 e2       	ldi	r24, 0x20	; 32
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    1480:	3a 94       	dec	r3
    1482:	f4 cf       	rjmp	.-24     	; 0x146c <vfprintf+0x174>
    1484:	f5 01       	movw	r30, r10
    1486:	27 fc       	sbrc	r2, 7
    1488:	85 91       	lpm	r24, Z+
    148a:	27 fe       	sbrs	r2, 7
    148c:	81 91       	ld	r24, Z+
    148e:	5f 01       	movw	r10, r30
    1490:	b7 01       	movw	r22, r14
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    1498:	31 10       	cpse	r3, r1
    149a:	3a 94       	dec	r3
    149c:	f1 e0       	ldi	r31, 0x01	; 1
    149e:	4f 1a       	sub	r4, r31
    14a0:	51 08       	sbc	r5, r1
    14a2:	41 14       	cp	r4, r1
    14a4:	51 04       	cpc	r5, r1
    14a6:	71 f7       	brne	.-36     	; 0x1484 <vfprintf+0x18c>
    14a8:	e5 c0       	rjmp	.+458    	; 0x1674 <vfprintf+0x37c>
    14aa:	84 36       	cpi	r24, 0x64	; 100
    14ac:	11 f0       	breq	.+4      	; 0x14b2 <vfprintf+0x1ba>
    14ae:	89 36       	cpi	r24, 0x69	; 105
    14b0:	39 f5       	brne	.+78     	; 0x1500 <vfprintf+0x208>
    14b2:	f8 01       	movw	r30, r16
    14b4:	27 ff       	sbrs	r18, 7
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <vfprintf+0x1ce>
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	0c 5f       	subi	r16, 0xFC	; 252
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <vfprintf+0x1de>
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	88 27       	eor	r24, r24
    14cc:	77 fd       	sbrc	r23, 7
    14ce:	80 95       	com	r24
    14d0:	98 2f       	mov	r25, r24
    14d2:	0e 5f       	subi	r16, 0xFE	; 254
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	2f 76       	andi	r18, 0x6F	; 111
    14d8:	b2 2e       	mov	r11, r18
    14da:	97 ff       	sbrs	r25, 7
    14dc:	09 c0       	rjmp	.+18     	; 0x14f0 <vfprintf+0x1f8>
    14de:	90 95       	com	r25
    14e0:	80 95       	com	r24
    14e2:	70 95       	com	r23
    14e4:	61 95       	neg	r22
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	20 68       	ori	r18, 0x80	; 128
    14ee:	b2 2e       	mov	r11, r18
    14f0:	2a e0       	ldi	r18, 0x0A	; 10
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	a4 01       	movw	r20, r8
    14f6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__ultoa_invert>
    14fa:	a8 2e       	mov	r10, r24
    14fc:	a8 18       	sub	r10, r8
    14fe:	44 c0       	rjmp	.+136    	; 0x1588 <vfprintf+0x290>
    1500:	85 37       	cpi	r24, 0x75	; 117
    1502:	29 f4       	brne	.+10     	; 0x150e <vfprintf+0x216>
    1504:	2f 7e       	andi	r18, 0xEF	; 239
    1506:	b2 2e       	mov	r11, r18
    1508:	2a e0       	ldi	r18, 0x0A	; 10
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	25 c0       	rjmp	.+74     	; 0x1558 <vfprintf+0x260>
    150e:	f2 2f       	mov	r31, r18
    1510:	f9 7f       	andi	r31, 0xF9	; 249
    1512:	bf 2e       	mov	r11, r31
    1514:	8f 36       	cpi	r24, 0x6F	; 111
    1516:	c1 f0       	breq	.+48     	; 0x1548 <vfprintf+0x250>
    1518:	18 f4       	brcc	.+6      	; 0x1520 <vfprintf+0x228>
    151a:	88 35       	cpi	r24, 0x58	; 88
    151c:	79 f0       	breq	.+30     	; 0x153c <vfprintf+0x244>
    151e:	b4 c0       	rjmp	.+360    	; 0x1688 <vfprintf+0x390>
    1520:	80 37       	cpi	r24, 0x70	; 112
    1522:	19 f0       	breq	.+6      	; 0x152a <vfprintf+0x232>
    1524:	88 37       	cpi	r24, 0x78	; 120
    1526:	21 f0       	breq	.+8      	; 0x1530 <vfprintf+0x238>
    1528:	af c0       	rjmp	.+350    	; 0x1688 <vfprintf+0x390>
    152a:	2f 2f       	mov	r18, r31
    152c:	20 61       	ori	r18, 0x10	; 16
    152e:	b2 2e       	mov	r11, r18
    1530:	b4 fe       	sbrs	r11, 4
    1532:	0d c0       	rjmp	.+26     	; 0x154e <vfprintf+0x256>
    1534:	8b 2d       	mov	r24, r11
    1536:	84 60       	ori	r24, 0x04	; 4
    1538:	b8 2e       	mov	r11, r24
    153a:	09 c0       	rjmp	.+18     	; 0x154e <vfprintf+0x256>
    153c:	24 ff       	sbrs	r18, 4
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <vfprintf+0x25c>
    1540:	9f 2f       	mov	r25, r31
    1542:	96 60       	ori	r25, 0x06	; 6
    1544:	b9 2e       	mov	r11, r25
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <vfprintf+0x25c>
    1548:	28 e0       	ldi	r18, 0x08	; 8
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <vfprintf+0x260>
    154e:	20 e1       	ldi	r18, 0x10	; 16
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <vfprintf+0x260>
    1554:	20 e1       	ldi	r18, 0x10	; 16
    1556:	32 e0       	ldi	r19, 0x02	; 2
    1558:	f8 01       	movw	r30, r16
    155a:	b7 fe       	sbrs	r11, 7
    155c:	07 c0       	rjmp	.+14     	; 0x156c <vfprintf+0x274>
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	0c 5f       	subi	r16, 0xFC	; 252
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <vfprintf+0x280>
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 5f       	subi	r16, 0xFE	; 254
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	a4 01       	movw	r20, r8
    157a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__ultoa_invert>
    157e:	a8 2e       	mov	r10, r24
    1580:	a8 18       	sub	r10, r8
    1582:	fb 2d       	mov	r31, r11
    1584:	ff 77       	andi	r31, 0x7F	; 127
    1586:	bf 2e       	mov	r11, r31
    1588:	b6 fe       	sbrs	r11, 6
    158a:	0b c0       	rjmp	.+22     	; 0x15a2 <vfprintf+0x2aa>
    158c:	2b 2d       	mov	r18, r11
    158e:	2e 7f       	andi	r18, 0xFE	; 254
    1590:	a5 14       	cp	r10, r5
    1592:	50 f4       	brcc	.+20     	; 0x15a8 <vfprintf+0x2b0>
    1594:	b4 fe       	sbrs	r11, 4
    1596:	0a c0       	rjmp	.+20     	; 0x15ac <vfprintf+0x2b4>
    1598:	b2 fc       	sbrc	r11, 2
    159a:	08 c0       	rjmp	.+16     	; 0x15ac <vfprintf+0x2b4>
    159c:	2b 2d       	mov	r18, r11
    159e:	2e 7e       	andi	r18, 0xEE	; 238
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <vfprintf+0x2b4>
    15a2:	7a 2c       	mov	r7, r10
    15a4:	2b 2d       	mov	r18, r11
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <vfprintf+0x2b6>
    15a8:	7a 2c       	mov	r7, r10
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <vfprintf+0x2b6>
    15ac:	75 2c       	mov	r7, r5
    15ae:	24 ff       	sbrs	r18, 4
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <vfprintf+0x2d4>
    15b2:	fe 01       	movw	r30, r28
    15b4:	ea 0d       	add	r30, r10
    15b6:	f1 1d       	adc	r31, r1
    15b8:	80 81       	ld	r24, Z
    15ba:	80 33       	cpi	r24, 0x30	; 48
    15bc:	11 f4       	brne	.+4      	; 0x15c2 <vfprintf+0x2ca>
    15be:	29 7e       	andi	r18, 0xE9	; 233
    15c0:	09 c0       	rjmp	.+18     	; 0x15d4 <vfprintf+0x2dc>
    15c2:	22 ff       	sbrs	r18, 2
    15c4:	06 c0       	rjmp	.+12     	; 0x15d2 <vfprintf+0x2da>
    15c6:	73 94       	inc	r7
    15c8:	73 94       	inc	r7
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <vfprintf+0x2dc>
    15cc:	82 2f       	mov	r24, r18
    15ce:	86 78       	andi	r24, 0x86	; 134
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <vfprintf+0x2dc>
    15d2:	73 94       	inc	r7
    15d4:	23 fd       	sbrc	r18, 3
    15d6:	13 c0       	rjmp	.+38     	; 0x15fe <vfprintf+0x306>
    15d8:	20 ff       	sbrs	r18, 0
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <vfprintf+0x2f0>
    15dc:	5a 2c       	mov	r5, r10
    15de:	73 14       	cp	r7, r3
    15e0:	18 f4       	brcc	.+6      	; 0x15e8 <vfprintf+0x2f0>
    15e2:	53 0c       	add	r5, r3
    15e4:	57 18       	sub	r5, r7
    15e6:	73 2c       	mov	r7, r3
    15e8:	73 14       	cp	r7, r3
    15ea:	68 f4       	brcc	.+26     	; 0x1606 <vfprintf+0x30e>
    15ec:	b7 01       	movw	r22, r14
    15ee:	80 e2       	ldi	r24, 0x20	; 32
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	2c 87       	std	Y+12, r18	; 0x0c
    15f4:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    15f8:	73 94       	inc	r7
    15fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    15fc:	f5 cf       	rjmp	.-22     	; 0x15e8 <vfprintf+0x2f0>
    15fe:	73 14       	cp	r7, r3
    1600:	10 f4       	brcc	.+4      	; 0x1606 <vfprintf+0x30e>
    1602:	37 18       	sub	r3, r7
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <vfprintf+0x310>
    1606:	31 2c       	mov	r3, r1
    1608:	24 ff       	sbrs	r18, 4
    160a:	12 c0       	rjmp	.+36     	; 0x1630 <vfprintf+0x338>
    160c:	b7 01       	movw	r22, r14
    160e:	80 e3       	ldi	r24, 0x30	; 48
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	2c 87       	std	Y+12, r18	; 0x0c
    1614:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    1618:	2c 85       	ldd	r18, Y+12	; 0x0c
    161a:	22 ff       	sbrs	r18, 2
    161c:	17 c0       	rjmp	.+46     	; 0x164c <vfprintf+0x354>
    161e:	21 ff       	sbrs	r18, 1
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <vfprintf+0x330>
    1622:	88 e5       	ldi	r24, 0x58	; 88
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <vfprintf+0x334>
    1628:	88 e7       	ldi	r24, 0x78	; 120
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	b7 01       	movw	r22, r14
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <vfprintf+0x350>
    1630:	82 2f       	mov	r24, r18
    1632:	86 78       	andi	r24, 0x86	; 134
    1634:	59 f0       	breq	.+22     	; 0x164c <vfprintf+0x354>
    1636:	21 fd       	sbrc	r18, 1
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x346>
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <vfprintf+0x348>
    163e:	8b e2       	ldi	r24, 0x2B	; 43
    1640:	27 fd       	sbrc	r18, 7
    1642:	8d e2       	ldi	r24, 0x2D	; 45
    1644:	b7 01       	movw	r22, r14
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    164c:	a5 14       	cp	r10, r5
    164e:	38 f4       	brcc	.+14     	; 0x165e <vfprintf+0x366>
    1650:	b7 01       	movw	r22, r14
    1652:	80 e3       	ldi	r24, 0x30	; 48
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    165a:	5a 94       	dec	r5
    165c:	f7 cf       	rjmp	.-18     	; 0x164c <vfprintf+0x354>
    165e:	aa 94       	dec	r10
    1660:	f4 01       	movw	r30, r8
    1662:	ea 0d       	add	r30, r10
    1664:	f1 1d       	adc	r31, r1
    1666:	80 81       	ld	r24, Z
    1668:	b7 01       	movw	r22, r14
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    1670:	a1 10       	cpse	r10, r1
    1672:	f5 cf       	rjmp	.-22     	; 0x165e <vfprintf+0x366>
    1674:	33 20       	and	r3, r3
    1676:	09 f4       	brne	.+2      	; 0x167a <vfprintf+0x382>
    1678:	51 ce       	rjmp	.-862    	; 0x131c <vfprintf+0x24>
    167a:	b7 01       	movw	r22, r14
    167c:	80 e2       	ldi	r24, 0x20	; 32
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 ae 0c 	call	0x195c	; 0x195c <fputc>
    1684:	3a 94       	dec	r3
    1686:	f6 cf       	rjmp	.-20     	; 0x1674 <vfprintf+0x37c>
    1688:	f7 01       	movw	r30, r14
    168a:	86 81       	ldd	r24, Z+6	; 0x06
    168c:	97 81       	ldd	r25, Z+7	; 0x07
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x39c>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	9f ef       	ldi	r25, 0xFF	; 255
    1694:	2c 96       	adiw	r28, 0x0c	; 12
    1696:	e2 e1       	ldi	r30, 0x12	; 18
    1698:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__epilogue_restores__>

0000169c <calloc>:
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	86 9f       	mul	r24, r22
    16a6:	80 01       	movw	r16, r0
    16a8:	87 9f       	mul	r24, r23
    16aa:	10 0d       	add	r17, r0
    16ac:	96 9f       	mul	r25, r22
    16ae:	10 0d       	add	r17, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	c8 01       	movw	r24, r16
    16b4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <malloc>
    16b8:	ec 01       	movw	r28, r24
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <calloc+0x2c>
    16be:	a8 01       	movw	r20, r16
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <memset>
    16c8:	ce 01       	movw	r24, r28
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	08 95       	ret

000016d4 <malloc>:
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	91 05       	cpc	r25, r1
    16dc:	10 f4       	brcc	.+4      	; 0x16e2 <malloc+0xe>
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	e0 91 15 04 	lds	r30, 0x0415
    16e6:	f0 91 16 04 	lds	r31, 0x0416
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	a0 e0       	ldi	r26, 0x00	; 0
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	30 97       	sbiw	r30, 0x00	; 0
    16f4:	39 f1       	breq	.+78     	; 0x1744 <malloc+0x70>
    16f6:	40 81       	ld	r20, Z
    16f8:	51 81       	ldd	r21, Z+1	; 0x01
    16fa:	48 17       	cp	r20, r24
    16fc:	59 07       	cpc	r21, r25
    16fe:	b8 f0       	brcs	.+46     	; 0x172e <malloc+0x5a>
    1700:	48 17       	cp	r20, r24
    1702:	59 07       	cpc	r21, r25
    1704:	71 f4       	brne	.+28     	; 0x1722 <malloc+0x4e>
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	10 97       	sbiw	r26, 0x00	; 0
    170c:	29 f0       	breq	.+10     	; 0x1718 <malloc+0x44>
    170e:	13 96       	adiw	r26, 0x03	; 3
    1710:	9c 93       	st	X, r25
    1712:	8e 93       	st	-X, r24
    1714:	12 97       	sbiw	r26, 0x02	; 2
    1716:	2c c0       	rjmp	.+88     	; 0x1770 <malloc+0x9c>
    1718:	90 93 16 04 	sts	0x0416, r25
    171c:	80 93 15 04 	sts	0x0415, r24
    1720:	27 c0       	rjmp	.+78     	; 0x1770 <malloc+0x9c>
    1722:	21 15       	cp	r18, r1
    1724:	31 05       	cpc	r19, r1
    1726:	31 f0       	breq	.+12     	; 0x1734 <malloc+0x60>
    1728:	42 17       	cp	r20, r18
    172a:	53 07       	cpc	r21, r19
    172c:	18 f0       	brcs	.+6      	; 0x1734 <malloc+0x60>
    172e:	a9 01       	movw	r20, r18
    1730:	db 01       	movw	r26, r22
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <malloc+0x62>
    1734:	ef 01       	movw	r28, r30
    1736:	9a 01       	movw	r18, r20
    1738:	bd 01       	movw	r22, r26
    173a:	df 01       	movw	r26, r30
    173c:	02 80       	ldd	r0, Z+2	; 0x02
    173e:	f3 81       	ldd	r31, Z+3	; 0x03
    1740:	e0 2d       	mov	r30, r0
    1742:	d7 cf       	rjmp	.-82     	; 0x16f2 <malloc+0x1e>
    1744:	21 15       	cp	r18, r1
    1746:	31 05       	cpc	r19, r1
    1748:	f9 f0       	breq	.+62     	; 0x1788 <malloc+0xb4>
    174a:	28 1b       	sub	r18, r24
    174c:	39 0b       	sbc	r19, r25
    174e:	24 30       	cpi	r18, 0x04	; 4
    1750:	31 05       	cpc	r19, r1
    1752:	80 f4       	brcc	.+32     	; 0x1774 <malloc+0xa0>
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	61 15       	cp	r22, r1
    175a:	71 05       	cpc	r23, r1
    175c:	21 f0       	breq	.+8      	; 0x1766 <malloc+0x92>
    175e:	fb 01       	movw	r30, r22
    1760:	93 83       	std	Z+3, r25	; 0x03
    1762:	82 83       	std	Z+2, r24	; 0x02
    1764:	04 c0       	rjmp	.+8      	; 0x176e <malloc+0x9a>
    1766:	90 93 16 04 	sts	0x0416, r25
    176a:	80 93 15 04 	sts	0x0415, r24
    176e:	fe 01       	movw	r30, r28
    1770:	32 96       	adiw	r30, 0x02	; 2
    1772:	44 c0       	rjmp	.+136    	; 0x17fc <malloc+0x128>
    1774:	fe 01       	movw	r30, r28
    1776:	e2 0f       	add	r30, r18
    1778:	f3 1f       	adc	r31, r19
    177a:	81 93       	st	Z+, r24
    177c:	91 93       	st	Z+, r25
    177e:	22 50       	subi	r18, 0x02	; 2
    1780:	31 09       	sbc	r19, r1
    1782:	39 83       	std	Y+1, r19	; 0x01
    1784:	28 83       	st	Y, r18
    1786:	3a c0       	rjmp	.+116    	; 0x17fc <malloc+0x128>
    1788:	20 91 13 04 	lds	r18, 0x0413
    178c:	30 91 14 04 	lds	r19, 0x0414
    1790:	23 2b       	or	r18, r19
    1792:	41 f4       	brne	.+16     	; 0x17a4 <malloc+0xd0>
    1794:	20 91 06 01 	lds	r18, 0x0106
    1798:	30 91 07 01 	lds	r19, 0x0107
    179c:	30 93 14 04 	sts	0x0414, r19
    17a0:	20 93 13 04 	sts	0x0413, r18
    17a4:	20 91 04 01 	lds	r18, 0x0104
    17a8:	30 91 05 01 	lds	r19, 0x0105
    17ac:	21 15       	cp	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	41 f4       	brne	.+16     	; 0x17c2 <malloc+0xee>
    17b2:	2d b7       	in	r18, 0x3d	; 61
    17b4:	3e b7       	in	r19, 0x3e	; 62
    17b6:	40 91 08 01 	lds	r20, 0x0108
    17ba:	50 91 09 01 	lds	r21, 0x0109
    17be:	24 1b       	sub	r18, r20
    17c0:	35 0b       	sbc	r19, r21
    17c2:	e0 91 13 04 	lds	r30, 0x0413
    17c6:	f0 91 14 04 	lds	r31, 0x0414
    17ca:	e2 17       	cp	r30, r18
    17cc:	f3 07       	cpc	r31, r19
    17ce:	a0 f4       	brcc	.+40     	; 0x17f8 <malloc+0x124>
    17d0:	2e 1b       	sub	r18, r30
    17d2:	3f 0b       	sbc	r19, r31
    17d4:	28 17       	cp	r18, r24
    17d6:	39 07       	cpc	r19, r25
    17d8:	78 f0       	brcs	.+30     	; 0x17f8 <malloc+0x124>
    17da:	ac 01       	movw	r20, r24
    17dc:	4e 5f       	subi	r20, 0xFE	; 254
    17de:	5f 4f       	sbci	r21, 0xFF	; 255
    17e0:	24 17       	cp	r18, r20
    17e2:	35 07       	cpc	r19, r21
    17e4:	48 f0       	brcs	.+18     	; 0x17f8 <malloc+0x124>
    17e6:	4e 0f       	add	r20, r30
    17e8:	5f 1f       	adc	r21, r31
    17ea:	50 93 14 04 	sts	0x0414, r21
    17ee:	40 93 13 04 	sts	0x0413, r20
    17f2:	81 93       	st	Z+, r24
    17f4:	91 93       	st	Z+, r25
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <malloc+0x128>
    17f8:	e0 e0       	ldi	r30, 0x00	; 0
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	cf 01       	movw	r24, r30
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <free>:
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	09 f4       	brne	.+2      	; 0x180e <free+0xa>
    180c:	87 c0       	rjmp	.+270    	; 0x191c <free+0x118>
    180e:	fc 01       	movw	r30, r24
    1810:	32 97       	sbiw	r30, 0x02	; 2
    1812:	13 82       	std	Z+3, r1	; 0x03
    1814:	12 82       	std	Z+2, r1	; 0x02
    1816:	c0 91 15 04 	lds	r28, 0x0415
    181a:	d0 91 16 04 	lds	r29, 0x0416
    181e:	20 97       	sbiw	r28, 0x00	; 0
    1820:	81 f4       	brne	.+32     	; 0x1842 <free+0x3e>
    1822:	20 81       	ld	r18, Z
    1824:	31 81       	ldd	r19, Z+1	; 0x01
    1826:	28 0f       	add	r18, r24
    1828:	39 1f       	adc	r19, r25
    182a:	80 91 13 04 	lds	r24, 0x0413
    182e:	90 91 14 04 	lds	r25, 0x0414
    1832:	82 17       	cp	r24, r18
    1834:	93 07       	cpc	r25, r19
    1836:	79 f5       	brne	.+94     	; 0x1896 <free+0x92>
    1838:	f0 93 14 04 	sts	0x0414, r31
    183c:	e0 93 13 04 	sts	0x0413, r30
    1840:	6d c0       	rjmp	.+218    	; 0x191c <free+0x118>
    1842:	de 01       	movw	r26, r28
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	ae 17       	cp	r26, r30
    184a:	bf 07       	cpc	r27, r31
    184c:	50 f4       	brcc	.+20     	; 0x1862 <free+0x5e>
    184e:	12 96       	adiw	r26, 0x02	; 2
    1850:	4d 91       	ld	r20, X+
    1852:	5c 91       	ld	r21, X
    1854:	13 97       	sbiw	r26, 0x03	; 3
    1856:	9d 01       	movw	r18, r26
    1858:	41 15       	cp	r20, r1
    185a:	51 05       	cpc	r21, r1
    185c:	09 f1       	breq	.+66     	; 0x18a0 <free+0x9c>
    185e:	da 01       	movw	r26, r20
    1860:	f3 cf       	rjmp	.-26     	; 0x1848 <free+0x44>
    1862:	b3 83       	std	Z+3, r27	; 0x03
    1864:	a2 83       	std	Z+2, r26	; 0x02
    1866:	40 81       	ld	r20, Z
    1868:	51 81       	ldd	r21, Z+1	; 0x01
    186a:	84 0f       	add	r24, r20
    186c:	95 1f       	adc	r25, r21
    186e:	8a 17       	cp	r24, r26
    1870:	9b 07       	cpc	r25, r27
    1872:	71 f4       	brne	.+28     	; 0x1890 <free+0x8c>
    1874:	8d 91       	ld	r24, X+
    1876:	9c 91       	ld	r25, X
    1878:	11 97       	sbiw	r26, 0x01	; 1
    187a:	84 0f       	add	r24, r20
    187c:	95 1f       	adc	r25, r21
    187e:	02 96       	adiw	r24, 0x02	; 2
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
    1884:	12 96       	adiw	r26, 0x02	; 2
    1886:	8d 91       	ld	r24, X+
    1888:	9c 91       	ld	r25, X
    188a:	13 97       	sbiw	r26, 0x03	; 3
    188c:	93 83       	std	Z+3, r25	; 0x03
    188e:	82 83       	std	Z+2, r24	; 0x02
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	29 f4       	brne	.+10     	; 0x18a0 <free+0x9c>
    1896:	f0 93 16 04 	sts	0x0416, r31
    189a:	e0 93 15 04 	sts	0x0415, r30
    189e:	3e c0       	rjmp	.+124    	; 0x191c <free+0x118>
    18a0:	d9 01       	movw	r26, r18
    18a2:	13 96       	adiw	r26, 0x03	; 3
    18a4:	fc 93       	st	X, r31
    18a6:	ee 93       	st	-X, r30
    18a8:	12 97       	sbiw	r26, 0x02	; 2
    18aa:	4d 91       	ld	r20, X+
    18ac:	5d 91       	ld	r21, X+
    18ae:	a4 0f       	add	r26, r20
    18b0:	b5 1f       	adc	r27, r21
    18b2:	ea 17       	cp	r30, r26
    18b4:	fb 07       	cpc	r31, r27
    18b6:	79 f4       	brne	.+30     	; 0x18d6 <free+0xd2>
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	84 0f       	add	r24, r20
    18be:	95 1f       	adc	r25, r21
    18c0:	02 96       	adiw	r24, 0x02	; 2
    18c2:	d9 01       	movw	r26, r18
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	9c 93       	st	X, r25
    18c8:	8e 93       	st	-X, r24
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	13 96       	adiw	r26, 0x03	; 3
    18d0:	9c 93       	st	X, r25
    18d2:	8e 93       	st	-X, r24
    18d4:	12 97       	sbiw	r26, 0x02	; 2
    18d6:	e0 e0       	ldi	r30, 0x00	; 0
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	19 f0       	breq	.+6      	; 0x18e8 <free+0xe4>
    18e2:	fe 01       	movw	r30, r28
    18e4:	ec 01       	movw	r28, r24
    18e6:	f9 cf       	rjmp	.-14     	; 0x18da <free+0xd6>
    18e8:	ce 01       	movw	r24, r28
    18ea:	02 96       	adiw	r24, 0x02	; 2
    18ec:	28 81       	ld	r18, Y
    18ee:	39 81       	ldd	r19, Y+1	; 0x01
    18f0:	82 0f       	add	r24, r18
    18f2:	93 1f       	adc	r25, r19
    18f4:	20 91 13 04 	lds	r18, 0x0413
    18f8:	30 91 14 04 	lds	r19, 0x0414
    18fc:	28 17       	cp	r18, r24
    18fe:	39 07       	cpc	r19, r25
    1900:	69 f4       	brne	.+26     	; 0x191c <free+0x118>
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	29 f4       	brne	.+10     	; 0x1910 <free+0x10c>
    1906:	10 92 16 04 	sts	0x0416, r1
    190a:	10 92 15 04 	sts	0x0415, r1
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <free+0x110>
    1910:	13 82       	std	Z+3, r1	; 0x03
    1912:	12 82       	std	Z+2, r1	; 0x02
    1914:	d0 93 14 04 	sts	0x0414, r29
    1918:	c0 93 13 04 	sts	0x0413, r28
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	08 95       	ret

00001922 <strnlen_P>:
    1922:	fc 01       	movw	r30, r24
    1924:	05 90       	lpm	r0, Z+
    1926:	61 50       	subi	r22, 0x01	; 1
    1928:	70 40       	sbci	r23, 0x00	; 0
    192a:	01 10       	cpse	r0, r1
    192c:	d8 f7       	brcc	.-10     	; 0x1924 <strnlen_P+0x2>
    192e:	80 95       	com	r24
    1930:	90 95       	com	r25
    1932:	8e 0f       	add	r24, r30
    1934:	9f 1f       	adc	r25, r31
    1936:	08 95       	ret

00001938 <memset>:
    1938:	dc 01       	movw	r26, r24
    193a:	01 c0       	rjmp	.+2      	; 0x193e <memset+0x6>
    193c:	6d 93       	st	X+, r22
    193e:	41 50       	subi	r20, 0x01	; 1
    1940:	50 40       	sbci	r21, 0x00	; 0
    1942:	e0 f7       	brcc	.-8      	; 0x193c <memset+0x4>
    1944:	08 95       	ret

00001946 <strnlen>:
    1946:	fc 01       	movw	r30, r24
    1948:	61 50       	subi	r22, 0x01	; 1
    194a:	70 40       	sbci	r23, 0x00	; 0
    194c:	01 90       	ld	r0, Z+
    194e:	01 10       	cpse	r0, r1
    1950:	d8 f7       	brcc	.-10     	; 0x1948 <strnlen+0x2>
    1952:	80 95       	com	r24
    1954:	90 95       	com	r25
    1956:	8e 0f       	add	r24, r30
    1958:	9f 1f       	adc	r25, r31
    195a:	08 95       	ret

0000195c <fputc>:
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	18 2f       	mov	r17, r24
    1966:	09 2f       	mov	r16, r25
    1968:	eb 01       	movw	r28, r22
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	81 fd       	sbrc	r24, 1
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <fputc+0x1a>
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	9f ef       	ldi	r25, 0xFF	; 255
    1974:	20 c0       	rjmp	.+64     	; 0x19b6 <fputc+0x5a>
    1976:	82 ff       	sbrs	r24, 2
    1978:	10 c0       	rjmp	.+32     	; 0x199a <fputc+0x3e>
    197a:	4e 81       	ldd	r20, Y+6	; 0x06
    197c:	5f 81       	ldd	r21, Y+7	; 0x07
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	42 17       	cp	r20, r18
    1984:	53 07       	cpc	r21, r19
    1986:	7c f4       	brge	.+30     	; 0x19a6 <fputc+0x4a>
    1988:	e8 81       	ld	r30, Y
    198a:	f9 81       	ldd	r31, Y+1	; 0x01
    198c:	9f 01       	movw	r18, r30
    198e:	2f 5f       	subi	r18, 0xFF	; 255
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	39 83       	std	Y+1, r19	; 0x01
    1994:	28 83       	st	Y, r18
    1996:	10 83       	st	Z, r17
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <fputc+0x4a>
    199a:	e8 85       	ldd	r30, Y+8	; 0x08
    199c:	f9 85       	ldd	r31, Y+9	; 0x09
    199e:	81 2f       	mov	r24, r17
    19a0:	09 95       	icall
    19a2:	89 2b       	or	r24, r25
    19a4:	29 f7       	brne	.-54     	; 0x1970 <fputc+0x14>
    19a6:	2e 81       	ldd	r18, Y+6	; 0x06
    19a8:	3f 81       	ldd	r19, Y+7	; 0x07
    19aa:	2f 5f       	subi	r18, 0xFF	; 255
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	3f 83       	std	Y+7, r19	; 0x07
    19b0:	2e 83       	std	Y+6, r18	; 0x06
    19b2:	81 2f       	mov	r24, r17
    19b4:	90 2f       	mov	r25, r16
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <__ultoa_invert>:
    19c0:	fa 01       	movw	r30, r20
    19c2:	aa 27       	eor	r26, r26
    19c4:	28 30       	cpi	r18, 0x08	; 8
    19c6:	51 f1       	breq	.+84     	; 0x1a1c <__ultoa_invert+0x5c>
    19c8:	20 31       	cpi	r18, 0x10	; 16
    19ca:	81 f1       	breq	.+96     	; 0x1a2c <__ultoa_invert+0x6c>
    19cc:	e8 94       	clt
    19ce:	6f 93       	push	r22
    19d0:	6e 7f       	andi	r22, 0xFE	; 254
    19d2:	6e 5f       	subi	r22, 0xFE	; 254
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	af 4f       	sbci	r26, 0xFF	; 255
    19dc:	b1 e0       	ldi	r27, 0x01	; 1
    19de:	3e d0       	rcall	.+124    	; 0x1a5c <__ultoa_invert+0x9c>
    19e0:	b4 e0       	ldi	r27, 0x04	; 4
    19e2:	3c d0       	rcall	.+120    	; 0x1a5c <__ultoa_invert+0x9c>
    19e4:	67 0f       	add	r22, r23
    19e6:	78 1f       	adc	r23, r24
    19e8:	89 1f       	adc	r24, r25
    19ea:	9a 1f       	adc	r25, r26
    19ec:	a1 1d       	adc	r26, r1
    19ee:	68 0f       	add	r22, r24
    19f0:	79 1f       	adc	r23, r25
    19f2:	8a 1f       	adc	r24, r26
    19f4:	91 1d       	adc	r25, r1
    19f6:	a1 1d       	adc	r26, r1
    19f8:	6a 0f       	add	r22, r26
    19fa:	71 1d       	adc	r23, r1
    19fc:	81 1d       	adc	r24, r1
    19fe:	91 1d       	adc	r25, r1
    1a00:	a1 1d       	adc	r26, r1
    1a02:	20 d0       	rcall	.+64     	; 0x1a44 <__ultoa_invert+0x84>
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <__ultoa_invert+0x48>
    1a06:	68 94       	set
    1a08:	3f 91       	pop	r19
    1a0a:	2a e0       	ldi	r18, 0x0A	; 10
    1a0c:	26 9f       	mul	r18, r22
    1a0e:	11 24       	eor	r1, r1
    1a10:	30 19       	sub	r19, r0
    1a12:	30 5d       	subi	r19, 0xD0	; 208
    1a14:	31 93       	st	Z+, r19
    1a16:	de f6       	brtc	.-74     	; 0x19ce <__ultoa_invert+0xe>
    1a18:	cf 01       	movw	r24, r30
    1a1a:	08 95       	ret
    1a1c:	46 2f       	mov	r20, r22
    1a1e:	47 70       	andi	r20, 0x07	; 7
    1a20:	40 5d       	subi	r20, 0xD0	; 208
    1a22:	41 93       	st	Z+, r20
    1a24:	b3 e0       	ldi	r27, 0x03	; 3
    1a26:	0f d0       	rcall	.+30     	; 0x1a46 <__ultoa_invert+0x86>
    1a28:	c9 f7       	brne	.-14     	; 0x1a1c <__ultoa_invert+0x5c>
    1a2a:	f6 cf       	rjmp	.-20     	; 0x1a18 <__ultoa_invert+0x58>
    1a2c:	46 2f       	mov	r20, r22
    1a2e:	4f 70       	andi	r20, 0x0F	; 15
    1a30:	40 5d       	subi	r20, 0xD0	; 208
    1a32:	4a 33       	cpi	r20, 0x3A	; 58
    1a34:	18 f0       	brcs	.+6      	; 0x1a3c <__ultoa_invert+0x7c>
    1a36:	49 5d       	subi	r20, 0xD9	; 217
    1a38:	31 fd       	sbrc	r19, 1
    1a3a:	40 52       	subi	r20, 0x20	; 32
    1a3c:	41 93       	st	Z+, r20
    1a3e:	02 d0       	rcall	.+4      	; 0x1a44 <__ultoa_invert+0x84>
    1a40:	a9 f7       	brne	.-22     	; 0x1a2c <__ultoa_invert+0x6c>
    1a42:	ea cf       	rjmp	.-44     	; 0x1a18 <__ultoa_invert+0x58>
    1a44:	b4 e0       	ldi	r27, 0x04	; 4
    1a46:	a6 95       	lsr	r26
    1a48:	97 95       	ror	r25
    1a4a:	87 95       	ror	r24
    1a4c:	77 95       	ror	r23
    1a4e:	67 95       	ror	r22
    1a50:	ba 95       	dec	r27
    1a52:	c9 f7       	brne	.-14     	; 0x1a46 <__ultoa_invert+0x86>
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	61 05       	cpc	r22, r1
    1a58:	71 05       	cpc	r23, r1
    1a5a:	08 95       	ret
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	0a 2e       	mov	r0, r26
    1a62:	06 94       	lsr	r0
    1a64:	57 95       	ror	r21
    1a66:	47 95       	ror	r20
    1a68:	37 95       	ror	r19
    1a6a:	27 95       	ror	r18
    1a6c:	ba 95       	dec	r27
    1a6e:	c9 f7       	brne	.-14     	; 0x1a62 <__ultoa_invert+0xa2>
    1a70:	62 0f       	add	r22, r18
    1a72:	73 1f       	adc	r23, r19
    1a74:	84 1f       	adc	r24, r20
    1a76:	95 1f       	adc	r25, r21
    1a78:	a0 1d       	adc	r26, r0
    1a7a:	08 95       	ret

00001a7c <__divmodsi4>:
    1a7c:	05 2e       	mov	r0, r21
    1a7e:	97 fb       	bst	r25, 7
    1a80:	1e f4       	brtc	.+6      	; 0x1a88 <__divmodsi4+0xc>
    1a82:	00 94       	com	r0
    1a84:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__negsi2>
    1a88:	57 fd       	sbrc	r21, 7
    1a8a:	07 d0       	rcall	.+14     	; 0x1a9a <__divmodsi4_neg2>
    1a8c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__udivmodsi4>
    1a90:	07 fc       	sbrc	r0, 7
    1a92:	03 d0       	rcall	.+6      	; 0x1a9a <__divmodsi4_neg2>
    1a94:	4e f4       	brtc	.+18     	; 0x1aa8 <__divmodsi4_exit>
    1a96:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__negsi2>

00001a9a <__divmodsi4_neg2>:
    1a9a:	50 95       	com	r21
    1a9c:	40 95       	com	r20
    1a9e:	30 95       	com	r19
    1aa0:	21 95       	neg	r18
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255

00001aa8 <__divmodsi4_exit>:
    1aa8:	08 95       	ret

00001aaa <__negsi2>:
    1aaa:	90 95       	com	r25
    1aac:	80 95       	com	r24
    1aae:	70 95       	com	r23
    1ab0:	61 95       	neg	r22
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab8:	08 95       	ret

00001aba <__muluhisi3>:
    1aba:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__umulhisi3>
    1abe:	a5 9f       	mul	r26, r21
    1ac0:	90 0d       	add	r25, r0
    1ac2:	b4 9f       	mul	r27, r20
    1ac4:	90 0d       	add	r25, r0
    1ac6:	a4 9f       	mul	r26, r20
    1ac8:	80 0d       	add	r24, r0
    1aca:	91 1d       	adc	r25, r1
    1acc:	11 24       	eor	r1, r1
    1ace:	08 95       	ret

00001ad0 <__mulshisi3>:
    1ad0:	b7 ff       	sbrs	r27, 7
    1ad2:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__muluhisi3>

00001ad6 <__mulohisi3>:
    1ad6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__muluhisi3>
    1ada:	82 1b       	sub	r24, r18
    1adc:	93 0b       	sbc	r25, r19
    1ade:	08 95       	ret

00001ae0 <__prologue_saves__>:
    1ae0:	2f 92       	push	r2
    1ae2:	3f 92       	push	r3
    1ae4:	4f 92       	push	r4
    1ae6:	5f 92       	push	r5
    1ae8:	6f 92       	push	r6
    1aea:	7f 92       	push	r7
    1aec:	8f 92       	push	r8
    1aee:	9f 92       	push	r9
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	ca 1b       	sub	r28, r26
    1b0a:	db 0b       	sbc	r29, r27
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	09 94       	ijmp

00001b18 <__epilogue_restores__>:
    1b18:	2a 88       	ldd	r2, Y+18	; 0x12
    1b1a:	39 88       	ldd	r3, Y+17	; 0x11
    1b1c:	48 88       	ldd	r4, Y+16	; 0x10
    1b1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b20:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b22:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b24:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b26:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b28:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b2a:	b9 84       	ldd	r11, Y+9	; 0x09
    1b2c:	c8 84       	ldd	r12, Y+8	; 0x08
    1b2e:	df 80       	ldd	r13, Y+7	; 0x07
    1b30:	ee 80       	ldd	r14, Y+6	; 0x06
    1b32:	fd 80       	ldd	r15, Y+5	; 0x05
    1b34:	0c 81       	ldd	r16, Y+4	; 0x04
    1b36:	1b 81       	ldd	r17, Y+3	; 0x03
    1b38:	aa 81       	ldd	r26, Y+2	; 0x02
    1b3a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b3c:	ce 0f       	add	r28, r30
    1b3e:	d1 1d       	adc	r29, r1
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	ed 01       	movw	r28, r26
    1b4c:	08 95       	ret

00001b4e <__udivmodsi4>:
    1b4e:	a1 e2       	ldi	r26, 0x21	; 33
    1b50:	1a 2e       	mov	r1, r26
    1b52:	aa 1b       	sub	r26, r26
    1b54:	bb 1b       	sub	r27, r27
    1b56:	fd 01       	movw	r30, r26
    1b58:	0d c0       	rjmp	.+26     	; 0x1b74 <__udivmodsi4_ep>

00001b5a <__udivmodsi4_loop>:
    1b5a:	aa 1f       	adc	r26, r26
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	ee 1f       	adc	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	a2 17       	cp	r26, r18
    1b64:	b3 07       	cpc	r27, r19
    1b66:	e4 07       	cpc	r30, r20
    1b68:	f5 07       	cpc	r31, r21
    1b6a:	20 f0       	brcs	.+8      	; 0x1b74 <__udivmodsi4_ep>
    1b6c:	a2 1b       	sub	r26, r18
    1b6e:	b3 0b       	sbc	r27, r19
    1b70:	e4 0b       	sbc	r30, r20
    1b72:	f5 0b       	sbc	r31, r21

00001b74 <__udivmodsi4_ep>:
    1b74:	66 1f       	adc	r22, r22
    1b76:	77 1f       	adc	r23, r23
    1b78:	88 1f       	adc	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	1a 94       	dec	r1
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <__udivmodsi4_loop>
    1b80:	60 95       	com	r22
    1b82:	70 95       	com	r23
    1b84:	80 95       	com	r24
    1b86:	90 95       	com	r25
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	bd 01       	movw	r22, r26
    1b8e:	cf 01       	movw	r24, r30
    1b90:	08 95       	ret

00001b92 <__umulhisi3>:
    1b92:	a2 9f       	mul	r26, r18
    1b94:	b0 01       	movw	r22, r0
    1b96:	b3 9f       	mul	r27, r19
    1b98:	c0 01       	movw	r24, r0
    1b9a:	a3 9f       	mul	r26, r19
    1b9c:	70 0d       	add	r23, r0
    1b9e:	81 1d       	adc	r24, r1
    1ba0:	11 24       	eor	r1, r1
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	b2 9f       	mul	r27, r18
    1ba6:	70 0d       	add	r23, r0
    1ba8:	81 1d       	adc	r24, r1
    1baa:	11 24       	eor	r1, r1
    1bac:	91 1d       	adc	r25, r1
    1bae:	08 95       	ret

00001bb0 <_exit>:
    1bb0:	f8 94       	cli

00001bb2 <__stop_program>:
    1bb2:	ff cf       	rjmp	.-2      	; 0x1bb2 <__stop_program>
