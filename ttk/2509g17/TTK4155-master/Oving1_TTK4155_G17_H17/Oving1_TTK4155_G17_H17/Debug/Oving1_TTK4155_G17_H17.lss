
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ae  00800100  000029ca  00002a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  008003ae  008003ae  00002d0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000310c  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bc2  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d8e  00000000  00000000  00006c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000808  00000000  00000000  00007a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f6  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002269  00000000  00000000  00008c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  0000ae73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_1>
       8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_2>
       c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      54:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      58:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      5c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      60:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      64:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      68:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      6c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_3>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_2>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_1>:
      ea:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000f4 <font>:
	...
      fc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     10c:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     11c:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     12c:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     13c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     14c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     15c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     16c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     17c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     18c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     19c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ac:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1bc:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1cc:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1dc:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1ec:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1fc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     20c:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     21c:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     22c:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     23c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     24c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     25c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     26c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     27c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     28c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     29c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ac:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2bc:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2cc:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2dc:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2ec:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2fc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     30c:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     31c:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     32c:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     33c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     34c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     35c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     36c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     37c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     38c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     39c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ac:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3bc:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3cc:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3dc:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3ec:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3fc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     40c:	01 01 01 01 01 01 01 ff                             ........

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d4 e0       	ldi	r29, 0x04	; 4
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	ea ec       	ldi	r30, 0xCA	; 202
     428:	f9 e2       	ldi	r31, 0x29	; 41
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x10>
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	ae 3a       	cpi	r26, 0xAE	; 174
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0xc>

00000436 <__do_clear_bss>:
     436:	24 e0       	ldi	r18, 0x04	; 4
     438:	ae ea       	ldi	r26, 0xAE	; 174
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a1 33       	cpi	r26, 0x31	; 49
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 75 06 	call	0xcea	; 0xcea <main>
     44a:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000452 <readADC>:
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	91 05       	cpc	r25, r1
     456:	71 f0       	breq	.+28     	; 0x474 <readADC+0x22>
     458:	1c f4       	brge	.+6      	; 0x460 <readADC+0xe>
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	39 f0       	breq	.+14     	; 0x46c <readADC+0x1a>
     45e:	1c c0       	rjmp	.+56     	; 0x498 <readADC+0x46>
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	91 05       	cpc	r25, r1
     464:	59 f0       	breq	.+22     	; 0x47c <readADC+0x2a>
     466:	04 97       	sbiw	r24, 0x04	; 4
     468:	69 f0       	breq	.+26     	; 0x484 <readADC+0x32>
     46a:	16 c0       	rjmp	.+44     	; 0x498 <readADC+0x46>
     46c:	84 e1       	ldi	r24, 0x14	; 20
     46e:	80 93 00 14 	sts	0x1400, r24
     472:	0b c0       	rjmp	.+22     	; 0x48a <readADC+0x38>
     474:	85 e1       	ldi	r24, 0x15	; 21
     476:	80 93 00 14 	sts	0x1400, r24
     47a:	07 c0       	rjmp	.+14     	; 0x48a <readADC+0x38>
     47c:	86 e1       	ldi	r24, 0x16	; 22
     47e:	80 93 00 14 	sts	0x1400, r24
     482:	03 c0       	rjmp	.+6      	; 0x48a <readADC+0x38>
     484:	87 e1       	ldi	r24, 0x17	; 23
     486:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	82 e5       	ldi	r24, 0x52	; 82
     48c:	8a 95       	dec	r24
     48e:	f1 f7       	brne	.-4      	; 0x48c <readADC+0x3a>
     490:	80 91 00 14 	lds	r24, 0x1400
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	08 95       	ret
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	08 95       	ret

0000049e <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     49e:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     4a0:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     4a2:	85 b7       	in	r24, 0x35	; 53
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     4a8:	85 b7       	in	r24, 0x35	; 53
     4aa:	82 60       	ori	r24, 0x02	; 2
     4ac:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     4ae:	85 b7       	in	r24, 0x35	; 53
     4b0:	84 60       	ori	r24, 0x04	; 4
     4b2:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     4b4:	85 b7       	in	r24, 0x35	; 53
     4b6:	88 60       	ori	r24, 0x08	; 8
     4b8:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     4ba:	8b b7       	in	r24, 0x3b	; 59
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     4c0:	8b b7       	in	r24, 0x3b	; 59
     4c2:	80 68       	ori	r24, 0x80	; 128
     4c4:	8b bf       	out	0x3b, r24	; 59
     4c6:	08 95       	ret

000004c8 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	2f 93       	push	r18
     4dc:	3f 93       	push	r19
     4de:	4f 93       	push	r20
     4e0:	5f 93       	push	r21
     4e2:	6f 93       	push	r22
     4e4:	7f 93       	push	r23
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4f6:	80 e1       	ldi	r24, 0x10	; 16
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     502:	82 e5       	ldi	r24, 0x52	; 82
     504:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     508:	f8 2e       	mov	r15, r24
     50a:	e9 2e       	mov	r14, r25
     50c:	8c e4       	ldi	r24, 0x4C	; 76
     50e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     512:	18 2f       	mov	r17, r24
     514:	09 2f       	mov	r16, r25
     516:	89 e5       	ldi	r24, 0x59	; 89
     518:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     51c:	c8 2f       	mov	r28, r24
     51e:	d9 2f       	mov	r29, r25
     520:	88 e5       	ldi	r24, 0x58	; 88
     522:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	89 e3       	ldi	r24, 0x39	; 57
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
	menu_right_button_flag();
     542:	0e 94 48 07 	call	0xe90	; 0xe90 <menu_right_button_flag>
     546:	8d b7       	in	r24, 0x3d	; 61
     548:	9e b7       	in	r25, 0x3e	; 62
     54a:	0c 96       	adiw	r24, 0x0c	; 12
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	9e bf       	out	0x3e, r25	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	8d bf       	out	0x3d, r24	; 61
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
	menu_left_button_flag();
     5a6:	0e 94 44 07 	call	0xe88	; 0xe88 <menu_left_button_flag>
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	0f 90       	pop	r0
     5c8:	1f 90       	pop	r1
     5ca:	18 95       	reti

000005cc <calibrate_joystick>:
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	c4 e6       	ldi	r28, 0x64	; 100
     5d6:	d0 e0       	ldi	r29, 0x00	; 0
     5d8:	00 91 b8 03 	lds	r16, 0x03B8
     5dc:	10 91 b9 03 	lds	r17, 0x03B9
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     5e8:	01 58       	subi	r16, 0x81	; 129
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	08 1b       	sub	r16, r24
     5ee:	19 0b       	sbc	r17, r25
     5f0:	10 93 b9 03 	sts	0x03B9, r17
     5f4:	00 93 b8 03 	sts	0x03B8, r16
     5f8:	00 91 b6 03 	lds	r16, 0x03B6
     5fc:	10 91 b7 03 	lds	r17, 0x03B7
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     608:	01 58       	subi	r16, 0x81	; 129
     60a:	1f 4f       	sbci	r17, 0xFF	; 255
     60c:	08 1b       	sub	r16, r24
     60e:	19 0b       	sbc	r17, r25
     610:	10 93 b7 03 	sts	0x03B7, r17
     614:	00 93 b6 03 	sts	0x03B6, r16
     618:	21 97       	sbiw	r28, 0x01	; 1
     61a:	20 97       	sbiw	r28, 0x00	; 0
     61c:	e9 f6       	brne	.-70     	; 0x5d8 <calibrate_joystick+0xc>
     61e:	80 91 b8 03 	lds	r24, 0x03B8
     622:	90 91 b9 03 	lds	r25, 0x03B9
     626:	24 e6       	ldi	r18, 0x64	; 100
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	b9 01       	movw	r22, r18
     62c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__divmodhi4>
     630:	70 93 b9 03 	sts	0x03B9, r23
     634:	60 93 b8 03 	sts	0x03B8, r22
     638:	80 91 b6 03 	lds	r24, 0x03B6
     63c:	90 91 b7 03 	lds	r25, 0x03B7
     640:	b9 01       	movw	r22, r18
     642:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__divmodhi4>
     646:	70 93 b7 03 	sts	0x03B7, r23
     64a:	60 93 b6 03 	sts	0x03B6, r22
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	08 95       	ret

00000658 <signal_to_range>:
     658:	2f 92       	push	r2
     65a:	3f 92       	push	r3
     65c:	4f 92       	push	r4
     65e:	5f 92       	push	r5
     660:	6f 92       	push	r6
     662:	7f 92       	push	r7
     664:	8f 92       	push	r8
     666:	9f 92       	push	r9
     668:	af 92       	push	r10
     66a:	bf 92       	push	r11
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 d0       	rcall	.+0      	; 0x67e <signal_to_range+0x26>
     67e:	00 d0       	rcall	.+0      	; 0x680 <signal_to_range+0x28>
     680:	00 d0       	rcall	.+0      	; 0x682 <signal_to_range+0x2a>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	3c 01       	movw	r6, r24
     688:	7a 83       	std	Y+2, r23	; 0x02
     68a:	69 83       	std	Y+1, r22	; 0x01
     68c:	5c 83       	std	Y+4, r21	; 0x04
     68e:	4b 83       	std	Y+3, r20	; 0x03
     690:	3e 83       	std	Y+6, r19	; 0x06
     692:	2d 83       	std	Y+5, r18	; 0x05
     694:	18 01       	movw	r2, r16
     696:	85 01       	movw	r16, r10
     698:	b9 01       	movw	r22, r18
     69a:	88 27       	eor	r24, r24
     69c:	77 fd       	sbrc	r23, 7
     69e:	80 95       	com	r24
     6a0:	98 2f       	mov	r25, r24
     6a2:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
     6a6:	4b 01       	movw	r8, r22
     6a8:	5c 01       	movw	r10, r24
     6aa:	b3 01       	movw	r22, r6
     6ac:	6e 0d       	add	r22, r14
     6ae:	7f 1d       	adc	r23, r15
     6b0:	29 81       	ldd	r18, Y+1	; 0x01
     6b2:	3a 81       	ldd	r19, Y+2	; 0x02
     6b4:	62 1b       	sub	r22, r18
     6b6:	73 0b       	sbc	r23, r19
     6b8:	88 27       	eor	r24, r24
     6ba:	77 fd       	sbrc	r23, 7
     6bc:	80 95       	com	r24
     6be:	98 2f       	mov	r25, r24
     6c0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
     6c4:	2b 01       	movw	r4, r22
     6c6:	3c 01       	movw	r6, r24
     6c8:	b1 01       	movw	r22, r2
     6ca:	8d 81       	ldd	r24, Y+5	; 0x05
     6cc:	9e 81       	ldd	r25, Y+6	; 0x06
     6ce:	68 1b       	sub	r22, r24
     6d0:	79 0b       	sbc	r23, r25
     6d2:	88 27       	eor	r24, r24
     6d4:	77 fd       	sbrc	r23, 7
     6d6:	80 95       	com	r24
     6d8:	98 2f       	mov	r25, r24
     6da:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	c3 01       	movw	r24, r6
     6e4:	b2 01       	movw	r22, r4
     6e6:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__mulsf3>
     6ea:	2b 01       	movw	r4, r22
     6ec:	3c 01       	movw	r6, r24
     6ee:	6b 81       	ldd	r22, Y+3	; 0x03
     6f0:	7c 81       	ldd	r23, Y+4	; 0x04
     6f2:	e9 81       	ldd	r30, Y+1	; 0x01
     6f4:	fa 81       	ldd	r31, Y+2	; 0x02
     6f6:	6e 1b       	sub	r22, r30
     6f8:	7f 0b       	sbc	r23, r31
     6fa:	88 27       	eor	r24, r24
     6fc:	77 fd       	sbrc	r23, 7
     6fe:	80 95       	com	r24
     700:	98 2f       	mov	r25, r24
     702:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
     706:	9b 01       	movw	r18, r22
     708:	ac 01       	movw	r20, r24
     70a:	c3 01       	movw	r24, r6
     70c:	b2 01       	movw	r22, r4
     70e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__divsf3>
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	c5 01       	movw	r24, r10
     718:	b4 01       	movw	r22, r8
     71a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__addsf3>
     71e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fixsfsi>
     722:	c1 01       	movw	r24, r2
     724:	80 1b       	sub	r24, r16
     726:	91 0b       	sbc	r25, r17
     728:	68 17       	cp	r22, r24
     72a:	79 07       	cpc	r23, r25
     72c:	74 f5       	brge	.+92     	; 0x78a <signal_to_range+0x132>
     72e:	8d 81       	ldd	r24, Y+5	; 0x05
     730:	9e 81       	ldd	r25, Y+6	; 0x06
     732:	80 0f       	add	r24, r16
     734:	91 1f       	adc	r25, r17
     736:	86 17       	cp	r24, r22
     738:	97 07       	cpc	r25, r23
     73a:	4c f5       	brge	.+82     	; 0x78e <signal_to_range+0x136>
     73c:	f8 01       	movw	r30, r16
     73e:	11 23       	and	r17, r17
     740:	0c f4       	brge	.+2      	; 0x744 <signal_to_range+0xec>
     742:	31 96       	adiw	r30, 0x01	; 1
     744:	f5 95       	asr	r31
     746:	e7 95       	ror	r30
     748:	d8 01       	movw	r26, r16
     74a:	12 c0       	rjmp	.+36     	; 0x770 <signal_to_range+0x118>
     74c:	8a 0f       	add	r24, r26
     74e:	9b 1f       	adc	r25, r27
     750:	ac 01       	movw	r20, r24
     752:	4e 0f       	add	r20, r30
     754:	5f 1f       	adc	r21, r31
     756:	64 17       	cp	r22, r20
     758:	75 07       	cpc	r23, r21
     75a:	14 f0       	brlt	.+4      	; 0x760 <signal_to_range+0x108>
     75c:	69 01       	movw	r12, r18
     75e:	0b c0       	rjmp	.+22     	; 0x776 <signal_to_range+0x11e>
     760:	c6 01       	movw	r24, r12
     762:	8e 1b       	sub	r24, r30
     764:	9f 0b       	sbc	r25, r31
     766:	86 17       	cp	r24, r22
     768:	97 07       	cpc	r25, r23
     76a:	14 f0       	brlt	.+4      	; 0x770 <signal_to_range+0x118>
     76c:	c0 1a       	sub	r12, r16
     76e:	d1 0a       	sbc	r13, r17
     770:	c6 01       	movw	r24, r12
     772:	80 1b       	sub	r24, r16
     774:	91 0b       	sbc	r25, r17
     776:	96 01       	movw	r18, r12
     778:	20 0f       	add	r18, r16
     77a:	31 1f       	adc	r19, r17
     77c:	62 17       	cp	r22, r18
     77e:	73 07       	cpc	r23, r19
     780:	2c f7       	brge	.-54     	; 0x74c <signal_to_range+0xf4>
     782:	86 17       	cp	r24, r22
     784:	97 07       	cpc	r25, r23
     786:	14 f7       	brge	.-60     	; 0x74c <signal_to_range+0xf4>
     788:	04 c0       	rjmp	.+8      	; 0x792 <signal_to_range+0x13a>
     78a:	61 01       	movw	r12, r2
     78c:	02 c0       	rjmp	.+4      	; 0x792 <signal_to_range+0x13a>
     78e:	cd 80       	ldd	r12, Y+5	; 0x05
     790:	de 80       	ldd	r13, Y+6	; 0x06
     792:	c6 01       	movw	r24, r12
     794:	26 96       	adiw	r28, 0x06	; 6
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	3f 90       	pop	r3
     7c2:	2f 90       	pop	r2
     7c4:	08 95       	ret

000007c6 <read_control_input>:
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	82 35       	cpi	r24, 0x52	; 82
     7d8:	09 f4       	brne	.+2      	; 0x7dc <read_control_input+0x16>
     7da:	74 c0       	rjmp	.+232    	; 0x8c4 <read_control_input+0xfe>
     7dc:	20 f4       	brcc	.+8      	; 0x7e6 <read_control_input+0x20>
     7de:	8c 34       	cpi	r24, 0x4C	; 76
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <read_control_input+0x1e>
     7e2:	4e c0       	rjmp	.+156    	; 0x880 <read_control_input+0xba>
     7e4:	91 c0       	rjmp	.+290    	; 0x908 <read_control_input+0x142>
     7e6:	88 35       	cpi	r24, 0x58	; 88
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <read_control_input+0x2a>
     7ea:	89 35       	cpi	r24, 0x59	; 89
     7ec:	29 f1       	breq	.+74     	; 0x838 <read_control_input+0x72>
     7ee:	8c c0       	rjmp	.+280    	; 0x908 <read_control_input+0x142>
     7f0:	c0 90 b4 03 	lds	r12, 0x03B4
     7f4:	d0 90 b5 03 	lds	r13, 0x03B5
     7f8:	e0 90 b8 03 	lds	r14, 0x03B8
     7fc:	f0 90 b9 03 	lds	r15, 0x03B9
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     808:	0f 2e       	mov	r0, r31
     80a:	fa e0       	ldi	r31, 0x0A	; 10
     80c:	af 2e       	mov	r10, r31
     80e:	b1 2c       	mov	r11, r1
     810:	f0 2d       	mov	r31, r0
     812:	04 e6       	ldi	r16, 0x64	; 100
     814:	10 e0       	ldi	r17, 0x00	; 0
     816:	2c e9       	ldi	r18, 0x9C	; 156
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	4f ef       	ldi	r20, 0xFF	; 255
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	0e 94 2c 03 	call	0x658	; 0x658 <signal_to_range>
     826:	90 93 b5 03 	sts	0x03B5, r25
     82a:	80 93 b4 03 	sts	0x03B4, r24
     82e:	80 91 b4 03 	lds	r24, 0x03B4
     832:	90 91 b5 03 	lds	r25, 0x03B5
     836:	6a c0       	rjmp	.+212    	; 0x90c <read_control_input+0x146>
     838:	c0 90 b2 03 	lds	r12, 0x03B2
     83c:	d0 90 b3 03 	lds	r13, 0x03B3
     840:	e0 90 b6 03 	lds	r14, 0x03B6
     844:	f0 90 b7 03 	lds	r15, 0x03B7
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     850:	0f 2e       	mov	r0, r31
     852:	fa e0       	ldi	r31, 0x0A	; 10
     854:	af 2e       	mov	r10, r31
     856:	b1 2c       	mov	r11, r1
     858:	f0 2d       	mov	r31, r0
     85a:	04 e6       	ldi	r16, 0x64	; 100
     85c:	10 e0       	ldi	r17, 0x00	; 0
     85e:	2c e9       	ldi	r18, 0x9C	; 156
     860:	3f ef       	ldi	r19, 0xFF	; 255
     862:	4f ef       	ldi	r20, 0xFF	; 255
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	0e 94 2c 03 	call	0x658	; 0x658 <signal_to_range>
     86e:	90 93 b3 03 	sts	0x03B3, r25
     872:	80 93 b2 03 	sts	0x03B2, r24
     876:	80 91 b2 03 	lds	r24, 0x03B2
     87a:	90 91 b3 03 	lds	r25, 0x03B3
     87e:	46 c0       	rjmp	.+140    	; 0x90c <read_control_input+0x146>
     880:	c0 90 b0 03 	lds	r12, 0x03B0
     884:	d0 90 b1 03 	lds	r13, 0x03B1
     888:	83 e0       	ldi	r24, 0x03	; 3
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     890:	0f 2e       	mov	r0, r31
     892:	fa e0       	ldi	r31, 0x0A	; 10
     894:	af 2e       	mov	r10, r31
     896:	b1 2c       	mov	r11, r1
     898:	f0 2d       	mov	r31, r0
     89a:	e1 2c       	mov	r14, r1
     89c:	f1 2c       	mov	r15, r1
     89e:	04 e6       	ldi	r16, 0x64	; 100
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	4f ef       	ldi	r20, 0xFF	; 255
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 2c 03 	call	0x658	; 0x658 <signal_to_range>
     8b2:	90 93 b1 03 	sts	0x03B1, r25
     8b6:	80 93 b0 03 	sts	0x03B0, r24
     8ba:	80 91 b0 03 	lds	r24, 0x03B0
     8be:	90 91 b1 03 	lds	r25, 0x03B1
     8c2:	24 c0       	rjmp	.+72     	; 0x90c <read_control_input+0x146>
     8c4:	c0 90 ae 03 	lds	r12, 0x03AE
     8c8:	d0 90 af 03 	lds	r13, 0x03AF
     8cc:	84 e0       	ldi	r24, 0x04	; 4
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     8d4:	0f 2e       	mov	r0, r31
     8d6:	fa e0       	ldi	r31, 0x0A	; 10
     8d8:	af 2e       	mov	r10, r31
     8da:	b1 2c       	mov	r11, r1
     8dc:	f0 2d       	mov	r31, r0
     8de:	e1 2c       	mov	r14, r1
     8e0:	f1 2c       	mov	r15, r1
     8e2:	04 e6       	ldi	r16, 0x64	; 100
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	4f ef       	ldi	r20, 0xFF	; 255
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	0e 94 2c 03 	call	0x658	; 0x658 <signal_to_range>
     8f6:	90 93 af 03 	sts	0x03AF, r25
     8fa:	80 93 ae 03 	sts	0x03AE, r24
     8fe:	80 91 ae 03 	lds	r24, 0x03AE
     902:	90 91 af 03 	lds	r25, 0x03AF
     906:	02 c0       	rjmp	.+4      	; 0x90c <read_control_input+0x146>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	08 95       	ret

0000091e <initialize_control_input>:
     91e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <calibrate_joystick>
     922:	88 e5       	ldi	r24, 0x58	; 88
     924:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     928:	90 93 b5 03 	sts	0x03B5, r25
     92c:	80 93 b4 03 	sts	0x03B4, r24
     930:	89 e5       	ldi	r24, 0x59	; 89
     932:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     936:	90 93 b3 03 	sts	0x03B3, r25
     93a:	80 93 b2 03 	sts	0x03B2, r24
     93e:	8c e4       	ldi	r24, 0x4C	; 76
     940:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     944:	90 93 b1 03 	sts	0x03B1, r25
     948:	80 93 b0 03 	sts	0x03B0, r24
     94c:	82 e5       	ldi	r24, 0x52	; 82
     94e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
     952:	90 93 af 03 	sts	0x03AF, r25
     956:	80 93 ae 03 	sts	0x03AE, r24
     95a:	20 91 b6 03 	lds	r18, 0x03B6
     95e:	30 91 b7 03 	lds	r19, 0x03B7
     962:	80 91 b8 03 	lds	r24, 0x03B8
     966:	90 91 b9 03 	lds	r25, 0x03B9
     96a:	3f 93       	push	r19
     96c:	2f 93       	push	r18
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	82 e5       	ldi	r24, 0x52	; 82
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
     97e:	60 91 ae 03 	lds	r22, 0x03AE
     982:	70 91 af 03 	lds	r23, 0x03AF
     986:	40 91 b0 03 	lds	r20, 0x03B0
     98a:	50 91 b1 03 	lds	r21, 0x03B1
     98e:	20 91 b2 03 	lds	r18, 0x03B2
     992:	30 91 b3 03 	lds	r19, 0x03B3
     996:	80 91 b4 03 	lds	r24, 0x03B4
     99a:	90 91 b5 03 	lds	r25, 0x03B5
     99e:	7f 93       	push	r23
     9a0:	6f 93       	push	r22
     9a2:	5f 93       	push	r21
     9a4:	4f 93       	push	r20
     9a6:	3f 93       	push	r19
     9a8:	2f 93       	push	r18
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	8b e7       	ldi	r24, 0x7B	; 123
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
     9ba:	8d b7       	in	r24, 0x3d	; 61
     9bc:	9e b7       	in	r25, 0x3e	; 62
     9be:	40 96       	adiw	r24, 0x10	; 16
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	9e bf       	out	0x3e, r25	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	8d bf       	out	0x3d, r24	; 61
     9ca:	08 95       	ret

000009cc <SRAM_test>:
	sei();//enable interrupts
}

#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     9dc:	84 ea       	ldi	r24, 0xA4	; 164
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     9e4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <rand>
     9e8:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     9ea:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9ee:	c0 e0       	ldi	r28, 0x00	; 0
     9f0:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     9f2:	00 e0       	ldi	r16, 0x00	; 0
     9f4:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     9f6:	0f 2e       	mov	r0, r31
     9f8:	fa eb       	ldi	r31, 0xBA	; 186
     9fa:	ef 2e       	mov	r14, r31
     9fc:	f1 e0       	ldi	r31, 0x01	; 1
     9fe:	ff 2e       	mov	r15, r31
     a00:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a02:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <rand>
     a06:	fe 01       	movw	r30, r28
     a08:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     a0a:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     a0c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a0e:	28 17       	cp	r18, r24
     a10:	a9 f0       	breq	.+42     	; 0xa3c <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     a12:	99 27       	eor	r25, r25
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	1f 92       	push	r1
     a1a:	2f 93       	push	r18
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	ff 92       	push	r15
     a22:	ef 92       	push	r14
     a24:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
			write_errors++;
     a28:	0f 5f       	subi	r16, 0xFF	; 255
     a2a:	1f 4f       	sbci	r17, 0xFF	; 255
     a2c:	8d b7       	in	r24, 0x3d	; 61
     a2e:	9e b7       	in	r25, 0x3e	; 62
     a30:	08 96       	adiw	r24, 0x08	; 8
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	9e bf       	out	0x3e, r25	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a3c:	21 96       	adiw	r28, 0x01	; 1
     a3e:	c1 15       	cp	r28, r1
     a40:	98 e0       	ldi	r25, 0x08	; 8
     a42:	d9 07       	cpc	r29, r25
     a44:	f1 f6       	brne	.-68     	; 0xa02 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     a46:	c6 01       	movw	r24, r12
     a48:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a4c:	c0 e0       	ldi	r28, 0x00	; 0
     a4e:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)//CAN BE REMOVED, IN CASE OF LOW STORAGE
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     a50:	e1 2c       	mov	r14, r1
     a52:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a54:	0f 2e       	mov	r0, r31
     a56:	f3 ef       	ldi	r31, 0xF3	; 243
     a58:	cf 2e       	mov	r12, r31
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	df 2e       	mov	r13, r31
     a5e:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a60:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <rand>
     a64:	fe 01       	movw	r30, r28
     a66:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     a68:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a6a:	28 17       	cp	r18, r24
     a6c:	b1 f0       	breq	.+44     	; 0xa9a <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     a6e:	99 27       	eor	r25, r25
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	1f 92       	push	r1
     a76:	2f 93       	push	r18
     a78:	df 93       	push	r29
     a7a:	cf 93       	push	r28
     a7c:	df 92       	push	r13
     a7e:	cf 92       	push	r12
     a80:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
			retrieval_errors++;
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	e8 1a       	sub	r14, r24
     a88:	f8 0a       	sbc	r15, r24
     a8a:	8d b7       	in	r24, 0x3d	; 61
     a8c:	9e b7       	in	r25, 0x3e	; 62
     a8e:	08 96       	adiw	r24, 0x08	; 8
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	9e bf       	out	0x3e, r25	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	c1 15       	cp	r28, r1
     a9e:	98 e0       	ldi	r25, 0x08	; 8
     aa0:	d9 07       	cpc	r29, r25
     aa2:	f1 f6       	brne	.-68     	; 0xa60 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     aa4:	ff 92       	push	r15
     aa6:	ef 92       	push	r14
     aa8:	1f 93       	push	r17
     aaa:	0f 93       	push	r16
     aac:	80 e3       	ldi	r24, 0x30	; 48
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	08 95       	ret

00000ad6 <bootscreen>:


void bootscreen(void){
	int x = 24;
	int y = 61;
	sram_draw_line(x,y,x-15,y-60);//letter G
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	49 e0       	ldi	r20, 0x09	; 9
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	6d e3       	ldi	r22, 0x3D	; 61
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	88 e1       	ldi	r24, 0x18	; 24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	47 e2       	ldi	r20, 0x27	; 39
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	89 e0       	ldi	r24, 0x09	; 9
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x+15,y-60,x+12,y-48);
     afe:	2d e0       	ldi	r18, 0x0D	; 13
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	44 e2       	ldi	r20, 0x24	; 36
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	87 e2       	ldi	r24, 0x27	; 39
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x+12,y-48,x-6,y-48);
     b12:	2d e0       	ldi	r18, 0x0D	; 13
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	42 e1       	ldi	r20, 0x12	; 18
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	6d e0       	ldi	r22, 0x0D	; 13
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	84 e2       	ldi	r24, 0x24	; 36
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-6,y-48,x,y-24);
     b26:	25 e2       	ldi	r18, 0x25	; 37
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	48 e1       	ldi	r20, 0x18	; 24
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	6d e0       	ldi	r22, 0x0D	; 13
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	82 e1       	ldi	r24, 0x12	; 18
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x,y-24,x+3,y-36);
     b3a:	29 e1       	ldi	r18, 0x19	; 25
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	4b e1       	ldi	r20, 0x1B	; 27
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	65 e2       	ldi	r22, 0x25	; 37
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	88 e1       	ldi	r24, 0x18	; 24
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x+3,y-36,x+9,y-36);
     b4e:	29 e1       	ldi	r18, 0x19	; 25
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	41 e2       	ldi	r20, 0x21	; 33
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	69 e1       	ldi	r22, 0x19	; 25
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	8b e1       	ldi	r24, 0x1B	; 27
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x+9,y-36,x,y);//end of letter
     b62:	2d e3       	ldi	r18, 0x3D	; 61
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	48 e1       	ldi	r20, 0x18	; 24
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	69 e1       	ldi	r22, 0x19	; 25
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	81 e2       	ldi	r24, 0x21	; 33
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	
	
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);//number 1, end of number
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	45 e4       	ldi	r20, 0x45	; 69
     b7a:	6d e3       	ldi	r22, 0x3D	; 61
     b7c:	8b e3       	ldi	r24, 0x3B	; 59
     b7e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <sram_draw_rectangle>
	//sram_draw_triangle(x-7,y-60,x+7,y-60,x,y-30);//1
	//sram_draw_triangle(x-7,y,x+7,y,x,y-30);//1
	
	x += 40;
	
	sram_draw_line(x,y,x+15,y-60);//number 7
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	47 e7       	ldi	r20, 0x77	; 119
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	6d e3       	ldi	r22, 0x3D	; 61
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	88 e6       	ldi	r24, 0x68	; 104
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	47 e7       	ldi	r20, 0x77	; 119
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	89 e5       	ldi	r24, 0x59	; 89
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-15,y-60,x-12,y-48);
     baa:	2d e0       	ldi	r18, 0x0D	; 13
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4c e5       	ldi	r20, 0x5C	; 92
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	89 e5       	ldi	r24, 0x59	; 89
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-12,y-48,x+6,y-48);
     bbe:	2d e0       	ldi	r18, 0x0D	; 13
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	4e e6       	ldi	r20, 0x6E	; 110
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	6d e0       	ldi	r22, 0x0D	; 13
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	8c e5       	ldi	r24, 0x5C	; 92
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x+6,y-48,x+3,y-36);
     bd2:	29 e1       	ldi	r18, 0x19	; 25
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	4b e6       	ldi	r20, 0x6B	; 107
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	6d e0       	ldi	r22, 0x0D	; 13
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	8e e6       	ldi	r24, 0x6E	; 110
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x+3,y-36,x-9,y-36);
     be6:	29 e1       	ldi	r18, 0x19	; 25
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	4f e5       	ldi	r20, 0x5F	; 95
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	69 e1       	ldi	r22, 0x19	; 25
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	8b e6       	ldi	r24, 0x6B	; 107
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-9,y-36,x-6,y-24);
     bfa:	25 e2       	ldi	r18, 0x25	; 37
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	42 e6       	ldi	r20, 0x62	; 98
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	69 e1       	ldi	r22, 0x19	; 25
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	8f e5       	ldi	r24, 0x5F	; 95
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-6,y-24,x,y-24);
     c0e:	25 e2       	ldi	r18, 0x25	; 37
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	48 e6       	ldi	r20, 0x68	; 104
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	65 e2       	ldi	r22, 0x25	; 37
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	82 e6       	ldi	r24, 0x62	; 98
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x,y-24,x-3,y-12);
     c22:	21 e3       	ldi	r18, 0x31	; 49
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	45 e6       	ldi	r20, 0x65	; 101
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	65 e2       	ldi	r22, 0x25	; 37
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	88 e6       	ldi	r24, 0x68	; 104
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x-3,y-12,x,y);//end of number
     c36:	2d e3       	ldi	r18, 0x3D	; 61
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	48 e6       	ldi	r20, 0x68	; 104
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	61 e3       	ldi	r22, 0x31	; 49
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	85 e6       	ldi	r24, 0x65	; 101
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
     c4a:	08 95       	ret

00000c4c <initalize>:




void initalize(void){
	cli();//disable interrupts
     c4c:	f8 94       	cli
	init_UART(UBBR);
     c4e:	8f e1       	ldi	r24, 0x1F	; 31
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     c56:	87 e8       	ldi	r24, 0x87	; 135
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	80 e9       	ldi	r24, 0x90	; 144
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	8c e9       	ldi	r24, 0x9C	; 156
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	81 ea       	ldi	r24, 0xA1	; 161
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	9f 93       	push	r25
     c74:	8f 93       	push	r24
     c76:	0e 94 46 10 	call	0x208c	; 0x208c <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     c7a:	85 b7       	in	r24, 0x35	; 53
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     c80:	80 b7       	in	r24, 0x30	; 48
     c82:	80 62       	ori	r24, 0x20	; 32
     c84:	80 bf       	out	0x30, r24	; 48
	
	oled_ini();
     c86:	0e 94 56 09 	call	0x12ac	; 0x12ac <oled_ini>
	sram_init();
     c8a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sram_init>
	bootscreen();
     c8e:	0e 94 6b 05 	call	0xad6	; 0xad6 <bootscreen>
	write_screen();
     c92:	0e 94 0c 0c 	call	0x1818	; 0x1818 <write_screen>
	
	
	printf("OLED successfully initialized\n");
     c96:	87 ee       	ldi	r24, 0xE7	; 231
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <puts>
	initialize_menu();
     c9e:	0e 94 96 06 	call	0xd2c	; 0xd2c <initialize_menu>
	
	initialize_control_input();
     ca2:	0e 94 8f 04 	call	0x91e	; 0x91e <initialize_control_input>
	printf("control input successfully initialized\n\n");
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <puts>
	SRAM_test();
     cae:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SRAM_test>
	printf("SRAM successfully initialized\n");
     cb2:	8d e2       	ldi	r24, 0x2D	; 45
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <puts>
	initalize_interrupts();
     cba:	0e 94 4f 02 	call	0x49e	; 0x49e <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     cbe:	8b e4       	ldi	r24, 0x4B	; 75
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <puts>
	printf("Interrupts activated\n");
     cc6:	8f e6       	ldi	r24, 0x6F	; 111
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     cce:	84 e8       	ldi	r24, 0x84	; 132
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <puts>
	sei();//enable interrupts
     cd6:	78 94       	sei
     cd8:	8d b7       	in	r24, 0x3d	; 61
     cda:	9e b7       	in	r25, 0x3e	; 62
     cdc:	08 96       	adiw	r24, 0x08	; 8
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	9e bf       	out	0x3e, r25	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	8d bf       	out	0x3d, r24	; 61
     ce8:	08 95       	ret

00000cea <main>:
#include "menu.h"

int main(void)
{
	
	initalize();
     cea:	0e 94 26 06 	call	0xc4c	; 0xc4c <initalize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cee:	2f ef       	ldi	r18, 0xFF	; 255
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	9e e0       	ldi	r25, 0x0E	; 14
     cf4:	21 50       	subi	r18, 0x01	; 1
     cf6:	80 40       	sbci	r24, 0x00	; 0
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <main+0xa>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <main+0x14>
     cfe:	00 00       	nop
	
	_delay_ms(1000);
	sram_init();
     d00:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sram_init>
	oled_goto_line(7);
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
	sram_write_string(" - BYGGERN - G17");
     d0c:	8d e9       	ldi	r24, 0x9D	; 157
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	8f e7       	ldi	r24, 0x7F	; 127
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	21 50       	subi	r18, 0x01	; 1
     d1c:	80 40       	sbci	r24, 0x00	; 0
     d1e:	90 40       	sbci	r25, 0x00	; 0
     d20:	e1 f7       	brne	.-8      	; 0xd1a <main+0x30>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <main+0x3a>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <main+0x3c>
	
	
	while(1){
		_delay_ms(100);
		menu_update();
     d26:	0e 94 76 08 	call	0x10ec	; 0x10ec <menu_update>
     d2a:	f4 cf       	rjmp	.-24     	; 0xd14 <main+0x2a>

00000d2c <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d30:	c1 e1       	ldi	r28, 0x11	; 17
     d32:	d4 e0       	ldi	r29, 0x04	; 4
     d34:	d0 93 f8 03 	sts	0x03F8, r29
     d38:	c0 93 f7 03 	sts	0x03F7, r28
	new_menu->ptr_child = ptr_child;
     d3c:	10 92 fa 03 	sts	0x03FA, r1
     d40:	10 92 f9 03 	sts	0x03F9, r1
	new_menu->ptr_parent = ptr_parent;
     d44:	10 92 fc 03 	sts	0x03FC, r1
     d48:	10 92 fb 03 	sts	0x03FB, r1
	
	new_menu->title = title;
     d4c:	e3 ef       	ldi	r30, 0xF3	; 243
     d4e:	f3 e0       	ldi	r31, 0x03	; 3
     d50:	8a ee       	ldi	r24, 0xEA	; 234
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 f6 03 	sts	0x03F6, r25
     d60:	80 93 f5 03 	sts	0x03F5, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d64:	25 ec       	ldi	r18, 0xC5	; 197
     d66:	33 e0       	ldi	r19, 0x03	; 3
     d68:	30 93 16 04 	sts	0x0416, r19
     d6c:	20 93 15 04 	sts	0x0415, r18
	new_menu->ptr_child = ptr_child;
     d70:	6d ef       	ldi	r22, 0xFD	; 253
     d72:	73 e0       	ldi	r23, 0x03	; 3
     d74:	70 93 18 04 	sts	0x0418, r23
     d78:	60 93 17 04 	sts	0x0417, r22
	new_menu->ptr_parent = ptr_parent;
     d7c:	10 92 1a 04 	sts	0x041A, r1
     d80:	10 92 19 04 	sts	0x0419, r1
	
	new_menu->title = title;
     d84:	44 ee       	ldi	r20, 0xE4	; 228
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	59 83       	std	Y+1, r21	; 0x01
     d8a:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     d8c:	90 93 14 04 	sts	0x0414, r25
     d90:	80 93 13 04 	sts	0x0413, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d94:	f0 93 ca 03 	sts	0x03CA, r31
     d98:	e0 93 c9 03 	sts	0x03C9, r30
	new_menu->ptr_child = ptr_child;
     d9c:	cf ed       	ldi	r28, 0xDF	; 223
     d9e:	d3 e0       	ldi	r29, 0x03	; 3
     da0:	d0 93 cc 03 	sts	0x03CC, r29
     da4:	c0 93 cb 03 	sts	0x03CB, r28
	new_menu->ptr_parent = ptr_parent;
     da8:	10 92 ce 03 	sts	0x03CE, r1
     dac:	10 92 cd 03 	sts	0x03CD, r1
	
	new_menu->title = title;
     db0:	4c ed       	ldi	r20, 0xDC	; 220
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	d9 01       	movw	r26, r18
     db6:	4d 93       	st	X+, r20
     db8:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     dba:	90 93 c8 03 	sts	0x03C8, r25
     dbe:	80 93 c7 03 	sts	0x03C7, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     dc2:	29 ee       	ldi	r18, 0xE9	; 233
     dc4:	33 e0       	ldi	r19, 0x03	; 3
     dc6:	30 93 e4 03 	sts	0x03E4, r19
     dca:	20 93 e3 03 	sts	0x03E3, r18
	new_menu->ptr_child = ptr_child;
     dce:	10 92 e6 03 	sts	0x03E6, r1
     dd2:	10 92 e5 03 	sts	0x03E5, r1
	new_menu->ptr_parent = ptr_parent;
     dd6:	f0 93 e8 03 	sts	0x03E8, r31
     dda:	e0 93 e7 03 	sts	0x03E7, r30
	
	new_menu->title = title;
     dde:	86 ed       	ldi	r24, 0xD6	; 214
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	99 83       	std	Y+1, r25	; 0x01
     de4:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 e2 03 	sts	0x03E2, r25
     dee:	80 93 e1 03 	sts	0x03E1, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     df2:	d0 93 ee 03 	sts	0x03EE, r29
     df6:	c0 93 ed 03 	sts	0x03ED, r28
	new_menu->ptr_child = ptr_child;
     dfa:	10 92 f0 03 	sts	0x03F0, r1
     dfe:	10 92 ef 03 	sts	0x03EF, r1
	new_menu->ptr_parent = ptr_parent;
     e02:	f0 93 f2 03 	sts	0x03F2, r31
     e06:	e0 93 f1 03 	sts	0x03F1, r30
	
	new_menu->title = title;
     e0a:	4d ec       	ldi	r20, 0xCD	; 205
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	d9 01       	movw	r26, r18
     e10:	4d 93       	st	X+, r20
     e12:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     e14:	90 93 ec 03 	sts	0x03EC, r25
     e18:	80 93 eb 03 	sts	0x03EB, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     e1c:	c7 e0       	ldi	r28, 0x07	; 7
     e1e:	d4 e0       	ldi	r29, 0x04	; 4
     e20:	d0 93 02 04 	sts	0x0402, r29
     e24:	c0 93 01 04 	sts	0x0401, r28
	new_menu->ptr_child = ptr_child;
     e28:	10 92 04 04 	sts	0x0404, r1
     e2c:	10 92 03 04 	sts	0x0403, r1
	new_menu->ptr_parent = ptr_parent;
     e30:	f0 93 06 04 	sts	0x0406, r31
     e34:	e0 93 05 04 	sts	0x0405, r30
	
	new_menu->title = title;
     e38:	22 ec       	ldi	r18, 0xC2	; 194
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	db 01       	movw	r26, r22
     e3e:	2d 93       	st	X+, r18
     e40:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     e42:	90 93 00 04 	sts	0x0400, r25
     e46:	80 93 ff 03 	sts	0x03FF, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     e4a:	70 93 0c 04 	sts	0x040C, r23
     e4e:	60 93 0b 04 	sts	0x040B, r22
	new_menu->ptr_child = ptr_child;
     e52:	10 92 0e 04 	sts	0x040E, r1
     e56:	10 92 0d 04 	sts	0x040D, r1
	new_menu->ptr_parent = ptr_parent;
     e5a:	f0 93 10 04 	sts	0x0410, r31
     e5e:	e0 93 0f 04 	sts	0x040F, r30
	
	new_menu->title = title;
     e62:	28 eb       	ldi	r18, 0xB8	; 184
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	39 83       	std	Y+1, r19	; 0x01
     e68:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     e6a:	90 93 0a 04 	sts	0x040A, r25
     e6e:	80 93 09 04 	sts	0x0409, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     e72:	f0 93 c2 03 	sts	0x03C2, r31
     e76:	e0 93 c1 03 	sts	0x03C1, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     e7a:	f0 93 c4 03 	sts	0x03C4, r31
     e7e:	e0 93 c3 03 	sts	0x03C3, r30
	
}
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <menu_left_button_flag>:
	return 0;
	
}

void menu_left_button_flag(void){
	left_button_flag = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 ba 03 	sts	0x03BA, r24
     e8e:	08 95       	ret

00000e90 <menu_right_button_flag>:
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 bb 03 	sts	0x03BB, r24
     e96:	08 95       	ret

00000e98 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
     ea0:	60 ea       	ldi	r22, 0xA0	; 160
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	8f ec       	ldi	r24, 0xCF	; 207
     ea6:	93 e0       	ldi	r25, 0x03	; 3
     ea8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <strcpy_P>
	sram_write_string(temp);
     eac:	8f ec       	ldi	r24, 0xCF	; 207
     eae:	93 e0       	ldi	r25, 0x03	; 3
     eb0:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
	sram_clear_line(1);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <sram_clear_line>
	oled_goto_line(2);
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
	strcpy_P(temp,btn_1);
     ec4:	60 eb       	ldi	r22, 0xB0	; 176
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	8f ec       	ldi	r24, 0xCF	; 207
     eca:	93 e0       	ldi	r25, 0x03	; 3
     ecc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <strcpy_P>
	sram_write_string(temp);
     ed0:	8f ec       	ldi	r24, 0xCF	; 207
     ed2:	93 e0       	ldi	r25, 0x03	; 3
     ed4:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
	write_screen();
     ed8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <write_screen>
	while (right_button_flag == 0){	
     edc:	80 91 bb 03 	lds	r24, 0x03BB
     ee0:	81 11       	cpse	r24, r1
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <menu_set_contrast+0x6a>
		write_c(0x81);
     ee4:	81 e8       	ldi	r24, 0x81	; 129
     ee6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <write_c>
		write_c(readADC(3)/2);
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     ef2:	96 95       	lsr	r25
     ef4:	87 95       	ror	r24
     ef6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	write_screen();
	while (right_button_flag == 0){	
     efa:	80 91 bb 03 	lds	r24, 0x03BB
     efe:	88 23       	and	r24, r24
     f00:	89 f3       	breq	.-30     	; 0xee4 <menu_set_contrast+0x4c>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	right_button_flag = 0;
     f02:	10 92 bb 03 	sts	0x03BB, r1
     f06:	08 95       	ret

00000f08 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	c0 e0       	ldi	r28, 0x00	; 0
     f12:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 7; i++){
		sram_clear_line(i);
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <sram_clear_line>
     f1a:	21 96       	adiw	r28, 0x01	; 1
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
     f1c:	c7 30       	cpi	r28, 0x07	; 7
     f1e:	d1 05       	cpc	r29, r1
     f20:	c9 f7       	brne	.-14     	; 0xf14 <menu_calibrate_joystick+0xc>
		sram_clear_line(i);
	}
	oled_goto_line(0);
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
     f2a:	69 e9       	ldi	r22, 0x99	; 153
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	8f ec       	ldi	r24, 0xCF	; 207
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <strcpy_P>
	sram_write_string(temp);
     f36:	8f ec       	ldi	r24, 0xCF	; 207
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
	oled_goto_line(2);
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
	strcpy_P(temp,btn_1);
     f46:	60 eb       	ldi	r22, 0xB0	; 176
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	8f ec       	ldi	r24, 0xCF	; 207
     f4c:	93 e0       	ldi	r25, 0x03	; 3
     f4e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <strcpy_P>
	sram_write_string(temp);
     f52:	8f ec       	ldi	r24, 0xCF	; 207
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
	write_screen();
     f5a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <write_screen>
	while (right_button_flag == 0){
     f5e:	80 91 bb 03 	lds	r24, 0x03BB
     f62:	81 11       	cpse	r24, r1
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <menu_calibrate_joystick+0x72>
     f66:	8c ec       	ldi	r24, 0xCC	; 204
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <menu_calibrate_joystick+0x62>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <menu_calibrate_joystick+0x68>
     f70:	00 00       	nop
     f72:	80 91 bb 03 	lds	r24, 0x03BB
     f76:	88 23       	and	r24, r24
     f78:	b1 f3       	breq	.-20     	; 0xf66 <menu_calibrate_joystick+0x5e>
		_delay_ms(1);
	}
	right_button_flag = 0;
     f7a:	10 92 bb 03 	sts	0x03BB, r1
	
	
	oled_clear_line(0);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
     f86:	6b e8       	ldi	r22, 0x8B	; 139
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	8f ec       	ldi	r24, 0xCF	; 207
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <strcpy_P>
	sram_write_string(temp);
     f92:	8f ec       	ldi	r24, 0xCF	; 207
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
     f9a:	c0 e7       	ldi	r28, 0x70	; 112
     f9c:	d0 e0       	ldi	r29, 0x00	; 0
     f9e:	08 e7       	ldi	r16, 0x78	; 120
     fa0:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
     faa:	fe 01       	movw	r30, r28
     fac:	65 91       	lpm	r22, Z+
     fae:	74 91       	lpm	r23, Z
     fb0:	8f ec       	ldi	r24, 0xCF	; 207
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <strcpy_P>
		sram_write_string(temp);
     fb8:	8f ec       	ldi	r24, 0xCF	; 207
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
		write_screen();
     fc0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <write_screen>
		while (right_button_flag == 0){
     fc4:	80 91 bb 03 	lds	r24, 0x03BB
     fc8:	81 11       	cpse	r24, r1
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <menu_calibrate_joystick+0xd8>
     fcc:	8c ec       	ldi	r24, 0xCC	; 204
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <menu_calibrate_joystick+0xc8>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <menu_calibrate_joystick+0xce>
     fd6:	00 00       	nop
     fd8:	80 91 bb 03 	lds	r24, 0x03BB
     fdc:	88 23       	and	r24, r24
     fde:	b1 f3       	breq	.-20     	; 0xfcc <menu_calibrate_joystick+0xc4>
			_delay_ms(1);
		}
		right_button_flag = 0;
     fe0:	10 92 bb 03 	sts	0x03BB, r1
     fe4:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
     fe6:	c0 17       	cp	r28, r16
     fe8:	d1 07       	cpc	r29, r17
     fea:	d9 f6       	brne	.-74     	; 0xfa2 <menu_calibrate_joystick+0x9a>
		while (right_button_flag == 0){
			_delay_ms(1);
		}
		right_button_flag = 0;
	}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	08 95       	ret

00000ff6 <menu_function_selected>:
void menu_right_button_flag(void){
	right_button_flag = 1;
}

void menu_function_selected(void){
	if(current_selected == &option_1){
     ff6:	80 91 c3 03 	lds	r24, 0x03C3
     ffa:	90 91 c4 03 	lds	r25, 0x03C4
     ffe:	23 e0       	ldi	r18, 0x03	; 3
    1000:	89 3e       	cpi	r24, 0xE9	; 233
    1002:	92 07       	cpc	r25, r18
    1004:	19 f4       	brne	.+6      	; 0x100c <menu_function_selected+0x16>
		menu_set_contrast();
    1006:	0e 94 4c 07 	call	0xe98	; 0xe98 <menu_set_contrast>
    100a:	08 95       	ret
	}else if(current_selected == &debug_1){
    100c:	87 50       	subi	r24, 0x07	; 7
    100e:	94 40       	sbci	r25, 0x04	; 4
    1010:	11 f4       	brne	.+4      	; 0x1016 <menu_function_selected+0x20>
		menu_calibrate_joystick();
    1012:	0e 94 84 07 	call	0xf08	; 0xf08 <menu_calibrate_joystick>
    1016:	08 95       	ret

00001018 <navigate_menu>:
}



int navigate_menu(void){
	int joystick_reading_y = read_control_input('Y');
    1018:	89 e5       	ldi	r24, 0x59	; 89
    101a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <read_control_input>
	
	if(joystick_reading_y > NAVIGATION_TRHESHOLD){
    101e:	87 34       	cpi	r24, 0x47	; 71
    1020:	91 05       	cpc	r25, r1
    1022:	ec f0       	brlt	.+58     	; 0x105e <navigate_menu+0x46>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    1024:	e0 91 c3 03 	lds	r30, 0x03C3
    1028:	f0 91 c4 03 	lds	r31, 0x03C4
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	18 16       	cp	r1, r24
    1034:	19 06       	cpc	r1, r25
    1036:	0c f0       	brlt	.+2      	; 0x103a <navigate_menu+0x22>
    1038:	56 c0       	rjmp	.+172    	; 0x10e6 <navigate_menu+0xce>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    103e:	04 80       	ldd	r0, Z+4	; 0x04
    1040:	f5 81       	ldd	r31, Z+5	; 0x05
    1042:	e0 2d       	mov	r30, r0

int navigate_menu(void){
	int joystick_reading_y = read_control_input('Y');
	
	if(joystick_reading_y > NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	22 81       	ldd	r18, Z+2	; 0x02
    1048:	33 81       	ldd	r19, Z+3	; 0x03
    104a:	21 50       	subi	r18, 0x01	; 1
    104c:	31 09       	sbc	r19, r1
    104e:	82 17       	cp	r24, r18
    1050:	93 07       	cpc	r25, r19
    1052:	ac f3       	brlt	.-22     	; 0x103e <navigate_menu+0x26>
    1054:	f0 93 c4 03 	sts	0x03C4, r31
    1058:	e0 93 c3 03 	sts	0x03C3, r30
    105c:	44 c0       	rjmp	.+136    	; 0x10e6 <navigate_menu+0xce>
			current_selected = current_selected->ptr_sib_down;
		}
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
    105e:	8a 3b       	cpi	r24, 0xBA	; 186
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	5c f4       	brge	.+22     	; 0x107a <navigate_menu+0x62>
		current_selected = current_selected->ptr_sib_down;
    1064:	e0 91 c3 03 	lds	r30, 0x03C3
    1068:	f0 91 c4 03 	lds	r31, 0x03C4
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	90 93 c4 03 	sts	0x03C4, r25
    1074:	80 93 c3 03 	sts	0x03C3, r24
    1078:	36 c0       	rjmp	.+108    	; 0x10e6 <navigate_menu+0xce>
	}else if (right_button_flag == 1)
    107a:	80 91 bb 03 	lds	r24, 0x03BB
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	b1 f4       	brne	.+44     	; 0x10ae <navigate_menu+0x96>
	{
		right_button_flag = 0;
    1082:	10 92 bb 03 	sts	0x03BB, r1
		if(current_selected->ptr_child != NULL){
    1086:	e0 91 c3 03 	lds	r30, 0x03C3
    108a:	f0 91 c4 03 	lds	r31, 0x03C4
    108e:	86 81       	ldd	r24, Z+6	; 0x06
    1090:	97 81       	ldd	r25, Z+7	; 0x07
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	49 f0       	breq	.+18     	; 0x10a8 <navigate_menu+0x90>
			current_head = current_selected->ptr_child;
    1096:	90 93 c2 03 	sts	0x03C2, r25
    109a:	80 93 c1 03 	sts	0x03C1, r24
			current_selected = current_selected->ptr_child;
    109e:	90 93 c4 03 	sts	0x03C4, r25
    10a2:	80 93 c3 03 	sts	0x03C3, r24
    10a6:	1f c0       	rjmp	.+62     	; 0x10e6 <navigate_menu+0xce>
		}else{
			menu_function_selected();
    10a8:	0e 94 fb 07 	call	0xff6	; 0xff6 <menu_function_selected>
    10ac:	1c c0       	rjmp	.+56     	; 0x10e6 <navigate_menu+0xce>
		}
	}else if (left_button_flag == 1){
    10ae:	80 91 ba 03 	lds	r24, 0x03BA
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	c1 f4       	brne	.+48     	; 0x10e6 <navigate_menu+0xce>
		left_button_flag = 0;
    10b6:	10 92 ba 03 	sts	0x03BA, r1
		if (current_selected->ptr_parent != NULL){
    10ba:	e0 91 c3 03 	lds	r30, 0x03C3
    10be:	f0 91 c4 03 	lds	r31, 0x03C4
    10c2:	80 85       	ldd	r24, Z+8	; 0x08
    10c4:	91 85       	ldd	r25, Z+9	; 0x09
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <navigate_menu+0xce>
			current_head = current_head->ptr_parent;
    10ca:	e0 91 c1 03 	lds	r30, 0x03C1
    10ce:	f0 91 c2 03 	lds	r31, 0x03C2
    10d2:	20 85       	ldd	r18, Z+8	; 0x08
    10d4:	31 85       	ldd	r19, Z+9	; 0x09
    10d6:	30 93 c2 03 	sts	0x03C2, r19
    10da:	20 93 c1 03 	sts	0x03C1, r18
			current_selected = current_selected->ptr_parent;
    10de:	90 93 c4 03 	sts	0x03C4, r25
    10e2:	80 93 c3 03 	sts	0x03C3, r24
		}
	}
	return 0;
	
}
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	08 95       	ret

000010ec <menu_update>:
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
	
}

void menu_update(void){
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    10f4:	0e 94 0c 08 	call	0x1018	; 0x1018 <navigate_menu>
    10f8:	89 2b       	or	r24, r25
    10fa:	09 f0       	breq	.+2      	; 0x10fe <menu_update+0x12>
    10fc:	4c c0       	rjmp	.+152    	; 0x1196 <menu_update+0xaa>
    10fe:	c0 e0       	ldi	r28, 0x00	; 0
    1100:	d0 e0       	ldi	r29, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    1102:	ce 01       	movw	r24, r28
    1104:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <sram_clear_line>

void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    1108:	21 96       	adiw	r28, 0x01	; 1
    110a:	c7 30       	cpi	r28, 0x07	; 7
    110c:	d1 05       	cpc	r29, r1
    110e:	c9 f7       	brne	.-14     	; 0x1102 <menu_update+0x16>
			sram_clear_line(j);
		}

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
    1110:	e0 91 c1 03 	lds	r30, 0x03C1
    1114:	f0 91 c2 03 	lds	r31, 0x03C2
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	18 16       	cp	r1, r24
    111e:	19 06       	cpc	r1, r25
    1120:	d4 f5       	brge	.+116    	; 0x1196 <menu_update+0xaa>
    1122:	c0 e0       	ldi	r28, 0x00	; 0
    1124:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1126:	10 e8       	ldi	r17, 0x80	; 128
    1128:	01 e8       	ldi	r16, 0x81	; 129

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    112a:	ce 01       	movw	r24, r28
    112c:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
			oled_goto_column(0);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 2d 09 	call	0x125a	; 0x125a <oled_goto_column>
			strcpy_P(temp,current_head->title);
    1138:	e0 91 c1 03 	lds	r30, 0x03C1
    113c:	f0 91 c2 03 	lds	r31, 0x03C2
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	8f ec       	ldi	r24, 0xCF	; 207
    1146:	93 e0       	ldi	r25, 0x03	; 3
    1148:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    114c:	20 91 c1 03 	lds	r18, 0x03C1
    1150:	30 91 c2 03 	lds	r19, 0x03C2
    1154:	80 91 c3 03 	lds	r24, 0x03C3
    1158:	90 91 c4 03 	lds	r25, 0x03C4
    115c:	28 17       	cp	r18, r24
    115e:	39 07       	cpc	r19, r25
    1160:	11 f4       	brne	.+4      	; 0x1166 <menu_update+0x7a>
    1162:	80 2f       	mov	r24, r16
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <menu_update+0x7c>
    1166:	81 2f       	mov	r24, r17
    1168:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    116c:	8f ec       	ldi	r24, 0xCF	; 207
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	0e 94 40 0a 	call	0x1480	; 0x1480 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    1174:	e0 91 c1 03 	lds	r30, 0x03C1
    1178:	f0 91 c2 03 	lds	r31, 0x03C2
    117c:	04 80       	ldd	r0, Z+4	; 0x04
    117e:	f5 81       	ldd	r31, Z+5	; 0x05
    1180:	e0 2d       	mov	r30, r0
    1182:	f0 93 c2 03 	sts	0x03C2, r31
    1186:	e0 93 c1 03 	sts	0x03C1, r30
			sram_clear_line(j);
		}

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
    118a:	21 96       	adiw	r28, 0x01	; 1
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	c8 17       	cp	r28, r24
    1192:	d9 07       	cpc	r29, r25
    1194:	54 f2       	brlt	.-108    	; 0x112a <menu_update+0x3e>
			sram_write_string(temp);
			current_head = current_head->ptr_sib_down;
		}
		
}
	oled_goto_line(7);
    1196:	87 e0       	ldi	r24, 0x07	; 7
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>

	sram_scroll_data(7,8);
    119e:	68 e0       	ldi	r22, 0x08	; 8
    11a0:	87 e0       	ldi	r24, 0x07	; 7
    11a2:	0e 94 94 0c 	call	0x1928	; 0x1928 <sram_scroll_data>
	write_screen();
    11a6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <write_screen>
}
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <write_c>:

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    11b4:	e0 91 0e 01 	lds	r30, 0x010E
    11b8:	f0 91 0f 01 	lds	r31, 0x010F
    11bc:	80 83       	st	Z, r24
    11be:	08 95       	ret

000011c0 <oled_home>:
	}
}

void oled_home(void)
{
	page_sram = 0;
    11c0:	10 92 c0 03 	sts	0x03C0, r1
    11c4:	10 92 bf 03 	sts	0x03BF, r1
	col_sram = 0;
    11c8:	10 92 be 03 	sts	0x03BE, r1
    11cc:	10 92 bd 03 	sts	0x03BD, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    11d0:	e0 91 0e 01 	lds	r30, 0x010E
    11d4:	f0 91 0f 01 	lds	r31, 0x010F
    11d8:	81 e2       	ldi	r24, 0x21	; 33
    11da:	80 83       	st	Z, r24
    11dc:	e0 91 0e 01 	lds	r30, 0x010E
    11e0:	f0 91 0f 01 	lds	r31, 0x010F
    11e4:	10 82       	st	Z, r1
    11e6:	e0 91 0e 01 	lds	r30, 0x010E
    11ea:	f0 91 0f 01 	lds	r31, 0x010F
    11ee:	8f e7       	ldi	r24, 0x7F	; 127
    11f0:	80 83       	st	Z, r24
    11f2:	e0 91 0e 01 	lds	r30, 0x010E
    11f6:	f0 91 0f 01 	lds	r31, 0x010F
    11fa:	82 e2       	ldi	r24, 0x22	; 34
    11fc:	80 83       	st	Z, r24
    11fe:	e0 91 0e 01 	lds	r30, 0x010E
    1202:	f0 91 0f 01 	lds	r31, 0x010F
    1206:	10 82       	st	Z, r1
    1208:	e0 91 0e 01 	lds	r30, 0x010E
    120c:	f0 91 0f 01 	lds	r31, 0x010F
    1210:	87 e0       	ldi	r24, 0x07	; 7
    1212:	80 83       	st	Z, r24
    1214:	08 95       	ret

00001216 <oled_goto_line>:
	//write_c(0x10);
}



void oled_goto_line(unsigned int line){
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
	oled_home();
    121c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <oled_home>
	page_sram = line;
    1220:	d0 93 c0 03 	sts	0x03C0, r29
    1224:	c0 93 bf 03 	sts	0x03BF, r28
	if(line%8){
    1228:	ce 01       	movw	r24, r28
    122a:	87 70       	andi	r24, 0x07	; 7
    122c:	99 27       	eor	r25, r25
    122e:	89 2b       	or	r24, r25
    1230:	89 f0       	breq	.+34     	; 0x1254 <oled_goto_line+0x3e>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1232:	e0 91 0e 01 	lds	r30, 0x010E
    1236:	f0 91 0f 01 	lds	r31, 0x010F
    123a:	10 82       	st	Z, r1
    123c:	e0 91 0e 01 	lds	r30, 0x010E
    1240:	f0 91 0f 01 	lds	r31, 0x010F
    1244:	80 e1       	ldi	r24, 0x10	; 16
    1246:	80 83       	st	Z, r24
	oled_home();
	page_sram = line;
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
    1248:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    124a:	e0 91 0e 01 	lds	r30, 0x010E
    124e:	f0 91 0f 01 	lds	r31, 0x010F
    1252:	c0 83       	st	Z, r28
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <oled_goto_column>:


void oled_goto_column(unsigned int column){
	col_sram = column%128;
    125a:	8f 77       	andi	r24, 0x7F	; 127
    125c:	99 27       	eor	r25, r25
    125e:	90 93 be 03 	sts	0x03BE, r25
    1262:	80 93 bd 03 	sts	0x03BD, r24
    1266:	08 95       	ret

00001268 <oled_clear_line>:
}

void oled_clear_line(unsigned int line){
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    126e:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
	if(line < 8){
    1272:	28 97       	sbiw	r28, 0x08	; 8
    1274:	50 f4       	brcc	.+20     	; 0x128a <oled_clear_line+0x22>
    1276:	80 e8       	ldi	r24, 0x80	; 128
    1278:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    127a:	e0 91 0c 01 	lds	r30, 0x010C
    127e:	f0 91 0d 01 	lds	r31, 0x010D
    1282:	10 82       	st	Z, r1
    1284:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	c1 f7       	brne	.-16     	; 0x127a <oled_clear_line+0x12>
			write_d(0b00000000);
		}
	}
} 
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <oled_reset>:

}


void oled_reset(void)
{		
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
    1294:	c0 e0       	ldi	r28, 0x00	; 0
    1296:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
    1298:	ce 01       	movw	r24, r28
    129a:	0e 94 34 09 	call	0x1268	; 0x1268 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
    129e:	21 96       	adiw	r28, 0x01	; 1
    12a0:	c8 30       	cpi	r28, 0x08	; 8
    12a2:	d1 05       	cpc	r29, r1
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <oled_reset+0x8>
		oled_clear_line(i);
	}
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    12ac:	85 b7       	in	r24, 0x35	; 53
    12ae:	80 68       	ori	r24, 0x80	; 128
    12b0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    12b2:	80 b7       	in	r24, 0x30	; 48
    12b4:	80 62       	ori	r24, 0x20	; 32
    12b6:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    12b8:	e0 91 0e 01 	lds	r30, 0x010E
    12bc:	f0 91 0f 01 	lds	r31, 0x010F
    12c0:	8e ea       	ldi	r24, 0xAE	; 174
    12c2:	80 83       	st	Z, r24
    12c4:	e0 91 0e 01 	lds	r30, 0x010E
    12c8:	f0 91 0f 01 	lds	r31, 0x010F
    12cc:	81 ea       	ldi	r24, 0xA1	; 161
    12ce:	80 83       	st	Z, r24
    12d0:	e0 91 0e 01 	lds	r30, 0x010E
    12d4:	f0 91 0f 01 	lds	r31, 0x010F
    12d8:	8a ed       	ldi	r24, 0xDA	; 218
    12da:	80 83       	st	Z, r24
    12dc:	e0 91 0e 01 	lds	r30, 0x010E
    12e0:	f0 91 0f 01 	lds	r31, 0x010F
    12e4:	82 e1       	ldi	r24, 0x12	; 18
    12e6:	80 83       	st	Z, r24
    12e8:	e0 91 0e 01 	lds	r30, 0x010E
    12ec:	f0 91 0f 01 	lds	r31, 0x010F
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	80 83       	st	Z, r24
    12f4:	e0 91 0e 01 	lds	r30, 0x010E
    12f8:	f0 91 0f 01 	lds	r31, 0x010F
    12fc:	88 ea       	ldi	r24, 0xA8	; 168
    12fe:	80 83       	st	Z, r24
    1300:	e0 91 0e 01 	lds	r30, 0x010E
    1304:	f0 91 0f 01 	lds	r31, 0x010F
    1308:	8f e3       	ldi	r24, 0x3F	; 63
    130a:	80 83       	st	Z, r24
    130c:	e0 91 0e 01 	lds	r30, 0x010E
    1310:	f0 91 0f 01 	lds	r31, 0x010F
    1314:	85 ed       	ldi	r24, 0xD5	; 213
    1316:	80 83       	st	Z, r24
    1318:	e0 91 0e 01 	lds	r30, 0x010E
    131c:	f0 91 0f 01 	lds	r31, 0x010F
    1320:	80 e8       	ldi	r24, 0x80	; 128
    1322:	80 83       	st	Z, r24
    1324:	e0 91 0e 01 	lds	r30, 0x010E
    1328:	f0 91 0f 01 	lds	r31, 0x010F
    132c:	81 e8       	ldi	r24, 0x81	; 129
    132e:	80 83       	st	Z, r24
    1330:	e0 91 0e 01 	lds	r30, 0x010E
    1334:	f0 91 0f 01 	lds	r31, 0x010F
    1338:	80 e5       	ldi	r24, 0x50	; 80
    133a:	80 83       	st	Z, r24
    133c:	e0 91 0e 01 	lds	r30, 0x010E
    1340:	f0 91 0f 01 	lds	r31, 0x010F
    1344:	89 ed       	ldi	r24, 0xD9	; 217
    1346:	80 83       	st	Z, r24
    1348:	e0 91 0e 01 	lds	r30, 0x010E
    134c:	f0 91 0f 01 	lds	r31, 0x010F
    1350:	81 e2       	ldi	r24, 0x21	; 33
    1352:	80 83       	st	Z, r24
    1354:	e0 91 0e 01 	lds	r30, 0x010E
    1358:	f0 91 0f 01 	lds	r31, 0x010F
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	80 83       	st	Z, r24
    1360:	e0 91 0e 01 	lds	r30, 0x010E
    1364:	f0 91 0f 01 	lds	r31, 0x010F
    1368:	10 82       	st	Z, r1
    136a:	e0 91 0e 01 	lds	r30, 0x010E
    136e:	f0 91 0f 01 	lds	r31, 0x010F
    1372:	8b ed       	ldi	r24, 0xDB	; 219
    1374:	80 83       	st	Z, r24
    1376:	e0 91 0e 01 	lds	r30, 0x010E
    137a:	f0 91 0f 01 	lds	r31, 0x010F
    137e:	80 e3       	ldi	r24, 0x30	; 48
    1380:	80 83       	st	Z, r24
    1382:	e0 91 0e 01 	lds	r30, 0x010E
    1386:	f0 91 0f 01 	lds	r31, 0x010F
    138a:	8d ea       	ldi	r24, 0xAD	; 173
    138c:	80 83       	st	Z, r24
    138e:	e0 91 0e 01 	lds	r30, 0x010E
    1392:	f0 91 0f 01 	lds	r31, 0x010F
    1396:	10 82       	st	Z, r1
    1398:	e0 91 0e 01 	lds	r30, 0x010E
    139c:	f0 91 0f 01 	lds	r31, 0x010F
    13a0:	84 ea       	ldi	r24, 0xA4	; 164
    13a2:	80 83       	st	Z, r24
    13a4:	e0 91 0e 01 	lds	r30, 0x010E
    13a8:	f0 91 0f 01 	lds	r31, 0x010F
    13ac:	86 ea       	ldi	r24, 0xA6	; 166
    13ae:	80 83       	st	Z, r24
    13b0:	e0 91 0e 01 	lds	r30, 0x010E
    13b4:	f0 91 0f 01 	lds	r31, 0x010F
    13b8:	8f ea       	ldi	r24, 0xAF	; 175
    13ba:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
    13bc:	0e 94 48 09 	call	0x1290	; 0x1290 <oled_reset>
	oled_home();
    13c0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <oled_home>
    13c4:	08 95       	ret

000013c6 <sram_write_char>:
	}
}


int sram_write_char(char letter){
	if (letter == '\n'){
    13c6:	8a 30       	cpi	r24, 0x0A	; 10
    13c8:	91 f4       	brne	.+36     	; 0x13ee <sram_write_char+0x28>
		page_sram = (page_sram+1)%8;
    13ca:	80 91 bf 03 	lds	r24, 0x03BF
    13ce:	90 91 c0 03 	lds	r25, 0x03C0
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	87 70       	andi	r24, 0x07	; 7
    13d6:	99 27       	eor	r25, r25
    13d8:	90 93 c0 03 	sts	0x03C0, r25
    13dc:	80 93 bf 03 	sts	0x03BF, r24
		col_sram = 0;
    13e0:	10 92 be 03 	sts	0x03BE, r1
    13e4:	10 92 bd 03 	sts	0x03BD, r1
		return 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	08 95       	ret
	}else if(letter != '\0'){
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <sram_write_char+0x2e>
    13f2:	43 c0       	rjmp	.+134    	; 0x147a <sram_write_char+0xb4>
    13f4:	e8 2f       	mov	r30, r24
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	ec 50       	subi	r30, 0x0C	; 12
    1406:	f0 40       	sbci	r31, 0x00	; 0
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
    140c:	a0 91 bf 03 	lds	r26, 0x03BF
    1410:	b0 91 c0 03 	lds	r27, 0x03C0
    1414:	b6 95       	lsr	r27
    1416:	ba 2f       	mov	r27, r26
    1418:	aa 27       	eor	r26, r26
    141a:	b7 95       	ror	r27
    141c:	a7 95       	ror	r26
    141e:	20 91 bd 03 	lds	r18, 0x03BD
    1422:	30 91 be 03 	lds	r19, 0x03BE
    1426:	a2 0f       	add	r26, r18
    1428:	b3 1f       	adc	r27, r19
    142a:	20 91 0a 01 	lds	r18, 0x010A
    142e:	30 91 0b 01 	lds	r19, 0x010B
    1432:	a2 0f       	add	r26, r18
    1434:	b3 1f       	adc	r27, r19
    1436:	24 91       	lpm	r18, Z
    1438:	2c 93       	st	X, r18
			col_sram++;
    143a:	20 91 bd 03 	lds	r18, 0x03BD
    143e:	30 91 be 03 	lds	r19, 0x03BE
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	30 93 be 03 	sts	0x03BE, r19
    144a:	20 93 bd 03 	sts	0x03BD, r18
	if (letter == '\n'){
		page_sram = (page_sram+1)%8;
		col_sram = 0;
		return 1;
	}else if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	31 96       	adiw	r30, 0x01	; 1
    1452:	88 30       	cpi	r24, 0x08	; 8
    1454:	91 05       	cpc	r25, r1
    1456:	d1 f6       	brne	.-76     	; 0x140c <sram_write_char+0x46>
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
			col_sram++;
		}
		edited |= (0b00000001 << page_sram);
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	00 90 bf 03 	lds	r0, 0x03BF
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <sram_write_char+0xa0>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <sram_write_char+0x9c>
    146a:	90 91 bc 03 	lds	r25, 0x03BC
    146e:	89 2b       	or	r24, r25
    1470:	80 93 bc 03 	sts	0x03BC, r24
		return 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	08 95       	ret
	}else{
		return 0;
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    147e:	08 95       	ret

00001480 <sram_write_string>:


//char screendata[8][128][8]; //line, col, data(8)
volatile char *ext_ram = (char *) 0x1800;

void sram_write_string(char letters[]){
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (sram_write_char(letters[i++])){
    1486:	89 91       	ld	r24, Y+
    1488:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <sram_write_char>
    148c:	89 2b       	or	r24, r25
    148e:	d9 f7       	brne	.-10     	; 0x1486 <sram_write_string+0x6>
	}
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <sram_init>:
	}else{
		return 0;
	}
}

void sram_init(void){
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
    14a0:	9c 01       	movw	r18, r24
    14a2:	24 0f       	add	r18, r20
    14a4:	35 1f       	adc	r19, r21
    14a6:	e0 91 0a 01 	lds	r30, 0x010A
    14aa:	f0 91 0b 01 	lds	r31, 0x010B
    14ae:	e2 0f       	add	r30, r18
    14b0:	f3 1f       	adc	r31, r19
    14b2:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	80 38       	cpi	r24, 0x80	; 128
    14b8:	91 05       	cpc	r25, r1
    14ba:	91 f7       	brne	.-28     	; 0x14a0 <sram_init+0xa>
    14bc:	40 58       	subi	r20, 0x80	; 128
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
    14c0:	41 15       	cp	r20, r1
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	58 07       	cpc	r21, r24
    14c6:	19 f0       	breq	.+6      	; 0x14ce <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
    14c8:	87 2f       	mov	r24, r23
    14ca:	96 2f       	mov	r25, r22
    14cc:	e9 cf       	rjmp	.-46     	; 0x14a0 <sram_init+0xa>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
		}
	}
	edited = 0b11111111;
    14ce:	8f ef       	ldi	r24, 0xFF	; 255
    14d0:	80 93 bc 03 	sts	0x03BC, r24
    14d4:	08 95       	ret

000014d6 <sram_write_or>:
	ext_ram[page*128 + col] &= data;
	edited |= 1 << page;
}

void sram_write_or(int page, int col, char data){
	ext_ram[page*128 + col] |= data;
    14d6:	fc 01       	movw	r30, r24
    14d8:	f6 95       	lsr	r31
    14da:	fe 2f       	mov	r31, r30
    14dc:	ee 27       	eor	r30, r30
    14de:	f7 95       	ror	r31
    14e0:	e7 95       	ror	r30
    14e2:	6e 0f       	add	r22, r30
    14e4:	7f 1f       	adc	r23, r31
    14e6:	e0 91 0a 01 	lds	r30, 0x010A
    14ea:	f0 91 0b 01 	lds	r31, 0x010B
    14ee:	e6 0f       	add	r30, r22
    14f0:	f7 1f       	adc	r31, r23
    14f2:	90 81       	ld	r25, Z
    14f4:	49 2b       	or	r20, r25
    14f6:	40 83       	st	Z, r20
	edited |= 1 << page;
    14f8:	21 e0       	ldi	r18, 0x01	; 1
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <sram_write_or+0x2e>
    1500:	44 0f       	add	r20, r20
    1502:	55 1f       	adc	r21, r21
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <sram_write_or+0x2a>
    1508:	ca 01       	movw	r24, r20
    150a:	90 91 bc 03 	lds	r25, 0x03BC
    150e:	89 2b       	or	r24, r25
    1510:	80 93 bc 03 	sts	0x03BC, r24
    1514:	08 95       	ret

00001516 <sram_pixel>:
}

int sram_pixel(int x, int y){
	if(x >= 0 && x < 128 && y >= 0 && y < 64){
    1516:	80 38       	cpi	r24, 0x80	; 128
    1518:	91 05       	cpc	r25, r1
    151a:	30 f5       	brcc	.+76     	; 0x1568 <sram_pixel+0x52>
    151c:	60 34       	cpi	r22, 0x40	; 64
    151e:	71 05       	cpc	r23, r1
    1520:	30 f5       	brcc	.+76     	; 0x156e <sram_pixel+0x58>
		sram_write_or((y/8),x,(1<<(y%8)));
    1522:	9b 01       	movw	r18, r22
    1524:	27 70       	andi	r18, 0x07	; 7
    1526:	30 78       	andi	r19, 0x80	; 128
    1528:	33 23       	and	r19, r19
    152a:	34 f4       	brge	.+12     	; 0x1538 <sram_pixel+0x22>
    152c:	21 50       	subi	r18, 0x01	; 1
    152e:	31 09       	sbc	r19, r1
    1530:	28 6f       	ori	r18, 0xF8	; 248
    1532:	3f 6f       	ori	r19, 0xFF	; 255
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <sram_pixel+0x2c>
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	2a 95       	dec	r18
    1544:	e2 f7       	brpl	.-8      	; 0x153e <sram_pixel+0x28>
    1546:	fb 01       	movw	r30, r22
    1548:	ff 23       	and	r31, r31
    154a:	0c f4       	brge	.+2      	; 0x154e <sram_pixel+0x38>
    154c:	37 96       	adiw	r30, 0x07	; 7
    154e:	bc 01       	movw	r22, r24
    1550:	cf 01       	movw	r24, r30
    1552:	95 95       	asr	r25
    1554:	87 95       	ror	r24
    1556:	95 95       	asr	r25
    1558:	87 95       	ror	r24
    155a:	95 95       	asr	r25
    155c:	87 95       	ror	r24
    155e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <sram_write_or>
		return 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	08 95       	ret
	}
	return 0;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	08 95       	ret
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
}
    1572:	08 95       	ret

00001574 <sram_draw_line>:

void sram_draw_line(int x0, int y0, int x1, int y1){
    1574:	2f 92       	push	r2
    1576:	3f 92       	push	r3
    1578:	4f 92       	push	r4
    157a:	5f 92       	push	r5
    157c:	6f 92       	push	r6
    157e:	7f 92       	push	r7
    1580:	8f 92       	push	r8
    1582:	9f 92       	push	r9
    1584:	af 92       	push	r10
    1586:	bf 92       	push	r11
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	60 97       	sbiw	r28, 0x10	; 16
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	9c 87       	std	Y+12, r25	; 0x0c
    15aa:	8b 87       	std	Y+11, r24	; 0x0b
    15ac:	7c 83       	std	Y+4, r23	; 0x04
    15ae:	6b 83       	std	Y+3, r22	; 0x03
    15b0:	5a 87       	std	Y+10, r21	; 0x0a
    15b2:	49 87       	std	Y+9, r20	; 0x09
    15b4:	19 01       	movw	r2, r18
	if(x0 > x1){
    15b6:	48 17       	cp	r20, r24
    15b8:	59 07       	cpc	r21, r25
    15ba:	0c f4       	brge	.+2      	; 0x15be <sram_draw_line+0x4a>
    15bc:	dd c0       	rjmp	.+442    	; 0x1778 <sram_draw_line+0x204>
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
    15be:	84 17       	cp	r24, r20
    15c0:	95 07       	cpc	r25, r21
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <sram_draw_line+0x52>
    15c4:	97 c0       	rjmp	.+302    	; 0x16f4 <sram_draw_line+0x180>
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    15c6:	b9 01       	movw	r22, r18
    15c8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ca:	3c 81       	ldd	r19, Y+4	; 0x04
    15cc:	62 1b       	sub	r22, r18
    15ce:	73 0b       	sbc	r23, r19
    15d0:	88 27       	eor	r24, r24
    15d2:	77 fd       	sbrc	r23, 7
    15d4:	80 95       	com	r24
    15d6:	98 2f       	mov	r25, r24
    15d8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
    15dc:	6b 01       	movw	r12, r22
    15de:	7c 01       	movw	r14, r24
    15e0:	69 85       	ldd	r22, Y+9	; 0x09
    15e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    15e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    15e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    15e8:	64 1b       	sub	r22, r20
    15ea:	75 0b       	sbc	r23, r21
    15ec:	88 27       	eor	r24, r24
    15ee:	77 fd       	sbrc	r23, 7
    15f0:	80 95       	com	r24
    15f2:	98 2f       	mov	r25, r24
    15f4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
    15f8:	9b 01       	movw	r18, r22
    15fa:	ac 01       	movw	r20, r24
    15fc:	c7 01       	movw	r24, r14
    15fe:	b6 01       	movw	r22, r12
    1600:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__divsf3>
    1604:	6d 83       	std	Y+5, r22	; 0x05
    1606:	7e 83       	std	Y+6, r23	; 0x06
    1608:	8f 83       	std	Y+7, r24	; 0x07
    160a:	98 87       	std	Y+8, r25	; 0x08
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
		for(double x = x0; x < x1; x += 0.1){
    160c:	eb 85       	ldd	r30, Y+11	; 0x0b
    160e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1610:	bf 01       	movw	r22, r30
    1612:	88 27       	eor	r24, r24
    1614:	77 fd       	sbrc	r23, 7
    1616:	80 95       	com	r24
    1618:	98 2f       	mov	r25, r24
    161a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
    161e:	69 83       	std	Y+1, r22	; 0x01
    1620:	7a 83       	std	Y+2, r23	; 0x02
    1622:	e8 2e       	mov	r14, r24
    1624:	f9 2e       	mov	r15, r25
    1626:	29 85       	ldd	r18, Y+9	; 0x09
    1628:	3a 85       	ldd	r19, Y+10	; 0x0a
    162a:	b9 01       	movw	r22, r18
    162c:	88 27       	eor	r24, r24
    162e:	77 fd       	sbrc	r23, 7
    1630:	80 95       	com	r24
    1632:	98 2f       	mov	r25, r24
    1634:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
    1638:	4b 01       	movw	r8, r22
    163a:	5c 01       	movw	r10, r24
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	7a 81       	ldd	r23, Y+2	; 0x02
    1644:	8e 2d       	mov	r24, r14
    1646:	9f 2d       	mov	r25, r15
    1648:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    164c:	88 23       	and	r24, r24
    164e:	0c f0       	brlt	.+2      	; 0x1652 <sram_draw_line+0xde>
    1650:	51 c0       	rjmp	.+162    	; 0x16f4 <sram_draw_line+0x180>
    1652:	19 81       	ldd	r17, Y+1	; 0x01
    1654:	ca 80       	ldd	r12, Y+2	; 0x02
    1656:	0f 2d       	mov	r16, r15
			sram_pixel(x,(gradient*(x-x0))+y0);
    1658:	4b 81       	ldd	r20, Y+3	; 0x03
    165a:	5c 81       	ldd	r21, Y+4	; 0x04
    165c:	2a 01       	movw	r4, r20
    165e:	66 24       	eor	r6, r6
    1660:	57 fc       	sbrc	r5, 7
    1662:	60 94       	com	r6
    1664:	76 2c       	mov	r7, r6
    1666:	3e 86       	std	Y+14, r3	; 0x0e
    1668:	2d 86       	std	Y+13, r2	; 0x0d
    166a:	2e 2c       	mov	r2, r14
    166c:	3f 2c       	mov	r3, r15
    166e:	c8 8a       	std	Y+16, r12	; 0x10
    1670:	ef 86       	std	Y+15, r14	; 0x0f
    1672:	29 81       	ldd	r18, Y+1	; 0x01
    1674:	3a 81       	ldd	r19, Y+2	; 0x02
    1676:	42 2d       	mov	r20, r2
    1678:	53 2d       	mov	r21, r3
    167a:	61 2f       	mov	r22, r17
    167c:	78 89       	ldd	r23, Y+16	; 0x10
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	90 2f       	mov	r25, r16
    1682:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__subsf3>
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	4f 81       	ldd	r20, Y+7	; 0x07
    168c:	58 85       	ldd	r21, Y+8	; 0x08
    168e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__mulsf3>
    1692:	6b 01       	movw	r12, r22
    1694:	7c 01       	movw	r14, r24
    1696:	c3 01       	movw	r24, r6
    1698:	b2 01       	movw	r22, r4
    169a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
    169e:	9b 01       	movw	r18, r22
    16a0:	ac 01       	movw	r20, r24
    16a2:	c7 01       	movw	r24, r14
    16a4:	b6 01       	movw	r22, r12
    16a6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__addsf3>
    16aa:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fixsfsi>
    16ae:	6b 01       	movw	r12, r22
    16b0:	7c 01       	movw	r14, r24
    16b2:	61 2f       	mov	r22, r17
    16b4:	78 89       	ldd	r23, Y+16	; 0x10
    16b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b8:	90 2f       	mov	r25, r16
    16ba:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fixsfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	b6 01       	movw	r22, r12
    16c4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <sram_pixel>
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
		for(double x = x0; x < x1; x += 0.1){
    16c8:	2d ec       	ldi	r18, 0xCD	; 205
    16ca:	3c ec       	ldi	r19, 0xCC	; 204
    16cc:	4c ec       	ldi	r20, 0xCC	; 204
    16ce:	5d e3       	ldi	r21, 0x3D	; 61
    16d0:	61 2f       	mov	r22, r17
    16d2:	78 89       	ldd	r23, Y+16	; 0x10
    16d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d6:	90 2f       	mov	r25, r16
    16d8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__addsf3>
    16dc:	16 2f       	mov	r17, r22
    16de:	78 8b       	std	Y+16, r23	; 0x10
    16e0:	8f 87       	std	Y+15, r24	; 0x0f
    16e2:	09 2f       	mov	r16, r25
    16e4:	a5 01       	movw	r20, r10
    16e6:	94 01       	movw	r18, r8
    16e8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	0c f2       	brlt	.-126    	; 0x1672 <sram_draw_line+0xfe>
    16f0:	2d 84       	ldd	r2, Y+13	; 0x0d
    16f2:	3e 84       	ldd	r3, Y+14	; 0x0e
			sram_pixel(x,(gradient*(x-x0))+y0);
		}
	}
	
	if(y0 > y1){//rearranging after size
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	28 16       	cp	r2, r24
    16fa:	39 06       	cpc	r3, r25
    16fc:	34 f4       	brge	.+12     	; 0x170a <sram_draw_line+0x196>
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	3c 82       	std	Y+4, r3	; 0x04
    1704:	2b 82       	std	Y+3, r2	; 0x03
    1706:	29 2e       	mov	r2, r25
    1708:	38 2e       	mov	r3, r24
		y1 = y0;
		y0 = temp_val;
	}
	
	
	if(x0 == x1){//f we were to divide by zero, the lines straight uppward woild not be drawn. This fixes that
    170a:	eb 85       	ldd	r30, Y+11	; 0x0b
    170c:	fc 85       	ldd	r31, Y+12	; 0x0c
    170e:	29 85       	ldd	r18, Y+9	; 0x09
    1710:	3a 85       	ldd	r19, Y+10	; 0x0a
    1712:	e2 17       	cp	r30, r18
    1714:	f3 07       	cpc	r31, r19
    1716:	b9 f4       	brne	.+46     	; 0x1746 <sram_draw_line+0x1d2>
		for (uint8_t y = y0; y < y1; y++)
    1718:	1b 81       	ldd	r17, Y+3	; 0x03
    171a:	eb 80       	ldd	r14, Y+3	; 0x03
    171c:	fc 80       	ldd	r15, Y+4	; 0x04
    171e:	ff 24       	eor	r15, r15
    1720:	e2 14       	cp	r14, r2
    1722:	f3 04       	cpc	r15, r3
    1724:	0c f0       	brlt	.+2      	; 0x1728 <sram_draw_line+0x1b4>
    1726:	5f c0       	rjmp	.+190    	; 0x17e6 <sram_draw_line+0x272>
    1728:	b7 01       	movw	r22, r14
    172a:	01 2f       	mov	r16, r17
    172c:	67 01       	movw	r12, r14
    172e:	7f 01       	movw	r14, r30
		{
			sram_pixel(x0,y);
    1730:	c7 01       	movw	r24, r14
    1732:	0e 94 8b 0a 	call	0x1516	; 0x1516 <sram_pixel>
		y0 = temp_val;
	}
	
	
	if(x0 == x1){//f we were to divide by zero, the lines straight uppward woild not be drawn. This fixes that
		for (uint8_t y = y0; y < y1; y++)
    1736:	0f 5f       	subi	r16, 0xFF	; 255
    1738:	60 2f       	mov	r22, r16
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	62 15       	cp	r22, r2
    173e:	73 05       	cpc	r23, r3
    1740:	bc f3       	brlt	.-18     	; 0x1730 <sram_draw_line+0x1bc>
    1742:	76 01       	movw	r14, r12
    1744:	4a c0       	rjmp	.+148    	; 0x17da <sram_draw_line+0x266>
		{
			sram_pixel(x0,y);
		}
	}
	
	for (uint8_t edited_y = y0; edited_y < y1; edited_y++)//set the edited-flag for the desired lines
    1746:	1b 81       	ldd	r17, Y+3	; 0x03
    1748:	eb 80       	ldd	r14, Y+3	; 0x03
    174a:	fc 80       	ldd	r15, Y+4	; 0x04
    174c:	ff 24       	eor	r15, r15
    174e:	e2 14       	cp	r14, r2
    1750:	f3 04       	cpc	r15, r3
    1752:	0c f4       	brge	.+2      	; 0x1756 <sram_draw_line+0x1e2>
    1754:	42 c0       	rjmp	.+132    	; 0x17da <sram_draw_line+0x266>
    1756:	47 c0       	rjmp	.+142    	; 0x17e6 <sram_draw_line+0x272>
	{
		edited |= 1 << edited_y;
    1758:	ac 01       	movw	r20, r24
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <sram_draw_line+0x1ec>
    175c:	44 0f       	add	r20, r20
    175e:	55 1f       	adc	r21, r21
    1760:	6a 95       	dec	r22
    1762:	e2 f7       	brpl	.-8      	; 0x175c <sram_draw_line+0x1e8>
    1764:	24 2b       	or	r18, r20
		{
			sram_pixel(x0,y);
		}
	}
	
	for (uint8_t edited_y = y0; edited_y < y1; edited_y++)//set the edited-flag for the desired lines
    1766:	1f 5f       	subi	r17, 0xFF	; 255
    1768:	61 2f       	mov	r22, r17
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	62 15       	cp	r22, r2
    176e:	73 05       	cpc	r23, r3
    1770:	9c f3       	brlt	.-26     	; 0x1758 <sram_draw_line+0x1e4>
    1772:	20 93 bc 03 	sts	0x03BC, r18
    1776:	37 c0       	rjmp	.+110    	; 0x17e6 <sram_draw_line+0x272>
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    1778:	6b 81       	ldd	r22, Y+3	; 0x03
    177a:	7c 81       	ldd	r23, Y+4	; 0x04
    177c:	62 1b       	sub	r22, r18
    177e:	73 0b       	sbc	r23, r19
    1780:	88 27       	eor	r24, r24
    1782:	77 fd       	sbrc	r23, 7
    1784:	80 95       	com	r24
    1786:	98 2f       	mov	r25, r24
    1788:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
    178c:	6b 01       	movw	r12, r22
    178e:	7c 01       	movw	r14, r24
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	68 1b       	sub	r22, r24
    179a:	79 0b       	sbc	r23, r25
    179c:	88 27       	eor	r24, r24
    179e:	77 fd       	sbrc	r23, 7
    17a0:	80 95       	com	r24
    17a2:	98 2f       	mov	r25, r24
    17a4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__floatsisf>
    17a8:	9b 01       	movw	r18, r22
    17aa:	ac 01       	movw	r20, r24
    17ac:	c7 01       	movw	r24, r14
    17ae:	b6 01       	movw	r22, r12
    17b0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__divsf3>
    17b4:	6d 83       	std	Y+5, r22	; 0x05
    17b6:	7e 83       	std	Y+6, r23	; 0x06
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	98 87       	std	Y+8, r25	; 0x08
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
    17c0:	3c 82       	std	Y+4, r3	; 0x04
    17c2:	2b 82       	std	Y+3, r2	; 0x03
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
    17c4:	29 2e       	mov	r2, r25
    17c6:	38 2e       	mov	r3, r24
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    17c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ca:	8c 85       	ldd	r24, Y+12	; 0x0c

void sram_draw_line(int x0, int y0, int x1, int y1){
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
    17cc:	e9 85       	ldd	r30, Y+9	; 0x09
    17ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    17d0:	fc 87       	std	Y+12, r31	; 0x0c
    17d2:	eb 87       	std	Y+11, r30	; 0x0b
}

void sram_draw_line(int x0, int y0, int x1, int y1){
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
    17d4:	99 87       	std	Y+9, r25	; 0x09
    17d6:	8a 87       	std	Y+10, r24	; 0x0a
    17d8:	19 cf       	rjmp	.-462    	; 0x160c <sram_draw_line+0x98>
    17da:	20 91 bc 03 	lds	r18, 0x03BC
		}
	}
	
	for (uint8_t edited_y = y0; edited_y < y1; edited_y++)//set the edited-flag for the desired lines
	{
		edited |= 1 << edited_y;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	b7 01       	movw	r22, r14
    17e4:	b9 cf       	rjmp	.-142    	; 0x1758 <sram_draw_line+0x1e4>
	}
}
    17e6:	60 96       	adiw	r28, 0x10	; 16
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	9f 90       	pop	r9
    1808:	8f 90       	pop	r8
    180a:	7f 90       	pop	r7
    180c:	6f 90       	pop	r6
    180e:	5f 90       	pop	r5
    1810:	4f 90       	pop	r4
    1812:	3f 90       	pop	r3
    1814:	2f 90       	pop	r2
    1816:	08 95       	ret

00001818 <write_screen>:
		sram_pixel(-x+x0,y0+sqrt((pow(radius,2)-pow(x,2))));
	}
}


void write_screen(void){//update all the pages that are edited
    1818:	af 92       	push	r10
    181a:	bf 92       	push	r11
    181c:	cf 92       	push	r12
    181e:	df 92       	push	r13
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
	int line = 0;
	while (edited != 0b00000000){ //if there is an edited page it will update
    182c:	80 91 bc 03 	lds	r24, 0x03BC
    1830:	88 23       	and	r24, r24
    1832:	09 f4       	brne	.+2      	; 0x1836 <write_screen+0x1e>
    1834:	3e c0       	rjmp	.+124    	; 0x18b2 <write_screen+0x9a>
    1836:	e1 2c       	mov	r14, r1
    1838:	f1 2c       	mov	r15, r1
	}
}


void write_screen(void){//update all the pages that are edited
	int line = 0;
    183a:	c0 e0       	ldi	r28, 0x00	; 0
    183c:	d0 e0       	ldi	r29, 0x00	; 0
	while (edited != 0b00000000){ //if there is an edited page it will update
		char current_page = 1 << line; //going 1 at a time
    183e:	cc 24       	eor	r12, r12
    1840:	c3 94       	inc	r12
    1842:	d1 2c       	mov	r13, r1
		if(current_page & edited){ //checks if the page is edited
			oled_goto_line(line);//changing the line to the edited one
    1844:	68 94       	set
    1846:	aa 24       	eor	r10, r10
    1848:	a7 f8       	bld	r10, 7
    184a:	b1 2c       	mov	r11, r1


void write_screen(void){//update all the pages that are edited
	int line = 0;
	while (edited != 0b00000000){ //if there is an edited page it will update
		char current_page = 1 << line; //going 1 at a time
    184c:	86 01       	movw	r16, r12
    184e:	0c 2e       	mov	r0, r28
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <write_screen+0x3e>
    1852:	00 0f       	add	r16, r16
    1854:	11 1f       	adc	r17, r17
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <write_screen+0x3a>
		if(current_page & edited){ //checks if the page is edited
    185a:	80 23       	and	r24, r16
    185c:	e1 f0       	breq	.+56     	; 0x1896 <write_screen+0x7e>
			oled_goto_line(line);//changing the line to the edited one
    185e:	ce 01       	movw	r24, r28
    1860:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
    1864:	2a 2d       	mov	r18, r10
    1866:	3b 2d       	mov	r19, r11
    1868:	a7 01       	movw	r20, r14
    186a:	40 58       	subi	r20, 0x80	; 128
    186c:	5f 4f       	sbci	r21, 0xFF	; 255
    186e:	ca 01       	movw	r24, r20
    1870:	82 1b       	sub	r24, r18
    1872:	93 0b       	sbc	r25, r19
			for(uint8_t k = 0; k < 128; k++){//cycling through the columns in the edited page
				write_d(ext_ram[line*128 + k]);//printing the column from memory
    1874:	e0 91 0a 01 	lds	r30, 0x010A
    1878:	f0 91 0b 01 	lds	r31, 0x010B
    187c:	e8 0f       	add	r30, r24
    187e:	f9 1f       	adc	r31, r25
    1880:	80 81       	ld	r24, Z
}


void write_d(uint8_t data)
{
	*oled_data = data;
    1882:	e0 91 0c 01 	lds	r30, 0x010C
    1886:	f0 91 0d 01 	lds	r31, 0x010D
    188a:	80 83       	st	Z, r24
    188c:	21 50       	subi	r18, 0x01	; 1
    188e:	31 09       	sbc	r19, r1
	int line = 0;
	while (edited != 0b00000000){ //if there is an edited page it will update
		char current_page = 1 << line; //going 1 at a time
		if(current_page & edited){ //checks if the page is edited
			oled_goto_line(line);//changing the line to the edited one
			for(uint8_t k = 0; k < 128; k++){//cycling through the columns in the edited page
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	61 f7       	brne	.-40     	; 0x186e <write_screen+0x56>
				write_d(ext_ram[line*128 + k]);//printing the column from memory
			}			
		} 
		edited &= ~(current_page);//removes the edited-flag for this line
    1896:	00 95       	com	r16
    1898:	80 91 bc 03 	lds	r24, 0x03BC
    189c:	08 23       	and	r16, r24
    189e:	00 93 bc 03 	sts	0x03BC, r16
		line++;//check next line!
    18a2:	21 96       	adiw	r28, 0x01	; 1
    18a4:	80 e8       	ldi	r24, 0x80	; 128
    18a6:	e8 0e       	add	r14, r24
    18a8:	f1 1c       	adc	r15, r1
}


void write_screen(void){//update all the pages that are edited
	int line = 0;
	while (edited != 0b00000000){ //if there is an edited page it will update
    18aa:	00 23       	and	r16, r16
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <write_screen+0x9a>
    18ae:	80 2f       	mov	r24, r16
    18b0:	cd cf       	rjmp	.-102    	; 0x184c <write_screen+0x34>
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
			write_d(ext_ram[r*128 + k]);
		}
	}*/
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	df 90       	pop	r13
    18c0:	cf 90       	pop	r12
    18c2:	bf 90       	pop	r11
    18c4:	af 90       	pop	r10
    18c6:	08 95       	ret

000018c8 <sram_clear_line>:

void sram_clear_line(unsigned int line){
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    18ce:	0e 94 0b 09 	call	0x1216	; 0x1216 <oled_goto_line>
	if(line < 8){
    18d2:	c8 30       	cpi	r28, 0x08	; 8
    18d4:	d1 05       	cpc	r29, r1
    18d6:	28 f5       	brcc	.+74     	; 0x1922 <sram_clear_line+0x5a>
		for(unsigned int i = 0; i < 128; i++){
			ext_ram[line*128 + i] = 0b00000000;
    18d8:	be 01       	movw	r22, r28
    18da:	76 95       	lsr	r23
    18dc:	76 2f       	mov	r23, r22
    18de:	66 27       	eor	r22, r22
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	a9 01       	movw	r20, r18
    18ea:	46 0f       	add	r20, r22
    18ec:	57 1f       	adc	r21, r23
    18ee:	e0 91 0a 01 	lds	r30, 0x010A
    18f2:	f0 91 0b 01 	lds	r31, 0x010B
    18f6:	e4 0f       	add	r30, r20
    18f8:	f5 1f       	adc	r31, r21
    18fa:	10 82       	st	Z, r1
}

void sram_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	20 38       	cpi	r18, 0x80	; 128
    1902:	31 05       	cpc	r19, r1
    1904:	89 f7       	brne	.-30     	; 0x18e8 <sram_clear_line+0x20>
			ext_ram[line*128 + i] = 0b00000000;
		}
		edited |= 1 << line;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9c 01       	movw	r18, r24
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <sram_clear_line+0x4a>
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	ca 95       	dec	r28
    1914:	e2 f7       	brpl	.-8      	; 0x190e <sram_clear_line+0x46>
    1916:	e9 01       	movw	r28, r18
    1918:	80 91 bc 03 	lds	r24, 0x03BC
    191c:	c8 2b       	or	r28, r24
    191e:	c0 93 bc 03 	sts	0x03BC, r28
	}
}
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <sram_scroll_data>:

uint8_t tempdata[8];
void sram_scroll_data(uint8_t line, uint8_t scroll){
    1928:	ef 92       	push	r14
    192a:	ff 92       	push	r15
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	d8 2f       	mov	r29, r24
    1934:	c6 2f       	mov	r28, r22
	if(scroll > 8){
    1936:	69 30       	cpi	r22, 0x09	; 9
    1938:	20 f0       	brcs	.+8      	; 0x1942 <sram_scroll_data+0x1a>
		scroll -= 8;
    193a:	c8 50       	subi	r28, 0x08	; 8
		sram_scroll_data(line,scroll);
    193c:	6c 2f       	mov	r22, r28
    193e:	0e 94 94 0c 	call	0x1928	; 0x1928 <sram_scroll_data>
	}
	for (uint8_t s = 0; s < scroll; s++){
    1942:	cc 23       	and	r28, r28
    1944:	09 f4       	brne	.+2      	; 0x1948 <sram_scroll_data+0x20>
    1946:	5c c0       	rjmp	.+184    	; 0x1a00 <sram_scroll_data+0xd8>
    1948:	a0 91 0a 01 	lds	r26, 0x010A
    194c:	b0 91 0b 01 	lds	r27, 0x010B
    1950:	20 e8       	ldi	r18, 0x80	; 128
    1952:	d2 9f       	mul	r29, r18
    1954:	a0 0d       	add	r26, r0
    1956:	b1 1d       	adc	r27, r1
    1958:	11 24       	eor	r1, r1
    195a:	8b e1       	ldi	r24, 0x1B	; 27
    195c:	94 e0       	ldi	r25, 0x04	; 4
		tempdata[s] = ext_ram[line*128 + s];
    195e:	fc 01       	movw	r30, r24
    1960:	2d 91       	ld	r18, X+
    1962:	21 93       	st	Z+, r18
    1964:	2e 2f       	mov	r18, r30
    1966:	28 1b       	sub	r18, r24
void sram_scroll_data(uint8_t line, uint8_t scroll){
	if(scroll > 8){
		scroll -= 8;
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
    1968:	2c 17       	cp	r18, r28
    196a:	d0 f3       	brcs	.-12     	; 0x1960 <sram_scroll_data+0x38>
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    196c:	8c 2f       	mov	r24, r28
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	60 e8       	ldi	r22, 0x80	; 128
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	68 1b       	sub	r22, r24
    1976:	79 0b       	sbc	r23, r25
    1978:	16 16       	cp	r1, r22
    197a:	17 06       	cpc	r1, r23
    197c:	0c f4       	brge	.+2      	; 0x1980 <sram_scroll_data+0x58>
    197e:	44 c0       	rjmp	.+136    	; 0x1a08 <sram_scroll_data+0xe0>
    1980:	18 c0       	rjmp	.+48     	; 0x19b2 <sram_scroll_data+0x8a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    1982:	40 91 0a 01 	lds	r20, 0x010A
    1986:	50 91 0b 01 	lds	r21, 0x010B
    198a:	2e 0d       	add	r18, r14
    198c:	3f 1d       	adc	r19, r15
    198e:	fa 01       	movw	r30, r20
    1990:	e2 0f       	add	r30, r18
    1992:	f3 1f       	adc	r31, r19
    1994:	28 0f       	add	r18, r24
    1996:	39 1f       	adc	r19, r25
    1998:	42 0f       	add	r20, r18
    199a:	53 1f       	adc	r21, r19
    199c:	da 01       	movw	r26, r20
    199e:	2c 91       	ld	r18, X
    19a0:	20 83       	st	Z, r18
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    19a2:	1f 5f       	subi	r17, 0xFF	; 255
    19a4:	21 2f       	mov	r18, r17
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	26 17       	cp	r18, r22
    19aa:	37 07       	cpc	r19, r23
    19ac:	54 f3       	brlt	.-44     	; 0x1982 <sram_scroll_data+0x5a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    19ae:	cc 23       	and	r28, r28
    19b0:	d1 f0       	breq	.+52     	; 0x19e6 <sram_scroll_data+0xbe>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
    19b2:	b0 e8       	ldi	r27, 0x80	; 128
    19b4:	db 9f       	mul	r29, r27
    19b6:	90 01       	movw	r18, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	28 1b       	sub	r18, r24
    19bc:	39 0b       	sbc	r19, r25
    19be:	4b e1       	ldi	r20, 0x1B	; 27
    19c0:	54 e0       	ldi	r21, 0x04	; 4
    19c2:	fa 01       	movw	r30, r20
    19c4:	2c 59       	subi	r18, 0x9C	; 156
    19c6:	33 40       	sbci	r19, 0x03	; 3
    19c8:	c9 01       	movw	r24, r18
    19ca:	8e 0f       	add	r24, r30
    19cc:	9f 1f       	adc	r25, r31
    19ce:	a0 91 0a 01 	lds	r26, 0x010A
    19d2:	b0 91 0b 01 	lds	r27, 0x010B
    19d6:	a8 0f       	add	r26, r24
    19d8:	b9 1f       	adc	r27, r25
    19da:	81 91       	ld	r24, Z+
    19dc:	8c 93       	st	X, r24
    19de:	8e 2f       	mov	r24, r30
    19e0:	84 1b       	sub	r24, r20
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    19e2:	8c 17       	cp	r24, r28
    19e4:	88 f3       	brcs	.-30     	; 0x19c8 <sram_scroll_data+0xa0>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <sram_scroll_data+0xc8>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	da 95       	dec	r29
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <sram_scroll_data+0xc4>
    19f4:	d0 91 bc 03 	lds	r29, 0x03BC
    19f8:	8d 2b       	or	r24, r29
    19fa:	80 93 bc 03 	sts	0x03BC, r24
    19fe:	0c c0       	rjmp	.+24     	; 0x1a18 <sram_scroll_data+0xf0>
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    1a00:	60 e8       	ldi	r22, 0x80	; 128
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    1a08:	20 e8       	ldi	r18, 0x80	; 128
    1a0a:	d2 9f       	mul	r29, r18
    1a0c:	70 01       	movw	r14, r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	10 e0       	ldi	r17, 0x00	; 0
    1a16:	b5 cf       	rjmp	.-150    	; 0x1982 <sram_scroll_data+0x5a>
	}
	for (uint8_t s = 0; s < scroll; s++){
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	08 95       	ret

00001a24 <sram_draw_rectangle>:
	sram_draw_line(x1,y1,x2,y2);
	sram_draw_line(x2,y2,x0,y0);
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	c4 2f       	mov	r28, r20
	sram_draw_line(x0,y0,x0,y1);
    1a36:	e2 2e       	mov	r14, r18
    1a38:	f1 2c       	mov	r15, r1
    1a3a:	06 2f       	mov	r16, r22
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	c8 2e       	mov	r12, r24
    1a40:	d1 2c       	mov	r13, r1
    1a42:	97 01       	movw	r18, r14
    1a44:	a6 01       	movw	r20, r12
    1a46:	b8 01       	movw	r22, r16
    1a48:	c6 01       	movw	r24, r12
    1a4a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x0,y0,x1,y0);
    1a4e:	d0 e0       	ldi	r29, 0x00	; 0
    1a50:	98 01       	movw	r18, r16
    1a52:	ae 01       	movw	r20, r28
    1a54:	b8 01       	movw	r22, r16
    1a56:	c6 01       	movw	r24, r12
    1a58:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x0,y1,x1,y1);
    1a5c:	97 01       	movw	r18, r14
    1a5e:	ae 01       	movw	r20, r28
    1a60:	b7 01       	movw	r22, r14
    1a62:	c6 01       	movw	r24, r12
    1a64:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
	sram_draw_line(x1,y0,x1,y1);
    1a68:	97 01       	movw	r18, r14
    1a6a:	ae 01       	movw	r20, r28
    1a6c:	b8 01       	movw	r22, r16
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sram_draw_line>
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
    1a84:	08 95       	ret

00001a86 <send_UART>:
    1a86:	5d 9b       	sbis	0x0b, 5	; 11
    1a88:	fe cf       	rjmp	.-4      	; 0x1a86 <send_UART>
    1a8a:	8c b9       	out	0x0c, r24	; 12
    1a8c:	08 95       	ret

00001a8e <recieve_UART>:
    1a8e:	5f 9b       	sbis	0x0b, 7	; 11
    1a90:	fe cf       	rjmp	.-4      	; 0x1a8e <recieve_UART>
    1a92:	8c b1       	in	r24, 0x0c	; 12
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	08 95       	ret

00001a98 <init_UART>:
    1a98:	90 bd       	out	0x20, r25	; 32
    1a9a:	89 b9       	out	0x09, r24	; 9
    1a9c:	88 e1       	ldi	r24, 0x18	; 24
    1a9e:	8a b9       	out	0x0a, r24	; 10
    1aa0:	67 e4       	ldi	r22, 0x47	; 71
    1aa2:	7d e0       	ldi	r23, 0x0D	; 13
    1aa4:	83 e4       	ldi	r24, 0x43	; 67
    1aa6:	9d e0       	ldi	r25, 0x0D	; 13
    1aa8:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <fdevopen>
    1aac:	08 95       	ret

00001aae <__subsf3>:
    1aae:	50 58       	subi	r21, 0x80	; 128

00001ab0 <__addsf3>:
    1ab0:	bb 27       	eor	r27, r27
    1ab2:	aa 27       	eor	r26, r26
    1ab4:	0e d0       	rcall	.+28     	; 0x1ad2 <__addsf3x>
    1ab6:	75 c1       	rjmp	.+746    	; 0x1da2 <__fp_round>
    1ab8:	66 d1       	rcall	.+716    	; 0x1d86 <__fp_pscA>
    1aba:	30 f0       	brcs	.+12     	; 0x1ac8 <__addsf3+0x18>
    1abc:	6b d1       	rcall	.+726    	; 0x1d94 <__fp_pscB>
    1abe:	20 f0       	brcs	.+8      	; 0x1ac8 <__addsf3+0x18>
    1ac0:	31 f4       	brne	.+12     	; 0x1ace <__addsf3+0x1e>
    1ac2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ac4:	11 f4       	brne	.+4      	; 0x1aca <__addsf3+0x1a>
    1ac6:	1e f4       	brtc	.+6      	; 0x1ace <__addsf3+0x1e>
    1ac8:	5b c1       	rjmp	.+694    	; 0x1d80 <__fp_nan>
    1aca:	0e f4       	brtc	.+2      	; 0x1ace <__addsf3+0x1e>
    1acc:	e0 95       	com	r30
    1ace:	e7 fb       	bst	r30, 7
    1ad0:	51 c1       	rjmp	.+674    	; 0x1d74 <__fp_inf>

00001ad2 <__addsf3x>:
    1ad2:	e9 2f       	mov	r30, r25
    1ad4:	77 d1       	rcall	.+750    	; 0x1dc4 <__fp_split3>
    1ad6:	80 f3       	brcs	.-32     	; 0x1ab8 <__addsf3+0x8>
    1ad8:	ba 17       	cp	r27, r26
    1ada:	62 07       	cpc	r22, r18
    1adc:	73 07       	cpc	r23, r19
    1ade:	84 07       	cpc	r24, r20
    1ae0:	95 07       	cpc	r25, r21
    1ae2:	18 f0       	brcs	.+6      	; 0x1aea <__addsf3x+0x18>
    1ae4:	71 f4       	brne	.+28     	; 0x1b02 <__addsf3x+0x30>
    1ae6:	9e f5       	brtc	.+102    	; 0x1b4e <__addsf3x+0x7c>
    1ae8:	8f c1       	rjmp	.+798    	; 0x1e08 <__fp_zero>
    1aea:	0e f4       	brtc	.+2      	; 0x1aee <__addsf3x+0x1c>
    1aec:	e0 95       	com	r30
    1aee:	0b 2e       	mov	r0, r27
    1af0:	ba 2f       	mov	r27, r26
    1af2:	a0 2d       	mov	r26, r0
    1af4:	0b 01       	movw	r0, r22
    1af6:	b9 01       	movw	r22, r18
    1af8:	90 01       	movw	r18, r0
    1afa:	0c 01       	movw	r0, r24
    1afc:	ca 01       	movw	r24, r20
    1afe:	a0 01       	movw	r20, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	ff 27       	eor	r31, r31
    1b04:	59 1b       	sub	r21, r25
    1b06:	99 f0       	breq	.+38     	; 0x1b2e <__addsf3x+0x5c>
    1b08:	59 3f       	cpi	r21, 0xF9	; 249
    1b0a:	50 f4       	brcc	.+20     	; 0x1b20 <__addsf3x+0x4e>
    1b0c:	50 3e       	cpi	r21, 0xE0	; 224
    1b0e:	68 f1       	brcs	.+90     	; 0x1b6a <__addsf3x+0x98>
    1b10:	1a 16       	cp	r1, r26
    1b12:	f0 40       	sbci	r31, 0x00	; 0
    1b14:	a2 2f       	mov	r26, r18
    1b16:	23 2f       	mov	r18, r19
    1b18:	34 2f       	mov	r19, r20
    1b1a:	44 27       	eor	r20, r20
    1b1c:	58 5f       	subi	r21, 0xF8	; 248
    1b1e:	f3 cf       	rjmp	.-26     	; 0x1b06 <__addsf3x+0x34>
    1b20:	46 95       	lsr	r20
    1b22:	37 95       	ror	r19
    1b24:	27 95       	ror	r18
    1b26:	a7 95       	ror	r26
    1b28:	f0 40       	sbci	r31, 0x00	; 0
    1b2a:	53 95       	inc	r21
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__addsf3x+0x4e>
    1b2e:	7e f4       	brtc	.+30     	; 0x1b4e <__addsf3x+0x7c>
    1b30:	1f 16       	cp	r1, r31
    1b32:	ba 0b       	sbc	r27, r26
    1b34:	62 0b       	sbc	r22, r18
    1b36:	73 0b       	sbc	r23, r19
    1b38:	84 0b       	sbc	r24, r20
    1b3a:	ba f0       	brmi	.+46     	; 0x1b6a <__addsf3x+0x98>
    1b3c:	91 50       	subi	r25, 0x01	; 1
    1b3e:	a1 f0       	breq	.+40     	; 0x1b68 <__addsf3x+0x96>
    1b40:	ff 0f       	add	r31, r31
    1b42:	bb 1f       	adc	r27, r27
    1b44:	66 1f       	adc	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	88 1f       	adc	r24, r24
    1b4a:	c2 f7       	brpl	.-16     	; 0x1b3c <__addsf3x+0x6a>
    1b4c:	0e c0       	rjmp	.+28     	; 0x1b6a <__addsf3x+0x98>
    1b4e:	ba 0f       	add	r27, r26
    1b50:	62 1f       	adc	r22, r18
    1b52:	73 1f       	adc	r23, r19
    1b54:	84 1f       	adc	r24, r20
    1b56:	48 f4       	brcc	.+18     	; 0x1b6a <__addsf3x+0x98>
    1b58:	87 95       	ror	r24
    1b5a:	77 95       	ror	r23
    1b5c:	67 95       	ror	r22
    1b5e:	b7 95       	ror	r27
    1b60:	f7 95       	ror	r31
    1b62:	9e 3f       	cpi	r25, 0xFE	; 254
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <__addsf3x+0x96>
    1b66:	b3 cf       	rjmp	.-154    	; 0x1ace <__addsf3+0x1e>
    1b68:	93 95       	inc	r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <__addsf3x+0x9e>
    1b6e:	99 27       	eor	r25, r25
    1b70:	ee 0f       	add	r30, r30
    1b72:	97 95       	ror	r25
    1b74:	87 95       	ror	r24
    1b76:	08 95       	ret

00001b78 <__cmpsf2>:
    1b78:	d9 d0       	rcall	.+434    	; 0x1d2c <__fp_cmp>
    1b7a:	08 f4       	brcc	.+2      	; 0x1b7e <__cmpsf2+0x6>
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	08 95       	ret

00001b80 <__divsf3>:
    1b80:	0c d0       	rcall	.+24     	; 0x1b9a <__divsf3x>
    1b82:	0f c1       	rjmp	.+542    	; 0x1da2 <__fp_round>
    1b84:	07 d1       	rcall	.+526    	; 0x1d94 <__fp_pscB>
    1b86:	40 f0       	brcs	.+16     	; 0x1b98 <__divsf3+0x18>
    1b88:	fe d0       	rcall	.+508    	; 0x1d86 <__fp_pscA>
    1b8a:	30 f0       	brcs	.+12     	; 0x1b98 <__divsf3+0x18>
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <__divsf3+0x16>
    1b8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <__divsf3+0x18>
    1b92:	f0 c0       	rjmp	.+480    	; 0x1d74 <__fp_inf>
    1b94:	51 11       	cpse	r21, r1
    1b96:	39 c1       	rjmp	.+626    	; 0x1e0a <__fp_szero>
    1b98:	f3 c0       	rjmp	.+486    	; 0x1d80 <__fp_nan>

00001b9a <__divsf3x>:
    1b9a:	14 d1       	rcall	.+552    	; 0x1dc4 <__fp_split3>
    1b9c:	98 f3       	brcs	.-26     	; 0x1b84 <__divsf3+0x4>

00001b9e <__divsf3_pse>:
    1b9e:	99 23       	and	r25, r25
    1ba0:	c9 f3       	breq	.-14     	; 0x1b94 <__divsf3+0x14>
    1ba2:	55 23       	and	r21, r21
    1ba4:	b1 f3       	breq	.-20     	; 0x1b92 <__divsf3+0x12>
    1ba6:	95 1b       	sub	r25, r21
    1ba8:	55 0b       	sbc	r21, r21
    1baa:	bb 27       	eor	r27, r27
    1bac:	aa 27       	eor	r26, r26
    1bae:	62 17       	cp	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	84 07       	cpc	r24, r20
    1bb4:	38 f0       	brcs	.+14     	; 0x1bc4 <__divsf3_pse+0x26>
    1bb6:	9f 5f       	subi	r25, 0xFF	; 255
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	44 1f       	adc	r20, r20
    1bc0:	aa 1f       	adc	r26, r26
    1bc2:	a9 f3       	breq	.-22     	; 0x1bae <__divsf3_pse+0x10>
    1bc4:	33 d0       	rcall	.+102    	; 0x1c2c <__divsf3_pse+0x8e>
    1bc6:	0e 2e       	mov	r0, r30
    1bc8:	3a f0       	brmi	.+14     	; 0x1bd8 <__divsf3_pse+0x3a>
    1bca:	e0 e8       	ldi	r30, 0x80	; 128
    1bcc:	30 d0       	rcall	.+96     	; 0x1c2e <__divsf3_pse+0x90>
    1bce:	91 50       	subi	r25, 0x01	; 1
    1bd0:	50 40       	sbci	r21, 0x00	; 0
    1bd2:	e6 95       	lsr	r30
    1bd4:	00 1c       	adc	r0, r0
    1bd6:	ca f7       	brpl	.-14     	; 0x1bca <__divsf3_pse+0x2c>
    1bd8:	29 d0       	rcall	.+82     	; 0x1c2c <__divsf3_pse+0x8e>
    1bda:	fe 2f       	mov	r31, r30
    1bdc:	27 d0       	rcall	.+78     	; 0x1c2c <__divsf3_pse+0x8e>
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	bb 1f       	adc	r27, r27
    1be6:	26 17       	cp	r18, r22
    1be8:	37 07       	cpc	r19, r23
    1bea:	48 07       	cpc	r20, r24
    1bec:	ab 07       	cpc	r26, r27
    1bee:	b0 e8       	ldi	r27, 0x80	; 128
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <__divsf3_pse+0x56>
    1bf2:	bb 0b       	sbc	r27, r27
    1bf4:	80 2d       	mov	r24, r0
    1bf6:	bf 01       	movw	r22, r30
    1bf8:	ff 27       	eor	r31, r31
    1bfa:	93 58       	subi	r25, 0x83	; 131
    1bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfe:	2a f0       	brmi	.+10     	; 0x1c0a <__divsf3_pse+0x6c>
    1c00:	9e 3f       	cpi	r25, 0xFE	; 254
    1c02:	51 05       	cpc	r21, r1
    1c04:	68 f0       	brcs	.+26     	; 0x1c20 <__divsf3_pse+0x82>
    1c06:	b6 c0       	rjmp	.+364    	; 0x1d74 <__fp_inf>
    1c08:	00 c1       	rjmp	.+512    	; 0x1e0a <__fp_szero>
    1c0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c0c:	ec f3       	brlt	.-6      	; 0x1c08 <__divsf3_pse+0x6a>
    1c0e:	98 3e       	cpi	r25, 0xE8	; 232
    1c10:	dc f3       	brlt	.-10     	; 0x1c08 <__divsf3_pse+0x6a>
    1c12:	86 95       	lsr	r24
    1c14:	77 95       	ror	r23
    1c16:	67 95       	ror	r22
    1c18:	b7 95       	ror	r27
    1c1a:	f7 95       	ror	r31
    1c1c:	9f 5f       	subi	r25, 0xFF	; 255
    1c1e:	c9 f7       	brne	.-14     	; 0x1c12 <__divsf3_pse+0x74>
    1c20:	88 0f       	add	r24, r24
    1c22:	91 1d       	adc	r25, r1
    1c24:	96 95       	lsr	r25
    1c26:	87 95       	ror	r24
    1c28:	97 f9       	bld	r25, 7
    1c2a:	08 95       	ret
    1c2c:	e1 e0       	ldi	r30, 0x01	; 1
    1c2e:	66 0f       	add	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	bb 1f       	adc	r27, r27
    1c36:	62 17       	cp	r22, r18
    1c38:	73 07       	cpc	r23, r19
    1c3a:	84 07       	cpc	r24, r20
    1c3c:	ba 07       	cpc	r27, r26
    1c3e:	20 f0       	brcs	.+8      	; 0x1c48 <__divsf3_pse+0xaa>
    1c40:	62 1b       	sub	r22, r18
    1c42:	73 0b       	sbc	r23, r19
    1c44:	84 0b       	sbc	r24, r20
    1c46:	ba 0b       	sbc	r27, r26
    1c48:	ee 1f       	adc	r30, r30
    1c4a:	88 f7       	brcc	.-30     	; 0x1c2e <__divsf3_pse+0x90>
    1c4c:	e0 95       	com	r30
    1c4e:	08 95       	ret

00001c50 <__fixsfsi>:
    1c50:	04 d0       	rcall	.+8      	; 0x1c5a <__fixunssfsi>
    1c52:	68 94       	set
    1c54:	b1 11       	cpse	r27, r1
    1c56:	d9 c0       	rjmp	.+434    	; 0x1e0a <__fp_szero>
    1c58:	08 95       	ret

00001c5a <__fixunssfsi>:
    1c5a:	bc d0       	rcall	.+376    	; 0x1dd4 <__fp_splitA>
    1c5c:	88 f0       	brcs	.+34     	; 0x1c80 <__fixunssfsi+0x26>
    1c5e:	9f 57       	subi	r25, 0x7F	; 127
    1c60:	90 f0       	brcs	.+36     	; 0x1c86 <__fixunssfsi+0x2c>
    1c62:	b9 2f       	mov	r27, r25
    1c64:	99 27       	eor	r25, r25
    1c66:	b7 51       	subi	r27, 0x17	; 23
    1c68:	a0 f0       	brcs	.+40     	; 0x1c92 <__fixunssfsi+0x38>
    1c6a:	d1 f0       	breq	.+52     	; 0x1ca0 <__fixunssfsi+0x46>
    1c6c:	66 0f       	add	r22, r22
    1c6e:	77 1f       	adc	r23, r23
    1c70:	88 1f       	adc	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	1a f0       	brmi	.+6      	; 0x1c7c <__fixunssfsi+0x22>
    1c76:	ba 95       	dec	r27
    1c78:	c9 f7       	brne	.-14     	; 0x1c6c <__fixunssfsi+0x12>
    1c7a:	12 c0       	rjmp	.+36     	; 0x1ca0 <__fixunssfsi+0x46>
    1c7c:	b1 30       	cpi	r27, 0x01	; 1
    1c7e:	81 f0       	breq	.+32     	; 0x1ca0 <__fixunssfsi+0x46>
    1c80:	c3 d0       	rcall	.+390    	; 0x1e08 <__fp_zero>
    1c82:	b1 e0       	ldi	r27, 0x01	; 1
    1c84:	08 95       	ret
    1c86:	c0 c0       	rjmp	.+384    	; 0x1e08 <__fp_zero>
    1c88:	67 2f       	mov	r22, r23
    1c8a:	78 2f       	mov	r23, r24
    1c8c:	88 27       	eor	r24, r24
    1c8e:	b8 5f       	subi	r27, 0xF8	; 248
    1c90:	39 f0       	breq	.+14     	; 0x1ca0 <__fixunssfsi+0x46>
    1c92:	b9 3f       	cpi	r27, 0xF9	; 249
    1c94:	cc f3       	brlt	.-14     	; 0x1c88 <__fixunssfsi+0x2e>
    1c96:	86 95       	lsr	r24
    1c98:	77 95       	ror	r23
    1c9a:	67 95       	ror	r22
    1c9c:	b3 95       	inc	r27
    1c9e:	d9 f7       	brne	.-10     	; 0x1c96 <__fixunssfsi+0x3c>
    1ca0:	3e f4       	brtc	.+14     	; 0x1cb0 <__fixunssfsi+0x56>
    1ca2:	90 95       	com	r25
    1ca4:	80 95       	com	r24
    1ca6:	70 95       	com	r23
    1ca8:	61 95       	neg	r22
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	8f 4f       	sbci	r24, 0xFF	; 255
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__floatunsisf>:
    1cb2:	e8 94       	clt
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <__floatsisf+0x12>

00001cb6 <__floatsisf>:
    1cb6:	97 fb       	bst	r25, 7
    1cb8:	3e f4       	brtc	.+14     	; 0x1cc8 <__floatsisf+0x12>
    1cba:	90 95       	com	r25
    1cbc:	80 95       	com	r24
    1cbe:	70 95       	com	r23
    1cc0:	61 95       	neg	r22
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	99 23       	and	r25, r25
    1cca:	a9 f0       	breq	.+42     	; 0x1cf6 <__floatsisf+0x40>
    1ccc:	f9 2f       	mov	r31, r25
    1cce:	96 e9       	ldi	r25, 0x96	; 150
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	93 95       	inc	r25
    1cd4:	f6 95       	lsr	r31
    1cd6:	87 95       	ror	r24
    1cd8:	77 95       	ror	r23
    1cda:	67 95       	ror	r22
    1cdc:	b7 95       	ror	r27
    1cde:	f1 11       	cpse	r31, r1
    1ce0:	f8 cf       	rjmp	.-16     	; 0x1cd2 <__floatsisf+0x1c>
    1ce2:	fa f4       	brpl	.+62     	; 0x1d22 <__floatsisf+0x6c>
    1ce4:	bb 0f       	add	r27, r27
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <__floatsisf+0x36>
    1ce8:	60 ff       	sbrs	r22, 0
    1cea:	1b c0       	rjmp	.+54     	; 0x1d22 <__floatsisf+0x6c>
    1cec:	6f 5f       	subi	r22, 0xFF	; 255
    1cee:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	16 c0       	rjmp	.+44     	; 0x1d22 <__floatsisf+0x6c>
    1cf6:	88 23       	and	r24, r24
    1cf8:	11 f0       	breq	.+4      	; 0x1cfe <__floatsisf+0x48>
    1cfa:	96 e9       	ldi	r25, 0x96	; 150
    1cfc:	11 c0       	rjmp	.+34     	; 0x1d20 <__floatsisf+0x6a>
    1cfe:	77 23       	and	r23, r23
    1d00:	21 f0       	breq	.+8      	; 0x1d0a <__floatsisf+0x54>
    1d02:	9e e8       	ldi	r25, 0x8E	; 142
    1d04:	87 2f       	mov	r24, r23
    1d06:	76 2f       	mov	r23, r22
    1d08:	05 c0       	rjmp	.+10     	; 0x1d14 <__floatsisf+0x5e>
    1d0a:	66 23       	and	r22, r22
    1d0c:	71 f0       	breq	.+28     	; 0x1d2a <__floatsisf+0x74>
    1d0e:	96 e8       	ldi	r25, 0x86	; 134
    1d10:	86 2f       	mov	r24, r22
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	2a f0       	brmi	.+10     	; 0x1d22 <__floatsisf+0x6c>
    1d18:	9a 95       	dec	r25
    1d1a:	66 0f       	add	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	da f7       	brpl	.-10     	; 0x1d18 <__floatsisf+0x62>
    1d22:	88 0f       	add	r24, r24
    1d24:	96 95       	lsr	r25
    1d26:	87 95       	ror	r24
    1d28:	97 f9       	bld	r25, 7
    1d2a:	08 95       	ret

00001d2c <__fp_cmp>:
    1d2c:	99 0f       	add	r25, r25
    1d2e:	00 08       	sbc	r0, r0
    1d30:	55 0f       	add	r21, r21
    1d32:	aa 0b       	sbc	r26, r26
    1d34:	e0 e8       	ldi	r30, 0x80	; 128
    1d36:	fe ef       	ldi	r31, 0xFE	; 254
    1d38:	16 16       	cp	r1, r22
    1d3a:	17 06       	cpc	r1, r23
    1d3c:	e8 07       	cpc	r30, r24
    1d3e:	f9 07       	cpc	r31, r25
    1d40:	c0 f0       	brcs	.+48     	; 0x1d72 <__fp_cmp+0x46>
    1d42:	12 16       	cp	r1, r18
    1d44:	13 06       	cpc	r1, r19
    1d46:	e4 07       	cpc	r30, r20
    1d48:	f5 07       	cpc	r31, r21
    1d4a:	98 f0       	brcs	.+38     	; 0x1d72 <__fp_cmp+0x46>
    1d4c:	62 1b       	sub	r22, r18
    1d4e:	73 0b       	sbc	r23, r19
    1d50:	84 0b       	sbc	r24, r20
    1d52:	95 0b       	sbc	r25, r21
    1d54:	39 f4       	brne	.+14     	; 0x1d64 <__fp_cmp+0x38>
    1d56:	0a 26       	eor	r0, r26
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <__fp_cmp+0x46>
    1d5a:	23 2b       	or	r18, r19
    1d5c:	24 2b       	or	r18, r20
    1d5e:	25 2b       	or	r18, r21
    1d60:	21 f4       	brne	.+8      	; 0x1d6a <__fp_cmp+0x3e>
    1d62:	08 95       	ret
    1d64:	0a 26       	eor	r0, r26
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <__fp_cmp+0x3e>
    1d68:	a1 40       	sbci	r26, 0x01	; 1
    1d6a:	a6 95       	lsr	r26
    1d6c:	8f ef       	ldi	r24, 0xFF	; 255
    1d6e:	81 1d       	adc	r24, r1
    1d70:	81 1d       	adc	r24, r1
    1d72:	08 95       	ret

00001d74 <__fp_inf>:
    1d74:	97 f9       	bld	r25, 7
    1d76:	9f 67       	ori	r25, 0x7F	; 127
    1d78:	80 e8       	ldi	r24, 0x80	; 128
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	08 95       	ret

00001d80 <__fp_nan>:
    1d80:	9f ef       	ldi	r25, 0xFF	; 255
    1d82:	80 ec       	ldi	r24, 0xC0	; 192
    1d84:	08 95       	ret

00001d86 <__fp_pscA>:
    1d86:	00 24       	eor	r0, r0
    1d88:	0a 94       	dec	r0
    1d8a:	16 16       	cp	r1, r22
    1d8c:	17 06       	cpc	r1, r23
    1d8e:	18 06       	cpc	r1, r24
    1d90:	09 06       	cpc	r0, r25
    1d92:	08 95       	ret

00001d94 <__fp_pscB>:
    1d94:	00 24       	eor	r0, r0
    1d96:	0a 94       	dec	r0
    1d98:	12 16       	cp	r1, r18
    1d9a:	13 06       	cpc	r1, r19
    1d9c:	14 06       	cpc	r1, r20
    1d9e:	05 06       	cpc	r0, r21
    1da0:	08 95       	ret

00001da2 <__fp_round>:
    1da2:	09 2e       	mov	r0, r25
    1da4:	03 94       	inc	r0
    1da6:	00 0c       	add	r0, r0
    1da8:	11 f4       	brne	.+4      	; 0x1dae <__fp_round+0xc>
    1daa:	88 23       	and	r24, r24
    1dac:	52 f0       	brmi	.+20     	; 0x1dc2 <__fp_round+0x20>
    1dae:	bb 0f       	add	r27, r27
    1db0:	40 f4       	brcc	.+16     	; 0x1dc2 <__fp_round+0x20>
    1db2:	bf 2b       	or	r27, r31
    1db4:	11 f4       	brne	.+4      	; 0x1dba <__fp_round+0x18>
    1db6:	60 ff       	sbrs	r22, 0
    1db8:	04 c0       	rjmp	.+8      	; 0x1dc2 <__fp_round+0x20>
    1dba:	6f 5f       	subi	r22, 0xFF	; 255
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	08 95       	ret

00001dc4 <__fp_split3>:
    1dc4:	57 fd       	sbrc	r21, 7
    1dc6:	90 58       	subi	r25, 0x80	; 128
    1dc8:	44 0f       	add	r20, r20
    1dca:	55 1f       	adc	r21, r21
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <__fp_splitA+0x10>
    1dce:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <__fp_splitA+0x1a>
    1dd2:	47 95       	ror	r20

00001dd4 <__fp_splitA>:
    1dd4:	88 0f       	add	r24, r24
    1dd6:	97 fb       	bst	r25, 7
    1dd8:	99 1f       	adc	r25, r25
    1dda:	61 f0       	breq	.+24     	; 0x1df4 <__fp_splitA+0x20>
    1ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dde:	79 f0       	breq	.+30     	; 0x1dfe <__fp_splitA+0x2a>
    1de0:	87 95       	ror	r24
    1de2:	08 95       	ret
    1de4:	12 16       	cp	r1, r18
    1de6:	13 06       	cpc	r1, r19
    1de8:	14 06       	cpc	r1, r20
    1dea:	55 1f       	adc	r21, r21
    1dec:	f2 cf       	rjmp	.-28     	; 0x1dd2 <__fp_split3+0xe>
    1dee:	46 95       	lsr	r20
    1df0:	f1 df       	rcall	.-30     	; 0x1dd4 <__fp_splitA>
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <__fp_splitA+0x30>
    1df4:	16 16       	cp	r1, r22
    1df6:	17 06       	cpc	r1, r23
    1df8:	18 06       	cpc	r1, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	f1 cf       	rjmp	.-30     	; 0x1de0 <__fp_splitA+0xc>
    1dfe:	86 95       	lsr	r24
    1e00:	71 05       	cpc	r23, r1
    1e02:	61 05       	cpc	r22, r1
    1e04:	08 94       	sec
    1e06:	08 95       	ret

00001e08 <__fp_zero>:
    1e08:	e8 94       	clt

00001e0a <__fp_szero>:
    1e0a:	bb 27       	eor	r27, r27
    1e0c:	66 27       	eor	r22, r22
    1e0e:	77 27       	eor	r23, r23
    1e10:	cb 01       	movw	r24, r22
    1e12:	97 f9       	bld	r25, 7
    1e14:	08 95       	ret

00001e16 <__mulsf3>:
    1e16:	0b d0       	rcall	.+22     	; 0x1e2e <__mulsf3x>
    1e18:	c4 cf       	rjmp	.-120    	; 0x1da2 <__fp_round>
    1e1a:	b5 df       	rcall	.-150    	; 0x1d86 <__fp_pscA>
    1e1c:	28 f0       	brcs	.+10     	; 0x1e28 <__mulsf3+0x12>
    1e1e:	ba df       	rcall	.-140    	; 0x1d94 <__fp_pscB>
    1e20:	18 f0       	brcs	.+6      	; 0x1e28 <__mulsf3+0x12>
    1e22:	95 23       	and	r25, r21
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <__mulsf3+0x12>
    1e26:	a6 cf       	rjmp	.-180    	; 0x1d74 <__fp_inf>
    1e28:	ab cf       	rjmp	.-170    	; 0x1d80 <__fp_nan>
    1e2a:	11 24       	eor	r1, r1
    1e2c:	ee cf       	rjmp	.-36     	; 0x1e0a <__fp_szero>

00001e2e <__mulsf3x>:
    1e2e:	ca df       	rcall	.-108    	; 0x1dc4 <__fp_split3>
    1e30:	a0 f3       	brcs	.-24     	; 0x1e1a <__mulsf3+0x4>

00001e32 <__mulsf3_pse>:
    1e32:	95 9f       	mul	r25, r21
    1e34:	d1 f3       	breq	.-12     	; 0x1e2a <__mulsf3+0x14>
    1e36:	95 0f       	add	r25, r21
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	55 1f       	adc	r21, r21
    1e3c:	62 9f       	mul	r22, r18
    1e3e:	f0 01       	movw	r30, r0
    1e40:	72 9f       	mul	r23, r18
    1e42:	bb 27       	eor	r27, r27
    1e44:	f0 0d       	add	r31, r0
    1e46:	b1 1d       	adc	r27, r1
    1e48:	63 9f       	mul	r22, r19
    1e4a:	aa 27       	eor	r26, r26
    1e4c:	f0 0d       	add	r31, r0
    1e4e:	b1 1d       	adc	r27, r1
    1e50:	aa 1f       	adc	r26, r26
    1e52:	64 9f       	mul	r22, r20
    1e54:	66 27       	eor	r22, r22
    1e56:	b0 0d       	add	r27, r0
    1e58:	a1 1d       	adc	r26, r1
    1e5a:	66 1f       	adc	r22, r22
    1e5c:	82 9f       	mul	r24, r18
    1e5e:	22 27       	eor	r18, r18
    1e60:	b0 0d       	add	r27, r0
    1e62:	a1 1d       	adc	r26, r1
    1e64:	62 1f       	adc	r22, r18
    1e66:	73 9f       	mul	r23, r19
    1e68:	b0 0d       	add	r27, r0
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	62 1f       	adc	r22, r18
    1e6e:	83 9f       	mul	r24, r19
    1e70:	a0 0d       	add	r26, r0
    1e72:	61 1d       	adc	r22, r1
    1e74:	22 1f       	adc	r18, r18
    1e76:	74 9f       	mul	r23, r20
    1e78:	33 27       	eor	r19, r19
    1e7a:	a0 0d       	add	r26, r0
    1e7c:	61 1d       	adc	r22, r1
    1e7e:	23 1f       	adc	r18, r19
    1e80:	84 9f       	mul	r24, r20
    1e82:	60 0d       	add	r22, r0
    1e84:	21 1d       	adc	r18, r1
    1e86:	82 2f       	mov	r24, r18
    1e88:	76 2f       	mov	r23, r22
    1e8a:	6a 2f       	mov	r22, r26
    1e8c:	11 24       	eor	r1, r1
    1e8e:	9f 57       	subi	r25, 0x7F	; 127
    1e90:	50 40       	sbci	r21, 0x00	; 0
    1e92:	8a f0       	brmi	.+34     	; 0x1eb6 <__mulsf3_pse+0x84>
    1e94:	e1 f0       	breq	.+56     	; 0x1ece <__mulsf3_pse+0x9c>
    1e96:	88 23       	and	r24, r24
    1e98:	4a f0       	brmi	.+18     	; 0x1eac <__mulsf3_pse+0x7a>
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	66 1f       	adc	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	91 50       	subi	r25, 0x01	; 1
    1ea8:	50 40       	sbci	r21, 0x00	; 0
    1eaa:	a9 f7       	brne	.-22     	; 0x1e96 <__mulsf3_pse+0x64>
    1eac:	9e 3f       	cpi	r25, 0xFE	; 254
    1eae:	51 05       	cpc	r21, r1
    1eb0:	70 f0       	brcs	.+28     	; 0x1ece <__mulsf3_pse+0x9c>
    1eb2:	60 cf       	rjmp	.-320    	; 0x1d74 <__fp_inf>
    1eb4:	aa cf       	rjmp	.-172    	; 0x1e0a <__fp_szero>
    1eb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb8:	ec f3       	brlt	.-6      	; 0x1eb4 <__mulsf3_pse+0x82>
    1eba:	98 3e       	cpi	r25, 0xE8	; 232
    1ebc:	dc f3       	brlt	.-10     	; 0x1eb4 <__mulsf3_pse+0x82>
    1ebe:	86 95       	lsr	r24
    1ec0:	77 95       	ror	r23
    1ec2:	67 95       	ror	r22
    1ec4:	b7 95       	ror	r27
    1ec6:	f7 95       	ror	r31
    1ec8:	e7 95       	ror	r30
    1eca:	9f 5f       	subi	r25, 0xFF	; 255
    1ecc:	c1 f7       	brne	.-16     	; 0x1ebe <__mulsf3_pse+0x8c>
    1ece:	fe 2b       	or	r31, r30
    1ed0:	88 0f       	add	r24, r24
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	96 95       	lsr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	97 f9       	bld	r25, 7
    1eda:	08 95       	ret

00001edc <__divmodhi4>:
    1edc:	97 fb       	bst	r25, 7
    1ede:	07 2e       	mov	r0, r23
    1ee0:	16 f4       	brtc	.+4      	; 0x1ee6 <__divmodhi4+0xa>
    1ee2:	00 94       	com	r0
    1ee4:	07 d0       	rcall	.+14     	; 0x1ef4 <__divmodhi4_neg1>
    1ee6:	77 fd       	sbrc	r23, 7
    1ee8:	09 d0       	rcall	.+18     	; 0x1efc <__divmodhi4_neg2>
    1eea:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__udivmodhi4>
    1eee:	07 fc       	sbrc	r0, 7
    1ef0:	05 d0       	rcall	.+10     	; 0x1efc <__divmodhi4_neg2>
    1ef2:	3e f4       	brtc	.+14     	; 0x1f02 <__divmodhi4_exit>

00001ef4 <__divmodhi4_neg1>:
    1ef4:	90 95       	com	r25
    1ef6:	81 95       	neg	r24
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	08 95       	ret

00001efc <__divmodhi4_neg2>:
    1efc:	70 95       	com	r23
    1efe:	61 95       	neg	r22
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255

00001f02 <__divmodhi4_exit>:
    1f02:	08 95       	ret

00001f04 <__udivmodhi4>:
    1f04:	aa 1b       	sub	r26, r26
    1f06:	bb 1b       	sub	r27, r27
    1f08:	51 e1       	ldi	r21, 0x11	; 17
    1f0a:	07 c0       	rjmp	.+14     	; 0x1f1a <__udivmodhi4_ep>

00001f0c <__udivmodhi4_loop>:
    1f0c:	aa 1f       	adc	r26, r26
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	a6 17       	cp	r26, r22
    1f12:	b7 07       	cpc	r27, r23
    1f14:	10 f0       	brcs	.+4      	; 0x1f1a <__udivmodhi4_ep>
    1f16:	a6 1b       	sub	r26, r22
    1f18:	b7 0b       	sbc	r27, r23

00001f1a <__udivmodhi4_ep>:
    1f1a:	88 1f       	adc	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	5a 95       	dec	r21
    1f20:	a9 f7       	brne	.-22     	; 0x1f0c <__udivmodhi4_loop>
    1f22:	80 95       	com	r24
    1f24:	90 95       	com	r25
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	08 95       	ret

00001f2c <do_rand>:
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	ec 01       	movw	r28, r24
    1f42:	68 81       	ld	r22, Y
    1f44:	79 81       	ldd	r23, Y+1	; 0x01
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	61 15       	cp	r22, r1
    1f4c:	71 05       	cpc	r23, r1
    1f4e:	81 05       	cpc	r24, r1
    1f50:	91 05       	cpc	r25, r1
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <do_rand+0x30>
    1f54:	64 e2       	ldi	r22, 0x24	; 36
    1f56:	79 ed       	ldi	r23, 0xD9	; 217
    1f58:	8b e5       	ldi	r24, 0x5B	; 91
    1f5a:	97 e0       	ldi	r25, 0x07	; 7
    1f5c:	2d e1       	ldi	r18, 0x1D	; 29
    1f5e:	33 ef       	ldi	r19, 0xF3	; 243
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	0e 94 49 14 	call	0x2892	; 0x2892 <__divmodsi4>
    1f68:	49 01       	movw	r8, r18
    1f6a:	5a 01       	movw	r10, r20
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	ac 01       	movw	r20, r24
    1f70:	a7 ea       	ldi	r26, 0xA7	; 167
    1f72:	b1 e4       	ldi	r27, 0x41	; 65
    1f74:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__muluhisi3>
    1f78:	6b 01       	movw	r12, r22
    1f7a:	7c 01       	movw	r14, r24
    1f7c:	ac ee       	ldi	r26, 0xEC	; 236
    1f7e:	b4 ef       	ldi	r27, 0xF4	; 244
    1f80:	a5 01       	movw	r20, r10
    1f82:	94 01       	movw	r18, r8
    1f84:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulohisi3>
    1f88:	c6 0e       	add	r12, r22
    1f8a:	d7 1e       	adc	r13, r23
    1f8c:	e8 1e       	adc	r14, r24
    1f8e:	f9 1e       	adc	r15, r25
    1f90:	f7 fe       	sbrs	r15, 7
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <do_rand+0x74>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	c8 1a       	sub	r12, r24
    1f98:	d1 08       	sbc	r13, r1
    1f9a:	e1 08       	sbc	r14, r1
    1f9c:	80 e8       	ldi	r24, 0x80	; 128
    1f9e:	f8 0a       	sbc	r15, r24
    1fa0:	c8 82       	st	Y, r12
    1fa2:	d9 82       	std	Y+1, r13	; 0x01
    1fa4:	ea 82       	std	Y+2, r14	; 0x02
    1fa6:	fb 82       	std	Y+3, r15	; 0x03
    1fa8:	c6 01       	movw	r24, r12
    1faa:	9f 77       	andi	r25, 0x7F	; 127
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	ff 90       	pop	r15
    1fb2:	ef 90       	pop	r14
    1fb4:	df 90       	pop	r13
    1fb6:	cf 90       	pop	r12
    1fb8:	bf 90       	pop	r11
    1fba:	af 90       	pop	r10
    1fbc:	9f 90       	pop	r9
    1fbe:	8f 90       	pop	r8
    1fc0:	08 95       	ret

00001fc2 <rand_r>:
    1fc2:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <do_rand>
    1fc6:	08 95       	ret

00001fc8 <rand>:
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <do_rand>
    1fd0:	08 95       	ret

00001fd2 <srand>:
    1fd2:	a0 e0       	ldi	r26, 0x00	; 0
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	80 93 00 01 	sts	0x0100, r24
    1fda:	90 93 01 01 	sts	0x0101, r25
    1fde:	a0 93 02 01 	sts	0x0102, r26
    1fe2:	b0 93 03 01 	sts	0x0103, r27
    1fe6:	08 95       	ret

00001fe8 <strcpy_P>:
    1fe8:	fb 01       	movw	r30, r22
    1fea:	dc 01       	movw	r26, r24
    1fec:	05 90       	lpm	r0, Z+
    1fee:	0d 92       	st	X+, r0
    1ff0:	00 20       	and	r0, r0
    1ff2:	e1 f7       	brne	.-8      	; 0x1fec <strcpy_P+0x4>
    1ff4:	08 95       	ret

00001ff6 <fdevopen>:
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	ec 01       	movw	r28, r24
    2000:	8b 01       	movw	r16, r22
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	31 f4       	brne	.+12     	; 0x2012 <fdevopen+0x1c>
    2006:	61 15       	cp	r22, r1
    2008:	71 05       	cpc	r23, r1
    200a:	19 f4       	brne	.+6      	; 0x2012 <fdevopen+0x1c>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	38 c0       	rjmp	.+112    	; 0x2082 <fdevopen+0x8c>
    2012:	6e e0       	ldi	r22, 0x0E	; 14
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <calloc>
    201e:	fc 01       	movw	r30, r24
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	a1 f3       	breq	.-24     	; 0x200c <fdevopen+0x16>
    2024:	80 e8       	ldi	r24, 0x80	; 128
    2026:	83 83       	std	Z+3, r24	; 0x03
    2028:	01 15       	cp	r16, r1
    202a:	11 05       	cpc	r17, r1
    202c:	71 f0       	breq	.+28     	; 0x204a <fdevopen+0x54>
    202e:	13 87       	std	Z+11, r17	; 0x0b
    2030:	02 87       	std	Z+10, r16	; 0x0a
    2032:	81 e8       	ldi	r24, 0x81	; 129
    2034:	83 83       	std	Z+3, r24	; 0x03
    2036:	80 91 27 04 	lds	r24, 0x0427
    203a:	90 91 28 04 	lds	r25, 0x0428
    203e:	89 2b       	or	r24, r25
    2040:	21 f4       	brne	.+8      	; 0x204a <fdevopen+0x54>
    2042:	f0 93 28 04 	sts	0x0428, r31
    2046:	e0 93 27 04 	sts	0x0427, r30
    204a:	20 97       	sbiw	r28, 0x00	; 0
    204c:	c9 f0       	breq	.+50     	; 0x2080 <fdevopen+0x8a>
    204e:	d1 87       	std	Z+9, r29	; 0x09
    2050:	c0 87       	std	Z+8, r28	; 0x08
    2052:	83 81       	ldd	r24, Z+3	; 0x03
    2054:	82 60       	ori	r24, 0x02	; 2
    2056:	83 83       	std	Z+3, r24	; 0x03
    2058:	80 91 29 04 	lds	r24, 0x0429
    205c:	90 91 2a 04 	lds	r25, 0x042A
    2060:	89 2b       	or	r24, r25
    2062:	71 f4       	brne	.+28     	; 0x2080 <fdevopen+0x8a>
    2064:	f0 93 2a 04 	sts	0x042A, r31
    2068:	e0 93 29 04 	sts	0x0429, r30
    206c:	80 91 2b 04 	lds	r24, 0x042B
    2070:	90 91 2c 04 	lds	r25, 0x042C
    2074:	89 2b       	or	r24, r25
    2076:	21 f4       	brne	.+8      	; 0x2080 <fdevopen+0x8a>
    2078:	f0 93 2c 04 	sts	0x042C, r31
    207c:	e0 93 2b 04 	sts	0x042B, r30
    2080:	cf 01       	movw	r24, r30
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	08 95       	ret

0000208c <printf>:
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	ec e4       	ldi	r30, 0x4C	; 76
    2092:	f0 e1       	ldi	r31, 0x10	; 16
    2094:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__prologue_saves__+0x20>
    2098:	fe 01       	movw	r30, r28
    209a:	35 96       	adiw	r30, 0x05	; 5
    209c:	61 91       	ld	r22, Z+
    209e:	71 91       	ld	r23, Z+
    20a0:	af 01       	movw	r20, r30
    20a2:	80 91 29 04 	lds	r24, 0x0429
    20a6:	90 91 2a 04 	lds	r25, 0x042A
    20aa:	0e 94 87 10 	call	0x210e	; 0x210e <vfprintf>
    20ae:	e2 e0       	ldi	r30, 0x02	; 2
    20b0:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__epilogue_restores__+0x20>

000020b4 <puts>:
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	e0 91 29 04 	lds	r30, 0x0429
    20c0:	f0 91 2a 04 	lds	r31, 0x042A
    20c4:	23 81       	ldd	r18, Z+3	; 0x03
    20c6:	21 ff       	sbrs	r18, 1
    20c8:	1b c0       	rjmp	.+54     	; 0x2100 <puts+0x4c>
    20ca:	ec 01       	movw	r28, r24
    20cc:	00 e0       	ldi	r16, 0x00	; 0
    20ce:	10 e0       	ldi	r17, 0x00	; 0
    20d0:	89 91       	ld	r24, Y+
    20d2:	60 91 29 04 	lds	r22, 0x0429
    20d6:	70 91 2a 04 	lds	r23, 0x042A
    20da:	db 01       	movw	r26, r22
    20dc:	18 96       	adiw	r26, 0x08	; 8
    20de:	ed 91       	ld	r30, X+
    20e0:	fc 91       	ld	r31, X
    20e2:	19 97       	sbiw	r26, 0x09	; 9
    20e4:	88 23       	and	r24, r24
    20e6:	31 f0       	breq	.+12     	; 0x20f4 <puts+0x40>
    20e8:	09 95       	icall
    20ea:	89 2b       	or	r24, r25
    20ec:	89 f3       	breq	.-30     	; 0x20d0 <puts+0x1c>
    20ee:	0f ef       	ldi	r16, 0xFF	; 255
    20f0:	1f ef       	ldi	r17, 0xFF	; 255
    20f2:	ee cf       	rjmp	.-36     	; 0x20d0 <puts+0x1c>
    20f4:	8a e0       	ldi	r24, 0x0A	; 10
    20f6:	09 95       	icall
    20f8:	89 2b       	or	r24, r25
    20fa:	11 f4       	brne	.+4      	; 0x2100 <puts+0x4c>
    20fc:	c8 01       	movw	r24, r16
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <puts+0x50>
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	9f ef       	ldi	r25, 0xFF	; 255
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret

0000210e <vfprintf>:
    210e:	ac e0       	ldi	r26, 0x0C	; 12
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ed e8       	ldi	r30, 0x8D	; 141
    2114:	f0 e1       	ldi	r31, 0x10	; 16
    2116:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__>
    211a:	7c 01       	movw	r14, r24
    211c:	6b 01       	movw	r12, r22
    211e:	8a 01       	movw	r16, r20
    2120:	fc 01       	movw	r30, r24
    2122:	17 82       	std	Z+7, r1	; 0x07
    2124:	16 82       	std	Z+6, r1	; 0x06
    2126:	83 81       	ldd	r24, Z+3	; 0x03
    2128:	81 ff       	sbrs	r24, 1
    212a:	bd c1       	rjmp	.+890    	; 0x24a6 <vfprintf+0x398>
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	4c 01       	movw	r8, r24
    2132:	f7 01       	movw	r30, r14
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	f6 01       	movw	r30, r12
    2138:	93 fd       	sbrc	r25, 3
    213a:	85 91       	lpm	r24, Z+
    213c:	93 ff       	sbrs	r25, 3
    213e:	81 91       	ld	r24, Z+
    2140:	6f 01       	movw	r12, r30
    2142:	88 23       	and	r24, r24
    2144:	09 f4       	brne	.+2      	; 0x2148 <vfprintf+0x3a>
    2146:	ab c1       	rjmp	.+854    	; 0x249e <vfprintf+0x390>
    2148:	85 32       	cpi	r24, 0x25	; 37
    214a:	39 f4       	brne	.+14     	; 0x215a <vfprintf+0x4c>
    214c:	93 fd       	sbrc	r25, 3
    214e:	85 91       	lpm	r24, Z+
    2150:	93 ff       	sbrs	r25, 3
    2152:	81 91       	ld	r24, Z+
    2154:	6f 01       	movw	r12, r30
    2156:	85 32       	cpi	r24, 0x25	; 37
    2158:	29 f4       	brne	.+10     	; 0x2164 <vfprintf+0x56>
    215a:	b7 01       	movw	r22, r14
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    2162:	e7 cf       	rjmp	.-50     	; 0x2132 <vfprintf+0x24>
    2164:	51 2c       	mov	r5, r1
    2166:	31 2c       	mov	r3, r1
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	20 32       	cpi	r18, 0x20	; 32
    216c:	a0 f4       	brcc	.+40     	; 0x2196 <vfprintf+0x88>
    216e:	8b 32       	cpi	r24, 0x2B	; 43
    2170:	69 f0       	breq	.+26     	; 0x218c <vfprintf+0x7e>
    2172:	30 f4       	brcc	.+12     	; 0x2180 <vfprintf+0x72>
    2174:	80 32       	cpi	r24, 0x20	; 32
    2176:	59 f0       	breq	.+22     	; 0x218e <vfprintf+0x80>
    2178:	83 32       	cpi	r24, 0x23	; 35
    217a:	69 f4       	brne	.+26     	; 0x2196 <vfprintf+0x88>
    217c:	20 61       	ori	r18, 0x10	; 16
    217e:	2c c0       	rjmp	.+88     	; 0x21d8 <vfprintf+0xca>
    2180:	8d 32       	cpi	r24, 0x2D	; 45
    2182:	39 f0       	breq	.+14     	; 0x2192 <vfprintf+0x84>
    2184:	80 33       	cpi	r24, 0x30	; 48
    2186:	39 f4       	brne	.+14     	; 0x2196 <vfprintf+0x88>
    2188:	21 60       	ori	r18, 0x01	; 1
    218a:	26 c0       	rjmp	.+76     	; 0x21d8 <vfprintf+0xca>
    218c:	22 60       	ori	r18, 0x02	; 2
    218e:	24 60       	ori	r18, 0x04	; 4
    2190:	23 c0       	rjmp	.+70     	; 0x21d8 <vfprintf+0xca>
    2192:	28 60       	ori	r18, 0x08	; 8
    2194:	21 c0       	rjmp	.+66     	; 0x21d8 <vfprintf+0xca>
    2196:	27 fd       	sbrc	r18, 7
    2198:	27 c0       	rjmp	.+78     	; 0x21e8 <vfprintf+0xda>
    219a:	30 ed       	ldi	r19, 0xD0	; 208
    219c:	38 0f       	add	r19, r24
    219e:	3a 30       	cpi	r19, 0x0A	; 10
    21a0:	78 f4       	brcc	.+30     	; 0x21c0 <vfprintf+0xb2>
    21a2:	26 ff       	sbrs	r18, 6
    21a4:	06 c0       	rjmp	.+12     	; 0x21b2 <vfprintf+0xa4>
    21a6:	fa e0       	ldi	r31, 0x0A	; 10
    21a8:	5f 9e       	mul	r5, r31
    21aa:	30 0d       	add	r19, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	53 2e       	mov	r5, r19
    21b0:	13 c0       	rjmp	.+38     	; 0x21d8 <vfprintf+0xca>
    21b2:	8a e0       	ldi	r24, 0x0A	; 10
    21b4:	38 9e       	mul	r3, r24
    21b6:	30 0d       	add	r19, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	33 2e       	mov	r3, r19
    21bc:	20 62       	ori	r18, 0x20	; 32
    21be:	0c c0       	rjmp	.+24     	; 0x21d8 <vfprintf+0xca>
    21c0:	8e 32       	cpi	r24, 0x2E	; 46
    21c2:	21 f4       	brne	.+8      	; 0x21cc <vfprintf+0xbe>
    21c4:	26 fd       	sbrc	r18, 6
    21c6:	6b c1       	rjmp	.+726    	; 0x249e <vfprintf+0x390>
    21c8:	20 64       	ori	r18, 0x40	; 64
    21ca:	06 c0       	rjmp	.+12     	; 0x21d8 <vfprintf+0xca>
    21cc:	8c 36       	cpi	r24, 0x6C	; 108
    21ce:	11 f4       	brne	.+4      	; 0x21d4 <vfprintf+0xc6>
    21d0:	20 68       	ori	r18, 0x80	; 128
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <vfprintf+0xca>
    21d4:	88 36       	cpi	r24, 0x68	; 104
    21d6:	41 f4       	brne	.+16     	; 0x21e8 <vfprintf+0xda>
    21d8:	f6 01       	movw	r30, r12
    21da:	93 fd       	sbrc	r25, 3
    21dc:	85 91       	lpm	r24, Z+
    21de:	93 ff       	sbrs	r25, 3
    21e0:	81 91       	ld	r24, Z+
    21e2:	6f 01       	movw	r12, r30
    21e4:	81 11       	cpse	r24, r1
    21e6:	c1 cf       	rjmp	.-126    	; 0x216a <vfprintf+0x5c>
    21e8:	98 2f       	mov	r25, r24
    21ea:	9f 7d       	andi	r25, 0xDF	; 223
    21ec:	95 54       	subi	r25, 0x45	; 69
    21ee:	93 30       	cpi	r25, 0x03	; 3
    21f0:	28 f4       	brcc	.+10     	; 0x21fc <vfprintf+0xee>
    21f2:	0c 5f       	subi	r16, 0xFC	; 252
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	ff e3       	ldi	r31, 0x3F	; 63
    21f8:	f9 83       	std	Y+1, r31	; 0x01
    21fa:	0d c0       	rjmp	.+26     	; 0x2216 <vfprintf+0x108>
    21fc:	83 36       	cpi	r24, 0x63	; 99
    21fe:	31 f0       	breq	.+12     	; 0x220c <vfprintf+0xfe>
    2200:	83 37       	cpi	r24, 0x73	; 115
    2202:	71 f0       	breq	.+28     	; 0x2220 <vfprintf+0x112>
    2204:	83 35       	cpi	r24, 0x53	; 83
    2206:	09 f0       	breq	.+2      	; 0x220a <vfprintf+0xfc>
    2208:	5b c0       	rjmp	.+182    	; 0x22c0 <vfprintf+0x1b2>
    220a:	22 c0       	rjmp	.+68     	; 0x2250 <vfprintf+0x142>
    220c:	f8 01       	movw	r30, r16
    220e:	80 81       	ld	r24, Z
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	0e 5f       	subi	r16, 0xFE	; 254
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	44 24       	eor	r4, r4
    2218:	43 94       	inc	r4
    221a:	51 2c       	mov	r5, r1
    221c:	54 01       	movw	r10, r8
    221e:	15 c0       	rjmp	.+42     	; 0x224a <vfprintf+0x13c>
    2220:	38 01       	movw	r6, r16
    2222:	f2 e0       	ldi	r31, 0x02	; 2
    2224:	6f 0e       	add	r6, r31
    2226:	71 1c       	adc	r7, r1
    2228:	f8 01       	movw	r30, r16
    222a:	a0 80       	ld	r10, Z
    222c:	b1 80       	ldd	r11, Z+1	; 0x01
    222e:	26 ff       	sbrs	r18, 6
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <vfprintf+0x12a>
    2232:	65 2d       	mov	r22, r5
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <vfprintf+0x12e>
    2238:	6f ef       	ldi	r22, 0xFF	; 255
    223a:	7f ef       	ldi	r23, 0xFF	; 255
    223c:	c5 01       	movw	r24, r10
    223e:	2c 87       	std	Y+12, r18	; 0x0c
    2240:	0e 94 ae 13 	call	0x275c	; 0x275c <strnlen>
    2244:	2c 01       	movw	r4, r24
    2246:	83 01       	movw	r16, r6
    2248:	2c 85       	ldd	r18, Y+12	; 0x0c
    224a:	2f 77       	andi	r18, 0x7F	; 127
    224c:	22 2e       	mov	r2, r18
    224e:	17 c0       	rjmp	.+46     	; 0x227e <vfprintf+0x170>
    2250:	38 01       	movw	r6, r16
    2252:	f2 e0       	ldi	r31, 0x02	; 2
    2254:	6f 0e       	add	r6, r31
    2256:	71 1c       	adc	r7, r1
    2258:	f8 01       	movw	r30, r16
    225a:	a0 80       	ld	r10, Z
    225c:	b1 80       	ldd	r11, Z+1	; 0x01
    225e:	26 ff       	sbrs	r18, 6
    2260:	03 c0       	rjmp	.+6      	; 0x2268 <vfprintf+0x15a>
    2262:	65 2d       	mov	r22, r5
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <vfprintf+0x15e>
    2268:	6f ef       	ldi	r22, 0xFF	; 255
    226a:	7f ef       	ldi	r23, 0xFF	; 255
    226c:	c5 01       	movw	r24, r10
    226e:	2c 87       	std	Y+12, r18	; 0x0c
    2270:	0e 94 9c 13 	call	0x2738	; 0x2738 <strnlen_P>
    2274:	2c 01       	movw	r4, r24
    2276:	2c 85       	ldd	r18, Y+12	; 0x0c
    2278:	20 68       	ori	r18, 0x80	; 128
    227a:	22 2e       	mov	r2, r18
    227c:	83 01       	movw	r16, r6
    227e:	23 fc       	sbrc	r2, 3
    2280:	1b c0       	rjmp	.+54     	; 0x22b8 <vfprintf+0x1aa>
    2282:	83 2d       	mov	r24, r3
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	48 16       	cp	r4, r24
    2288:	59 06       	cpc	r5, r25
    228a:	b0 f4       	brcc	.+44     	; 0x22b8 <vfprintf+0x1aa>
    228c:	b7 01       	movw	r22, r14
    228e:	80 e2       	ldi	r24, 0x20	; 32
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    2296:	3a 94       	dec	r3
    2298:	f4 cf       	rjmp	.-24     	; 0x2282 <vfprintf+0x174>
    229a:	f5 01       	movw	r30, r10
    229c:	27 fc       	sbrc	r2, 7
    229e:	85 91       	lpm	r24, Z+
    22a0:	27 fe       	sbrs	r2, 7
    22a2:	81 91       	ld	r24, Z+
    22a4:	5f 01       	movw	r10, r30
    22a6:	b7 01       	movw	r22, r14
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    22ae:	31 10       	cpse	r3, r1
    22b0:	3a 94       	dec	r3
    22b2:	f1 e0       	ldi	r31, 0x01	; 1
    22b4:	4f 1a       	sub	r4, r31
    22b6:	51 08       	sbc	r5, r1
    22b8:	41 14       	cp	r4, r1
    22ba:	51 04       	cpc	r5, r1
    22bc:	71 f7       	brne	.-36     	; 0x229a <vfprintf+0x18c>
    22be:	e5 c0       	rjmp	.+458    	; 0x248a <vfprintf+0x37c>
    22c0:	84 36       	cpi	r24, 0x64	; 100
    22c2:	11 f0       	breq	.+4      	; 0x22c8 <vfprintf+0x1ba>
    22c4:	89 36       	cpi	r24, 0x69	; 105
    22c6:	39 f5       	brne	.+78     	; 0x2316 <vfprintf+0x208>
    22c8:	f8 01       	movw	r30, r16
    22ca:	27 ff       	sbrs	r18, 7
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <vfprintf+0x1ce>
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0c 5f       	subi	r16, 0xFC	; 252
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <vfprintf+0x1de>
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	88 27       	eor	r24, r24
    22e2:	77 fd       	sbrc	r23, 7
    22e4:	80 95       	com	r24
    22e6:	98 2f       	mov	r25, r24
    22e8:	0e 5f       	subi	r16, 0xFE	; 254
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
    22ec:	2f 76       	andi	r18, 0x6F	; 111
    22ee:	b2 2e       	mov	r11, r18
    22f0:	97 ff       	sbrs	r25, 7
    22f2:	09 c0       	rjmp	.+18     	; 0x2306 <vfprintf+0x1f8>
    22f4:	90 95       	com	r25
    22f6:	80 95       	com	r24
    22f8:	70 95       	com	r23
    22fa:	61 95       	neg	r22
    22fc:	7f 4f       	sbci	r23, 0xFF	; 255
    22fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2300:	9f 4f       	sbci	r25, 0xFF	; 255
    2302:	20 68       	ori	r18, 0x80	; 128
    2304:	b2 2e       	mov	r11, r18
    2306:	2a e0       	ldi	r18, 0x0A	; 10
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	a4 01       	movw	r20, r8
    230c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__ultoa_invert>
    2310:	a8 2e       	mov	r10, r24
    2312:	a8 18       	sub	r10, r8
    2314:	44 c0       	rjmp	.+136    	; 0x239e <vfprintf+0x290>
    2316:	85 37       	cpi	r24, 0x75	; 117
    2318:	29 f4       	brne	.+10     	; 0x2324 <vfprintf+0x216>
    231a:	2f 7e       	andi	r18, 0xEF	; 239
    231c:	b2 2e       	mov	r11, r18
    231e:	2a e0       	ldi	r18, 0x0A	; 10
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	25 c0       	rjmp	.+74     	; 0x236e <vfprintf+0x260>
    2324:	f2 2f       	mov	r31, r18
    2326:	f9 7f       	andi	r31, 0xF9	; 249
    2328:	bf 2e       	mov	r11, r31
    232a:	8f 36       	cpi	r24, 0x6F	; 111
    232c:	c1 f0       	breq	.+48     	; 0x235e <vfprintf+0x250>
    232e:	18 f4       	brcc	.+6      	; 0x2336 <vfprintf+0x228>
    2330:	88 35       	cpi	r24, 0x58	; 88
    2332:	79 f0       	breq	.+30     	; 0x2352 <vfprintf+0x244>
    2334:	b4 c0       	rjmp	.+360    	; 0x249e <vfprintf+0x390>
    2336:	80 37       	cpi	r24, 0x70	; 112
    2338:	19 f0       	breq	.+6      	; 0x2340 <vfprintf+0x232>
    233a:	88 37       	cpi	r24, 0x78	; 120
    233c:	21 f0       	breq	.+8      	; 0x2346 <vfprintf+0x238>
    233e:	af c0       	rjmp	.+350    	; 0x249e <vfprintf+0x390>
    2340:	2f 2f       	mov	r18, r31
    2342:	20 61       	ori	r18, 0x10	; 16
    2344:	b2 2e       	mov	r11, r18
    2346:	b4 fe       	sbrs	r11, 4
    2348:	0d c0       	rjmp	.+26     	; 0x2364 <vfprintf+0x256>
    234a:	8b 2d       	mov	r24, r11
    234c:	84 60       	ori	r24, 0x04	; 4
    234e:	b8 2e       	mov	r11, r24
    2350:	09 c0       	rjmp	.+18     	; 0x2364 <vfprintf+0x256>
    2352:	24 ff       	sbrs	r18, 4
    2354:	0a c0       	rjmp	.+20     	; 0x236a <vfprintf+0x25c>
    2356:	9f 2f       	mov	r25, r31
    2358:	96 60       	ori	r25, 0x06	; 6
    235a:	b9 2e       	mov	r11, r25
    235c:	06 c0       	rjmp	.+12     	; 0x236a <vfprintf+0x25c>
    235e:	28 e0       	ldi	r18, 0x08	; 8
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	05 c0       	rjmp	.+10     	; 0x236e <vfprintf+0x260>
    2364:	20 e1       	ldi	r18, 0x10	; 16
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vfprintf+0x260>
    236a:	20 e1       	ldi	r18, 0x10	; 16
    236c:	32 e0       	ldi	r19, 0x02	; 2
    236e:	f8 01       	movw	r30, r16
    2370:	b7 fe       	sbrs	r11, 7
    2372:	07 c0       	rjmp	.+14     	; 0x2382 <vfprintf+0x274>
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	0c 5f       	subi	r16, 0xFC	; 252
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	06 c0       	rjmp	.+12     	; 0x238e <vfprintf+0x280>
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 5f       	subi	r16, 0xFE	; 254
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	a4 01       	movw	r20, r8
    2390:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__ultoa_invert>
    2394:	a8 2e       	mov	r10, r24
    2396:	a8 18       	sub	r10, r8
    2398:	fb 2d       	mov	r31, r11
    239a:	ff 77       	andi	r31, 0x7F	; 127
    239c:	bf 2e       	mov	r11, r31
    239e:	b6 fe       	sbrs	r11, 6
    23a0:	0b c0       	rjmp	.+22     	; 0x23b8 <vfprintf+0x2aa>
    23a2:	2b 2d       	mov	r18, r11
    23a4:	2e 7f       	andi	r18, 0xFE	; 254
    23a6:	a5 14       	cp	r10, r5
    23a8:	50 f4       	brcc	.+20     	; 0x23be <vfprintf+0x2b0>
    23aa:	b4 fe       	sbrs	r11, 4
    23ac:	0a c0       	rjmp	.+20     	; 0x23c2 <vfprintf+0x2b4>
    23ae:	b2 fc       	sbrc	r11, 2
    23b0:	08 c0       	rjmp	.+16     	; 0x23c2 <vfprintf+0x2b4>
    23b2:	2b 2d       	mov	r18, r11
    23b4:	2e 7e       	andi	r18, 0xEE	; 238
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <vfprintf+0x2b4>
    23b8:	7a 2c       	mov	r7, r10
    23ba:	2b 2d       	mov	r18, r11
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <vfprintf+0x2b6>
    23be:	7a 2c       	mov	r7, r10
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <vfprintf+0x2b6>
    23c2:	75 2c       	mov	r7, r5
    23c4:	24 ff       	sbrs	r18, 4
    23c6:	0d c0       	rjmp	.+26     	; 0x23e2 <vfprintf+0x2d4>
    23c8:	fe 01       	movw	r30, r28
    23ca:	ea 0d       	add	r30, r10
    23cc:	f1 1d       	adc	r31, r1
    23ce:	80 81       	ld	r24, Z
    23d0:	80 33       	cpi	r24, 0x30	; 48
    23d2:	11 f4       	brne	.+4      	; 0x23d8 <vfprintf+0x2ca>
    23d4:	29 7e       	andi	r18, 0xE9	; 233
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <vfprintf+0x2dc>
    23d8:	22 ff       	sbrs	r18, 2
    23da:	06 c0       	rjmp	.+12     	; 0x23e8 <vfprintf+0x2da>
    23dc:	73 94       	inc	r7
    23de:	73 94       	inc	r7
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <vfprintf+0x2dc>
    23e2:	82 2f       	mov	r24, r18
    23e4:	86 78       	andi	r24, 0x86	; 134
    23e6:	09 f0       	breq	.+2      	; 0x23ea <vfprintf+0x2dc>
    23e8:	73 94       	inc	r7
    23ea:	23 fd       	sbrc	r18, 3
    23ec:	13 c0       	rjmp	.+38     	; 0x2414 <vfprintf+0x306>
    23ee:	20 ff       	sbrs	r18, 0
    23f0:	06 c0       	rjmp	.+12     	; 0x23fe <vfprintf+0x2f0>
    23f2:	5a 2c       	mov	r5, r10
    23f4:	73 14       	cp	r7, r3
    23f6:	18 f4       	brcc	.+6      	; 0x23fe <vfprintf+0x2f0>
    23f8:	53 0c       	add	r5, r3
    23fa:	57 18       	sub	r5, r7
    23fc:	73 2c       	mov	r7, r3
    23fe:	73 14       	cp	r7, r3
    2400:	68 f4       	brcc	.+26     	; 0x241c <vfprintf+0x30e>
    2402:	b7 01       	movw	r22, r14
    2404:	80 e2       	ldi	r24, 0x20	; 32
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	2c 87       	std	Y+12, r18	; 0x0c
    240a:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    240e:	73 94       	inc	r7
    2410:	2c 85       	ldd	r18, Y+12	; 0x0c
    2412:	f5 cf       	rjmp	.-22     	; 0x23fe <vfprintf+0x2f0>
    2414:	73 14       	cp	r7, r3
    2416:	10 f4       	brcc	.+4      	; 0x241c <vfprintf+0x30e>
    2418:	37 18       	sub	r3, r7
    241a:	01 c0       	rjmp	.+2      	; 0x241e <vfprintf+0x310>
    241c:	31 2c       	mov	r3, r1
    241e:	24 ff       	sbrs	r18, 4
    2420:	12 c0       	rjmp	.+36     	; 0x2446 <vfprintf+0x338>
    2422:	b7 01       	movw	r22, r14
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	2c 87       	std	Y+12, r18	; 0x0c
    242a:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    242e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2430:	22 ff       	sbrs	r18, 2
    2432:	17 c0       	rjmp	.+46     	; 0x2462 <vfprintf+0x354>
    2434:	21 ff       	sbrs	r18, 1
    2436:	03 c0       	rjmp	.+6      	; 0x243e <vfprintf+0x330>
    2438:	88 e5       	ldi	r24, 0x58	; 88
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <vfprintf+0x334>
    243e:	88 e7       	ldi	r24, 0x78	; 120
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	b7 01       	movw	r22, r14
    2444:	0c c0       	rjmp	.+24     	; 0x245e <vfprintf+0x350>
    2446:	82 2f       	mov	r24, r18
    2448:	86 78       	andi	r24, 0x86	; 134
    244a:	59 f0       	breq	.+22     	; 0x2462 <vfprintf+0x354>
    244c:	21 fd       	sbrc	r18, 1
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <vfprintf+0x346>
    2450:	80 e2       	ldi	r24, 0x20	; 32
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <vfprintf+0x348>
    2454:	8b e2       	ldi	r24, 0x2B	; 43
    2456:	27 fd       	sbrc	r18, 7
    2458:	8d e2       	ldi	r24, 0x2D	; 45
    245a:	b7 01       	movw	r22, r14
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    2462:	a5 14       	cp	r10, r5
    2464:	38 f4       	brcc	.+14     	; 0x2474 <vfprintf+0x366>
    2466:	b7 01       	movw	r22, r14
    2468:	80 e3       	ldi	r24, 0x30	; 48
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    2470:	5a 94       	dec	r5
    2472:	f7 cf       	rjmp	.-18     	; 0x2462 <vfprintf+0x354>
    2474:	aa 94       	dec	r10
    2476:	f4 01       	movw	r30, r8
    2478:	ea 0d       	add	r30, r10
    247a:	f1 1d       	adc	r31, r1
    247c:	80 81       	ld	r24, Z
    247e:	b7 01       	movw	r22, r14
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    2486:	a1 10       	cpse	r10, r1
    2488:	f5 cf       	rjmp	.-22     	; 0x2474 <vfprintf+0x366>
    248a:	33 20       	and	r3, r3
    248c:	09 f4       	brne	.+2      	; 0x2490 <vfprintf+0x382>
    248e:	51 ce       	rjmp	.-862    	; 0x2132 <vfprintf+0x24>
    2490:	b7 01       	movw	r22, r14
    2492:	80 e2       	ldi	r24, 0x20	; 32
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 b9 13 	call	0x2772	; 0x2772 <fputc>
    249a:	3a 94       	dec	r3
    249c:	f6 cf       	rjmp	.-20     	; 0x248a <vfprintf+0x37c>
    249e:	f7 01       	movw	r30, r14
    24a0:	86 81       	ldd	r24, Z+6	; 0x06
    24a2:	97 81       	ldd	r25, Z+7	; 0x07
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <vfprintf+0x39c>
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	9f ef       	ldi	r25, 0xFF	; 255
    24aa:	2c 96       	adiw	r28, 0x0c	; 12
    24ac:	e2 e1       	ldi	r30, 0x12	; 18
    24ae:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__>

000024b2 <calloc>:
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	86 9f       	mul	r24, r22
    24bc:	80 01       	movw	r16, r0
    24be:	87 9f       	mul	r24, r23
    24c0:	10 0d       	add	r17, r0
    24c2:	96 9f       	mul	r25, r22
    24c4:	10 0d       	add	r17, r0
    24c6:	11 24       	eor	r1, r1
    24c8:	c8 01       	movw	r24, r16
    24ca:	0e 94 75 12 	call	0x24ea	; 0x24ea <malloc>
    24ce:	ec 01       	movw	r28, r24
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	29 f0       	breq	.+10     	; 0x24de <calloc+0x2c>
    24d4:	a8 01       	movw	r20, r16
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	0e 94 a7 13 	call	0x274e	; 0x274e <memset>
    24de:	ce 01       	movw	r24, r28
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	08 95       	ret

000024ea <malloc>:
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	91 05       	cpc	r25, r1
    24f2:	10 f4       	brcc	.+4      	; 0x24f8 <malloc+0xe>
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	e0 91 2f 04 	lds	r30, 0x042F
    24fc:	f0 91 30 04 	lds	r31, 0x0430
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	a0 e0       	ldi	r26, 0x00	; 0
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	30 97       	sbiw	r30, 0x00	; 0
    250a:	39 f1       	breq	.+78     	; 0x255a <malloc+0x70>
    250c:	40 81       	ld	r20, Z
    250e:	51 81       	ldd	r21, Z+1	; 0x01
    2510:	48 17       	cp	r20, r24
    2512:	59 07       	cpc	r21, r25
    2514:	b8 f0       	brcs	.+46     	; 0x2544 <malloc+0x5a>
    2516:	48 17       	cp	r20, r24
    2518:	59 07       	cpc	r21, r25
    251a:	71 f4       	brne	.+28     	; 0x2538 <malloc+0x4e>
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	10 97       	sbiw	r26, 0x00	; 0
    2522:	29 f0       	breq	.+10     	; 0x252e <malloc+0x44>
    2524:	13 96       	adiw	r26, 0x03	; 3
    2526:	9c 93       	st	X, r25
    2528:	8e 93       	st	-X, r24
    252a:	12 97       	sbiw	r26, 0x02	; 2
    252c:	2c c0       	rjmp	.+88     	; 0x2586 <malloc+0x9c>
    252e:	90 93 30 04 	sts	0x0430, r25
    2532:	80 93 2f 04 	sts	0x042F, r24
    2536:	27 c0       	rjmp	.+78     	; 0x2586 <malloc+0x9c>
    2538:	21 15       	cp	r18, r1
    253a:	31 05       	cpc	r19, r1
    253c:	31 f0       	breq	.+12     	; 0x254a <malloc+0x60>
    253e:	42 17       	cp	r20, r18
    2540:	53 07       	cpc	r21, r19
    2542:	18 f0       	brcs	.+6      	; 0x254a <malloc+0x60>
    2544:	a9 01       	movw	r20, r18
    2546:	db 01       	movw	r26, r22
    2548:	01 c0       	rjmp	.+2      	; 0x254c <malloc+0x62>
    254a:	ef 01       	movw	r28, r30
    254c:	9a 01       	movw	r18, r20
    254e:	bd 01       	movw	r22, r26
    2550:	df 01       	movw	r26, r30
    2552:	02 80       	ldd	r0, Z+2	; 0x02
    2554:	f3 81       	ldd	r31, Z+3	; 0x03
    2556:	e0 2d       	mov	r30, r0
    2558:	d7 cf       	rjmp	.-82     	; 0x2508 <malloc+0x1e>
    255a:	21 15       	cp	r18, r1
    255c:	31 05       	cpc	r19, r1
    255e:	f9 f0       	breq	.+62     	; 0x259e <malloc+0xb4>
    2560:	28 1b       	sub	r18, r24
    2562:	39 0b       	sbc	r19, r25
    2564:	24 30       	cpi	r18, 0x04	; 4
    2566:	31 05       	cpc	r19, r1
    2568:	80 f4       	brcc	.+32     	; 0x258a <malloc+0xa0>
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	61 15       	cp	r22, r1
    2570:	71 05       	cpc	r23, r1
    2572:	21 f0       	breq	.+8      	; 0x257c <malloc+0x92>
    2574:	fb 01       	movw	r30, r22
    2576:	93 83       	std	Z+3, r25	; 0x03
    2578:	82 83       	std	Z+2, r24	; 0x02
    257a:	04 c0       	rjmp	.+8      	; 0x2584 <malloc+0x9a>
    257c:	90 93 30 04 	sts	0x0430, r25
    2580:	80 93 2f 04 	sts	0x042F, r24
    2584:	fe 01       	movw	r30, r28
    2586:	32 96       	adiw	r30, 0x02	; 2
    2588:	44 c0       	rjmp	.+136    	; 0x2612 <malloc+0x128>
    258a:	fe 01       	movw	r30, r28
    258c:	e2 0f       	add	r30, r18
    258e:	f3 1f       	adc	r31, r19
    2590:	81 93       	st	Z+, r24
    2592:	91 93       	st	Z+, r25
    2594:	22 50       	subi	r18, 0x02	; 2
    2596:	31 09       	sbc	r19, r1
    2598:	39 83       	std	Y+1, r19	; 0x01
    259a:	28 83       	st	Y, r18
    259c:	3a c0       	rjmp	.+116    	; 0x2612 <malloc+0x128>
    259e:	20 91 2d 04 	lds	r18, 0x042D
    25a2:	30 91 2e 04 	lds	r19, 0x042E
    25a6:	23 2b       	or	r18, r19
    25a8:	41 f4       	brne	.+16     	; 0x25ba <malloc+0xd0>
    25aa:	20 91 06 01 	lds	r18, 0x0106
    25ae:	30 91 07 01 	lds	r19, 0x0107
    25b2:	30 93 2e 04 	sts	0x042E, r19
    25b6:	20 93 2d 04 	sts	0x042D, r18
    25ba:	20 91 04 01 	lds	r18, 0x0104
    25be:	30 91 05 01 	lds	r19, 0x0105
    25c2:	21 15       	cp	r18, r1
    25c4:	31 05       	cpc	r19, r1
    25c6:	41 f4       	brne	.+16     	; 0x25d8 <malloc+0xee>
    25c8:	2d b7       	in	r18, 0x3d	; 61
    25ca:	3e b7       	in	r19, 0x3e	; 62
    25cc:	40 91 08 01 	lds	r20, 0x0108
    25d0:	50 91 09 01 	lds	r21, 0x0109
    25d4:	24 1b       	sub	r18, r20
    25d6:	35 0b       	sbc	r19, r21
    25d8:	e0 91 2d 04 	lds	r30, 0x042D
    25dc:	f0 91 2e 04 	lds	r31, 0x042E
    25e0:	e2 17       	cp	r30, r18
    25e2:	f3 07       	cpc	r31, r19
    25e4:	a0 f4       	brcc	.+40     	; 0x260e <malloc+0x124>
    25e6:	2e 1b       	sub	r18, r30
    25e8:	3f 0b       	sbc	r19, r31
    25ea:	28 17       	cp	r18, r24
    25ec:	39 07       	cpc	r19, r25
    25ee:	78 f0       	brcs	.+30     	; 0x260e <malloc+0x124>
    25f0:	ac 01       	movw	r20, r24
    25f2:	4e 5f       	subi	r20, 0xFE	; 254
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	24 17       	cp	r18, r20
    25f8:	35 07       	cpc	r19, r21
    25fa:	48 f0       	brcs	.+18     	; 0x260e <malloc+0x124>
    25fc:	4e 0f       	add	r20, r30
    25fe:	5f 1f       	adc	r21, r31
    2600:	50 93 2e 04 	sts	0x042E, r21
    2604:	40 93 2d 04 	sts	0x042D, r20
    2608:	81 93       	st	Z+, r24
    260a:	91 93       	st	Z+, r25
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <malloc+0x128>
    260e:	e0 e0       	ldi	r30, 0x00	; 0
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	cf 01       	movw	r24, r30
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	08 95       	ret

0000261a <free>:
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	09 f4       	brne	.+2      	; 0x2624 <free+0xa>
    2622:	87 c0       	rjmp	.+270    	; 0x2732 <free+0x118>
    2624:	fc 01       	movw	r30, r24
    2626:	32 97       	sbiw	r30, 0x02	; 2
    2628:	13 82       	std	Z+3, r1	; 0x03
    262a:	12 82       	std	Z+2, r1	; 0x02
    262c:	c0 91 2f 04 	lds	r28, 0x042F
    2630:	d0 91 30 04 	lds	r29, 0x0430
    2634:	20 97       	sbiw	r28, 0x00	; 0
    2636:	81 f4       	brne	.+32     	; 0x2658 <free+0x3e>
    2638:	20 81       	ld	r18, Z
    263a:	31 81       	ldd	r19, Z+1	; 0x01
    263c:	28 0f       	add	r18, r24
    263e:	39 1f       	adc	r19, r25
    2640:	80 91 2d 04 	lds	r24, 0x042D
    2644:	90 91 2e 04 	lds	r25, 0x042E
    2648:	82 17       	cp	r24, r18
    264a:	93 07       	cpc	r25, r19
    264c:	79 f5       	brne	.+94     	; 0x26ac <free+0x92>
    264e:	f0 93 2e 04 	sts	0x042E, r31
    2652:	e0 93 2d 04 	sts	0x042D, r30
    2656:	6d c0       	rjmp	.+218    	; 0x2732 <free+0x118>
    2658:	de 01       	movw	r26, r28
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	ae 17       	cp	r26, r30
    2660:	bf 07       	cpc	r27, r31
    2662:	50 f4       	brcc	.+20     	; 0x2678 <free+0x5e>
    2664:	12 96       	adiw	r26, 0x02	; 2
    2666:	4d 91       	ld	r20, X+
    2668:	5c 91       	ld	r21, X
    266a:	13 97       	sbiw	r26, 0x03	; 3
    266c:	9d 01       	movw	r18, r26
    266e:	41 15       	cp	r20, r1
    2670:	51 05       	cpc	r21, r1
    2672:	09 f1       	breq	.+66     	; 0x26b6 <free+0x9c>
    2674:	da 01       	movw	r26, r20
    2676:	f3 cf       	rjmp	.-26     	; 0x265e <free+0x44>
    2678:	b3 83       	std	Z+3, r27	; 0x03
    267a:	a2 83       	std	Z+2, r26	; 0x02
    267c:	40 81       	ld	r20, Z
    267e:	51 81       	ldd	r21, Z+1	; 0x01
    2680:	84 0f       	add	r24, r20
    2682:	95 1f       	adc	r25, r21
    2684:	8a 17       	cp	r24, r26
    2686:	9b 07       	cpc	r25, r27
    2688:	71 f4       	brne	.+28     	; 0x26a6 <free+0x8c>
    268a:	8d 91       	ld	r24, X+
    268c:	9c 91       	ld	r25, X
    268e:	11 97       	sbiw	r26, 0x01	; 1
    2690:	84 0f       	add	r24, r20
    2692:	95 1f       	adc	r25, r21
    2694:	02 96       	adiw	r24, 0x02	; 2
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	12 96       	adiw	r26, 0x02	; 2
    269c:	8d 91       	ld	r24, X+
    269e:	9c 91       	ld	r25, X
    26a0:	13 97       	sbiw	r26, 0x03	; 3
    26a2:	93 83       	std	Z+3, r25	; 0x03
    26a4:	82 83       	std	Z+2, r24	; 0x02
    26a6:	21 15       	cp	r18, r1
    26a8:	31 05       	cpc	r19, r1
    26aa:	29 f4       	brne	.+10     	; 0x26b6 <free+0x9c>
    26ac:	f0 93 30 04 	sts	0x0430, r31
    26b0:	e0 93 2f 04 	sts	0x042F, r30
    26b4:	3e c0       	rjmp	.+124    	; 0x2732 <free+0x118>
    26b6:	d9 01       	movw	r26, r18
    26b8:	13 96       	adiw	r26, 0x03	; 3
    26ba:	fc 93       	st	X, r31
    26bc:	ee 93       	st	-X, r30
    26be:	12 97       	sbiw	r26, 0x02	; 2
    26c0:	4d 91       	ld	r20, X+
    26c2:	5d 91       	ld	r21, X+
    26c4:	a4 0f       	add	r26, r20
    26c6:	b5 1f       	adc	r27, r21
    26c8:	ea 17       	cp	r30, r26
    26ca:	fb 07       	cpc	r31, r27
    26cc:	79 f4       	brne	.+30     	; 0x26ec <free+0xd2>
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	84 0f       	add	r24, r20
    26d4:	95 1f       	adc	r25, r21
    26d6:	02 96       	adiw	r24, 0x02	; 2
    26d8:	d9 01       	movw	r26, r18
    26da:	11 96       	adiw	r26, 0x01	; 1
    26dc:	9c 93       	st	X, r25
    26de:	8e 93       	st	-X, r24
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	13 96       	adiw	r26, 0x03	; 3
    26e6:	9c 93       	st	X, r25
    26e8:	8e 93       	st	-X, r24
    26ea:	12 97       	sbiw	r26, 0x02	; 2
    26ec:	e0 e0       	ldi	r30, 0x00	; 0
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	19 f0       	breq	.+6      	; 0x26fe <free+0xe4>
    26f8:	fe 01       	movw	r30, r28
    26fa:	ec 01       	movw	r28, r24
    26fc:	f9 cf       	rjmp	.-14     	; 0x26f0 <free+0xd6>
    26fe:	ce 01       	movw	r24, r28
    2700:	02 96       	adiw	r24, 0x02	; 2
    2702:	28 81       	ld	r18, Y
    2704:	39 81       	ldd	r19, Y+1	; 0x01
    2706:	82 0f       	add	r24, r18
    2708:	93 1f       	adc	r25, r19
    270a:	20 91 2d 04 	lds	r18, 0x042D
    270e:	30 91 2e 04 	lds	r19, 0x042E
    2712:	28 17       	cp	r18, r24
    2714:	39 07       	cpc	r19, r25
    2716:	69 f4       	brne	.+26     	; 0x2732 <free+0x118>
    2718:	30 97       	sbiw	r30, 0x00	; 0
    271a:	29 f4       	brne	.+10     	; 0x2726 <free+0x10c>
    271c:	10 92 30 04 	sts	0x0430, r1
    2720:	10 92 2f 04 	sts	0x042F, r1
    2724:	02 c0       	rjmp	.+4      	; 0x272a <free+0x110>
    2726:	13 82       	std	Z+3, r1	; 0x03
    2728:	12 82       	std	Z+2, r1	; 0x02
    272a:	d0 93 2e 04 	sts	0x042E, r29
    272e:	c0 93 2d 04 	sts	0x042D, r28
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <strnlen_P>:
    2738:	fc 01       	movw	r30, r24
    273a:	05 90       	lpm	r0, Z+
    273c:	61 50       	subi	r22, 0x01	; 1
    273e:	70 40       	sbci	r23, 0x00	; 0
    2740:	01 10       	cpse	r0, r1
    2742:	d8 f7       	brcc	.-10     	; 0x273a <strnlen_P+0x2>
    2744:	80 95       	com	r24
    2746:	90 95       	com	r25
    2748:	8e 0f       	add	r24, r30
    274a:	9f 1f       	adc	r25, r31
    274c:	08 95       	ret

0000274e <memset>:
    274e:	dc 01       	movw	r26, r24
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <memset+0x6>
    2752:	6d 93       	st	X+, r22
    2754:	41 50       	subi	r20, 0x01	; 1
    2756:	50 40       	sbci	r21, 0x00	; 0
    2758:	e0 f7       	brcc	.-8      	; 0x2752 <memset+0x4>
    275a:	08 95       	ret

0000275c <strnlen>:
    275c:	fc 01       	movw	r30, r24
    275e:	61 50       	subi	r22, 0x01	; 1
    2760:	70 40       	sbci	r23, 0x00	; 0
    2762:	01 90       	ld	r0, Z+
    2764:	01 10       	cpse	r0, r1
    2766:	d8 f7       	brcc	.-10     	; 0x275e <strnlen+0x2>
    2768:	80 95       	com	r24
    276a:	90 95       	com	r25
    276c:	8e 0f       	add	r24, r30
    276e:	9f 1f       	adc	r25, r31
    2770:	08 95       	ret

00002772 <fputc>:
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	18 2f       	mov	r17, r24
    277c:	09 2f       	mov	r16, r25
    277e:	eb 01       	movw	r28, r22
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	81 fd       	sbrc	r24, 1
    2784:	03 c0       	rjmp	.+6      	; 0x278c <fputc+0x1a>
    2786:	8f ef       	ldi	r24, 0xFF	; 255
    2788:	9f ef       	ldi	r25, 0xFF	; 255
    278a:	20 c0       	rjmp	.+64     	; 0x27cc <fputc+0x5a>
    278c:	82 ff       	sbrs	r24, 2
    278e:	10 c0       	rjmp	.+32     	; 0x27b0 <fputc+0x3e>
    2790:	4e 81       	ldd	r20, Y+6	; 0x06
    2792:	5f 81       	ldd	r21, Y+7	; 0x07
    2794:	2c 81       	ldd	r18, Y+4	; 0x04
    2796:	3d 81       	ldd	r19, Y+5	; 0x05
    2798:	42 17       	cp	r20, r18
    279a:	53 07       	cpc	r21, r19
    279c:	7c f4       	brge	.+30     	; 0x27bc <fputc+0x4a>
    279e:	e8 81       	ld	r30, Y
    27a0:	f9 81       	ldd	r31, Y+1	; 0x01
    27a2:	9f 01       	movw	r18, r30
    27a4:	2f 5f       	subi	r18, 0xFF	; 255
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	39 83       	std	Y+1, r19	; 0x01
    27aa:	28 83       	st	Y, r18
    27ac:	10 83       	st	Z, r17
    27ae:	06 c0       	rjmp	.+12     	; 0x27bc <fputc+0x4a>
    27b0:	e8 85       	ldd	r30, Y+8	; 0x08
    27b2:	f9 85       	ldd	r31, Y+9	; 0x09
    27b4:	81 2f       	mov	r24, r17
    27b6:	09 95       	icall
    27b8:	89 2b       	or	r24, r25
    27ba:	29 f7       	brne	.-54     	; 0x2786 <fputc+0x14>
    27bc:	2e 81       	ldd	r18, Y+6	; 0x06
    27be:	3f 81       	ldd	r19, Y+7	; 0x07
    27c0:	2f 5f       	subi	r18, 0xFF	; 255
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	3f 83       	std	Y+7, r19	; 0x07
    27c6:	2e 83       	std	Y+6, r18	; 0x06
    27c8:	81 2f       	mov	r24, r17
    27ca:	90 2f       	mov	r25, r16
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	08 95       	ret

000027d6 <__ultoa_invert>:
    27d6:	fa 01       	movw	r30, r20
    27d8:	aa 27       	eor	r26, r26
    27da:	28 30       	cpi	r18, 0x08	; 8
    27dc:	51 f1       	breq	.+84     	; 0x2832 <__ultoa_invert+0x5c>
    27de:	20 31       	cpi	r18, 0x10	; 16
    27e0:	81 f1       	breq	.+96     	; 0x2842 <__ultoa_invert+0x6c>
    27e2:	e8 94       	clt
    27e4:	6f 93       	push	r22
    27e6:	6e 7f       	andi	r22, 0xFE	; 254
    27e8:	6e 5f       	subi	r22, 0xFE	; 254
    27ea:	7f 4f       	sbci	r23, 0xFF	; 255
    27ec:	8f 4f       	sbci	r24, 0xFF	; 255
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	af 4f       	sbci	r26, 0xFF	; 255
    27f2:	b1 e0       	ldi	r27, 0x01	; 1
    27f4:	3e d0       	rcall	.+124    	; 0x2872 <__ultoa_invert+0x9c>
    27f6:	b4 e0       	ldi	r27, 0x04	; 4
    27f8:	3c d0       	rcall	.+120    	; 0x2872 <__ultoa_invert+0x9c>
    27fa:	67 0f       	add	r22, r23
    27fc:	78 1f       	adc	r23, r24
    27fe:	89 1f       	adc	r24, r25
    2800:	9a 1f       	adc	r25, r26
    2802:	a1 1d       	adc	r26, r1
    2804:	68 0f       	add	r22, r24
    2806:	79 1f       	adc	r23, r25
    2808:	8a 1f       	adc	r24, r26
    280a:	91 1d       	adc	r25, r1
    280c:	a1 1d       	adc	r26, r1
    280e:	6a 0f       	add	r22, r26
    2810:	71 1d       	adc	r23, r1
    2812:	81 1d       	adc	r24, r1
    2814:	91 1d       	adc	r25, r1
    2816:	a1 1d       	adc	r26, r1
    2818:	20 d0       	rcall	.+64     	; 0x285a <__ultoa_invert+0x84>
    281a:	09 f4       	brne	.+2      	; 0x281e <__ultoa_invert+0x48>
    281c:	68 94       	set
    281e:	3f 91       	pop	r19
    2820:	2a e0       	ldi	r18, 0x0A	; 10
    2822:	26 9f       	mul	r18, r22
    2824:	11 24       	eor	r1, r1
    2826:	30 19       	sub	r19, r0
    2828:	30 5d       	subi	r19, 0xD0	; 208
    282a:	31 93       	st	Z+, r19
    282c:	de f6       	brtc	.-74     	; 0x27e4 <__ultoa_invert+0xe>
    282e:	cf 01       	movw	r24, r30
    2830:	08 95       	ret
    2832:	46 2f       	mov	r20, r22
    2834:	47 70       	andi	r20, 0x07	; 7
    2836:	40 5d       	subi	r20, 0xD0	; 208
    2838:	41 93       	st	Z+, r20
    283a:	b3 e0       	ldi	r27, 0x03	; 3
    283c:	0f d0       	rcall	.+30     	; 0x285c <__ultoa_invert+0x86>
    283e:	c9 f7       	brne	.-14     	; 0x2832 <__ultoa_invert+0x5c>
    2840:	f6 cf       	rjmp	.-20     	; 0x282e <__ultoa_invert+0x58>
    2842:	46 2f       	mov	r20, r22
    2844:	4f 70       	andi	r20, 0x0F	; 15
    2846:	40 5d       	subi	r20, 0xD0	; 208
    2848:	4a 33       	cpi	r20, 0x3A	; 58
    284a:	18 f0       	brcs	.+6      	; 0x2852 <__ultoa_invert+0x7c>
    284c:	49 5d       	subi	r20, 0xD9	; 217
    284e:	31 fd       	sbrc	r19, 1
    2850:	40 52       	subi	r20, 0x20	; 32
    2852:	41 93       	st	Z+, r20
    2854:	02 d0       	rcall	.+4      	; 0x285a <__ultoa_invert+0x84>
    2856:	a9 f7       	brne	.-22     	; 0x2842 <__ultoa_invert+0x6c>
    2858:	ea cf       	rjmp	.-44     	; 0x282e <__ultoa_invert+0x58>
    285a:	b4 e0       	ldi	r27, 0x04	; 4
    285c:	a6 95       	lsr	r26
    285e:	97 95       	ror	r25
    2860:	87 95       	ror	r24
    2862:	77 95       	ror	r23
    2864:	67 95       	ror	r22
    2866:	ba 95       	dec	r27
    2868:	c9 f7       	brne	.-14     	; 0x285c <__ultoa_invert+0x86>
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	61 05       	cpc	r22, r1
    286e:	71 05       	cpc	r23, r1
    2870:	08 95       	ret
    2872:	9b 01       	movw	r18, r22
    2874:	ac 01       	movw	r20, r24
    2876:	0a 2e       	mov	r0, r26
    2878:	06 94       	lsr	r0
    287a:	57 95       	ror	r21
    287c:	47 95       	ror	r20
    287e:	37 95       	ror	r19
    2880:	27 95       	ror	r18
    2882:	ba 95       	dec	r27
    2884:	c9 f7       	brne	.-14     	; 0x2878 <__ultoa_invert+0xa2>
    2886:	62 0f       	add	r22, r18
    2888:	73 1f       	adc	r23, r19
    288a:	84 1f       	adc	r24, r20
    288c:	95 1f       	adc	r25, r21
    288e:	a0 1d       	adc	r26, r0
    2890:	08 95       	ret

00002892 <__divmodsi4>:
    2892:	05 2e       	mov	r0, r21
    2894:	97 fb       	bst	r25, 7
    2896:	1e f4       	brtc	.+6      	; 0x289e <__divmodsi4+0xc>
    2898:	00 94       	com	r0
    289a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__negsi2>
    289e:	57 fd       	sbrc	r21, 7
    28a0:	07 d0       	rcall	.+14     	; 0x28b0 <__divmodsi4_neg2>
    28a2:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodsi4>
    28a6:	07 fc       	sbrc	r0, 7
    28a8:	03 d0       	rcall	.+6      	; 0x28b0 <__divmodsi4_neg2>
    28aa:	4e f4       	brtc	.+18     	; 0x28be <__divmodsi4_exit>
    28ac:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__negsi2>

000028b0 <__divmodsi4_neg2>:
    28b0:	50 95       	com	r21
    28b2:	40 95       	com	r20
    28b4:	30 95       	com	r19
    28b6:	21 95       	neg	r18
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	4f 4f       	sbci	r20, 0xFF	; 255
    28bc:	5f 4f       	sbci	r21, 0xFF	; 255

000028be <__divmodsi4_exit>:
    28be:	08 95       	ret

000028c0 <__negsi2>:
    28c0:	90 95       	com	r25
    28c2:	80 95       	com	r24
    28c4:	70 95       	com	r23
    28c6:	61 95       	neg	r22
    28c8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ca:	8f 4f       	sbci	r24, 0xFF	; 255
    28cc:	9f 4f       	sbci	r25, 0xFF	; 255
    28ce:	08 95       	ret

000028d0 <__muluhisi3>:
    28d0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__umulhisi3>
    28d4:	a5 9f       	mul	r26, r21
    28d6:	90 0d       	add	r25, r0
    28d8:	b4 9f       	mul	r27, r20
    28da:	90 0d       	add	r25, r0
    28dc:	a4 9f       	mul	r26, r20
    28de:	80 0d       	add	r24, r0
    28e0:	91 1d       	adc	r25, r1
    28e2:	11 24       	eor	r1, r1
    28e4:	08 95       	ret

000028e6 <__mulshisi3>:
    28e6:	b7 ff       	sbrs	r27, 7
    28e8:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__muluhisi3>

000028ec <__mulohisi3>:
    28ec:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__muluhisi3>
    28f0:	82 1b       	sub	r24, r18
    28f2:	93 0b       	sbc	r25, r19
    28f4:	08 95       	ret

000028f6 <__prologue_saves__>:
    28f6:	2f 92       	push	r2
    28f8:	3f 92       	push	r3
    28fa:	4f 92       	push	r4
    28fc:	5f 92       	push	r5
    28fe:	6f 92       	push	r6
    2900:	7f 92       	push	r7
    2902:	8f 92       	push	r8
    2904:	9f 92       	push	r9
    2906:	af 92       	push	r10
    2908:	bf 92       	push	r11
    290a:	cf 92       	push	r12
    290c:	df 92       	push	r13
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	ca 1b       	sub	r28, r26
    2920:	db 0b       	sbc	r29, r27
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	09 94       	ijmp

0000292e <__epilogue_restores__>:
    292e:	2a 88       	ldd	r2, Y+18	; 0x12
    2930:	39 88       	ldd	r3, Y+17	; 0x11
    2932:	48 88       	ldd	r4, Y+16	; 0x10
    2934:	5f 84       	ldd	r5, Y+15	; 0x0f
    2936:	6e 84       	ldd	r6, Y+14	; 0x0e
    2938:	7d 84       	ldd	r7, Y+13	; 0x0d
    293a:	8c 84       	ldd	r8, Y+12	; 0x0c
    293c:	9b 84       	ldd	r9, Y+11	; 0x0b
    293e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2940:	b9 84       	ldd	r11, Y+9	; 0x09
    2942:	c8 84       	ldd	r12, Y+8	; 0x08
    2944:	df 80       	ldd	r13, Y+7	; 0x07
    2946:	ee 80       	ldd	r14, Y+6	; 0x06
    2948:	fd 80       	ldd	r15, Y+5	; 0x05
    294a:	0c 81       	ldd	r16, Y+4	; 0x04
    294c:	1b 81       	ldd	r17, Y+3	; 0x03
    294e:	aa 81       	ldd	r26, Y+2	; 0x02
    2950:	b9 81       	ldd	r27, Y+1	; 0x01
    2952:	ce 0f       	add	r28, r30
    2954:	d1 1d       	adc	r29, r1
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	ed 01       	movw	r28, r26
    2962:	08 95       	ret

00002964 <__udivmodsi4>:
    2964:	a1 e2       	ldi	r26, 0x21	; 33
    2966:	1a 2e       	mov	r1, r26
    2968:	aa 1b       	sub	r26, r26
    296a:	bb 1b       	sub	r27, r27
    296c:	fd 01       	movw	r30, r26
    296e:	0d c0       	rjmp	.+26     	; 0x298a <__udivmodsi4_ep>

00002970 <__udivmodsi4_loop>:
    2970:	aa 1f       	adc	r26, r26
    2972:	bb 1f       	adc	r27, r27
    2974:	ee 1f       	adc	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	a2 17       	cp	r26, r18
    297a:	b3 07       	cpc	r27, r19
    297c:	e4 07       	cpc	r30, r20
    297e:	f5 07       	cpc	r31, r21
    2980:	20 f0       	brcs	.+8      	; 0x298a <__udivmodsi4_ep>
    2982:	a2 1b       	sub	r26, r18
    2984:	b3 0b       	sbc	r27, r19
    2986:	e4 0b       	sbc	r30, r20
    2988:	f5 0b       	sbc	r31, r21

0000298a <__udivmodsi4_ep>:
    298a:	66 1f       	adc	r22, r22
    298c:	77 1f       	adc	r23, r23
    298e:	88 1f       	adc	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	1a 94       	dec	r1
    2994:	69 f7       	brne	.-38     	; 0x2970 <__udivmodsi4_loop>
    2996:	60 95       	com	r22
    2998:	70 95       	com	r23
    299a:	80 95       	com	r24
    299c:	90 95       	com	r25
    299e:	9b 01       	movw	r18, r22
    29a0:	ac 01       	movw	r20, r24
    29a2:	bd 01       	movw	r22, r26
    29a4:	cf 01       	movw	r24, r30
    29a6:	08 95       	ret

000029a8 <__umulhisi3>:
    29a8:	a2 9f       	mul	r26, r18
    29aa:	b0 01       	movw	r22, r0
    29ac:	b3 9f       	mul	r27, r19
    29ae:	c0 01       	movw	r24, r0
    29b0:	a3 9f       	mul	r26, r19
    29b2:	70 0d       	add	r23, r0
    29b4:	81 1d       	adc	r24, r1
    29b6:	11 24       	eor	r1, r1
    29b8:	91 1d       	adc	r25, r1
    29ba:	b2 9f       	mul	r27, r18
    29bc:	70 0d       	add	r23, r0
    29be:	81 1d       	adc	r24, r1
    29c0:	11 24       	eor	r1, r1
    29c2:	91 1d       	adc	r25, r1
    29c4:	08 95       	ret

000029c6 <_exit>:
    29c6:	f8 94       	cli

000029c8 <__stop_program>:
    29c8:	ff cf       	rjmp	.-2      	; 0x29c8 <__stop_program>
