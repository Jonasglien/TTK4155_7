
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800100  00002852  000028e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  008002f4  008002f4  00002ada  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000380  00000000  00000000  00002b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c03  00000000  00000000  00002eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010e2  00000000  00000000  00006ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000129f  00000000  00000000  00007b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ac8  00000000  00000000  00008e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d43  00000000  00000000  00009904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000028f0  00000000  00000000  0000a647  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000348  00000000  00000000  0000cf37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_1>
       8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_2>
       c:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_3>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_16>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      54:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      58:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      5c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      60:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      64:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      68:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      6c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_3>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_2>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_1>:
      ea:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000f4 <font>:
	...
      fc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     10c:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     11c:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     12c:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     13c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     14c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     15c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     16c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     17c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     18c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     19c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ac:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1bc:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1cc:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1dc:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1ec:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1fc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     20c:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     21c:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     22c:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     23c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     24c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     25c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     26c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     27c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     28c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     29c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ac:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2bc:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2cc:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2dc:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2ec:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2fc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     30c:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     31c:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     32c:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     33c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     34c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     35c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     36c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     37c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     38c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     39c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ac:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3bc:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3cc:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3dc:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3ec:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3fc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     40c:	01 01 01 01 01 01 01 ff                             ........

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d4 e0       	ldi	r29, 0x04	; 4
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	12 e0       	ldi	r17, 0x02	; 2
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	e2 e5       	ldi	r30, 0x52	; 82
     428:	f8 e2       	ldi	r31, 0x28	; 40
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x10>
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a4 3f       	cpi	r26, 0xF4	; 244
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0xc>

00000436 <__do_clear_bss>:
     436:	23 e0       	ldi	r18, 0x03	; 3
     438:	a4 ef       	ldi	r26, 0xF4	; 244
     43a:	b2 e0       	ldi	r27, 0x02	; 2
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a6 38       	cpi	r26, 0x86	; 134
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 17 06 	call	0xc2e	; 0xc2e <main>
     44a:	0c 94 27 14 	jmp	0x284e	; 0x284e <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000452 <readADC>:
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	91 05       	cpc	r25, r1
     456:	71 f0       	breq	.+28     	; 0x474 <readADC+0x22>
     458:	1c f4       	brge	.+6      	; 0x460 <readADC+0xe>
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	39 f0       	breq	.+14     	; 0x46c <readADC+0x1a>
     45e:	1c c0       	rjmp	.+56     	; 0x498 <readADC+0x46>
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	91 05       	cpc	r25, r1
     464:	59 f0       	breq	.+22     	; 0x47c <readADC+0x2a>
     466:	04 97       	sbiw	r24, 0x04	; 4
     468:	69 f0       	breq	.+26     	; 0x484 <readADC+0x32>
     46a:	16 c0       	rjmp	.+44     	; 0x498 <readADC+0x46>
     46c:	84 e1       	ldi	r24, 0x14	; 20
     46e:	80 93 00 14 	sts	0x1400, r24
     472:	0b c0       	rjmp	.+22     	; 0x48a <readADC+0x38>
     474:	85 e1       	ldi	r24, 0x15	; 21
     476:	80 93 00 14 	sts	0x1400, r24
     47a:	07 c0       	rjmp	.+14     	; 0x48a <readADC+0x38>
     47c:	86 e1       	ldi	r24, 0x16	; 22
     47e:	80 93 00 14 	sts	0x1400, r24
     482:	03 c0       	rjmp	.+6      	; 0x48a <readADC+0x38>
     484:	87 e1       	ldi	r24, 0x17	; 23
     486:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	82 e5       	ldi	r24, 0x52	; 82
     48c:	8a 95       	dec	r24
     48e:	f1 f7       	brne	.-4      	; 0x48c <readADC+0x3a>
     490:	80 91 00 14 	lds	r24, 0x1400
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	08 95       	ret
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	08 95       	ret

0000049e <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     49e:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     4a0:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     4a2:	85 b7       	in	r24, 0x35	; 53
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     4a8:	85 b7       	in	r24, 0x35	; 53
     4aa:	82 60       	ori	r24, 0x02	; 2
     4ac:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     4ae:	85 b7       	in	r24, 0x35	; 53
     4b0:	84 60       	ori	r24, 0x04	; 4
     4b2:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     4b4:	85 b7       	in	r24, 0x35	; 53
     4b6:	88 60       	ori	r24, 0x08	; 8
     4b8:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     4ba:	8b b7       	in	r24, 0x3b	; 59
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     4c0:	8b b7       	in	r24, 0x3b	; 59
     4c2:	80 68       	ori	r24, 0x80	; 128
     4c4:	8b bf       	out	0x3b, r24	; 59
     4c6:	08 95       	ret

000004c8 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	2f 93       	push	r18
     4dc:	3f 93       	push	r19
     4de:	4f 93       	push	r20
     4e0:	5f 93       	push	r21
     4e2:	6f 93       	push	r22
     4e4:	7f 93       	push	r23
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4f6:	8c e0       	ldi	r24, 0x0C	; 12
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 1a 10 	call	0x2034	; 0x2034 <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     502:	82 e5       	ldi	r24, 0x52	; 82
     504:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     508:	f8 2e       	mov	r15, r24
     50a:	e9 2e       	mov	r14, r25
     50c:	8c e4       	ldi	r24, 0x4C	; 76
     50e:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     512:	18 2f       	mov	r17, r24
     514:	09 2f       	mov	r16, r25
     516:	89 e5       	ldi	r24, 0x59	; 89
     518:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     51c:	c8 2f       	mov	r28, r24
     51e:	d9 2f       	mov	r29, r25
     520:	88 e5       	ldi	r24, 0x58	; 88
     522:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	85 e3       	ldi	r24, 0x35	; 53
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	0e 94 1a 10 	call	0x2034	; 0x2034 <printf>
	menu_right_button_flag();
     542:	0e 94 08 07 	call	0xe10	; 0xe10 <menu_right_button_flag>
     546:	8d b7       	in	r24, 0x3d	; 61
     548:	9e b7       	in	r25, 0x3e	; 62
     54a:	0c 96       	adiw	r24, 0x0c	; 12
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	9e bf       	out	0x3e, r25	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	8d bf       	out	0x3d, r24	; 61
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
	menu_left_button_flag();
     5a6:	0e 94 04 07 	call	0xe08	; 0xe08 <menu_left_button_flag>
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	0f 90       	pop	r0
     5c8:	1f 90       	pop	r1
     5ca:	18 95       	reti

000005cc <CAN_construct_meassage>:
CAN_message_t* CAN_message_receive(void){	
	return &CAN_receive_buffer;
}

void CAN_construct_meassage(int id, uint8_t length){
	CAN_send_buffer.id = id;
     5cc:	90 93 f6 02 	sts	0x02F6, r25
     5d0:	80 93 f5 02 	sts	0x02F5, r24
	CAN_send_buffer.length = length;
     5d4:	60 93 f7 02 	sts	0x02F7, r22
	for(uint8_t i = 0; i < length; i++){
     5d8:	66 23       	and	r22, r22
     5da:	41 f0       	breq	.+16     	; 0x5ec <CAN_construct_meassage+0x20>
     5dc:	88 ef       	ldi	r24, 0xF8	; 248
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
     5e2:	11 92       	st	Z+, r1
     5e4:	2e 2f       	mov	r18, r30
     5e6:	28 1b       	sub	r18, r24
}

void CAN_construct_meassage(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
     5e8:	26 17       	cp	r18, r22
     5ea:	d8 f3       	brcs	.-10     	; 0x5e2 <CAN_construct_meassage+0x16>
     5ec:	08 95       	ret

000005ee <CAN_initialize>:
uint8_t FLAG_new_message = 0;

void CAN_initialize(void){
	int i = 1;
	i++;
	EMCUCR &= ~(1<<ISC2);
     5ee:	86 b7       	in	r24, 0x36	; 54
     5f0:	8e 7f       	andi	r24, 0xFE	; 254
     5f2:	86 bf       	out	0x36, r24	; 54
	GICR |= (1<<INT2);
     5f4:	8b b7       	in	r24, 0x3b	; 59
     5f6:	80 62       	ori	r24, 0x20	; 32
     5f8:	8b bf       	out	0x3b, r24	; 59
	MCP2515_bit_modify(CANINTE,0b00000001,0b00000001);
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	0e 94 29 06 	call	0xc52	; 0xc52 <MCP2515_bit_modify>
	CAN_construct_meassage(CAN_ID,CAN_MESSAGE_LENGTH);
     604:	68 e0       	ldi	r22, 0x08	; 8
     606:	88 e2       	ldi	r24, 0x28	; 40
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <CAN_construct_meassage>
     60e:	08 95       	ret

00000610 <__vector_3>:
	MCP2515_bit_modify(MCP_CANINTF,0xFF,0); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
}



ISR(INT2_vect){//interrupt incomming message
     610:	1f 92       	push	r1
     612:	0f 92       	push	r0
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	8f 93       	push	r24
	cli();
     61c:	f8 94       	cli
	//IF there is a message in inbox 0, flag 1<<0, then if there is a message in inbox 1, flag 1<<1 this
	FLAG_new_message = 0b01;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 f4 02 	sts	0x02F4, r24
	sei();
     624:	78 94       	sei
}
     626:	8f 91       	pop	r24
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <calibrate_joystick>:
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	c4 e6       	ldi	r28, 0x64	; 100
     63c:	d0 e0       	ldi	r29, 0x00	; 0
     63e:	00 91 0a 03 	lds	r16, 0x030A
     642:	10 91 0b 03 	lds	r17, 0x030B
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     64e:	01 58       	subi	r16, 0x81	; 129
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	08 1b       	sub	r16, r24
     654:	19 0b       	sbc	r17, r25
     656:	10 93 0b 03 	sts	0x030B, r17
     65a:	00 93 0a 03 	sts	0x030A, r16
     65e:	00 91 08 03 	lds	r16, 0x0308
     662:	10 91 09 03 	lds	r17, 0x0309
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     66e:	01 58       	subi	r16, 0x81	; 129
     670:	1f 4f       	sbci	r17, 0xFF	; 255
     672:	08 1b       	sub	r16, r24
     674:	19 0b       	sbc	r17, r25
     676:	10 93 09 03 	sts	0x0309, r17
     67a:	00 93 08 03 	sts	0x0308, r16
     67e:	21 97       	sbiw	r28, 0x01	; 1
     680:	20 97       	sbiw	r28, 0x00	; 0
     682:	e9 f6       	brne	.-70     	; 0x63e <calibrate_joystick+0xc>
     684:	80 91 0a 03 	lds	r24, 0x030A
     688:	90 91 0b 03 	lds	r25, 0x030B
     68c:	24 e6       	ldi	r18, 0x64	; 100
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	b9 01       	movw	r22, r18
     692:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divmodhi4>
     696:	70 93 0b 03 	sts	0x030B, r23
     69a:	60 93 0a 03 	sts	0x030A, r22
     69e:	80 91 08 03 	lds	r24, 0x0308
     6a2:	90 91 09 03 	lds	r25, 0x0309
     6a6:	b9 01       	movw	r22, r18
     6a8:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divmodhi4>
     6ac:	70 93 09 03 	sts	0x0309, r23
     6b0:	60 93 08 03 	sts	0x0308, r22
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <signal_to_range>:
     6be:	2f 92       	push	r2
     6c0:	3f 92       	push	r3
     6c2:	4f 92       	push	r4
     6c4:	5f 92       	push	r5
     6c6:	6f 92       	push	r6
     6c8:	7f 92       	push	r7
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <signal_to_range+0x26>
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <signal_to_range+0x28>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <signal_to_range+0x2a>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	3c 01       	movw	r6, r24
     6ee:	7a 83       	std	Y+2, r23	; 0x02
     6f0:	69 83       	std	Y+1, r22	; 0x01
     6f2:	5c 83       	std	Y+4, r21	; 0x04
     6f4:	4b 83       	std	Y+3, r20	; 0x03
     6f6:	3e 83       	std	Y+6, r19	; 0x06
     6f8:	2d 83       	std	Y+5, r18	; 0x05
     6fa:	18 01       	movw	r2, r16
     6fc:	85 01       	movw	r16, r10
     6fe:	b9 01       	movw	r22, r18
     700:	88 27       	eor	r24, r24
     702:	77 fd       	sbrc	r23, 7
     704:	80 95       	com	r24
     706:	98 2f       	mov	r25, r24
     708:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
     70c:	4b 01       	movw	r8, r22
     70e:	5c 01       	movw	r10, r24
     710:	b3 01       	movw	r22, r6
     712:	6e 0d       	add	r22, r14
     714:	7f 1d       	adc	r23, r15
     716:	29 81       	ldd	r18, Y+1	; 0x01
     718:	3a 81       	ldd	r19, Y+2	; 0x02
     71a:	62 1b       	sub	r22, r18
     71c:	73 0b       	sbc	r23, r19
     71e:	88 27       	eor	r24, r24
     720:	77 fd       	sbrc	r23, 7
     722:	80 95       	com	r24
     724:	98 2f       	mov	r25, r24
     726:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
     72a:	2b 01       	movw	r4, r22
     72c:	3c 01       	movw	r6, r24
     72e:	b1 01       	movw	r22, r2
     730:	8d 81       	ldd	r24, Y+5	; 0x05
     732:	9e 81       	ldd	r25, Y+6	; 0x06
     734:	68 1b       	sub	r22, r24
     736:	79 0b       	sbc	r23, r25
     738:	88 27       	eor	r24, r24
     73a:	77 fd       	sbrc	r23, 7
     73c:	80 95       	com	r24
     73e:	98 2f       	mov	r25, r24
     740:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	c3 01       	movw	r24, r6
     74a:	b2 01       	movw	r22, r4
     74c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__mulsf3>
     750:	2b 01       	movw	r4, r22
     752:	3c 01       	movw	r6, r24
     754:	6b 81       	ldd	r22, Y+3	; 0x03
     756:	7c 81       	ldd	r23, Y+4	; 0x04
     758:	e9 81       	ldd	r30, Y+1	; 0x01
     75a:	fa 81       	ldd	r31, Y+2	; 0x02
     75c:	6e 1b       	sub	r22, r30
     75e:	7f 0b       	sbc	r23, r31
     760:	88 27       	eor	r24, r24
     762:	77 fd       	sbrc	r23, 7
     764:	80 95       	com	r24
     766:	98 2f       	mov	r25, r24
     768:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	c3 01       	movw	r24, r6
     772:	b2 01       	movw	r22, r4
     774:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divsf3>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	c5 01       	movw	r24, r10
     77e:	b4 01       	movw	r22, r8
     780:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__addsf3>
     784:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fixsfsi>
     788:	c1 01       	movw	r24, r2
     78a:	80 1b       	sub	r24, r16
     78c:	91 0b       	sbc	r25, r17
     78e:	68 17       	cp	r22, r24
     790:	79 07       	cpc	r23, r25
     792:	74 f5       	brge	.+92     	; 0x7f0 <signal_to_range+0x132>
     794:	8d 81       	ldd	r24, Y+5	; 0x05
     796:	9e 81       	ldd	r25, Y+6	; 0x06
     798:	80 0f       	add	r24, r16
     79a:	91 1f       	adc	r25, r17
     79c:	86 17       	cp	r24, r22
     79e:	97 07       	cpc	r25, r23
     7a0:	4c f5       	brge	.+82     	; 0x7f4 <signal_to_range+0x136>
     7a2:	f8 01       	movw	r30, r16
     7a4:	11 23       	and	r17, r17
     7a6:	0c f4       	brge	.+2      	; 0x7aa <signal_to_range+0xec>
     7a8:	31 96       	adiw	r30, 0x01	; 1
     7aa:	f5 95       	asr	r31
     7ac:	e7 95       	ror	r30
     7ae:	d8 01       	movw	r26, r16
     7b0:	12 c0       	rjmp	.+36     	; 0x7d6 <signal_to_range+0x118>
     7b2:	8a 0f       	add	r24, r26
     7b4:	9b 1f       	adc	r25, r27
     7b6:	ac 01       	movw	r20, r24
     7b8:	4e 0f       	add	r20, r30
     7ba:	5f 1f       	adc	r21, r31
     7bc:	64 17       	cp	r22, r20
     7be:	75 07       	cpc	r23, r21
     7c0:	14 f0       	brlt	.+4      	; 0x7c6 <signal_to_range+0x108>
     7c2:	69 01       	movw	r12, r18
     7c4:	0b c0       	rjmp	.+22     	; 0x7dc <signal_to_range+0x11e>
     7c6:	c6 01       	movw	r24, r12
     7c8:	8e 1b       	sub	r24, r30
     7ca:	9f 0b       	sbc	r25, r31
     7cc:	86 17       	cp	r24, r22
     7ce:	97 07       	cpc	r25, r23
     7d0:	14 f0       	brlt	.+4      	; 0x7d6 <signal_to_range+0x118>
     7d2:	c0 1a       	sub	r12, r16
     7d4:	d1 0a       	sbc	r13, r17
     7d6:	c6 01       	movw	r24, r12
     7d8:	80 1b       	sub	r24, r16
     7da:	91 0b       	sbc	r25, r17
     7dc:	96 01       	movw	r18, r12
     7de:	20 0f       	add	r18, r16
     7e0:	31 1f       	adc	r19, r17
     7e2:	62 17       	cp	r22, r18
     7e4:	73 07       	cpc	r23, r19
     7e6:	2c f7       	brge	.-54     	; 0x7b2 <signal_to_range+0xf4>
     7e8:	86 17       	cp	r24, r22
     7ea:	97 07       	cpc	r25, r23
     7ec:	14 f7       	brge	.-60     	; 0x7b2 <signal_to_range+0xf4>
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <signal_to_range+0x13a>
     7f0:	61 01       	movw	r12, r2
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <signal_to_range+0x13a>
     7f4:	cd 80       	ldd	r12, Y+5	; 0x05
     7f6:	de 80       	ldd	r13, Y+6	; 0x06
     7f8:	c6 01       	movw	r24, r12
     7fa:	26 96       	adiw	r28, 0x06	; 6
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	9f 90       	pop	r9
     81c:	8f 90       	pop	r8
     81e:	7f 90       	pop	r7
     820:	6f 90       	pop	r6
     822:	5f 90       	pop	r5
     824:	4f 90       	pop	r4
     826:	3f 90       	pop	r3
     828:	2f 90       	pop	r2
     82a:	08 95       	ret

0000082c <read_control_input>:
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	82 35       	cpi	r24, 0x52	; 82
     83e:	09 f4       	brne	.+2      	; 0x842 <read_control_input+0x16>
     840:	74 c0       	rjmp	.+232    	; 0x92a <read_control_input+0xfe>
     842:	20 f4       	brcc	.+8      	; 0x84c <read_control_input+0x20>
     844:	8c 34       	cpi	r24, 0x4C	; 76
     846:	09 f4       	brne	.+2      	; 0x84a <read_control_input+0x1e>
     848:	4e c0       	rjmp	.+156    	; 0x8e6 <read_control_input+0xba>
     84a:	91 c0       	rjmp	.+290    	; 0x96e <read_control_input+0x142>
     84c:	88 35       	cpi	r24, 0x58	; 88
     84e:	19 f0       	breq	.+6      	; 0x856 <read_control_input+0x2a>
     850:	89 35       	cpi	r24, 0x59	; 89
     852:	29 f1       	breq	.+74     	; 0x89e <read_control_input+0x72>
     854:	8c c0       	rjmp	.+280    	; 0x96e <read_control_input+0x142>
     856:	c0 90 06 03 	lds	r12, 0x0306
     85a:	d0 90 07 03 	lds	r13, 0x0307
     85e:	e0 90 0a 03 	lds	r14, 0x030A
     862:	f0 90 0b 03 	lds	r15, 0x030B
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     86e:	0f 2e       	mov	r0, r31
     870:	fa e0       	ldi	r31, 0x0A	; 10
     872:	af 2e       	mov	r10, r31
     874:	b1 2c       	mov	r11, r1
     876:	f0 2d       	mov	r31, r0
     878:	04 e6       	ldi	r16, 0x64	; 100
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	2c e9       	ldi	r18, 0x9C	; 156
     87e:	3f ef       	ldi	r19, 0xFF	; 255
     880:	4f ef       	ldi	r20, 0xFF	; 255
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 5f 03 	call	0x6be	; 0x6be <signal_to_range>
     88c:	90 93 07 03 	sts	0x0307, r25
     890:	80 93 06 03 	sts	0x0306, r24
     894:	80 91 06 03 	lds	r24, 0x0306
     898:	90 91 07 03 	lds	r25, 0x0307
     89c:	6a c0       	rjmp	.+212    	; 0x972 <read_control_input+0x146>
     89e:	c0 90 04 03 	lds	r12, 0x0304
     8a2:	d0 90 05 03 	lds	r13, 0x0305
     8a6:	e0 90 08 03 	lds	r14, 0x0308
     8aa:	f0 90 09 03 	lds	r15, 0x0309
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     8b6:	0f 2e       	mov	r0, r31
     8b8:	fa e0       	ldi	r31, 0x0A	; 10
     8ba:	af 2e       	mov	r10, r31
     8bc:	b1 2c       	mov	r11, r1
     8be:	f0 2d       	mov	r31, r0
     8c0:	04 e6       	ldi	r16, 0x64	; 100
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	2c e9       	ldi	r18, 0x9C	; 156
     8c6:	3f ef       	ldi	r19, 0xFF	; 255
     8c8:	4f ef       	ldi	r20, 0xFF	; 255
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	0e 94 5f 03 	call	0x6be	; 0x6be <signal_to_range>
     8d4:	90 93 05 03 	sts	0x0305, r25
     8d8:	80 93 04 03 	sts	0x0304, r24
     8dc:	80 91 04 03 	lds	r24, 0x0304
     8e0:	90 91 05 03 	lds	r25, 0x0305
     8e4:	46 c0       	rjmp	.+140    	; 0x972 <read_control_input+0x146>
     8e6:	c0 90 02 03 	lds	r12, 0x0302
     8ea:	d0 90 03 03 	lds	r13, 0x0303
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     8f6:	0f 2e       	mov	r0, r31
     8f8:	fa e0       	ldi	r31, 0x0A	; 10
     8fa:	af 2e       	mov	r10, r31
     8fc:	b1 2c       	mov	r11, r1
     8fe:	f0 2d       	mov	r31, r0
     900:	e1 2c       	mov	r14, r1
     902:	f1 2c       	mov	r15, r1
     904:	04 e6       	ldi	r16, 0x64	; 100
     906:	10 e0       	ldi	r17, 0x00	; 0
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	4f ef       	ldi	r20, 0xFF	; 255
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	0e 94 5f 03 	call	0x6be	; 0x6be <signal_to_range>
     918:	90 93 03 03 	sts	0x0303, r25
     91c:	80 93 02 03 	sts	0x0302, r24
     920:	80 91 02 03 	lds	r24, 0x0302
     924:	90 91 03 03 	lds	r25, 0x0303
     928:	24 c0       	rjmp	.+72     	; 0x972 <read_control_input+0x146>
     92a:	c0 90 00 03 	lds	r12, 0x0300
     92e:	d0 90 01 03 	lds	r13, 0x0301
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     93a:	0f 2e       	mov	r0, r31
     93c:	fa e0       	ldi	r31, 0x0A	; 10
     93e:	af 2e       	mov	r10, r31
     940:	b1 2c       	mov	r11, r1
     942:	f0 2d       	mov	r31, r0
     944:	e1 2c       	mov	r14, r1
     946:	f1 2c       	mov	r15, r1
     948:	04 e6       	ldi	r16, 0x64	; 100
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	4f ef       	ldi	r20, 0xFF	; 255
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	0e 94 5f 03 	call	0x6be	; 0x6be <signal_to_range>
     95c:	90 93 01 03 	sts	0x0301, r25
     960:	80 93 00 03 	sts	0x0300, r24
     964:	80 91 00 03 	lds	r24, 0x0300
     968:	90 91 01 03 	lds	r25, 0x0301
     96c:	02 c0       	rjmp	.+4      	; 0x972 <read_control_input+0x146>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	08 95       	ret

00000984 <initialize_control_input>:
     984:	0e 94 19 03 	call	0x632	; 0x632 <calibrate_joystick>
     988:	88 e5       	ldi	r24, 0x58	; 88
     98a:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     98e:	90 93 07 03 	sts	0x0307, r25
     992:	80 93 06 03 	sts	0x0306, r24
     996:	89 e5       	ldi	r24, 0x59	; 89
     998:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     99c:	90 93 05 03 	sts	0x0305, r25
     9a0:	80 93 04 03 	sts	0x0304, r24
     9a4:	8c e4       	ldi	r24, 0x4C	; 76
     9a6:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     9aa:	90 93 03 03 	sts	0x0303, r25
     9ae:	80 93 02 03 	sts	0x0302, r24
     9b2:	82 e5       	ldi	r24, 0x52	; 82
     9b4:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
     9b8:	90 93 01 03 	sts	0x0301, r25
     9bc:	80 93 00 03 	sts	0x0300, r24
     9c0:	20 91 08 03 	lds	r18, 0x0308
     9c4:	30 91 09 03 	lds	r19, 0x0309
     9c8:	80 91 0a 03 	lds	r24, 0x030A
     9cc:	90 91 0b 03 	lds	r25, 0x030B
     9d0:	3f 93       	push	r19
     9d2:	2f 93       	push	r18
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	8e e4       	ldi	r24, 0x4E	; 78
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	0e 94 1a 10 	call	0x2034	; 0x2034 <printf>
     9e4:	60 91 00 03 	lds	r22, 0x0300
     9e8:	70 91 01 03 	lds	r23, 0x0301
     9ec:	40 91 02 03 	lds	r20, 0x0302
     9f0:	50 91 03 03 	lds	r21, 0x0303
     9f4:	20 91 04 03 	lds	r18, 0x0304
     9f8:	30 91 05 03 	lds	r19, 0x0305
     9fc:	80 91 06 03 	lds	r24, 0x0306
     a00:	90 91 07 03 	lds	r25, 0x0307
     a04:	7f 93       	push	r23
     a06:	6f 93       	push	r22
     a08:	5f 93       	push	r21
     a0a:	4f 93       	push	r20
     a0c:	3f 93       	push	r19
     a0e:	2f 93       	push	r18
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	87 e7       	ldi	r24, 0x77	; 119
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	0e 94 1a 10 	call	0x2034	; 0x2034 <printf>
     a20:	8d b7       	in	r24, 0x3d	; 61
     a22:	9e b7       	in	r25, 0x3e	; 62
     a24:	40 96       	adiw	r24, 0x10	; 16
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	9e bf       	out	0x3e, r25	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	8d bf       	out	0x3d, r24	; 61
     a30:	08 95       	ret

00000a32 <bootscreen>:


void bootscreen(void){
	int x = 24;
	int y = 61;
	sram_draw_line(x,y,x-15,y-60);//letter G
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	49 e0       	ldi	r20, 0x09	; 9
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	6d e3       	ldi	r22, 0x3D	; 61
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	88 e1       	ldi	r24, 0x18	; 24
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	47 e2       	ldi	r20, 0x27	; 39
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	89 e0       	ldi	r24, 0x09	; 9
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x+15,y-60,x+12,y-48);
     a5a:	2d e0       	ldi	r18, 0x0D	; 13
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	44 e2       	ldi	r20, 0x24	; 36
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	87 e2       	ldi	r24, 0x27	; 39
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x+12,y-48,x-6,y-48);
     a6e:	2d e0       	ldi	r18, 0x0D	; 13
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	42 e1       	ldi	r20, 0x12	; 18
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	6d e0       	ldi	r22, 0x0D	; 13
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	84 e2       	ldi	r24, 0x24	; 36
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-6,y-48,x,y-24);
     a82:	25 e2       	ldi	r18, 0x25	; 37
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	48 e1       	ldi	r20, 0x18	; 24
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	6d e0       	ldi	r22, 0x0D	; 13
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	82 e1       	ldi	r24, 0x12	; 18
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x,y-24,x+3,y-36);
     a96:	29 e1       	ldi	r18, 0x19	; 25
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	4b e1       	ldi	r20, 0x1B	; 27
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	65 e2       	ldi	r22, 0x25	; 37
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	88 e1       	ldi	r24, 0x18	; 24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x+3,y-36,x+9,y-36);
     aaa:	29 e1       	ldi	r18, 0x19	; 25
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	41 e2       	ldi	r20, 0x21	; 33
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	69 e1       	ldi	r22, 0x19	; 25
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	8b e1       	ldi	r24, 0x1B	; 27
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x+9,y-36,x,y);//end of letter
     abe:	2d e3       	ldi	r18, 0x3D	; 61
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	48 e1       	ldi	r20, 0x18	; 24
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	69 e1       	ldi	r22, 0x19	; 25
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	81 e2       	ldi	r24, 0x21	; 33
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	
	
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);//number 1, end of number
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	45 e4       	ldi	r20, 0x45	; 69
     ad6:	6d e3       	ldi	r22, 0x3D	; 61
     ad8:	8b e3       	ldi	r24, 0x3B	; 59
     ada:	0e 94 c7 0c 	call	0x198e	; 0x198e <sram_draw_rectangle>
	//sram_draw_triangle(x-7,y-60,x+7,y-60,x,y-30);//1
	//sram_draw_triangle(x-7,y,x+7,y,x,y-30);//1
	
	x += 40;
	
	sram_draw_line(x,y,x+15,y-60);//number 7
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	47 e7       	ldi	r20, 0x77	; 119
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	6d e3       	ldi	r22, 0x3D	; 61
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	88 e6       	ldi	r24, 0x68	; 104
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	47 e7       	ldi	r20, 0x77	; 119
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	89 e5       	ldi	r24, 0x59	; 89
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-15,y-60,x-12,y-48);
     b06:	2d e0       	ldi	r18, 0x0D	; 13
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	4c e5       	ldi	r20, 0x5C	; 92
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	89 e5       	ldi	r24, 0x59	; 89
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-12,y-48,x+6,y-48);
     b1a:	2d e0       	ldi	r18, 0x0D	; 13
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	4e e6       	ldi	r20, 0x6E	; 110
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	6d e0       	ldi	r22, 0x0D	; 13
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	8c e5       	ldi	r24, 0x5C	; 92
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x+6,y-48,x+3,y-36);
     b2e:	29 e1       	ldi	r18, 0x19	; 25
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	4b e6       	ldi	r20, 0x6B	; 107
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	6d e0       	ldi	r22, 0x0D	; 13
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	8e e6       	ldi	r24, 0x6E	; 110
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x+3,y-36,x-9,y-36);
     b42:	29 e1       	ldi	r18, 0x19	; 25
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	4f e5       	ldi	r20, 0x5F	; 95
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	69 e1       	ldi	r22, 0x19	; 25
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	8b e6       	ldi	r24, 0x6B	; 107
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-9,y-36,x-6,y-24);
     b56:	25 e2       	ldi	r18, 0x25	; 37
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	42 e6       	ldi	r20, 0x62	; 98
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	69 e1       	ldi	r22, 0x19	; 25
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	8f e5       	ldi	r24, 0x5F	; 95
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-6,y-24,x,y-24);
     b6a:	25 e2       	ldi	r18, 0x25	; 37
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	48 e6       	ldi	r20, 0x68	; 104
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	65 e2       	ldi	r22, 0x25	; 37
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	82 e6       	ldi	r24, 0x62	; 98
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x,y-24,x-3,y-12);
     b7e:	21 e3       	ldi	r18, 0x31	; 49
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	45 e6       	ldi	r20, 0x65	; 101
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	65 e2       	ldi	r22, 0x25	; 37
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	88 e6       	ldi	r24, 0x68	; 104
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x-3,y-12,x,y);//end of number
     b92:	2d e3       	ldi	r18, 0x3D	; 61
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	48 e6       	ldi	r20, 0x68	; 104
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	61 e3       	ldi	r22, 0x31	; 49
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	85 e6       	ldi	r24, 0x65	; 101
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	write_screen();
     ba6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <write_screen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     baa:	2f ef       	ldi	r18, 0xFF	; 255
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	9e e0       	ldi	r25, 0x0E	; 14
     bb0:	21 50       	subi	r18, 0x01	; 1
     bb2:	80 40       	sbci	r24, 0x00	; 0
     bb4:	90 40       	sbci	r25, 0x00	; 0
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <bootscreen+0x17e>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <bootscreen+0x188>
     bba:	00 00       	nop
     bbc:	08 95       	ret

00000bbe <initalize>:




void initalize(void){
	cli();//disable interrupts
     bbe:	f8 94       	cli
	init_UART(UBBR);
     bc0:	8f e1       	ldi	r24, 0x1F	; 31
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     bc8:	83 e8       	ldi	r24, 0x83	; 131
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	9f 93       	push	r25
     bce:	8f 93       	push	r24
     bd0:	8c e8       	ldi	r24, 0x8C	; 140
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	88 e9       	ldi	r24, 0x98	; 152
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	8d e9       	ldi	r24, 0x9D	; 157
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	0e 94 1a 10 	call	0x2034	; 0x2034 <printf>
	
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     bec:	85 b7       	in	r24, 0x35	; 53
     bee:	80 68       	ori	r24, 0x80	; 128
     bf0:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     bf2:	80 b7       	in	r24, 0x30	; 48
     bf4:	80 62       	ori	r24, 0x20	; 32
     bf6:	80 bf       	out	0x30, r24	; 48

	oled_ini();
     bf8:	0e 94 3b 09 	call	0x1276	; 0x1276 <oled_ini>
	
	sram_init();
     bfc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <sram_init>
	
	bootscreen();
     c00:	0e 94 19 05 	call	0xa32	; 0xa32 <bootscreen>
	write_screen();
     c04:	0e 94 c4 0b 	call	0x1788	; 0x1788 <write_screen>
	
	initialize_menu();
     c08:	0e 94 56 06 	call	0xcac	; 0xcac <initialize_menu>
	
	initialize_control_input();
     c0c:	0e 94 c2 04 	call	0x984	; 0x984 <initialize_control_input>
	
	initalize_interrupts();
     c10:	0e 94 4f 02 	call	0x49e	; 0x49e <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
     c14:	8c e3       	ldi	r24, 0x3C	; 60
     c16:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <initialize_timer>
	
	sei();//enable interrupts
     c1a:	78 94       	sei
     c1c:	8d b7       	in	r24, 0x3d	; 61
     c1e:	9e b7       	in	r25, 0x3e	; 62
     c20:	08 96       	adiw	r24, 0x08	; 8
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	9e bf       	out	0x3e, r25	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	8d bf       	out	0x3d, r24	; 61
     c2c:	08 95       	ret

00000c2e <main>:
#include "menu.h"
#include "can.h"

int main(void)
{
	initalize();
     c2e:	0e 94 df 05 	call	0xbbe	; 0xbbe <initalize>
	oled_goto_line(7);
     c32:	87 e0       	ldi	r24, 0x07	; 7
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
	//sram_write_string(" - BYGGERN - G17");
	
	sram_write_string("WOW SUCH FPS    ");
     c3a:	83 ee       	ldi	r24, 0xE3	; 227
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
	
	MCP2515_initialize();
     c42:	0e 94 43 06 	call	0xc86	; 0xc86 <MCP2515_initialize>
	CAN_initialize();
     c46:	0e 94 f7 02 	call	0x5ee	; 0x5ee <CAN_initialize>
	sei();
     c4a:	78 94       	sei

	while(1){
		//_delay_ms(20);
		menu_update();
     c4c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <menu_update>
     c50:	fd cf       	rjmp	.-6      	; 0xc4c <main+0x1e>

00000c52 <MCP2515_bit_modify>:
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	18 2f       	mov	r17, r24
     c5a:	d6 2f       	mov	r29, r22
     c5c:	c4 2f       	mov	r28, r20
     c5e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <SPI_select>
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SPI_send>
     c68:	81 2f       	mov	r24, r17
     c6a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SPI_send>
     c6e:	8d 2f       	mov	r24, r29
     c70:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SPI_send>
     c74:	8c 2f       	mov	r24, r28
     c76:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SPI_send>
     c7a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <SPI_deselect>
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	08 95       	ret

00000c86 <MCP2515_initialize>:
     c86:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <SPI_initialize>
     c8a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <SPI_select>
     c8e:	80 ec       	ldi	r24, 0xC0	; 192
     c90:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <SPI_send>
     c94:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <SPI_deselect>
     c98:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <SPI_select>
     c9c:	40 e4       	ldi	r20, 0x40	; 64
     c9e:	60 ee       	ldi	r22, 0xE0	; 224
     ca0:	8f e0       	ldi	r24, 0x0F	; 15
     ca2:	0e 94 29 06 	call	0xc52	; 0xc52 <MCP2515_bit_modify>
     ca6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <SPI_deselect>
     caa:	08 95       	ret

00000cac <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     cb0:	c5 e6       	ldi	r28, 0x65	; 101
     cb2:	d3 e0       	ldi	r29, 0x03	; 3
     cb4:	d0 93 4c 03 	sts	0x034C, r29
     cb8:	c0 93 4b 03 	sts	0x034B, r28
	new_menu->ptr_child = ptr_child;
     cbc:	10 92 4e 03 	sts	0x034E, r1
     cc0:	10 92 4d 03 	sts	0x034D, r1
	new_menu->ptr_parent = ptr_parent;
     cc4:	10 92 50 03 	sts	0x0350, r1
     cc8:	10 92 4f 03 	sts	0x034F, r1
	
	new_menu->title = title;
     ccc:	e7 e4       	ldi	r30, 0x47	; 71
     cce:	f3 e0       	ldi	r31, 0x03	; 3
     cd0:	8a ee       	ldi	r24, 0xEA	; 234
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	90 93 4a 03 	sts	0x034A, r25
     ce0:	80 93 49 03 	sts	0x0349, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     ce4:	29 e1       	ldi	r18, 0x19	; 25
     ce6:	33 e0       	ldi	r19, 0x03	; 3
     ce8:	30 93 6a 03 	sts	0x036A, r19
     cec:	20 93 69 03 	sts	0x0369, r18
	new_menu->ptr_child = ptr_child;
     cf0:	61 e5       	ldi	r22, 0x51	; 81
     cf2:	73 e0       	ldi	r23, 0x03	; 3
     cf4:	70 93 6c 03 	sts	0x036C, r23
     cf8:	60 93 6b 03 	sts	0x036B, r22
	new_menu->ptr_parent = ptr_parent;
     cfc:	10 92 6e 03 	sts	0x036E, r1
     d00:	10 92 6d 03 	sts	0x036D, r1
	
	new_menu->title = title;
     d04:	44 ee       	ldi	r20, 0xE4	; 228
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	59 83       	std	Y+1, r21	; 0x01
     d0a:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     d0c:	90 93 68 03 	sts	0x0368, r25
     d10:	80 93 67 03 	sts	0x0367, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d14:	f0 93 1e 03 	sts	0x031E, r31
     d18:	e0 93 1d 03 	sts	0x031D, r30
	new_menu->ptr_child = ptr_child;
     d1c:	c3 e3       	ldi	r28, 0x33	; 51
     d1e:	d3 e0       	ldi	r29, 0x03	; 3
     d20:	d0 93 20 03 	sts	0x0320, r29
     d24:	c0 93 1f 03 	sts	0x031F, r28
	new_menu->ptr_parent = ptr_parent;
     d28:	10 92 22 03 	sts	0x0322, r1
     d2c:	10 92 21 03 	sts	0x0321, r1
	
	new_menu->title = title;
     d30:	4c ed       	ldi	r20, 0xDC	; 220
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	d9 01       	movw	r26, r18
     d36:	4d 93       	st	X+, r20
     d38:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     d3a:	90 93 1c 03 	sts	0x031C, r25
     d3e:	80 93 1b 03 	sts	0x031B, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d42:	2d e3       	ldi	r18, 0x3D	; 61
     d44:	33 e0       	ldi	r19, 0x03	; 3
     d46:	30 93 38 03 	sts	0x0338, r19
     d4a:	20 93 37 03 	sts	0x0337, r18
	new_menu->ptr_child = ptr_child;
     d4e:	10 92 3a 03 	sts	0x033A, r1
     d52:	10 92 39 03 	sts	0x0339, r1
	new_menu->ptr_parent = ptr_parent;
     d56:	f0 93 3c 03 	sts	0x033C, r31
     d5a:	e0 93 3b 03 	sts	0x033B, r30
	
	new_menu->title = title;
     d5e:	86 ed       	ldi	r24, 0xD6	; 214
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	99 83       	std	Y+1, r25	; 0x01
     d64:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	90 93 36 03 	sts	0x0336, r25
     d6e:	80 93 35 03 	sts	0x0335, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d72:	d0 93 42 03 	sts	0x0342, r29
     d76:	c0 93 41 03 	sts	0x0341, r28
	new_menu->ptr_child = ptr_child;
     d7a:	10 92 44 03 	sts	0x0344, r1
     d7e:	10 92 43 03 	sts	0x0343, r1
	new_menu->ptr_parent = ptr_parent;
     d82:	f0 93 46 03 	sts	0x0346, r31
     d86:	e0 93 45 03 	sts	0x0345, r30
	
	new_menu->title = title;
     d8a:	4d ec       	ldi	r20, 0xCD	; 205
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	d9 01       	movw	r26, r18
     d90:	4d 93       	st	X+, r20
     d92:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     d94:	90 93 40 03 	sts	0x0340, r25
     d98:	80 93 3f 03 	sts	0x033F, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d9c:	cb e5       	ldi	r28, 0x5B	; 91
     d9e:	d3 e0       	ldi	r29, 0x03	; 3
     da0:	d0 93 56 03 	sts	0x0356, r29
     da4:	c0 93 55 03 	sts	0x0355, r28
	new_menu->ptr_child = ptr_child;
     da8:	10 92 58 03 	sts	0x0358, r1
     dac:	10 92 57 03 	sts	0x0357, r1
	new_menu->ptr_parent = ptr_parent;
     db0:	f0 93 5a 03 	sts	0x035A, r31
     db4:	e0 93 59 03 	sts	0x0359, r30
	
	new_menu->title = title;
     db8:	22 ec       	ldi	r18, 0xC2	; 194
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	db 01       	movw	r26, r22
     dbe:	2d 93       	st	X+, r18
     dc0:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     dc2:	90 93 54 03 	sts	0x0354, r25
     dc6:	80 93 53 03 	sts	0x0353, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     dca:	70 93 60 03 	sts	0x0360, r23
     dce:	60 93 5f 03 	sts	0x035F, r22
	new_menu->ptr_child = ptr_child;
     dd2:	10 92 62 03 	sts	0x0362, r1
     dd6:	10 92 61 03 	sts	0x0361, r1
	new_menu->ptr_parent = ptr_parent;
     dda:	f0 93 64 03 	sts	0x0364, r31
     dde:	e0 93 63 03 	sts	0x0363, r30
	
	new_menu->title = title;
     de2:	28 eb       	ldi	r18, 0xB8	; 184
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	39 83       	std	Y+1, r19	; 0x01
     de8:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     dea:	90 93 5e 03 	sts	0x035E, r25
     dee:	80 93 5d 03 	sts	0x035D, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     df2:	f0 93 16 03 	sts	0x0316, r31
     df6:	e0 93 15 03 	sts	0x0315, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     dfa:	f0 93 18 03 	sts	0x0318, r31
     dfe:	e0 93 17 03 	sts	0x0317, r30
	
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <menu_left_button_flag>:
	return 0;
	
}

void menu_left_button_flag(void){
	left_button_flag = 1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 0e 03 	sts	0x030E, r24
     e0e:	08 95       	ret

00000e10 <menu_right_button_flag>:
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 0f 03 	sts	0x030F, r24
     e16:	08 95       	ret

00000e18 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
     e20:	60 ea       	ldi	r22, 0xA0	; 160
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	83 e2       	ldi	r24, 0x23	; 35
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcpy_P>
	sram_write_string(temp);
     e2c:	83 e2       	ldi	r24, 0x23	; 35
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
	sram_clear_line(1);
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 19 0c 	call	0x1832	; 0x1832 <sram_clear_line>
	oled_goto_line(2);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
	strcpy_P(temp,btn_1);
     e44:	60 eb       	ldi	r22, 0xB0	; 176
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	83 e2       	ldi	r24, 0x23	; 35
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcpy_P>
	sram_write_string(temp);
     e50:	83 e2       	ldi	r24, 0x23	; 35
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
	write_screen();
     e58:	0e 94 c4 0b 	call	0x1788	; 0x1788 <write_screen>
	while (right_button_flag == 0){	
     e5c:	80 91 0f 03 	lds	r24, 0x030F
     e60:	81 11       	cpse	r24, r1
     e62:	0f c0       	rjmp	.+30     	; 0xe82 <menu_set_contrast+0x6a>
		write_c(0x81);
     e64:	81 e8       	ldi	r24, 0x81	; 129
     e66:	0e 94 bf 08 	call	0x117e	; 0x117e <write_c>
		write_c(readADC(3)/2);
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	0e 94 bf 08 	call	0x117e	; 0x117e <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	write_screen();
	while (right_button_flag == 0){	
     e7a:	80 91 0f 03 	lds	r24, 0x030F
     e7e:	88 23       	and	r24, r24
     e80:	89 f3       	breq	.-30     	; 0xe64 <menu_set_contrast+0x4c>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	right_button_flag = 0;
     e82:	10 92 0f 03 	sts	0x030F, r1
     e86:	08 95       	ret

00000e88 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 7; i++){
		sram_clear_line(i);
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 19 0c 	call	0x1832	; 0x1832 <sram_clear_line>
     e9a:	21 96       	adiw	r28, 0x01	; 1
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
     e9c:	c7 30       	cpi	r28, 0x07	; 7
     e9e:	d1 05       	cpc	r29, r1
     ea0:	c9 f7       	brne	.-14     	; 0xe94 <menu_calibrate_joystick+0xc>
		sram_clear_line(i);
	}
	oled_goto_line(0);
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
     eaa:	69 e9       	ldi	r22, 0x99	; 153
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	83 e2       	ldi	r24, 0x23	; 35
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcpy_P>
	sram_write_string(temp);
     eb6:	83 e2       	ldi	r24, 0x23	; 35
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
	oled_goto_line(2);
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
	strcpy_P(temp,btn_1);
     ec6:	60 eb       	ldi	r22, 0xB0	; 176
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	83 e2       	ldi	r24, 0x23	; 35
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcpy_P>
	sram_write_string(temp);
     ed2:	83 e2       	ldi	r24, 0x23	; 35
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
	write_screen();
     eda:	0e 94 c4 0b 	call	0x1788	; 0x1788 <write_screen>
	while (right_button_flag == 0){
     ede:	80 91 0f 03 	lds	r24, 0x030F
     ee2:	81 11       	cpse	r24, r1
     ee4:	0a c0       	rjmp	.+20     	; 0xefa <menu_calibrate_joystick+0x72>
     ee6:	8c ec       	ldi	r24, 0xCC	; 204
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <menu_calibrate_joystick+0x62>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <menu_calibrate_joystick+0x68>
     ef0:	00 00       	nop
     ef2:	80 91 0f 03 	lds	r24, 0x030F
     ef6:	88 23       	and	r24, r24
     ef8:	b1 f3       	breq	.-20     	; 0xee6 <menu_calibrate_joystick+0x5e>
		_delay_ms(1);
	}
	right_button_flag = 0;
     efa:	10 92 0f 03 	sts	0x030F, r1
	
	
	oled_clear_line(0);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 19 09 	call	0x1232	; 0x1232 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
     f06:	6b e8       	ldi	r22, 0x8B	; 139
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	83 e2       	ldi	r24, 0x23	; 35
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcpy_P>
	sram_write_string(temp);
     f12:	83 e2       	ldi	r24, 0x23	; 35
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
     f1a:	c0 e7       	ldi	r28, 0x70	; 112
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
     f1e:	08 e7       	ldi	r16, 0x78	; 120
     f20:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 19 09 	call	0x1232	; 0x1232 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
     f2a:	fe 01       	movw	r30, r28
     f2c:	65 91       	lpm	r22, Z+
     f2e:	74 91       	lpm	r23, Z
     f30:	83 e2       	ldi	r24, 0x23	; 35
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcpy_P>
		sram_write_string(temp);
     f38:	83 e2       	ldi	r24, 0x23	; 35
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
		write_screen();
     f40:	0e 94 c4 0b 	call	0x1788	; 0x1788 <write_screen>
		while (right_button_flag == 0){
     f44:	80 91 0f 03 	lds	r24, 0x030F
     f48:	81 11       	cpse	r24, r1
     f4a:	0a c0       	rjmp	.+20     	; 0xf60 <menu_calibrate_joystick+0xd8>
     f4c:	8c ec       	ldi	r24, 0xCC	; 204
     f4e:	94 e0       	ldi	r25, 0x04	; 4
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <menu_calibrate_joystick+0xc8>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <menu_calibrate_joystick+0xce>
     f56:	00 00       	nop
     f58:	80 91 0f 03 	lds	r24, 0x030F
     f5c:	88 23       	and	r24, r24
     f5e:	b1 f3       	breq	.-20     	; 0xf4c <menu_calibrate_joystick+0xc4>
			_delay_ms(1);
		}
		right_button_flag = 0;
     f60:	10 92 0f 03 	sts	0x030F, r1
     f64:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
     f66:	c0 17       	cp	r28, r16
     f68:	d1 07       	cpc	r29, r17
     f6a:	d9 f6       	brne	.-74     	; 0xf22 <menu_calibrate_joystick+0x9a>
		while (right_button_flag == 0){
			_delay_ms(1);
		}
		right_button_flag = 0;
	}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <menu_function_selected>:
void menu_right_button_flag(void){
	right_button_flag = 1;
}

void menu_function_selected(void){
	if(current_selected == &option_1){
     f76:	80 91 17 03 	lds	r24, 0x0317
     f7a:	90 91 18 03 	lds	r25, 0x0318
     f7e:	23 e0       	ldi	r18, 0x03	; 3
     f80:	8d 33       	cpi	r24, 0x3D	; 61
     f82:	92 07       	cpc	r25, r18
     f84:	19 f4       	brne	.+6      	; 0xf8c <menu_function_selected+0x16>
		menu_set_contrast();
     f86:	0e 94 0c 07 	call	0xe18	; 0xe18 <menu_set_contrast>
     f8a:	08 95       	ret
	}else if(current_selected == &debug_1){
     f8c:	8b 55       	subi	r24, 0x5B	; 91
     f8e:	93 40       	sbci	r25, 0x03	; 3
     f90:	11 f4       	brne	.+4      	; 0xf96 <menu_function_selected+0x20>
		menu_calibrate_joystick();
     f92:	0e 94 44 07 	call	0xe88	; 0xe88 <menu_calibrate_joystick>
     f96:	08 95       	ret

00000f98 <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
     f98:	89 e5       	ldi	r24, 0x59	; 89
     f9a:	0e 94 16 04 	call	0x82c	; 0x82c <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
     f9e:	87 34       	cpi	r24, 0x47	; 71
     fa0:	91 05       	cpc	r25, r1
     fa2:	4c f1       	brlt	.+82     	; 0xff6 <navigate_menu+0x5e>
     fa4:	20 91 0c 03 	lds	r18, 0x030C
     fa8:	30 91 0d 03 	lds	r19, 0x030D
     fac:	27 34       	cpi	r18, 0x47	; 71
     fae:	31 05       	cpc	r19, r1
     fb0:	14 f5       	brge	.+68     	; 0xff6 <navigate_menu+0x5e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
     fb2:	e0 91 17 03 	lds	r30, 0x0317
     fb6:	f0 91 18 03 	lds	r31, 0x0318
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	18 16       	cp	r1, r24
     fc2:	19 06       	cpc	r1, r25
     fc4:	8c f4       	brge	.+34     	; 0xfe8 <navigate_menu+0x50>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
     fca:	04 80       	ldd	r0, Z+4	; 0x04
     fcc:	f5 81       	ldd	r31, Z+5	; 0x05
     fce:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	22 81       	ldd	r18, Z+2	; 0x02
     fd4:	33 81       	ldd	r19, Z+3	; 0x03
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	31 09       	sbc	r19, r1
     fda:	82 17       	cp	r24, r18
     fdc:	93 07       	cpc	r25, r19
     fde:	ac f3       	brlt	.-22     	; 0xfca <navigate_menu+0x32>
     fe0:	f0 93 18 03 	sts	0x0318, r31
     fe4:	e0 93 17 03 	sts	0x0317, r30
			current_selected = current_selected->ptr_sib_down;
		}
		y_lock = RANGE_MAX;
     fe8:	84 e6       	ldi	r24, 0x64	; 100
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	90 93 0d 03 	sts	0x030D, r25
     ff0:	80 93 0c 03 	sts	0x030C, r24
     ff4:	25 c0       	rjmp	.+74     	; 0x1040 <navigate_menu+0xa8>
		
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && y_lock >= -NAVIGATION_TRHESHOLD)
     ff6:	8a 3b       	cpi	r24, 0xBA	; 186
     ff8:	2f ef       	ldi	r18, 0xFF	; 255
     ffa:	92 07       	cpc	r25, r18
     ffc:	c4 f4       	brge	.+48     	; 0x102e <navigate_menu+0x96>
     ffe:	20 91 0c 03 	lds	r18, 0x030C
    1002:	30 91 0d 03 	lds	r19, 0x030D
    1006:	2a 3b       	cpi	r18, 0xBA	; 186
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	8c f0       	brlt	.+34     	; 0x102e <navigate_menu+0x96>
	{
		current_selected = current_selected->ptr_sib_down;
    100c:	e0 91 17 03 	lds	r30, 0x0317
    1010:	f0 91 18 03 	lds	r31, 0x0318
    1014:	84 81       	ldd	r24, Z+4	; 0x04
    1016:	95 81       	ldd	r25, Z+5	; 0x05
    1018:	90 93 18 03 	sts	0x0318, r25
    101c:	80 93 17 03 	sts	0x0317, r24
		y_lock = RANGE_MIN;
    1020:	8c e9       	ldi	r24, 0x9C	; 156
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	90 93 0d 03 	sts	0x030D, r25
    1028:	80 93 0c 03 	sts	0x030C, r24
    102c:	09 c0       	rjmp	.+18     	; 0x1040 <navigate_menu+0xa8>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    102e:	8b 5b       	subi	r24, 0xBB	; 187
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	8b 38       	cpi	r24, 0x8B	; 139
    1034:	91 05       	cpc	r25, r1
    1036:	20 f4       	brcc	.+8      	; 0x1040 <navigate_menu+0xa8>
		y_lock = 0;
    1038:	10 92 0d 03 	sts	0x030D, r1
    103c:	10 92 0c 03 	sts	0x030C, r1
	}
	if (right_button_flag == 1)
    1040:	80 91 0f 03 	lds	r24, 0x030F
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	b1 f4       	brne	.+44     	; 0x1074 <navigate_menu+0xdc>
	{
		right_button_flag = 0;
    1048:	10 92 0f 03 	sts	0x030F, r1
		if(current_selected->ptr_child != NULL){
    104c:	e0 91 17 03 	lds	r30, 0x0317
    1050:	f0 91 18 03 	lds	r31, 0x0318
    1054:	86 81       	ldd	r24, Z+6	; 0x06
    1056:	97 81       	ldd	r25, Z+7	; 0x07
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	49 f0       	breq	.+18     	; 0x106e <navigate_menu+0xd6>
			current_head = current_selected->ptr_child;
    105c:	90 93 16 03 	sts	0x0316, r25
    1060:	80 93 15 03 	sts	0x0315, r24
			current_selected = current_selected->ptr_child;
    1064:	90 93 18 03 	sts	0x0318, r25
    1068:	80 93 17 03 	sts	0x0317, r24
    106c:	1f c0       	rjmp	.+62     	; 0x10ac <navigate_menu+0x114>
		}else{
			menu_function_selected();
    106e:	0e 94 bb 07 	call	0xf76	; 0xf76 <menu_function_selected>
    1072:	1c c0       	rjmp	.+56     	; 0x10ac <navigate_menu+0x114>
		}
	}else if (left_button_flag == 1){
    1074:	80 91 0e 03 	lds	r24, 0x030E
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	c1 f4       	brne	.+48     	; 0x10ac <navigate_menu+0x114>
		left_button_flag = 0;
    107c:	10 92 0e 03 	sts	0x030E, r1
		if (current_selected->ptr_parent != NULL){
    1080:	e0 91 17 03 	lds	r30, 0x0317
    1084:	f0 91 18 03 	lds	r31, 0x0318
    1088:	80 85       	ldd	r24, Z+8	; 0x08
    108a:	91 85       	ldd	r25, Z+9	; 0x09
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	71 f0       	breq	.+28     	; 0x10ac <navigate_menu+0x114>
			current_head = current_head->ptr_parent;
    1090:	e0 91 15 03 	lds	r30, 0x0315
    1094:	f0 91 16 03 	lds	r31, 0x0316
    1098:	20 85       	ldd	r18, Z+8	; 0x08
    109a:	31 85       	ldd	r19, Z+9	; 0x09
    109c:	30 93 16 03 	sts	0x0316, r19
    10a0:	20 93 15 03 	sts	0x0315, r18
			current_selected = current_selected->ptr_parent;
    10a4:	90 93 18 03 	sts	0x0318, r25
    10a8:	80 93 17 03 	sts	0x0317, r24
		}
	}
	return 0;
	
}
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	08 95       	ret

000010b2 <menu_update>:
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
	
}
int abc = 0;
void menu_update(void){
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    10ba:	0e 94 cc 07 	call	0xf98	; 0xf98 <navigate_menu>
    10be:	89 2b       	or	r24, r25
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <menu_update+0x12>
    10c2:	4c c0       	rjmp	.+152    	; 0x115c <menu_update+0xaa>
    10c4:	c0 e0       	ldi	r28, 0x00	; 0
    10c6:	d0 e0       	ldi	r29, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    10c8:	ce 01       	movw	r24, r28
    10ca:	0e 94 19 0c 	call	0x1832	; 0x1832 <sram_clear_line>
int abc = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    10ce:	21 96       	adiw	r28, 0x01	; 1
    10d0:	c7 30       	cpi	r28, 0x07	; 7
    10d2:	d1 05       	cpc	r29, r1
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <menu_update+0x16>
			sram_clear_line(j);
		}

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
    10d6:	e0 91 15 03 	lds	r30, 0x0315
    10da:	f0 91 16 03 	lds	r31, 0x0316
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	18 16       	cp	r1, r24
    10e4:	19 06       	cpc	r1, r25
    10e6:	d4 f5       	brge	.+116    	; 0x115c <menu_update+0xaa>
    10e8:	c0 e0       	ldi	r28, 0x00	; 0
    10ea:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    10ec:	10 e8       	ldi	r17, 0x80	; 128
    10ee:	01 e8       	ldi	r16, 0x81	; 129

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
			oled_goto_column(0);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 12 09 	call	0x1224	; 0x1224 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    10fe:	e0 91 15 03 	lds	r30, 0x0315
    1102:	f0 91 16 03 	lds	r31, 0x0316
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	83 e2       	ldi	r24, 0x23	; 35
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1112:	20 91 15 03 	lds	r18, 0x0315
    1116:	30 91 16 03 	lds	r19, 0x0316
    111a:	80 91 17 03 	lds	r24, 0x0317
    111e:	90 91 18 03 	lds	r25, 0x0318
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	11 f4       	brne	.+4      	; 0x112c <menu_update+0x7a>
    1128:	80 2f       	mov	r24, r16
    112a:	01 c0       	rjmp	.+2      	; 0x112e <menu_update+0x7c>
    112c:	81 2f       	mov	r24, r17
    112e:	0e 94 c8 09 	call	0x1390	; 0x1390 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    1132:	83 e2       	ldi	r24, 0x23	; 35
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	0e 94 25 0a 	call	0x144a	; 0x144a <sram_write_string>
			current_head = current_head->ptr_sib_down;
    113a:	e0 91 15 03 	lds	r30, 0x0315
    113e:	f0 91 16 03 	lds	r31, 0x0316
    1142:	04 80       	ldd	r0, Z+4	; 0x04
    1144:	f5 81       	ldd	r31, Z+5	; 0x05
    1146:	e0 2d       	mov	r30, r0
    1148:	f0 93 16 03 	sts	0x0316, r31
    114c:	e0 93 15 03 	sts	0x0315, r30
			sram_clear_line(j);
		}

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
    1150:	21 96       	adiw	r28, 0x01	; 1
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	c8 17       	cp	r28, r24
    1158:	d9 07       	cpc	r29, r25
    115a:	54 f2       	brlt	.-108    	; 0x10f0 <menu_update+0x3e>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    115c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <timer_check_flag>
    1160:	88 23       	and	r24, r24
    1162:	41 f0       	breq	.+16     	; 0x1174 <menu_update+0xc2>
		write_screen();
    1164:	0e 94 c4 0b 	call	0x1788	; 0x1788 <write_screen>
		timer_disable_flag();
    1168:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <timer_disable_flag>
		sram_scroll_data(7,1);
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	87 e0       	ldi	r24, 0x07	; 7
    1170:	0e 94 49 0c 	call	0x1892	; 0x1892 <sram_scroll_data>
	}
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <write_c>:

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    117e:	e0 91 0a 01 	lds	r30, 0x010A
    1182:	f0 91 0b 01 	lds	r31, 0x010B
    1186:	80 83       	st	Z, r24
    1188:	08 95       	ret

0000118a <oled_home>:
	}
}

void oled_home(void)
{
	page_sram = 0;
    118a:	10 92 14 03 	sts	0x0314, r1
    118e:	10 92 13 03 	sts	0x0313, r1
	col_sram = 0;
    1192:	10 92 12 03 	sts	0x0312, r1
    1196:	10 92 11 03 	sts	0x0311, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    119a:	e0 91 0a 01 	lds	r30, 0x010A
    119e:	f0 91 0b 01 	lds	r31, 0x010B
    11a2:	81 e2       	ldi	r24, 0x21	; 33
    11a4:	80 83       	st	Z, r24
    11a6:	e0 91 0a 01 	lds	r30, 0x010A
    11aa:	f0 91 0b 01 	lds	r31, 0x010B
    11ae:	10 82       	st	Z, r1
    11b0:	e0 91 0a 01 	lds	r30, 0x010A
    11b4:	f0 91 0b 01 	lds	r31, 0x010B
    11b8:	8f e7       	ldi	r24, 0x7F	; 127
    11ba:	80 83       	st	Z, r24
    11bc:	e0 91 0a 01 	lds	r30, 0x010A
    11c0:	f0 91 0b 01 	lds	r31, 0x010B
    11c4:	82 e2       	ldi	r24, 0x22	; 34
    11c6:	80 83       	st	Z, r24
    11c8:	e0 91 0a 01 	lds	r30, 0x010A
    11cc:	f0 91 0b 01 	lds	r31, 0x010B
    11d0:	10 82       	st	Z, r1
    11d2:	e0 91 0a 01 	lds	r30, 0x010A
    11d6:	f0 91 0b 01 	lds	r31, 0x010B
    11da:	87 e0       	ldi	r24, 0x07	; 7
    11dc:	80 83       	st	Z, r24
    11de:	08 95       	ret

000011e0 <oled_goto_line>:
	//write_c(0x10);
}



void oled_goto_line(unsigned int line){
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	ec 01       	movw	r28, r24
	oled_home();
    11e6:	0e 94 c5 08 	call	0x118a	; 0x118a <oled_home>
	page_sram = line;
    11ea:	d0 93 14 03 	sts	0x0314, r29
    11ee:	c0 93 13 03 	sts	0x0313, r28
	if(line%8){
    11f2:	ce 01       	movw	r24, r28
    11f4:	87 70       	andi	r24, 0x07	; 7
    11f6:	99 27       	eor	r25, r25
    11f8:	89 2b       	or	r24, r25
    11fa:	89 f0       	breq	.+34     	; 0x121e <oled_goto_line+0x3e>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    11fc:	e0 91 0a 01 	lds	r30, 0x010A
    1200:	f0 91 0b 01 	lds	r31, 0x010B
    1204:	10 82       	st	Z, r1
    1206:	e0 91 0a 01 	lds	r30, 0x010A
    120a:	f0 91 0b 01 	lds	r31, 0x010B
    120e:	80 e1       	ldi	r24, 0x10	; 16
    1210:	80 83       	st	Z, r24
	oled_home();
	page_sram = line;
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
    1212:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1214:	e0 91 0a 01 	lds	r30, 0x010A
    1218:	f0 91 0b 01 	lds	r31, 0x010B
    121c:	c0 83       	st	Z, r28
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <oled_goto_column>:


void oled_goto_column(unsigned int column){
	col_sram = column%128;
    1224:	8f 77       	andi	r24, 0x7F	; 127
    1226:	99 27       	eor	r25, r25
    1228:	90 93 12 03 	sts	0x0312, r25
    122c:	80 93 11 03 	sts	0x0311, r24
    1230:	08 95       	ret

00001232 <oled_clear_line>:
}

void oled_clear_line(unsigned int line){
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    1238:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
	if(line < 8){
    123c:	28 97       	sbiw	r28, 0x08	; 8
    123e:	50 f4       	brcc	.+20     	; 0x1254 <oled_clear_line+0x22>
    1240:	80 e8       	ldi	r24, 0x80	; 128
    1242:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    1244:	e0 91 08 01 	lds	r30, 0x0108
    1248:	f0 91 09 01 	lds	r31, 0x0109
    124c:	10 82       	st	Z, r1
    124e:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	c1 f7       	brne	.-16     	; 0x1244 <oled_clear_line+0x12>
			write_d(0b00000000);
		}
	}
} 
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <oled_reset>:

}


void oled_reset(void)
{		
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
    125e:	c0 e0       	ldi	r28, 0x00	; 0
    1260:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
    1262:	ce 01       	movw	r24, r28
    1264:	0e 94 19 09 	call	0x1232	; 0x1232 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
    1268:	21 96       	adiw	r28, 0x01	; 1
    126a:	c8 30       	cpi	r28, 0x08	; 8
    126c:	d1 05       	cpc	r29, r1
    126e:	c9 f7       	brne	.-14     	; 0x1262 <oled_reset+0x8>
		oled_clear_line(i);
	}
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    1276:	85 b7       	in	r24, 0x35	; 53
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    127c:	80 b7       	in	r24, 0x30	; 48
    127e:	80 62       	ori	r24, 0x20	; 32
    1280:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1282:	e0 91 0a 01 	lds	r30, 0x010A
    1286:	f0 91 0b 01 	lds	r31, 0x010B
    128a:	8e ea       	ldi	r24, 0xAE	; 174
    128c:	80 83       	st	Z, r24
    128e:	e0 91 0a 01 	lds	r30, 0x010A
    1292:	f0 91 0b 01 	lds	r31, 0x010B
    1296:	81 ea       	ldi	r24, 0xA1	; 161
    1298:	80 83       	st	Z, r24
    129a:	e0 91 0a 01 	lds	r30, 0x010A
    129e:	f0 91 0b 01 	lds	r31, 0x010B
    12a2:	8a ed       	ldi	r24, 0xDA	; 218
    12a4:	80 83       	st	Z, r24
    12a6:	e0 91 0a 01 	lds	r30, 0x010A
    12aa:	f0 91 0b 01 	lds	r31, 0x010B
    12ae:	82 e1       	ldi	r24, 0x12	; 18
    12b0:	80 83       	st	Z, r24
    12b2:	e0 91 0a 01 	lds	r30, 0x010A
    12b6:	f0 91 0b 01 	lds	r31, 0x010B
    12ba:	88 ec       	ldi	r24, 0xC8	; 200
    12bc:	80 83       	st	Z, r24
    12be:	e0 91 0a 01 	lds	r30, 0x010A
    12c2:	f0 91 0b 01 	lds	r31, 0x010B
    12c6:	88 ea       	ldi	r24, 0xA8	; 168
    12c8:	80 83       	st	Z, r24
    12ca:	e0 91 0a 01 	lds	r30, 0x010A
    12ce:	f0 91 0b 01 	lds	r31, 0x010B
    12d2:	8f e3       	ldi	r24, 0x3F	; 63
    12d4:	80 83       	st	Z, r24
    12d6:	e0 91 0a 01 	lds	r30, 0x010A
    12da:	f0 91 0b 01 	lds	r31, 0x010B
    12de:	85 ed       	ldi	r24, 0xD5	; 213
    12e0:	80 83       	st	Z, r24
    12e2:	e0 91 0a 01 	lds	r30, 0x010A
    12e6:	f0 91 0b 01 	lds	r31, 0x010B
    12ea:	80 e8       	ldi	r24, 0x80	; 128
    12ec:	80 83       	st	Z, r24
    12ee:	e0 91 0a 01 	lds	r30, 0x010A
    12f2:	f0 91 0b 01 	lds	r31, 0x010B
    12f6:	81 e8       	ldi	r24, 0x81	; 129
    12f8:	80 83       	st	Z, r24
    12fa:	e0 91 0a 01 	lds	r30, 0x010A
    12fe:	f0 91 0b 01 	lds	r31, 0x010B
    1302:	80 e5       	ldi	r24, 0x50	; 80
    1304:	80 83       	st	Z, r24
    1306:	e0 91 0a 01 	lds	r30, 0x010A
    130a:	f0 91 0b 01 	lds	r31, 0x010B
    130e:	89 ed       	ldi	r24, 0xD9	; 217
    1310:	80 83       	st	Z, r24
    1312:	e0 91 0a 01 	lds	r30, 0x010A
    1316:	f0 91 0b 01 	lds	r31, 0x010B
    131a:	81 e2       	ldi	r24, 0x21	; 33
    131c:	80 83       	st	Z, r24
    131e:	e0 91 0a 01 	lds	r30, 0x010A
    1322:	f0 91 0b 01 	lds	r31, 0x010B
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	80 83       	st	Z, r24
    132a:	e0 91 0a 01 	lds	r30, 0x010A
    132e:	f0 91 0b 01 	lds	r31, 0x010B
    1332:	10 82       	st	Z, r1
    1334:	e0 91 0a 01 	lds	r30, 0x010A
    1338:	f0 91 0b 01 	lds	r31, 0x010B
    133c:	8b ed       	ldi	r24, 0xDB	; 219
    133e:	80 83       	st	Z, r24
    1340:	e0 91 0a 01 	lds	r30, 0x010A
    1344:	f0 91 0b 01 	lds	r31, 0x010B
    1348:	80 e3       	ldi	r24, 0x30	; 48
    134a:	80 83       	st	Z, r24
    134c:	e0 91 0a 01 	lds	r30, 0x010A
    1350:	f0 91 0b 01 	lds	r31, 0x010B
    1354:	8d ea       	ldi	r24, 0xAD	; 173
    1356:	80 83       	st	Z, r24
    1358:	e0 91 0a 01 	lds	r30, 0x010A
    135c:	f0 91 0b 01 	lds	r31, 0x010B
    1360:	10 82       	st	Z, r1
    1362:	e0 91 0a 01 	lds	r30, 0x010A
    1366:	f0 91 0b 01 	lds	r31, 0x010B
    136a:	84 ea       	ldi	r24, 0xA4	; 164
    136c:	80 83       	st	Z, r24
    136e:	e0 91 0a 01 	lds	r30, 0x010A
    1372:	f0 91 0b 01 	lds	r31, 0x010B
    1376:	86 ea       	ldi	r24, 0xA6	; 166
    1378:	80 83       	st	Z, r24
    137a:	e0 91 0a 01 	lds	r30, 0x010A
    137e:	f0 91 0b 01 	lds	r31, 0x010B
    1382:	8f ea       	ldi	r24, 0xAF	; 175
    1384:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
    1386:	0e 94 2d 09 	call	0x125a	; 0x125a <oled_reset>
	oled_home();
    138a:	0e 94 c5 08 	call	0x118a	; 0x118a <oled_home>
    138e:	08 95       	ret

00001390 <sram_write_char>:
	}
}


int sram_write_char(char letter){
	if (letter == '\n'){
    1390:	8a 30       	cpi	r24, 0x0A	; 10
    1392:	91 f4       	brne	.+36     	; 0x13b8 <sram_write_char+0x28>
		page_sram = (page_sram+1)%8;
    1394:	80 91 13 03 	lds	r24, 0x0313
    1398:	90 91 14 03 	lds	r25, 0x0314
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	87 70       	andi	r24, 0x07	; 7
    13a0:	99 27       	eor	r25, r25
    13a2:	90 93 14 03 	sts	0x0314, r25
    13a6:	80 93 13 03 	sts	0x0313, r24
		col_sram = 0;
    13aa:	10 92 12 03 	sts	0x0312, r1
    13ae:	10 92 11 03 	sts	0x0311, r1
		return 1;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	08 95       	ret
	}else if(letter != '\0'){
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <sram_write_char+0x2e>
    13bc:	43 c0       	rjmp	.+134    	; 0x1444 <sram_write_char+0xb4>
    13be:	e8 2f       	mov	r30, r24
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	ec 50       	subi	r30, 0x0C	; 12
    13d0:	f0 40       	sbci	r31, 0x00	; 0
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
    13d6:	a0 91 13 03 	lds	r26, 0x0313
    13da:	b0 91 14 03 	lds	r27, 0x0314
    13de:	b6 95       	lsr	r27
    13e0:	ba 2f       	mov	r27, r26
    13e2:	aa 27       	eor	r26, r26
    13e4:	b7 95       	ror	r27
    13e6:	a7 95       	ror	r26
    13e8:	20 91 11 03 	lds	r18, 0x0311
    13ec:	30 91 12 03 	lds	r19, 0x0312
    13f0:	a2 0f       	add	r26, r18
    13f2:	b3 1f       	adc	r27, r19
    13f4:	20 91 06 01 	lds	r18, 0x0106
    13f8:	30 91 07 01 	lds	r19, 0x0107
    13fc:	a2 0f       	add	r26, r18
    13fe:	b3 1f       	adc	r27, r19
    1400:	24 91       	lpm	r18, Z
    1402:	2c 93       	st	X, r18
			col_sram++;
    1404:	20 91 11 03 	lds	r18, 0x0311
    1408:	30 91 12 03 	lds	r19, 0x0312
    140c:	2f 5f       	subi	r18, 0xFF	; 255
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	30 93 12 03 	sts	0x0312, r19
    1414:	20 93 11 03 	sts	0x0311, r18
	if (letter == '\n'){
		page_sram = (page_sram+1)%8;
		col_sram = 0;
		return 1;
	}else if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	31 96       	adiw	r30, 0x01	; 1
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	91 05       	cpc	r25, r1
    1420:	d1 f6       	brne	.-76     	; 0x13d6 <sram_write_char+0x46>
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
			col_sram++;
		}
		edited |= (1 << page_sram);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	00 90 13 03 	lds	r0, 0x0313
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <sram_write_char+0xa0>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <sram_write_char+0x9c>
    1434:	90 91 10 03 	lds	r25, 0x0310
    1438:	89 2b       	or	r24, r25
    143a:	80 93 10 03 	sts	0x0310, r24
		return 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	08 95       	ret
	}else{
		return 0;
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    1448:	08 95       	ret

0000144a <sram_write_string>:


//char screendata[8][128][8]; //line, col, data(8)
volatile char *ext_ram = (char *) 0x1800;

void sram_write_string(char letters[]){
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (sram_write_char(letters[i++])){
    1450:	89 91       	ld	r24, Y+
    1452:	0e 94 c8 09 	call	0x1390	; 0x1390 <sram_write_char>
    1456:	89 2b       	or	r24, r25
    1458:	d9 f7       	brne	.-10     	; 0x1450 <sram_write_string+0x6>
	}
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <sram_write_or>:
	ext_ram[page%8*128 + col%128] &= data;
	edited |= 1 << page;
}

void sram_write_or(int page, int col, char data){
	ext_ram[page%8*128 + col%128] |= data;
    1460:	9c 01       	movw	r18, r24
    1462:	27 70       	andi	r18, 0x07	; 7
    1464:	30 78       	andi	r19, 0x80	; 128
    1466:	33 23       	and	r19, r19
    1468:	34 f4       	brge	.+12     	; 0x1476 <sram_write_or+0x16>
    146a:	21 50       	subi	r18, 0x01	; 1
    146c:	31 09       	sbc	r19, r1
    146e:	28 6f       	ori	r18, 0xF8	; 248
    1470:	3f 6f       	ori	r19, 0xFF	; 255
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	f9 01       	movw	r30, r18
    1478:	f6 95       	lsr	r31
    147a:	fe 2f       	mov	r31, r30
    147c:	ee 27       	eor	r30, r30
    147e:	f7 95       	ror	r31
    1480:	e7 95       	ror	r30
    1482:	6f 77       	andi	r22, 0x7F	; 127
    1484:	70 78       	andi	r23, 0x80	; 128
    1486:	77 23       	and	r23, r23
    1488:	34 f4       	brge	.+12     	; 0x1496 <sram_write_or+0x36>
    148a:	61 50       	subi	r22, 0x01	; 1
    148c:	71 09       	sbc	r23, r1
    148e:	60 68       	ori	r22, 0x80	; 128
    1490:	7f 6f       	ori	r23, 0xFF	; 255
    1492:	6f 5f       	subi	r22, 0xFF	; 255
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	6e 0f       	add	r22, r30
    1498:	7f 1f       	adc	r23, r31
    149a:	e0 91 06 01 	lds	r30, 0x0106
    149e:	f0 91 07 01 	lds	r31, 0x0107
    14a2:	e6 0f       	add	r30, r22
    14a4:	f7 1f       	adc	r31, r23
    14a6:	90 81       	ld	r25, Z
    14a8:	49 2b       	or	r20, r25
    14aa:	40 83       	st	Z, r20
	edited |= 1 << page;
    14ac:	21 e0       	ldi	r18, 0x01	; 1
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	a9 01       	movw	r20, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <sram_write_or+0x58>
    14b4:	44 0f       	add	r20, r20
    14b6:	55 1f       	adc	r21, r21
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <sram_write_or+0x54>
    14bc:	ca 01       	movw	r24, r20
    14be:	90 91 10 03 	lds	r25, 0x0310
    14c2:	89 2b       	or	r24, r25
    14c4:	80 93 10 03 	sts	0x0310, r24
    14c8:	08 95       	ret

000014ca <sram_pixel>:
}

int sram_pixel(int x, int y){
	if(x >= 0 && x < 128 && y >= 0 && y < 64){
    14ca:	80 38       	cpi	r24, 0x80	; 128
    14cc:	91 05       	cpc	r25, r1
    14ce:	30 f5       	brcc	.+76     	; 0x151c <sram_pixel+0x52>
    14d0:	60 34       	cpi	r22, 0x40	; 64
    14d2:	71 05       	cpc	r23, r1
    14d4:	30 f5       	brcc	.+76     	; 0x1522 <sram_pixel+0x58>
		sram_write_or((y/8),x,(1<<(y%8)));
    14d6:	9b 01       	movw	r18, r22
    14d8:	27 70       	andi	r18, 0x07	; 7
    14da:	30 78       	andi	r19, 0x80	; 128
    14dc:	33 23       	and	r19, r19
    14de:	34 f4       	brge	.+12     	; 0x14ec <sram_pixel+0x22>
    14e0:	21 50       	subi	r18, 0x01	; 1
    14e2:	31 09       	sbc	r19, r1
    14e4:	28 6f       	ori	r18, 0xF8	; 248
    14e6:	3f 6f       	ori	r19, 0xFF	; 255
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <sram_pixel+0x2c>
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	2a 95       	dec	r18
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <sram_pixel+0x28>
    14fa:	fb 01       	movw	r30, r22
    14fc:	ff 23       	and	r31, r31
    14fe:	0c f4       	brge	.+2      	; 0x1502 <sram_pixel+0x38>
    1500:	37 96       	adiw	r30, 0x07	; 7
    1502:	bc 01       	movw	r22, r24
    1504:	cf 01       	movw	r24, r30
    1506:	95 95       	asr	r25
    1508:	87 95       	ror	r24
    150a:	95 95       	asr	r25
    150c:	87 95       	ror	r24
    150e:	95 95       	asr	r25
    1510:	87 95       	ror	r24
    1512:	0e 94 30 0a 	call	0x1460	; 0x1460 <sram_write_or>
		return 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	08 95       	ret
	}
	return 0;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	08 95       	ret
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
}
    1526:	08 95       	ret

00001528 <sram_draw_line>:

void sram_draw_line(int x0, int y0, int x1, int y1){
    1528:	2f 92       	push	r2
    152a:	3f 92       	push	r3
    152c:	4f 92       	push	r4
    152e:	5f 92       	push	r5
    1530:	6f 92       	push	r6
    1532:	7f 92       	push	r7
    1534:	8f 92       	push	r8
    1536:	9f 92       	push	r9
    1538:	af 92       	push	r10
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	60 97       	sbiw	r28, 0x10	; 16
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	1c 01       	movw	r2, r24
    155e:	7a 87       	std	Y+10, r23	; 0x0a
    1560:	69 87       	std	Y+9, r22	; 0x09
    1562:	5c 87       	std	Y+12, r21	; 0x0c
    1564:	4b 87       	std	Y+11, r20	; 0x0b
    1566:	38 87       	std	Y+8, r19	; 0x08
    1568:	2f 83       	std	Y+7, r18	; 0x07
	if(x0 > x1){
    156a:	48 17       	cp	r20, r24
    156c:	59 07       	cpc	r21, r25
    156e:	0c f4       	brge	.+2      	; 0x1572 <sram_draw_line+0x4a>
    1570:	c0 c0       	rjmp	.+384    	; 0x16f2 <sram_draw_line+0x1ca>
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
    1572:	84 17       	cp	r24, r20
    1574:	95 07       	cpc	r25, r21
    1576:	09 f4       	brne	.+2      	; 0x157a <sram_draw_line+0x52>
    1578:	93 c0       	rjmp	.+294    	; 0x16a0 <sram_draw_line+0x178>
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    157a:	b9 01       	movw	r22, r18
    157c:	29 85       	ldd	r18, Y+9	; 0x09
    157e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1580:	62 1b       	sub	r22, r18
    1582:	73 0b       	sbc	r23, r19
    1584:	88 27       	eor	r24, r24
    1586:	77 fd       	sbrc	r23, 7
    1588:	80 95       	com	r24
    158a:	98 2f       	mov	r25, r24
    158c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    1590:	6b 01       	movw	r12, r22
    1592:	7c 01       	movw	r14, r24
    1594:	6b 85       	ldd	r22, Y+11	; 0x0b
    1596:	7c 85       	ldd	r23, Y+12	; 0x0c
    1598:	62 19       	sub	r22, r2
    159a:	73 09       	sbc	r23, r3
    159c:	88 27       	eor	r24, r24
    159e:	77 fd       	sbrc	r23, 7
    15a0:	80 95       	com	r24
    15a2:	98 2f       	mov	r25, r24
    15a4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	c7 01       	movw	r24, r14
    15ae:	b6 01       	movw	r22, r12
    15b0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divsf3>
    15b4:	6b 83       	std	Y+3, r22	; 0x03
    15b6:	7c 83       	std	Y+4, r23	; 0x04
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	9e 83       	std	Y+6, r25	; 0x06
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
		for(double x = x0; x < x1; x += 0.1){
    15bc:	b1 01       	movw	r22, r2
    15be:	88 27       	eor	r24, r24
    15c0:	77 fd       	sbrc	r23, 7
    15c2:	80 95       	com	r24
    15c4:	98 2f       	mov	r25, r24
    15c6:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    15ca:	69 83       	std	Y+1, r22	; 0x01
    15cc:	7a 83       	std	Y+2, r23	; 0x02
    15ce:	e8 2e       	mov	r14, r24
    15d0:	f9 2e       	mov	r15, r25
    15d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    15d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    15d6:	bf 01       	movw	r22, r30
    15d8:	88 27       	eor	r24, r24
    15da:	77 fd       	sbrc	r23, 7
    15dc:	80 95       	com	r24
    15de:	98 2f       	mov	r25, r24
    15e0:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    15e4:	4b 01       	movw	r8, r22
    15e6:	5c 01       	movw	r10, r24
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	69 81       	ldd	r22, Y+1	; 0x01
    15ee:	7a 81       	ldd	r23, Y+2	; 0x02
    15f0:	8e 2d       	mov	r24, r14
    15f2:	9f 2d       	mov	r25, r15
    15f4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__cmpsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	0c f0       	brlt	.+2      	; 0x15fe <sram_draw_line+0xd6>
    15fc:	51 c0       	rjmp	.+162    	; 0x16a0 <sram_draw_line+0x178>
    15fe:	19 81       	ldd	r17, Y+1	; 0x01
    1600:	ca 80       	ldd	r12, Y+2	; 0x02
    1602:	0f 2d       	mov	r16, r15
			sram_pixel(x,(gradient*(x-x0))+y0);
    1604:	29 85       	ldd	r18, Y+9	; 0x09
    1606:	3a 85       	ldd	r19, Y+10	; 0x0a
    1608:	29 01       	movw	r4, r18
    160a:	66 24       	eor	r6, r6
    160c:	57 fc       	sbrc	r5, 7
    160e:	60 94       	com	r6
    1610:	76 2c       	mov	r7, r6
    1612:	3e 86       	std	Y+14, r3	; 0x0e
    1614:	2d 86       	std	Y+13, r2	; 0x0d
    1616:	2e 2c       	mov	r2, r14
    1618:	3f 2c       	mov	r3, r15
    161a:	c8 8a       	std	Y+16, r12	; 0x10
    161c:	ef 86       	std	Y+15, r14	; 0x0f
    161e:	29 81       	ldd	r18, Y+1	; 0x01
    1620:	3a 81       	ldd	r19, Y+2	; 0x02
    1622:	42 2d       	mov	r20, r2
    1624:	53 2d       	mov	r21, r3
    1626:	61 2f       	mov	r22, r17
    1628:	78 89       	ldd	r23, Y+16	; 0x10
    162a:	8f 85       	ldd	r24, Y+15	; 0x0f
    162c:	90 2f       	mov	r25, r16
    162e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__subsf3>
    1632:	2b 81       	ldd	r18, Y+3	; 0x03
    1634:	3c 81       	ldd	r19, Y+4	; 0x04
    1636:	4d 81       	ldd	r20, Y+5	; 0x05
    1638:	5e 81       	ldd	r21, Y+6	; 0x06
    163a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__mulsf3>
    163e:	6b 01       	movw	r12, r22
    1640:	7c 01       	movw	r14, r24
    1642:	c3 01       	movw	r24, r6
    1644:	b2 01       	movw	r22, r4
    1646:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    164a:	9b 01       	movw	r18, r22
    164c:	ac 01       	movw	r20, r24
    164e:	c7 01       	movw	r24, r14
    1650:	b6 01       	movw	r22, r12
    1652:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__addsf3>
    1656:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fixsfsi>
    165a:	6b 01       	movw	r12, r22
    165c:	7c 01       	movw	r14, r24
    165e:	61 2f       	mov	r22, r17
    1660:	78 89       	ldd	r23, Y+16	; 0x10
    1662:	8f 85       	ldd	r24, Y+15	; 0x0f
    1664:	90 2f       	mov	r25, r16
    1666:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fixsfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	b6 01       	movw	r22, r12
    1670:	0e 94 65 0a 	call	0x14ca	; 0x14ca <sram_pixel>
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
		for(double x = x0; x < x1; x += 0.1){
    1674:	2d ec       	ldi	r18, 0xCD	; 205
    1676:	3c ec       	ldi	r19, 0xCC	; 204
    1678:	4c ec       	ldi	r20, 0xCC	; 204
    167a:	5d e3       	ldi	r21, 0x3D	; 61
    167c:	61 2f       	mov	r22, r17
    167e:	78 89       	ldd	r23, Y+16	; 0x10
    1680:	8f 85       	ldd	r24, Y+15	; 0x0f
    1682:	90 2f       	mov	r25, r16
    1684:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__addsf3>
    1688:	16 2f       	mov	r17, r22
    168a:	78 8b       	std	Y+16, r23	; 0x10
    168c:	8f 87       	std	Y+15, r24	; 0x0f
    168e:	09 2f       	mov	r16, r25
    1690:	a5 01       	movw	r20, r10
    1692:	94 01       	movw	r18, r8
    1694:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__cmpsf2>
    1698:	88 23       	and	r24, r24
    169a:	0c f2       	brlt	.-126    	; 0x161e <sram_draw_line+0xf6>
    169c:	2d 84       	ldd	r2, Y+13	; 0x0d
    169e:	3e 84       	ldd	r3, Y+14	; 0x0e
			sram_pixel(x,(gradient*(x-x0))+y0);
		}
	}
	
	if(y0 > y1){//rearranging after size
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	ef 81       	ldd	r30, Y+7	; 0x07
    16a6:	f8 85       	ldd	r31, Y+8	; 0x08
    16a8:	e8 17       	cp	r30, r24
    16aa:	f9 07       	cpc	r31, r25
    16ac:	34 f4       	brge	.+12     	; 0x16ba <sram_draw_line+0x192>
    16ae:	99 85       	ldd	r25, Y+9	; 0x09
    16b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b2:	fa 87       	std	Y+10, r31	; 0x0a
    16b4:	e9 87       	std	Y+9, r30	; 0x09
    16b6:	9f 83       	std	Y+7, r25	; 0x07
    16b8:	88 87       	std	Y+8, r24	; 0x08
		y1 = y0;
		y0 = temp_val;
	}
	
	
	if(x0 == x1){//f we were to divide by zero, the lines straight uppward woild not be drawn. This fixes that
    16ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    16bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    16be:	22 16       	cp	r2, r18
    16c0:	33 06       	cpc	r3, r19
    16c2:	99 f4       	brne	.+38     	; 0x16ea <sram_draw_line+0x1c2>
		for (uint8_t y = y0; y < y1; y++)
    16c4:	f9 84       	ldd	r15, Y+9	; 0x09
    16c6:	69 85       	ldd	r22, Y+9	; 0x09
    16c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    16ca:	77 27       	eor	r23, r23
    16cc:	8f 81       	ldd	r24, Y+7	; 0x07
    16ce:	98 85       	ldd	r25, Y+8	; 0x08
    16d0:	68 17       	cp	r22, r24
    16d2:	79 07       	cpc	r23, r25
    16d4:	54 f4       	brge	.+20     	; 0x16ea <sram_draw_line+0x1c2>
    16d6:	8c 01       	movw	r16, r24
		{
			sram_pixel(x0,y);
    16d8:	c1 01       	movw	r24, r2
    16da:	0e 94 65 0a 	call	0x14ca	; 0x14ca <sram_pixel>
		y0 = temp_val;
	}
	
	
	if(x0 == x1){//f we were to divide by zero, the lines straight uppward woild not be drawn. This fixes that
		for (uint8_t y = y0; y < y1; y++)
    16de:	f3 94       	inc	r15
    16e0:	6f 2d       	mov	r22, r15
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	60 17       	cp	r22, r16
    16e6:	71 07       	cpc	r23, r17
    16e8:	bc f3       	brlt	.-18     	; 0x16d8 <sram_draw_line+0x1b0>
		{
			sram_pixel(x0,y);
		}
	}
	
	edited = 0b11111111;
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	80 93 10 03 	sts	0x0310, r24
    16f0:	32 c0       	rjmp	.+100    	; 0x1756 <sram_draw_line+0x22e>
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    16f2:	69 85       	ldd	r22, Y+9	; 0x09
    16f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    16f6:	ef 81       	ldd	r30, Y+7	; 0x07
    16f8:	f8 85       	ldd	r31, Y+8	; 0x08
    16fa:	6e 1b       	sub	r22, r30
    16fc:	7f 0b       	sbc	r23, r31
    16fe:	88 27       	eor	r24, r24
    1700:	77 fd       	sbrc	r23, 7
    1702:	80 95       	com	r24
    1704:	98 2f       	mov	r25, r24
    1706:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    170a:	6b 01       	movw	r12, r22
    170c:	7c 01       	movw	r14, r24
    170e:	b1 01       	movw	r22, r2
    1710:	2b 85       	ldd	r18, Y+11	; 0x0b
    1712:	3c 85       	ldd	r19, Y+12	; 0x0c
    1714:	62 1b       	sub	r22, r18
    1716:	73 0b       	sbc	r23, r19
    1718:	88 27       	eor	r24, r24
    171a:	77 fd       	sbrc	r23, 7
    171c:	80 95       	com	r24
    171e:	98 2f       	mov	r25, r24
    1720:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatsisf>
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	c7 01       	movw	r24, r14
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divsf3>
    1730:	6b 83       	std	Y+3, r22	; 0x03
    1732:	7c 83       	std	Y+4, r23	; 0x04
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	99 85       	ldd	r25, Y+9	; 0x09
    173a:	8a 85       	ldd	r24, Y+10	; 0x0a
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
    173c:	ef 81       	ldd	r30, Y+7	; 0x07
    173e:	f8 85       	ldd	r31, Y+8	; 0x08
    1740:	fa 87       	std	Y+10, r31	; 0x0a
    1742:	e9 87       	std	Y+9, r30	; 0x09
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
    1744:	9f 83       	std	Y+7, r25	; 0x07
    1746:	88 87       	std	Y+8, r24	; 0x08
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    1748:	92 2d       	mov	r25, r2
    174a:	83 2d       	mov	r24, r3

void sram_draw_line(int x0, int y0, int x1, int y1){
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
    174c:	2b 84       	ldd	r2, Y+11	; 0x0b
    174e:	3c 84       	ldd	r3, Y+12	; 0x0c
}

void sram_draw_line(int x0, int y0, int x1, int y1){
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
    1750:	9b 87       	std	Y+11, r25	; 0x0b
    1752:	8c 87       	std	Y+12, r24	; 0x0c
    1754:	33 cf       	rjmp	.-410    	; 0x15bc <sram_draw_line+0x94>
			sram_pixel(x0,y);
		}
	}
	
	edited = 0b11111111;
}
    1756:	60 96       	adiw	r28, 0x10	; 16
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	7f 90       	pop	r7
    177c:	6f 90       	pop	r6
    177e:	5f 90       	pop	r5
    1780:	4f 90       	pop	r4
    1782:	3f 90       	pop	r3
    1784:	2f 90       	pop	r2
    1786:	08 95       	ret

00001788 <write_screen>:
		sram_pixel(-x+x0,y0+sqrt((pow(radius,2)-pow(x,2))));
	}
}


void write_screen(void){//update all the pages that are edited
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	c0 e0       	ldi	r28, 0x00	; 0
    1796:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
    179c:	e1 2c       	mov	r14, r1
    179e:	f1 2c       	mov	r15, r1
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
    17a0:	c8 01       	movw	r24, r16
    17a2:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
		for(unsigned int k = 0; k < 128; k++){
    17a6:	2e 2d       	mov	r18, r14
    17a8:	3f 2d       	mov	r19, r15
			write_d(ext_ram[r*128 + k]);
    17aa:	a9 01       	movw	r20, r18
    17ac:	4c 0f       	add	r20, r28
    17ae:	5d 1f       	adc	r21, r29
    17b0:	e0 91 06 01 	lds	r30, 0x0106
    17b4:	f0 91 07 01 	lds	r31, 0x0107
    17b8:	e4 0f       	add	r30, r20
    17ba:	f5 1f       	adc	r31, r21
    17bc:	80 81       	ld	r24, Z
}


void write_d(uint8_t data)
{
	*oled_data = data;
    17be:	e0 91 08 01 	lds	r30, 0x0108
    17c2:	f0 91 09 01 	lds	r31, 0x0109
    17c6:	80 83       	st	Z, r24
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	20 38       	cpi	r18, 0x80	; 128
    17ce:	31 05       	cpc	r19, r1
    17d0:	61 f7       	brne	.-40     	; 0x17aa <write_screen+0x22>
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
    17d2:	0f 5f       	subi	r16, 0xFF	; 255
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	c0 58       	subi	r28, 0x80	; 128
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	08 30       	cpi	r16, 0x08	; 8
    17dc:	11 05       	cpc	r17, r1
    17de:	01 f7       	brne	.-64     	; 0x17a0 <write_screen+0x18>
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
			write_d(ext_ram[r*128 + k]);
		}
	}
}
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	08 95       	ret

000017ee <sram_init>:
	}else{
		return 0;
	}
}

void sram_init(void){
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
    17f8:	9c 01       	movw	r18, r24
    17fa:	24 0f       	add	r18, r20
    17fc:	35 1f       	adc	r19, r21
    17fe:	e0 91 06 01 	lds	r30, 0x0106
    1802:	f0 91 07 01 	lds	r31, 0x0107
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	80 38       	cpi	r24, 0x80	; 128
    1810:	91 05       	cpc	r25, r1
    1812:	91 f7       	brne	.-28     	; 0x17f8 <sram_init+0xa>
    1814:	40 58       	subi	r20, 0x80	; 128
    1816:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
    1818:	41 15       	cp	r20, r1
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	58 07       	cpc	r21, r24
    181e:	19 f0       	breq	.+6      	; 0x1826 <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
    1820:	87 2f       	mov	r24, r23
    1822:	96 2f       	mov	r25, r22
    1824:	e9 cf       	rjmp	.-46     	; 0x17f8 <sram_init+0xa>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
		}
	}
	edited = 0b11111111;
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	80 93 10 03 	sts	0x0310, r24
	write_screen();
    182c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <write_screen>
    1830:	08 95       	ret

00001832 <sram_clear_line>:
			write_d(ext_ram[r*128 + k]);
		}
	}
}

void sram_clear_line(unsigned int line){
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    1838:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <oled_goto_line>
	if(line < 8){
    183c:	c8 30       	cpi	r28, 0x08	; 8
    183e:	d1 05       	cpc	r29, r1
    1840:	28 f5       	brcc	.+74     	; 0x188c <sram_clear_line+0x5a>
		for(unsigned int i = 0; i < 128; i++){
			ext_ram[line*128 + i] = 0b00000000;
    1842:	be 01       	movw	r22, r28
    1844:	76 95       	lsr	r23
    1846:	76 2f       	mov	r23, r22
    1848:	66 27       	eor	r22, r22
    184a:	77 95       	ror	r23
    184c:	67 95       	ror	r22
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	a9 01       	movw	r20, r18
    1854:	46 0f       	add	r20, r22
    1856:	57 1f       	adc	r21, r23
    1858:	e0 91 06 01 	lds	r30, 0x0106
    185c:	f0 91 07 01 	lds	r31, 0x0107
    1860:	e4 0f       	add	r30, r20
    1862:	f5 1f       	adc	r31, r21
    1864:	10 82       	st	Z, r1
}

void sram_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    1866:	2f 5f       	subi	r18, 0xFF	; 255
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	20 38       	cpi	r18, 0x80	; 128
    186c:	31 05       	cpc	r19, r1
    186e:	89 f7       	brne	.-30     	; 0x1852 <sram_clear_line+0x20>
			ext_ram[line*128 + i] = 0b00000000;
		}
		edited |= 1 << line;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 01       	movw	r18, r24
    1876:	02 c0       	rjmp	.+4      	; 0x187c <sram_clear_line+0x4a>
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	ca 95       	dec	r28
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <sram_clear_line+0x46>
    1880:	e9 01       	movw	r28, r18
    1882:	80 91 10 03 	lds	r24, 0x0310
    1886:	c8 2b       	or	r28, r24
    1888:	c0 93 10 03 	sts	0x0310, r28
	}
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	08 95       	ret

00001892 <sram_scroll_data>:

uint8_t tempdata[8];
void sram_scroll_data(uint8_t line, uint8_t scroll){
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	d8 2f       	mov	r29, r24
    189e:	c6 2f       	mov	r28, r22
	if(scroll > 8){
    18a0:	69 30       	cpi	r22, 0x09	; 9
    18a2:	20 f0       	brcs	.+8      	; 0x18ac <sram_scroll_data+0x1a>
		scroll -= 8;
    18a4:	c8 50       	subi	r28, 0x08	; 8
		sram_scroll_data(line,scroll);
    18a6:	6c 2f       	mov	r22, r28
    18a8:	0e 94 49 0c 	call	0x1892	; 0x1892 <sram_scroll_data>
	}
	for (uint8_t s = 0; s < scroll; s++){
    18ac:	cc 23       	and	r28, r28
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <sram_scroll_data+0x20>
    18b0:	5c c0       	rjmp	.+184    	; 0x196a <sram_scroll_data+0xd8>
    18b2:	a0 91 06 01 	lds	r26, 0x0106
    18b6:	b0 91 07 01 	lds	r27, 0x0107
    18ba:	20 e8       	ldi	r18, 0x80	; 128
    18bc:	d2 9f       	mul	r29, r18
    18be:	a0 0d       	add	r26, r0
    18c0:	b1 1d       	adc	r27, r1
    18c2:	11 24       	eor	r1, r1
    18c4:	8f e6       	ldi	r24, 0x6F	; 111
    18c6:	93 e0       	ldi	r25, 0x03	; 3
		tempdata[s] = ext_ram[line*128 + s];
    18c8:	fc 01       	movw	r30, r24
    18ca:	2d 91       	ld	r18, X+
    18cc:	21 93       	st	Z+, r18
    18ce:	2e 2f       	mov	r18, r30
    18d0:	28 1b       	sub	r18, r24
void sram_scroll_data(uint8_t line, uint8_t scroll){
	if(scroll > 8){
		scroll -= 8;
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
    18d2:	2c 17       	cp	r18, r28
    18d4:	d0 f3       	brcs	.-12     	; 0x18ca <sram_scroll_data+0x38>
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    18d6:	8c 2f       	mov	r24, r28
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	60 e8       	ldi	r22, 0x80	; 128
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	68 1b       	sub	r22, r24
    18e0:	79 0b       	sbc	r23, r25
    18e2:	16 16       	cp	r1, r22
    18e4:	17 06       	cpc	r1, r23
    18e6:	0c f4       	brge	.+2      	; 0x18ea <sram_scroll_data+0x58>
    18e8:	44 c0       	rjmp	.+136    	; 0x1972 <sram_scroll_data+0xe0>
    18ea:	18 c0       	rjmp	.+48     	; 0x191c <sram_scroll_data+0x8a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    18ec:	40 91 06 01 	lds	r20, 0x0106
    18f0:	50 91 07 01 	lds	r21, 0x0107
    18f4:	2e 0d       	add	r18, r14
    18f6:	3f 1d       	adc	r19, r15
    18f8:	fa 01       	movw	r30, r20
    18fa:	e2 0f       	add	r30, r18
    18fc:	f3 1f       	adc	r31, r19
    18fe:	28 0f       	add	r18, r24
    1900:	39 1f       	adc	r19, r25
    1902:	42 0f       	add	r20, r18
    1904:	53 1f       	adc	r21, r19
    1906:	da 01       	movw	r26, r20
    1908:	2c 91       	ld	r18, X
    190a:	20 83       	st	Z, r18
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    190c:	1f 5f       	subi	r17, 0xFF	; 255
    190e:	21 2f       	mov	r18, r17
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	26 17       	cp	r18, r22
    1914:	37 07       	cpc	r19, r23
    1916:	54 f3       	brlt	.-44     	; 0x18ec <sram_scroll_data+0x5a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    1918:	cc 23       	and	r28, r28
    191a:	d1 f0       	breq	.+52     	; 0x1950 <sram_scroll_data+0xbe>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
    191c:	b0 e8       	ldi	r27, 0x80	; 128
    191e:	db 9f       	mul	r29, r27
    1920:	90 01       	movw	r18, r0
    1922:	11 24       	eor	r1, r1
    1924:	28 1b       	sub	r18, r24
    1926:	39 0b       	sbc	r19, r25
    1928:	4f e6       	ldi	r20, 0x6F	; 111
    192a:	53 e0       	ldi	r21, 0x03	; 3
    192c:	fa 01       	movw	r30, r20
    192e:	20 5f       	subi	r18, 0xF0	; 240
    1930:	32 40       	sbci	r19, 0x02	; 2
    1932:	c9 01       	movw	r24, r18
    1934:	8e 0f       	add	r24, r30
    1936:	9f 1f       	adc	r25, r31
    1938:	a0 91 06 01 	lds	r26, 0x0106
    193c:	b0 91 07 01 	lds	r27, 0x0107
    1940:	a8 0f       	add	r26, r24
    1942:	b9 1f       	adc	r27, r25
    1944:	81 91       	ld	r24, Z+
    1946:	8c 93       	st	X, r24
    1948:	8e 2f       	mov	r24, r30
    194a:	84 1b       	sub	r24, r20
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    194c:	8c 17       	cp	r24, r28
    194e:	88 f3       	brcs	.-30     	; 0x1932 <sram_scroll_data+0xa0>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <sram_scroll_data+0xc8>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	da 95       	dec	r29
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <sram_scroll_data+0xc4>
    195e:	d0 91 10 03 	lds	r29, 0x0310
    1962:	8d 2b       	or	r24, r29
    1964:	80 93 10 03 	sts	0x0310, r24
    1968:	0c c0       	rjmp	.+24     	; 0x1982 <sram_scroll_data+0xf0>
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    196a:	60 e8       	ldi	r22, 0x80	; 128
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    1972:	20 e8       	ldi	r18, 0x80	; 128
    1974:	d2 9f       	mul	r29, r18
    1976:	70 01       	movw	r14, r0
    1978:	11 24       	eor	r1, r1
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	10 e0       	ldi	r17, 0x00	; 0
    1980:	b5 cf       	rjmp	.-150    	; 0x18ec <sram_scroll_data+0x5a>
	}
	for (uint8_t s = 0; s < scroll; s++){
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
}
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	08 95       	ret

0000198e <sram_draw_rectangle>:
	sram_draw_line(x1,y1,x2,y2);
	sram_draw_line(x2,y2,x0,y0);
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	c4 2f       	mov	r28, r20
	sram_draw_line(x0,y0,x0,y1);
    19a0:	e2 2e       	mov	r14, r18
    19a2:	f1 2c       	mov	r15, r1
    19a4:	06 2f       	mov	r16, r22
    19a6:	10 e0       	ldi	r17, 0x00	; 0
    19a8:	c8 2e       	mov	r12, r24
    19aa:	d1 2c       	mov	r13, r1
    19ac:	97 01       	movw	r18, r14
    19ae:	a6 01       	movw	r20, r12
    19b0:	b8 01       	movw	r22, r16
    19b2:	c6 01       	movw	r24, r12
    19b4:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x0,y0,x1,y0);
    19b8:	d0 e0       	ldi	r29, 0x00	; 0
    19ba:	98 01       	movw	r18, r16
    19bc:	ae 01       	movw	r20, r28
    19be:	b8 01       	movw	r22, r16
    19c0:	c6 01       	movw	r24, r12
    19c2:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x0,y1,x1,y1);
    19c6:	97 01       	movw	r18, r14
    19c8:	ae 01       	movw	r20, r28
    19ca:	b7 01       	movw	r22, r14
    19cc:	c6 01       	movw	r24, r12
    19ce:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
	sram_draw_line(x1,y0,x1,y1);
    19d2:	97 01       	movw	r18, r14
    19d4:	ae 01       	movw	r20, r28
    19d6:	b8 01       	movw	r22, r16
    19d8:	ce 01       	movw	r24, r28
    19da:	0e 94 94 0a 	call	0x1528	; 0x1528 <sram_draw_line>
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	cf 90       	pop	r12
    19ee:	08 95       	ret

000019f0 <SPI_send>:
    19f0:	8f b9       	out	0x0f, r24	; 15
    19f2:	77 9b       	sbis	0x0e, 7	; 14
    19f4:	fe cf       	rjmp	.-4      	; 0x19f2 <SPI_send+0x2>
    19f6:	08 95       	ret

000019f8 <SPI_select>:
    19f8:	c4 98       	cbi	0x18, 4	; 24
    19fa:	08 95       	ret

000019fc <SPI_deselect>:
    19fc:	c4 9a       	sbi	0x18, 4	; 24
    19fe:	08 95       	ret

00001a00 <SPI_initialize>:
    1a00:	87 b3       	in	r24, 0x17	; 23
    1a02:	80 6b       	ori	r24, 0xB0	; 176
    1a04:	87 bb       	out	0x17, r24	; 23
    1a06:	be 98       	cbi	0x17, 6	; 23
    1a08:	6c 9a       	sbi	0x0d, 4	; 13
    1a0a:	6e 9a       	sbi	0x0d, 6	; 13
    1a0c:	70 9a       	sbi	0x0e, 0	; 14
    1a0e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <SPI_deselect>
    1a12:	08 95       	ret

00001a14 <initialize_timer>:

#include "timer.h"

uint8_t FLAG_refresh_screen;

void initialize_timer(uint8_t fps){	//	Function for initilization of the timers
    1a14:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    1a16:	89 b7       	in	r24, 0x39	; 57
    1a18:	81 60       	ori	r24, 0x01	; 1
    1a1a:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    1a1c:	83 b7       	in	r24, 0x33	; 51
    1a1e:	8d 60       	ori	r24, 0x0D	; 13
    1a20:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	60 ec       	ldi	r22, 0xC0	; 192
    1a2a:	72 e1       	ldi	r23, 0x12	; 18
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__divmodsi4>
    1a34:	21 bf       	out	0x31, r18	; 49
	FLAG_refresh_screen = 1;//since we are initializing we want to refresh the page
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	80 93 7b 03 	sts	0x037B, r24
    1a3c:	08 95       	ret

00001a3e <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	return FLAG_refresh_screen;
}
    1a3e:	80 91 7b 03 	lds	r24, 0x037B
    1a42:	08 95       	ret

00001a44 <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_refresh_screen = 0;
    1a44:	10 92 7b 03 	sts	0x037B, r1
    1a48:	08 95       	ret

00001a4a <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	8f 93       	push	r24
	FLAG_refresh_screen = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	80 93 7b 03 	sts	0x037B, r24
}
    1a5c:	8f 91       	pop	r24
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <send_UART>:
    1a68:	5d 9b       	sbis	0x0b, 5	; 11
    1a6a:	fe cf       	rjmp	.-4      	; 0x1a68 <send_UART>
    1a6c:	8c b9       	out	0x0c, r24	; 12
    1a6e:	08 95       	ret

00001a70 <recieve_UART>:
    1a70:	5f 9b       	sbis	0x0b, 7	; 11
    1a72:	fe cf       	rjmp	.-4      	; 0x1a70 <recieve_UART>
    1a74:	8c b1       	in	r24, 0x0c	; 12
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	08 95       	ret

00001a7a <init_UART>:
    1a7a:	90 bd       	out	0x20, r25	; 32
    1a7c:	89 b9       	out	0x09, r24	; 9
    1a7e:	88 e1       	ldi	r24, 0x18	; 24
    1a80:	8a b9       	out	0x0a, r24	; 10
    1a82:	68 e3       	ldi	r22, 0x38	; 56
    1a84:	7d e0       	ldi	r23, 0x0D	; 13
    1a86:	84 e3       	ldi	r24, 0x34	; 52
    1a88:	9d e0       	ldi	r25, 0x0D	; 13
    1a8a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <fdevopen>
    1a8e:	08 95       	ret

00001a90 <__subsf3>:
    1a90:	50 58       	subi	r21, 0x80	; 128

00001a92 <__addsf3>:
    1a92:	bb 27       	eor	r27, r27
    1a94:	aa 27       	eor	r26, r26
    1a96:	0e d0       	rcall	.+28     	; 0x1ab4 <__addsf3x>
    1a98:	75 c1       	rjmp	.+746    	; 0x1d84 <__fp_round>
    1a9a:	66 d1       	rcall	.+716    	; 0x1d68 <__fp_pscA>
    1a9c:	30 f0       	brcs	.+12     	; 0x1aaa <__addsf3+0x18>
    1a9e:	6b d1       	rcall	.+726    	; 0x1d76 <__fp_pscB>
    1aa0:	20 f0       	brcs	.+8      	; 0x1aaa <__addsf3+0x18>
    1aa2:	31 f4       	brne	.+12     	; 0x1ab0 <__addsf3+0x1e>
    1aa4:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa6:	11 f4       	brne	.+4      	; 0x1aac <__addsf3+0x1a>
    1aa8:	1e f4       	brtc	.+6      	; 0x1ab0 <__addsf3+0x1e>
    1aaa:	5b c1       	rjmp	.+694    	; 0x1d62 <__fp_nan>
    1aac:	0e f4       	brtc	.+2      	; 0x1ab0 <__addsf3+0x1e>
    1aae:	e0 95       	com	r30
    1ab0:	e7 fb       	bst	r30, 7
    1ab2:	51 c1       	rjmp	.+674    	; 0x1d56 <__fp_inf>

00001ab4 <__addsf3x>:
    1ab4:	e9 2f       	mov	r30, r25
    1ab6:	77 d1       	rcall	.+750    	; 0x1da6 <__fp_split3>
    1ab8:	80 f3       	brcs	.-32     	; 0x1a9a <__addsf3+0x8>
    1aba:	ba 17       	cp	r27, r26
    1abc:	62 07       	cpc	r22, r18
    1abe:	73 07       	cpc	r23, r19
    1ac0:	84 07       	cpc	r24, r20
    1ac2:	95 07       	cpc	r25, r21
    1ac4:	18 f0       	brcs	.+6      	; 0x1acc <__addsf3x+0x18>
    1ac6:	71 f4       	brne	.+28     	; 0x1ae4 <__addsf3x+0x30>
    1ac8:	9e f5       	brtc	.+102    	; 0x1b30 <__addsf3x+0x7c>
    1aca:	8f c1       	rjmp	.+798    	; 0x1dea <__fp_zero>
    1acc:	0e f4       	brtc	.+2      	; 0x1ad0 <__addsf3x+0x1c>
    1ace:	e0 95       	com	r30
    1ad0:	0b 2e       	mov	r0, r27
    1ad2:	ba 2f       	mov	r27, r26
    1ad4:	a0 2d       	mov	r26, r0
    1ad6:	0b 01       	movw	r0, r22
    1ad8:	b9 01       	movw	r22, r18
    1ada:	90 01       	movw	r18, r0
    1adc:	0c 01       	movw	r0, r24
    1ade:	ca 01       	movw	r24, r20
    1ae0:	a0 01       	movw	r20, r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	ff 27       	eor	r31, r31
    1ae6:	59 1b       	sub	r21, r25
    1ae8:	99 f0       	breq	.+38     	; 0x1b10 <__addsf3x+0x5c>
    1aea:	59 3f       	cpi	r21, 0xF9	; 249
    1aec:	50 f4       	brcc	.+20     	; 0x1b02 <__addsf3x+0x4e>
    1aee:	50 3e       	cpi	r21, 0xE0	; 224
    1af0:	68 f1       	brcs	.+90     	; 0x1b4c <__addsf3x+0x98>
    1af2:	1a 16       	cp	r1, r26
    1af4:	f0 40       	sbci	r31, 0x00	; 0
    1af6:	a2 2f       	mov	r26, r18
    1af8:	23 2f       	mov	r18, r19
    1afa:	34 2f       	mov	r19, r20
    1afc:	44 27       	eor	r20, r20
    1afe:	58 5f       	subi	r21, 0xF8	; 248
    1b00:	f3 cf       	rjmp	.-26     	; 0x1ae8 <__addsf3x+0x34>
    1b02:	46 95       	lsr	r20
    1b04:	37 95       	ror	r19
    1b06:	27 95       	ror	r18
    1b08:	a7 95       	ror	r26
    1b0a:	f0 40       	sbci	r31, 0x00	; 0
    1b0c:	53 95       	inc	r21
    1b0e:	c9 f7       	brne	.-14     	; 0x1b02 <__addsf3x+0x4e>
    1b10:	7e f4       	brtc	.+30     	; 0x1b30 <__addsf3x+0x7c>
    1b12:	1f 16       	cp	r1, r31
    1b14:	ba 0b       	sbc	r27, r26
    1b16:	62 0b       	sbc	r22, r18
    1b18:	73 0b       	sbc	r23, r19
    1b1a:	84 0b       	sbc	r24, r20
    1b1c:	ba f0       	brmi	.+46     	; 0x1b4c <__addsf3x+0x98>
    1b1e:	91 50       	subi	r25, 0x01	; 1
    1b20:	a1 f0       	breq	.+40     	; 0x1b4a <__addsf3x+0x96>
    1b22:	ff 0f       	add	r31, r31
    1b24:	bb 1f       	adc	r27, r27
    1b26:	66 1f       	adc	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	c2 f7       	brpl	.-16     	; 0x1b1e <__addsf3x+0x6a>
    1b2e:	0e c0       	rjmp	.+28     	; 0x1b4c <__addsf3x+0x98>
    1b30:	ba 0f       	add	r27, r26
    1b32:	62 1f       	adc	r22, r18
    1b34:	73 1f       	adc	r23, r19
    1b36:	84 1f       	adc	r24, r20
    1b38:	48 f4       	brcc	.+18     	; 0x1b4c <__addsf3x+0x98>
    1b3a:	87 95       	ror	r24
    1b3c:	77 95       	ror	r23
    1b3e:	67 95       	ror	r22
    1b40:	b7 95       	ror	r27
    1b42:	f7 95       	ror	r31
    1b44:	9e 3f       	cpi	r25, 0xFE	; 254
    1b46:	08 f0       	brcs	.+2      	; 0x1b4a <__addsf3x+0x96>
    1b48:	b3 cf       	rjmp	.-154    	; 0x1ab0 <__addsf3+0x1e>
    1b4a:	93 95       	inc	r25
    1b4c:	88 0f       	add	r24, r24
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <__addsf3x+0x9e>
    1b50:	99 27       	eor	r25, r25
    1b52:	ee 0f       	add	r30, r30
    1b54:	97 95       	ror	r25
    1b56:	87 95       	ror	r24
    1b58:	08 95       	ret

00001b5a <__cmpsf2>:
    1b5a:	d9 d0       	rcall	.+434    	; 0x1d0e <__fp_cmp>
    1b5c:	08 f4       	brcc	.+2      	; 0x1b60 <__cmpsf2+0x6>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	08 95       	ret

00001b62 <__divsf3>:
    1b62:	0c d0       	rcall	.+24     	; 0x1b7c <__divsf3x>
    1b64:	0f c1       	rjmp	.+542    	; 0x1d84 <__fp_round>
    1b66:	07 d1       	rcall	.+526    	; 0x1d76 <__fp_pscB>
    1b68:	40 f0       	brcs	.+16     	; 0x1b7a <__divsf3+0x18>
    1b6a:	fe d0       	rcall	.+508    	; 0x1d68 <__fp_pscA>
    1b6c:	30 f0       	brcs	.+12     	; 0x1b7a <__divsf3+0x18>
    1b6e:	21 f4       	brne	.+8      	; 0x1b78 <__divsf3+0x16>
    1b70:	5f 3f       	cpi	r21, 0xFF	; 255
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <__divsf3+0x18>
    1b74:	f0 c0       	rjmp	.+480    	; 0x1d56 <__fp_inf>
    1b76:	51 11       	cpse	r21, r1
    1b78:	39 c1       	rjmp	.+626    	; 0x1dec <__fp_szero>
    1b7a:	f3 c0       	rjmp	.+486    	; 0x1d62 <__fp_nan>

00001b7c <__divsf3x>:
    1b7c:	14 d1       	rcall	.+552    	; 0x1da6 <__fp_split3>
    1b7e:	98 f3       	brcs	.-26     	; 0x1b66 <__divsf3+0x4>

00001b80 <__divsf3_pse>:
    1b80:	99 23       	and	r25, r25
    1b82:	c9 f3       	breq	.-14     	; 0x1b76 <__divsf3+0x14>
    1b84:	55 23       	and	r21, r21
    1b86:	b1 f3       	breq	.-20     	; 0x1b74 <__divsf3+0x12>
    1b88:	95 1b       	sub	r25, r21
    1b8a:	55 0b       	sbc	r21, r21
    1b8c:	bb 27       	eor	r27, r27
    1b8e:	aa 27       	eor	r26, r26
    1b90:	62 17       	cp	r22, r18
    1b92:	73 07       	cpc	r23, r19
    1b94:	84 07       	cpc	r24, r20
    1b96:	38 f0       	brcs	.+14     	; 0x1ba6 <__divsf3_pse+0x26>
    1b98:	9f 5f       	subi	r25, 0xFF	; 255
    1b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	44 1f       	adc	r20, r20
    1ba2:	aa 1f       	adc	r26, r26
    1ba4:	a9 f3       	breq	.-22     	; 0x1b90 <__divsf3_pse+0x10>
    1ba6:	33 d0       	rcall	.+102    	; 0x1c0e <__divsf3_pse+0x8e>
    1ba8:	0e 2e       	mov	r0, r30
    1baa:	3a f0       	brmi	.+14     	; 0x1bba <__divsf3_pse+0x3a>
    1bac:	e0 e8       	ldi	r30, 0x80	; 128
    1bae:	30 d0       	rcall	.+96     	; 0x1c10 <__divsf3_pse+0x90>
    1bb0:	91 50       	subi	r25, 0x01	; 1
    1bb2:	50 40       	sbci	r21, 0x00	; 0
    1bb4:	e6 95       	lsr	r30
    1bb6:	00 1c       	adc	r0, r0
    1bb8:	ca f7       	brpl	.-14     	; 0x1bac <__divsf3_pse+0x2c>
    1bba:	29 d0       	rcall	.+82     	; 0x1c0e <__divsf3_pse+0x8e>
    1bbc:	fe 2f       	mov	r31, r30
    1bbe:	27 d0       	rcall	.+78     	; 0x1c0e <__divsf3_pse+0x8e>
    1bc0:	66 0f       	add	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	bb 1f       	adc	r27, r27
    1bc8:	26 17       	cp	r18, r22
    1bca:	37 07       	cpc	r19, r23
    1bcc:	48 07       	cpc	r20, r24
    1bce:	ab 07       	cpc	r26, r27
    1bd0:	b0 e8       	ldi	r27, 0x80	; 128
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <__divsf3_pse+0x56>
    1bd4:	bb 0b       	sbc	r27, r27
    1bd6:	80 2d       	mov	r24, r0
    1bd8:	bf 01       	movw	r22, r30
    1bda:	ff 27       	eor	r31, r31
    1bdc:	93 58       	subi	r25, 0x83	; 131
    1bde:	5f 4f       	sbci	r21, 0xFF	; 255
    1be0:	2a f0       	brmi	.+10     	; 0x1bec <__divsf3_pse+0x6c>
    1be2:	9e 3f       	cpi	r25, 0xFE	; 254
    1be4:	51 05       	cpc	r21, r1
    1be6:	68 f0       	brcs	.+26     	; 0x1c02 <__divsf3_pse+0x82>
    1be8:	b6 c0       	rjmp	.+364    	; 0x1d56 <__fp_inf>
    1bea:	00 c1       	rjmp	.+512    	; 0x1dec <__fp_szero>
    1bec:	5f 3f       	cpi	r21, 0xFF	; 255
    1bee:	ec f3       	brlt	.-6      	; 0x1bea <__divsf3_pse+0x6a>
    1bf0:	98 3e       	cpi	r25, 0xE8	; 232
    1bf2:	dc f3       	brlt	.-10     	; 0x1bea <__divsf3_pse+0x6a>
    1bf4:	86 95       	lsr	r24
    1bf6:	77 95       	ror	r23
    1bf8:	67 95       	ror	r22
    1bfa:	b7 95       	ror	r27
    1bfc:	f7 95       	ror	r31
    1bfe:	9f 5f       	subi	r25, 0xFF	; 255
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__divsf3_pse+0x74>
    1c02:	88 0f       	add	r24, r24
    1c04:	91 1d       	adc	r25, r1
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	97 f9       	bld	r25, 7
    1c0c:	08 95       	ret
    1c0e:	e1 e0       	ldi	r30, 0x01	; 1
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	bb 1f       	adc	r27, r27
    1c18:	62 17       	cp	r22, r18
    1c1a:	73 07       	cpc	r23, r19
    1c1c:	84 07       	cpc	r24, r20
    1c1e:	ba 07       	cpc	r27, r26
    1c20:	20 f0       	brcs	.+8      	; 0x1c2a <__divsf3_pse+0xaa>
    1c22:	62 1b       	sub	r22, r18
    1c24:	73 0b       	sbc	r23, r19
    1c26:	84 0b       	sbc	r24, r20
    1c28:	ba 0b       	sbc	r27, r26
    1c2a:	ee 1f       	adc	r30, r30
    1c2c:	88 f7       	brcc	.-30     	; 0x1c10 <__divsf3_pse+0x90>
    1c2e:	e0 95       	com	r30
    1c30:	08 95       	ret

00001c32 <__fixsfsi>:
    1c32:	04 d0       	rcall	.+8      	; 0x1c3c <__fixunssfsi>
    1c34:	68 94       	set
    1c36:	b1 11       	cpse	r27, r1
    1c38:	d9 c0       	rjmp	.+434    	; 0x1dec <__fp_szero>
    1c3a:	08 95       	ret

00001c3c <__fixunssfsi>:
    1c3c:	bc d0       	rcall	.+376    	; 0x1db6 <__fp_splitA>
    1c3e:	88 f0       	brcs	.+34     	; 0x1c62 <__fixunssfsi+0x26>
    1c40:	9f 57       	subi	r25, 0x7F	; 127
    1c42:	90 f0       	brcs	.+36     	; 0x1c68 <__fixunssfsi+0x2c>
    1c44:	b9 2f       	mov	r27, r25
    1c46:	99 27       	eor	r25, r25
    1c48:	b7 51       	subi	r27, 0x17	; 23
    1c4a:	a0 f0       	brcs	.+40     	; 0x1c74 <__fixunssfsi+0x38>
    1c4c:	d1 f0       	breq	.+52     	; 0x1c82 <__fixunssfsi+0x46>
    1c4e:	66 0f       	add	r22, r22
    1c50:	77 1f       	adc	r23, r23
    1c52:	88 1f       	adc	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	1a f0       	brmi	.+6      	; 0x1c5e <__fixunssfsi+0x22>
    1c58:	ba 95       	dec	r27
    1c5a:	c9 f7       	brne	.-14     	; 0x1c4e <__fixunssfsi+0x12>
    1c5c:	12 c0       	rjmp	.+36     	; 0x1c82 <__fixunssfsi+0x46>
    1c5e:	b1 30       	cpi	r27, 0x01	; 1
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <__fixunssfsi+0x46>
    1c62:	c3 d0       	rcall	.+390    	; 0x1dea <__fp_zero>
    1c64:	b1 e0       	ldi	r27, 0x01	; 1
    1c66:	08 95       	ret
    1c68:	c0 c0       	rjmp	.+384    	; 0x1dea <__fp_zero>
    1c6a:	67 2f       	mov	r22, r23
    1c6c:	78 2f       	mov	r23, r24
    1c6e:	88 27       	eor	r24, r24
    1c70:	b8 5f       	subi	r27, 0xF8	; 248
    1c72:	39 f0       	breq	.+14     	; 0x1c82 <__fixunssfsi+0x46>
    1c74:	b9 3f       	cpi	r27, 0xF9	; 249
    1c76:	cc f3       	brlt	.-14     	; 0x1c6a <__fixunssfsi+0x2e>
    1c78:	86 95       	lsr	r24
    1c7a:	77 95       	ror	r23
    1c7c:	67 95       	ror	r22
    1c7e:	b3 95       	inc	r27
    1c80:	d9 f7       	brne	.-10     	; 0x1c78 <__fixunssfsi+0x3c>
    1c82:	3e f4       	brtc	.+14     	; 0x1c92 <__fixunssfsi+0x56>
    1c84:	90 95       	com	r25
    1c86:	80 95       	com	r24
    1c88:	70 95       	com	r23
    1c8a:	61 95       	neg	r22
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	08 95       	ret

00001c94 <__floatunsisf>:
    1c94:	e8 94       	clt
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <__floatsisf+0x12>

00001c98 <__floatsisf>:
    1c98:	97 fb       	bst	r25, 7
    1c9a:	3e f4       	brtc	.+14     	; 0x1caa <__floatsisf+0x12>
    1c9c:	90 95       	com	r25
    1c9e:	80 95       	com	r24
    1ca0:	70 95       	com	r23
    1ca2:	61 95       	neg	r22
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	99 23       	and	r25, r25
    1cac:	a9 f0       	breq	.+42     	; 0x1cd8 <__floatsisf+0x40>
    1cae:	f9 2f       	mov	r31, r25
    1cb0:	96 e9       	ldi	r25, 0x96	; 150
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	93 95       	inc	r25
    1cb6:	f6 95       	lsr	r31
    1cb8:	87 95       	ror	r24
    1cba:	77 95       	ror	r23
    1cbc:	67 95       	ror	r22
    1cbe:	b7 95       	ror	r27
    1cc0:	f1 11       	cpse	r31, r1
    1cc2:	f8 cf       	rjmp	.-16     	; 0x1cb4 <__floatsisf+0x1c>
    1cc4:	fa f4       	brpl	.+62     	; 0x1d04 <__floatsisf+0x6c>
    1cc6:	bb 0f       	add	r27, r27
    1cc8:	11 f4       	brne	.+4      	; 0x1cce <__floatsisf+0x36>
    1cca:	60 ff       	sbrs	r22, 0
    1ccc:	1b c0       	rjmp	.+54     	; 0x1d04 <__floatsisf+0x6c>
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	16 c0       	rjmp	.+44     	; 0x1d04 <__floatsisf+0x6c>
    1cd8:	88 23       	and	r24, r24
    1cda:	11 f0       	breq	.+4      	; 0x1ce0 <__floatsisf+0x48>
    1cdc:	96 e9       	ldi	r25, 0x96	; 150
    1cde:	11 c0       	rjmp	.+34     	; 0x1d02 <__floatsisf+0x6a>
    1ce0:	77 23       	and	r23, r23
    1ce2:	21 f0       	breq	.+8      	; 0x1cec <__floatsisf+0x54>
    1ce4:	9e e8       	ldi	r25, 0x8E	; 142
    1ce6:	87 2f       	mov	r24, r23
    1ce8:	76 2f       	mov	r23, r22
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <__floatsisf+0x5e>
    1cec:	66 23       	and	r22, r22
    1cee:	71 f0       	breq	.+28     	; 0x1d0c <__floatsisf+0x74>
    1cf0:	96 e8       	ldi	r25, 0x86	; 134
    1cf2:	86 2f       	mov	r24, r22
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	2a f0       	brmi	.+10     	; 0x1d04 <__floatsisf+0x6c>
    1cfa:	9a 95       	dec	r25
    1cfc:	66 0f       	add	r22, r22
    1cfe:	77 1f       	adc	r23, r23
    1d00:	88 1f       	adc	r24, r24
    1d02:	da f7       	brpl	.-10     	; 0x1cfa <__floatsisf+0x62>
    1d04:	88 0f       	add	r24, r24
    1d06:	96 95       	lsr	r25
    1d08:	87 95       	ror	r24
    1d0a:	97 f9       	bld	r25, 7
    1d0c:	08 95       	ret

00001d0e <__fp_cmp>:
    1d0e:	99 0f       	add	r25, r25
    1d10:	00 08       	sbc	r0, r0
    1d12:	55 0f       	add	r21, r21
    1d14:	aa 0b       	sbc	r26, r26
    1d16:	e0 e8       	ldi	r30, 0x80	; 128
    1d18:	fe ef       	ldi	r31, 0xFE	; 254
    1d1a:	16 16       	cp	r1, r22
    1d1c:	17 06       	cpc	r1, r23
    1d1e:	e8 07       	cpc	r30, r24
    1d20:	f9 07       	cpc	r31, r25
    1d22:	c0 f0       	brcs	.+48     	; 0x1d54 <__fp_cmp+0x46>
    1d24:	12 16       	cp	r1, r18
    1d26:	13 06       	cpc	r1, r19
    1d28:	e4 07       	cpc	r30, r20
    1d2a:	f5 07       	cpc	r31, r21
    1d2c:	98 f0       	brcs	.+38     	; 0x1d54 <__fp_cmp+0x46>
    1d2e:	62 1b       	sub	r22, r18
    1d30:	73 0b       	sbc	r23, r19
    1d32:	84 0b       	sbc	r24, r20
    1d34:	95 0b       	sbc	r25, r21
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <__fp_cmp+0x38>
    1d38:	0a 26       	eor	r0, r26
    1d3a:	61 f0       	breq	.+24     	; 0x1d54 <__fp_cmp+0x46>
    1d3c:	23 2b       	or	r18, r19
    1d3e:	24 2b       	or	r18, r20
    1d40:	25 2b       	or	r18, r21
    1d42:	21 f4       	brne	.+8      	; 0x1d4c <__fp_cmp+0x3e>
    1d44:	08 95       	ret
    1d46:	0a 26       	eor	r0, r26
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <__fp_cmp+0x3e>
    1d4a:	a1 40       	sbci	r26, 0x01	; 1
    1d4c:	a6 95       	lsr	r26
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	81 1d       	adc	r24, r1
    1d52:	81 1d       	adc	r24, r1
    1d54:	08 95       	ret

00001d56 <__fp_inf>:
    1d56:	97 f9       	bld	r25, 7
    1d58:	9f 67       	ori	r25, 0x7F	; 127
    1d5a:	80 e8       	ldi	r24, 0x80	; 128
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	08 95       	ret

00001d62 <__fp_nan>:
    1d62:	9f ef       	ldi	r25, 0xFF	; 255
    1d64:	80 ec       	ldi	r24, 0xC0	; 192
    1d66:	08 95       	ret

00001d68 <__fp_pscA>:
    1d68:	00 24       	eor	r0, r0
    1d6a:	0a 94       	dec	r0
    1d6c:	16 16       	cp	r1, r22
    1d6e:	17 06       	cpc	r1, r23
    1d70:	18 06       	cpc	r1, r24
    1d72:	09 06       	cpc	r0, r25
    1d74:	08 95       	ret

00001d76 <__fp_pscB>:
    1d76:	00 24       	eor	r0, r0
    1d78:	0a 94       	dec	r0
    1d7a:	12 16       	cp	r1, r18
    1d7c:	13 06       	cpc	r1, r19
    1d7e:	14 06       	cpc	r1, r20
    1d80:	05 06       	cpc	r0, r21
    1d82:	08 95       	ret

00001d84 <__fp_round>:
    1d84:	09 2e       	mov	r0, r25
    1d86:	03 94       	inc	r0
    1d88:	00 0c       	add	r0, r0
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <__fp_round+0xc>
    1d8c:	88 23       	and	r24, r24
    1d8e:	52 f0       	brmi	.+20     	; 0x1da4 <__fp_round+0x20>
    1d90:	bb 0f       	add	r27, r27
    1d92:	40 f4       	brcc	.+16     	; 0x1da4 <__fp_round+0x20>
    1d94:	bf 2b       	or	r27, r31
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <__fp_round+0x18>
    1d98:	60 ff       	sbrs	r22, 0
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <__fp_round+0x20>
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	08 95       	ret

00001da6 <__fp_split3>:
    1da6:	57 fd       	sbrc	r21, 7
    1da8:	90 58       	subi	r25, 0x80	; 128
    1daa:	44 0f       	add	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	59 f0       	breq	.+22     	; 0x1dc6 <__fp_splitA+0x10>
    1db0:	5f 3f       	cpi	r21, 0xFF	; 255
    1db2:	71 f0       	breq	.+28     	; 0x1dd0 <__fp_splitA+0x1a>
    1db4:	47 95       	ror	r20

00001db6 <__fp_splitA>:
    1db6:	88 0f       	add	r24, r24
    1db8:	97 fb       	bst	r25, 7
    1dba:	99 1f       	adc	r25, r25
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <__fp_splitA+0x20>
    1dbe:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc0:	79 f0       	breq	.+30     	; 0x1de0 <__fp_splitA+0x2a>
    1dc2:	87 95       	ror	r24
    1dc4:	08 95       	ret
    1dc6:	12 16       	cp	r1, r18
    1dc8:	13 06       	cpc	r1, r19
    1dca:	14 06       	cpc	r1, r20
    1dcc:	55 1f       	adc	r21, r21
    1dce:	f2 cf       	rjmp	.-28     	; 0x1db4 <__fp_split3+0xe>
    1dd0:	46 95       	lsr	r20
    1dd2:	f1 df       	rcall	.-30     	; 0x1db6 <__fp_splitA>
    1dd4:	08 c0       	rjmp	.+16     	; 0x1de6 <__fp_splitA+0x30>
    1dd6:	16 16       	cp	r1, r22
    1dd8:	17 06       	cpc	r1, r23
    1dda:	18 06       	cpc	r1, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	f1 cf       	rjmp	.-30     	; 0x1dc2 <__fp_splitA+0xc>
    1de0:	86 95       	lsr	r24
    1de2:	71 05       	cpc	r23, r1
    1de4:	61 05       	cpc	r22, r1
    1de6:	08 94       	sec
    1de8:	08 95       	ret

00001dea <__fp_zero>:
    1dea:	e8 94       	clt

00001dec <__fp_szero>:
    1dec:	bb 27       	eor	r27, r27
    1dee:	66 27       	eor	r22, r22
    1df0:	77 27       	eor	r23, r23
    1df2:	cb 01       	movw	r24, r22
    1df4:	97 f9       	bld	r25, 7
    1df6:	08 95       	ret

00001df8 <__mulsf3>:
    1df8:	0b d0       	rcall	.+22     	; 0x1e10 <__mulsf3x>
    1dfa:	c4 cf       	rjmp	.-120    	; 0x1d84 <__fp_round>
    1dfc:	b5 df       	rcall	.-150    	; 0x1d68 <__fp_pscA>
    1dfe:	28 f0       	brcs	.+10     	; 0x1e0a <__mulsf3+0x12>
    1e00:	ba df       	rcall	.-140    	; 0x1d76 <__fp_pscB>
    1e02:	18 f0       	brcs	.+6      	; 0x1e0a <__mulsf3+0x12>
    1e04:	95 23       	and	r25, r21
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <__mulsf3+0x12>
    1e08:	a6 cf       	rjmp	.-180    	; 0x1d56 <__fp_inf>
    1e0a:	ab cf       	rjmp	.-170    	; 0x1d62 <__fp_nan>
    1e0c:	11 24       	eor	r1, r1
    1e0e:	ee cf       	rjmp	.-36     	; 0x1dec <__fp_szero>

00001e10 <__mulsf3x>:
    1e10:	ca df       	rcall	.-108    	; 0x1da6 <__fp_split3>
    1e12:	a0 f3       	brcs	.-24     	; 0x1dfc <__mulsf3+0x4>

00001e14 <__mulsf3_pse>:
    1e14:	95 9f       	mul	r25, r21
    1e16:	d1 f3       	breq	.-12     	; 0x1e0c <__mulsf3+0x14>
    1e18:	95 0f       	add	r25, r21
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	62 9f       	mul	r22, r18
    1e20:	f0 01       	movw	r30, r0
    1e22:	72 9f       	mul	r23, r18
    1e24:	bb 27       	eor	r27, r27
    1e26:	f0 0d       	add	r31, r0
    1e28:	b1 1d       	adc	r27, r1
    1e2a:	63 9f       	mul	r22, r19
    1e2c:	aa 27       	eor	r26, r26
    1e2e:	f0 0d       	add	r31, r0
    1e30:	b1 1d       	adc	r27, r1
    1e32:	aa 1f       	adc	r26, r26
    1e34:	64 9f       	mul	r22, r20
    1e36:	66 27       	eor	r22, r22
    1e38:	b0 0d       	add	r27, r0
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	66 1f       	adc	r22, r22
    1e3e:	82 9f       	mul	r24, r18
    1e40:	22 27       	eor	r18, r18
    1e42:	b0 0d       	add	r27, r0
    1e44:	a1 1d       	adc	r26, r1
    1e46:	62 1f       	adc	r22, r18
    1e48:	73 9f       	mul	r23, r19
    1e4a:	b0 0d       	add	r27, r0
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	62 1f       	adc	r22, r18
    1e50:	83 9f       	mul	r24, r19
    1e52:	a0 0d       	add	r26, r0
    1e54:	61 1d       	adc	r22, r1
    1e56:	22 1f       	adc	r18, r18
    1e58:	74 9f       	mul	r23, r20
    1e5a:	33 27       	eor	r19, r19
    1e5c:	a0 0d       	add	r26, r0
    1e5e:	61 1d       	adc	r22, r1
    1e60:	23 1f       	adc	r18, r19
    1e62:	84 9f       	mul	r24, r20
    1e64:	60 0d       	add	r22, r0
    1e66:	21 1d       	adc	r18, r1
    1e68:	82 2f       	mov	r24, r18
    1e6a:	76 2f       	mov	r23, r22
    1e6c:	6a 2f       	mov	r22, r26
    1e6e:	11 24       	eor	r1, r1
    1e70:	9f 57       	subi	r25, 0x7F	; 127
    1e72:	50 40       	sbci	r21, 0x00	; 0
    1e74:	8a f0       	brmi	.+34     	; 0x1e98 <__mulsf3_pse+0x84>
    1e76:	e1 f0       	breq	.+56     	; 0x1eb0 <__mulsf3_pse+0x9c>
    1e78:	88 23       	and	r24, r24
    1e7a:	4a f0       	brmi	.+18     	; 0x1e8e <__mulsf3_pse+0x7a>
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	bb 1f       	adc	r27, r27
    1e82:	66 1f       	adc	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	91 50       	subi	r25, 0x01	; 1
    1e8a:	50 40       	sbci	r21, 0x00	; 0
    1e8c:	a9 f7       	brne	.-22     	; 0x1e78 <__mulsf3_pse+0x64>
    1e8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e90:	51 05       	cpc	r21, r1
    1e92:	70 f0       	brcs	.+28     	; 0x1eb0 <__mulsf3_pse+0x9c>
    1e94:	60 cf       	rjmp	.-320    	; 0x1d56 <__fp_inf>
    1e96:	aa cf       	rjmp	.-172    	; 0x1dec <__fp_szero>
    1e98:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9a:	ec f3       	brlt	.-6      	; 0x1e96 <__mulsf3_pse+0x82>
    1e9c:	98 3e       	cpi	r25, 0xE8	; 232
    1e9e:	dc f3       	brlt	.-10     	; 0x1e96 <__mulsf3_pse+0x82>
    1ea0:	86 95       	lsr	r24
    1ea2:	77 95       	ror	r23
    1ea4:	67 95       	ror	r22
    1ea6:	b7 95       	ror	r27
    1ea8:	f7 95       	ror	r31
    1eaa:	e7 95       	ror	r30
    1eac:	9f 5f       	subi	r25, 0xFF	; 255
    1eae:	c1 f7       	brne	.-16     	; 0x1ea0 <__mulsf3_pse+0x8c>
    1eb0:	fe 2b       	or	r31, r30
    1eb2:	88 0f       	add	r24, r24
    1eb4:	91 1d       	adc	r25, r1
    1eb6:	96 95       	lsr	r25
    1eb8:	87 95       	ror	r24
    1eba:	97 f9       	bld	r25, 7
    1ebc:	08 95       	ret

00001ebe <__divmodhi4>:
    1ebe:	97 fb       	bst	r25, 7
    1ec0:	07 2e       	mov	r0, r23
    1ec2:	16 f4       	brtc	.+4      	; 0x1ec8 <__divmodhi4+0xa>
    1ec4:	00 94       	com	r0
    1ec6:	07 d0       	rcall	.+14     	; 0x1ed6 <__divmodhi4_neg1>
    1ec8:	77 fd       	sbrc	r23, 7
    1eca:	09 d0       	rcall	.+18     	; 0x1ede <__divmodhi4_neg2>
    1ecc:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__udivmodhi4>
    1ed0:	07 fc       	sbrc	r0, 7
    1ed2:	05 d0       	rcall	.+10     	; 0x1ede <__divmodhi4_neg2>
    1ed4:	3e f4       	brtc	.+14     	; 0x1ee4 <__divmodhi4_exit>

00001ed6 <__divmodhi4_neg1>:
    1ed6:	90 95       	com	r25
    1ed8:	81 95       	neg	r24
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	08 95       	ret

00001ede <__divmodhi4_neg2>:
    1ede:	70 95       	com	r23
    1ee0:	61 95       	neg	r22
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255

00001ee4 <__divmodhi4_exit>:
    1ee4:	08 95       	ret

00001ee6 <__divmodsi4>:
    1ee6:	05 2e       	mov	r0, r21
    1ee8:	97 fb       	bst	r25, 7
    1eea:	1e f4       	brtc	.+6      	; 0x1ef2 <__divmodsi4+0xc>
    1eec:	00 94       	com	r0
    1eee:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__negsi2>
    1ef2:	57 fd       	sbrc	r21, 7
    1ef4:	07 d0       	rcall	.+14     	; 0x1f04 <__divmodsi4_neg2>
    1ef6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__udivmodsi4>
    1efa:	07 fc       	sbrc	r0, 7
    1efc:	03 d0       	rcall	.+6      	; 0x1f04 <__divmodsi4_neg2>
    1efe:	4e f4       	brtc	.+18     	; 0x1f12 <__divmodsi4_exit>
    1f00:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__negsi2>

00001f04 <__divmodsi4_neg2>:
    1f04:	50 95       	com	r21
    1f06:	40 95       	com	r20
    1f08:	30 95       	com	r19
    1f0a:	21 95       	neg	r18
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f10:	5f 4f       	sbci	r21, 0xFF	; 255

00001f12 <__divmodsi4_exit>:
    1f12:	08 95       	ret

00001f14 <__negsi2>:
    1f14:	90 95       	com	r25
    1f16:	80 95       	com	r24
    1f18:	70 95       	com	r23
    1f1a:	61 95       	neg	r22
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	08 95       	ret

00001f24 <__udivmodhi4>:
    1f24:	aa 1b       	sub	r26, r26
    1f26:	bb 1b       	sub	r27, r27
    1f28:	51 e1       	ldi	r21, 0x11	; 17
    1f2a:	07 c0       	rjmp	.+14     	; 0x1f3a <__udivmodhi4_ep>

00001f2c <__udivmodhi4_loop>:
    1f2c:	aa 1f       	adc	r26, r26
    1f2e:	bb 1f       	adc	r27, r27
    1f30:	a6 17       	cp	r26, r22
    1f32:	b7 07       	cpc	r27, r23
    1f34:	10 f0       	brcs	.+4      	; 0x1f3a <__udivmodhi4_ep>
    1f36:	a6 1b       	sub	r26, r22
    1f38:	b7 0b       	sbc	r27, r23

00001f3a <__udivmodhi4_ep>:
    1f3a:	88 1f       	adc	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	5a 95       	dec	r21
    1f40:	a9 f7       	brne	.-22     	; 0x1f2c <__udivmodhi4_loop>
    1f42:	80 95       	com	r24
    1f44:	90 95       	com	r25
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	08 95       	ret

00001f4c <__udivmodsi4>:
    1f4c:	a1 e2       	ldi	r26, 0x21	; 33
    1f4e:	1a 2e       	mov	r1, r26
    1f50:	aa 1b       	sub	r26, r26
    1f52:	bb 1b       	sub	r27, r27
    1f54:	fd 01       	movw	r30, r26
    1f56:	0d c0       	rjmp	.+26     	; 0x1f72 <__udivmodsi4_ep>

00001f58 <__udivmodsi4_loop>:
    1f58:	aa 1f       	adc	r26, r26
    1f5a:	bb 1f       	adc	r27, r27
    1f5c:	ee 1f       	adc	r30, r30
    1f5e:	ff 1f       	adc	r31, r31
    1f60:	a2 17       	cp	r26, r18
    1f62:	b3 07       	cpc	r27, r19
    1f64:	e4 07       	cpc	r30, r20
    1f66:	f5 07       	cpc	r31, r21
    1f68:	20 f0       	brcs	.+8      	; 0x1f72 <__udivmodsi4_ep>
    1f6a:	a2 1b       	sub	r26, r18
    1f6c:	b3 0b       	sbc	r27, r19
    1f6e:	e4 0b       	sbc	r30, r20
    1f70:	f5 0b       	sbc	r31, r21

00001f72 <__udivmodsi4_ep>:
    1f72:	66 1f       	adc	r22, r22
    1f74:	77 1f       	adc	r23, r23
    1f76:	88 1f       	adc	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	1a 94       	dec	r1
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <__udivmodsi4_loop>
    1f7e:	60 95       	com	r22
    1f80:	70 95       	com	r23
    1f82:	80 95       	com	r24
    1f84:	90 95       	com	r25
    1f86:	9b 01       	movw	r18, r22
    1f88:	ac 01       	movw	r20, r24
    1f8a:	bd 01       	movw	r22, r26
    1f8c:	cf 01       	movw	r24, r30
    1f8e:	08 95       	ret

00001f90 <strcpy_P>:
    1f90:	fb 01       	movw	r30, r22
    1f92:	dc 01       	movw	r26, r24
    1f94:	05 90       	lpm	r0, Z+
    1f96:	0d 92       	st	X+, r0
    1f98:	00 20       	and	r0, r0
    1f9a:	e1 f7       	brne	.-8      	; 0x1f94 <strcpy_P+0x4>
    1f9c:	08 95       	ret

00001f9e <fdevopen>:
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	ec 01       	movw	r28, r24
    1fa8:	8b 01       	movw	r16, r22
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	31 f4       	brne	.+12     	; 0x1fba <fdevopen+0x1c>
    1fae:	61 15       	cp	r22, r1
    1fb0:	71 05       	cpc	r23, r1
    1fb2:	19 f4       	brne	.+6      	; 0x1fba <fdevopen+0x1c>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	38 c0       	rjmp	.+112    	; 0x202a <fdevopen+0x8c>
    1fba:	6e e0       	ldi	r22, 0x0E	; 14
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 00 12 	call	0x2400	; 0x2400 <calloc>
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	a1 f3       	breq	.-24     	; 0x1fb4 <fdevopen+0x16>
    1fcc:	80 e8       	ldi	r24, 0x80	; 128
    1fce:	83 83       	std	Z+3, r24	; 0x03
    1fd0:	01 15       	cp	r16, r1
    1fd2:	11 05       	cpc	r17, r1
    1fd4:	71 f0       	breq	.+28     	; 0x1ff2 <fdevopen+0x54>
    1fd6:	13 87       	std	Z+11, r17	; 0x0b
    1fd8:	02 87       	std	Z+10, r16	; 0x0a
    1fda:	81 e8       	ldi	r24, 0x81	; 129
    1fdc:	83 83       	std	Z+3, r24	; 0x03
    1fde:	80 91 7c 03 	lds	r24, 0x037C
    1fe2:	90 91 7d 03 	lds	r25, 0x037D
    1fe6:	89 2b       	or	r24, r25
    1fe8:	21 f4       	brne	.+8      	; 0x1ff2 <fdevopen+0x54>
    1fea:	f0 93 7d 03 	sts	0x037D, r31
    1fee:	e0 93 7c 03 	sts	0x037C, r30
    1ff2:	20 97       	sbiw	r28, 0x00	; 0
    1ff4:	c9 f0       	breq	.+50     	; 0x2028 <fdevopen+0x8a>
    1ff6:	d1 87       	std	Z+9, r29	; 0x09
    1ff8:	c0 87       	std	Z+8, r28	; 0x08
    1ffa:	83 81       	ldd	r24, Z+3	; 0x03
    1ffc:	82 60       	ori	r24, 0x02	; 2
    1ffe:	83 83       	std	Z+3, r24	; 0x03
    2000:	80 91 7e 03 	lds	r24, 0x037E
    2004:	90 91 7f 03 	lds	r25, 0x037F
    2008:	89 2b       	or	r24, r25
    200a:	71 f4       	brne	.+28     	; 0x2028 <fdevopen+0x8a>
    200c:	f0 93 7f 03 	sts	0x037F, r31
    2010:	e0 93 7e 03 	sts	0x037E, r30
    2014:	80 91 80 03 	lds	r24, 0x0380
    2018:	90 91 81 03 	lds	r25, 0x0381
    201c:	89 2b       	or	r24, r25
    201e:	21 f4       	brne	.+8      	; 0x2028 <fdevopen+0x8a>
    2020:	f0 93 81 03 	sts	0x0381, r31
    2024:	e0 93 80 03 	sts	0x0380, r30
    2028:	cf 01       	movw	r24, r30
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <printf>:
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e0 e2       	ldi	r30, 0x20	; 32
    203a:	f0 e1       	ldi	r31, 0x10	; 16
    203c:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x20>
    2040:	fe 01       	movw	r30, r28
    2042:	35 96       	adiw	r30, 0x05	; 5
    2044:	61 91       	ld	r22, Z+
    2046:	71 91       	ld	r23, Z+
    2048:	af 01       	movw	r20, r30
    204a:	80 91 7e 03 	lds	r24, 0x037E
    204e:	90 91 7f 03 	lds	r25, 0x037F
    2052:	0e 94 2e 10 	call	0x205c	; 0x205c <vfprintf>
    2056:	e2 e0       	ldi	r30, 0x02	; 2
    2058:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x20>

0000205c <vfprintf>:
    205c:	ac e0       	ldi	r26, 0x0C	; 12
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e4 e3       	ldi	r30, 0x34	; 52
    2062:	f0 e1       	ldi	r31, 0x10	; 16
    2064:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__>
    2068:	7c 01       	movw	r14, r24
    206a:	6b 01       	movw	r12, r22
    206c:	8a 01       	movw	r16, r20
    206e:	fc 01       	movw	r30, r24
    2070:	17 82       	std	Z+7, r1	; 0x07
    2072:	16 82       	std	Z+6, r1	; 0x06
    2074:	83 81       	ldd	r24, Z+3	; 0x03
    2076:	81 ff       	sbrs	r24, 1
    2078:	bd c1       	rjmp	.+890    	; 0x23f4 <vfprintf+0x398>
    207a:	ce 01       	movw	r24, r28
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	4c 01       	movw	r8, r24
    2080:	f7 01       	movw	r30, r14
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	f6 01       	movw	r30, r12
    2086:	93 fd       	sbrc	r25, 3
    2088:	85 91       	lpm	r24, Z+
    208a:	93 ff       	sbrs	r25, 3
    208c:	81 91       	ld	r24, Z+
    208e:	6f 01       	movw	r12, r30
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <vfprintf+0x3a>
    2094:	ab c1       	rjmp	.+854    	; 0x23ec <vfprintf+0x390>
    2096:	85 32       	cpi	r24, 0x25	; 37
    2098:	39 f4       	brne	.+14     	; 0x20a8 <vfprintf+0x4c>
    209a:	93 fd       	sbrc	r25, 3
    209c:	85 91       	lpm	r24, Z+
    209e:	93 ff       	sbrs	r25, 3
    20a0:	81 91       	ld	r24, Z+
    20a2:	6f 01       	movw	r12, r30
    20a4:	85 32       	cpi	r24, 0x25	; 37
    20a6:	29 f4       	brne	.+10     	; 0x20b2 <vfprintf+0x56>
    20a8:	b7 01       	movw	r22, r14
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    20b0:	e7 cf       	rjmp	.-50     	; 0x2080 <vfprintf+0x24>
    20b2:	51 2c       	mov	r5, r1
    20b4:	31 2c       	mov	r3, r1
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	20 32       	cpi	r18, 0x20	; 32
    20ba:	a0 f4       	brcc	.+40     	; 0x20e4 <vfprintf+0x88>
    20bc:	8b 32       	cpi	r24, 0x2B	; 43
    20be:	69 f0       	breq	.+26     	; 0x20da <vfprintf+0x7e>
    20c0:	30 f4       	brcc	.+12     	; 0x20ce <vfprintf+0x72>
    20c2:	80 32       	cpi	r24, 0x20	; 32
    20c4:	59 f0       	breq	.+22     	; 0x20dc <vfprintf+0x80>
    20c6:	83 32       	cpi	r24, 0x23	; 35
    20c8:	69 f4       	brne	.+26     	; 0x20e4 <vfprintf+0x88>
    20ca:	20 61       	ori	r18, 0x10	; 16
    20cc:	2c c0       	rjmp	.+88     	; 0x2126 <vfprintf+0xca>
    20ce:	8d 32       	cpi	r24, 0x2D	; 45
    20d0:	39 f0       	breq	.+14     	; 0x20e0 <vfprintf+0x84>
    20d2:	80 33       	cpi	r24, 0x30	; 48
    20d4:	39 f4       	brne	.+14     	; 0x20e4 <vfprintf+0x88>
    20d6:	21 60       	ori	r18, 0x01	; 1
    20d8:	26 c0       	rjmp	.+76     	; 0x2126 <vfprintf+0xca>
    20da:	22 60       	ori	r18, 0x02	; 2
    20dc:	24 60       	ori	r18, 0x04	; 4
    20de:	23 c0       	rjmp	.+70     	; 0x2126 <vfprintf+0xca>
    20e0:	28 60       	ori	r18, 0x08	; 8
    20e2:	21 c0       	rjmp	.+66     	; 0x2126 <vfprintf+0xca>
    20e4:	27 fd       	sbrc	r18, 7
    20e6:	27 c0       	rjmp	.+78     	; 0x2136 <vfprintf+0xda>
    20e8:	30 ed       	ldi	r19, 0xD0	; 208
    20ea:	38 0f       	add	r19, r24
    20ec:	3a 30       	cpi	r19, 0x0A	; 10
    20ee:	78 f4       	brcc	.+30     	; 0x210e <vfprintf+0xb2>
    20f0:	26 ff       	sbrs	r18, 6
    20f2:	06 c0       	rjmp	.+12     	; 0x2100 <vfprintf+0xa4>
    20f4:	fa e0       	ldi	r31, 0x0A	; 10
    20f6:	5f 9e       	mul	r5, r31
    20f8:	30 0d       	add	r19, r0
    20fa:	11 24       	eor	r1, r1
    20fc:	53 2e       	mov	r5, r19
    20fe:	13 c0       	rjmp	.+38     	; 0x2126 <vfprintf+0xca>
    2100:	8a e0       	ldi	r24, 0x0A	; 10
    2102:	38 9e       	mul	r3, r24
    2104:	30 0d       	add	r19, r0
    2106:	11 24       	eor	r1, r1
    2108:	33 2e       	mov	r3, r19
    210a:	20 62       	ori	r18, 0x20	; 32
    210c:	0c c0       	rjmp	.+24     	; 0x2126 <vfprintf+0xca>
    210e:	8e 32       	cpi	r24, 0x2E	; 46
    2110:	21 f4       	brne	.+8      	; 0x211a <vfprintf+0xbe>
    2112:	26 fd       	sbrc	r18, 6
    2114:	6b c1       	rjmp	.+726    	; 0x23ec <vfprintf+0x390>
    2116:	20 64       	ori	r18, 0x40	; 64
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <vfprintf+0xca>
    211a:	8c 36       	cpi	r24, 0x6C	; 108
    211c:	11 f4       	brne	.+4      	; 0x2122 <vfprintf+0xc6>
    211e:	20 68       	ori	r18, 0x80	; 128
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <vfprintf+0xca>
    2122:	88 36       	cpi	r24, 0x68	; 104
    2124:	41 f4       	brne	.+16     	; 0x2136 <vfprintf+0xda>
    2126:	f6 01       	movw	r30, r12
    2128:	93 fd       	sbrc	r25, 3
    212a:	85 91       	lpm	r24, Z+
    212c:	93 ff       	sbrs	r25, 3
    212e:	81 91       	ld	r24, Z+
    2130:	6f 01       	movw	r12, r30
    2132:	81 11       	cpse	r24, r1
    2134:	c1 cf       	rjmp	.-126    	; 0x20b8 <vfprintf+0x5c>
    2136:	98 2f       	mov	r25, r24
    2138:	9f 7d       	andi	r25, 0xDF	; 223
    213a:	95 54       	subi	r25, 0x45	; 69
    213c:	93 30       	cpi	r25, 0x03	; 3
    213e:	28 f4       	brcc	.+10     	; 0x214a <vfprintf+0xee>
    2140:	0c 5f       	subi	r16, 0xFC	; 252
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	ff e3       	ldi	r31, 0x3F	; 63
    2146:	f9 83       	std	Y+1, r31	; 0x01
    2148:	0d c0       	rjmp	.+26     	; 0x2164 <vfprintf+0x108>
    214a:	83 36       	cpi	r24, 0x63	; 99
    214c:	31 f0       	breq	.+12     	; 0x215a <vfprintf+0xfe>
    214e:	83 37       	cpi	r24, 0x73	; 115
    2150:	71 f0       	breq	.+28     	; 0x216e <vfprintf+0x112>
    2152:	83 35       	cpi	r24, 0x53	; 83
    2154:	09 f0       	breq	.+2      	; 0x2158 <vfprintf+0xfc>
    2156:	5b c0       	rjmp	.+182    	; 0x220e <vfprintf+0x1b2>
    2158:	22 c0       	rjmp	.+68     	; 0x219e <vfprintf+0x142>
    215a:	f8 01       	movw	r30, r16
    215c:	80 81       	ld	r24, Z
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	0e 5f       	subi	r16, 0xFE	; 254
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	44 24       	eor	r4, r4
    2166:	43 94       	inc	r4
    2168:	51 2c       	mov	r5, r1
    216a:	54 01       	movw	r10, r8
    216c:	15 c0       	rjmp	.+42     	; 0x2198 <vfprintf+0x13c>
    216e:	38 01       	movw	r6, r16
    2170:	f2 e0       	ldi	r31, 0x02	; 2
    2172:	6f 0e       	add	r6, r31
    2174:	71 1c       	adc	r7, r1
    2176:	f8 01       	movw	r30, r16
    2178:	a0 80       	ld	r10, Z
    217a:	b1 80       	ldd	r11, Z+1	; 0x01
    217c:	26 ff       	sbrs	r18, 6
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <vfprintf+0x12a>
    2180:	65 2d       	mov	r22, r5
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	02 c0       	rjmp	.+4      	; 0x218a <vfprintf+0x12e>
    2186:	6f ef       	ldi	r22, 0xFF	; 255
    2188:	7f ef       	ldi	r23, 0xFF	; 255
    218a:	c5 01       	movw	r24, r10
    218c:	2c 87       	std	Y+12, r18	; 0x0c
    218e:	0e 94 55 13 	call	0x26aa	; 0x26aa <strnlen>
    2192:	2c 01       	movw	r4, r24
    2194:	83 01       	movw	r16, r6
    2196:	2c 85       	ldd	r18, Y+12	; 0x0c
    2198:	2f 77       	andi	r18, 0x7F	; 127
    219a:	22 2e       	mov	r2, r18
    219c:	17 c0       	rjmp	.+46     	; 0x21cc <vfprintf+0x170>
    219e:	38 01       	movw	r6, r16
    21a0:	f2 e0       	ldi	r31, 0x02	; 2
    21a2:	6f 0e       	add	r6, r31
    21a4:	71 1c       	adc	r7, r1
    21a6:	f8 01       	movw	r30, r16
    21a8:	a0 80       	ld	r10, Z
    21aa:	b1 80       	ldd	r11, Z+1	; 0x01
    21ac:	26 ff       	sbrs	r18, 6
    21ae:	03 c0       	rjmp	.+6      	; 0x21b6 <vfprintf+0x15a>
    21b0:	65 2d       	mov	r22, r5
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <vfprintf+0x15e>
    21b6:	6f ef       	ldi	r22, 0xFF	; 255
    21b8:	7f ef       	ldi	r23, 0xFF	; 255
    21ba:	c5 01       	movw	r24, r10
    21bc:	2c 87       	std	Y+12, r18	; 0x0c
    21be:	0e 94 43 13 	call	0x2686	; 0x2686 <strnlen_P>
    21c2:	2c 01       	movw	r4, r24
    21c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    21c6:	20 68       	ori	r18, 0x80	; 128
    21c8:	22 2e       	mov	r2, r18
    21ca:	83 01       	movw	r16, r6
    21cc:	23 fc       	sbrc	r2, 3
    21ce:	1b c0       	rjmp	.+54     	; 0x2206 <vfprintf+0x1aa>
    21d0:	83 2d       	mov	r24, r3
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	48 16       	cp	r4, r24
    21d6:	59 06       	cpc	r5, r25
    21d8:	b0 f4       	brcc	.+44     	; 0x2206 <vfprintf+0x1aa>
    21da:	b7 01       	movw	r22, r14
    21dc:	80 e2       	ldi	r24, 0x20	; 32
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    21e4:	3a 94       	dec	r3
    21e6:	f4 cf       	rjmp	.-24     	; 0x21d0 <vfprintf+0x174>
    21e8:	f5 01       	movw	r30, r10
    21ea:	27 fc       	sbrc	r2, 7
    21ec:	85 91       	lpm	r24, Z+
    21ee:	27 fe       	sbrs	r2, 7
    21f0:	81 91       	ld	r24, Z+
    21f2:	5f 01       	movw	r10, r30
    21f4:	b7 01       	movw	r22, r14
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    21fc:	31 10       	cpse	r3, r1
    21fe:	3a 94       	dec	r3
    2200:	f1 e0       	ldi	r31, 0x01	; 1
    2202:	4f 1a       	sub	r4, r31
    2204:	51 08       	sbc	r5, r1
    2206:	41 14       	cp	r4, r1
    2208:	51 04       	cpc	r5, r1
    220a:	71 f7       	brne	.-36     	; 0x21e8 <vfprintf+0x18c>
    220c:	e5 c0       	rjmp	.+458    	; 0x23d8 <vfprintf+0x37c>
    220e:	84 36       	cpi	r24, 0x64	; 100
    2210:	11 f0       	breq	.+4      	; 0x2216 <vfprintf+0x1ba>
    2212:	89 36       	cpi	r24, 0x69	; 105
    2214:	39 f5       	brne	.+78     	; 0x2264 <vfprintf+0x208>
    2216:	f8 01       	movw	r30, r16
    2218:	27 ff       	sbrs	r18, 7
    221a:	07 c0       	rjmp	.+14     	; 0x222a <vfprintf+0x1ce>
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	0c 5f       	subi	r16, 0xFC	; 252
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	08 c0       	rjmp	.+16     	; 0x223a <vfprintf+0x1de>
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	88 27       	eor	r24, r24
    2230:	77 fd       	sbrc	r23, 7
    2232:	80 95       	com	r24
    2234:	98 2f       	mov	r25, r24
    2236:	0e 5f       	subi	r16, 0xFE	; 254
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	2f 76       	andi	r18, 0x6F	; 111
    223c:	b2 2e       	mov	r11, r18
    223e:	97 ff       	sbrs	r25, 7
    2240:	09 c0       	rjmp	.+18     	; 0x2254 <vfprintf+0x1f8>
    2242:	90 95       	com	r25
    2244:	80 95       	com	r24
    2246:	70 95       	com	r23
    2248:	61 95       	neg	r22
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	8f 4f       	sbci	r24, 0xFF	; 255
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	20 68       	ori	r18, 0x80	; 128
    2252:	b2 2e       	mov	r11, r18
    2254:	2a e0       	ldi	r18, 0x0A	; 10
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	a4 01       	movw	r20, r8
    225a:	0e 94 92 13 	call	0x2724	; 0x2724 <__ultoa_invert>
    225e:	a8 2e       	mov	r10, r24
    2260:	a8 18       	sub	r10, r8
    2262:	44 c0       	rjmp	.+136    	; 0x22ec <vfprintf+0x290>
    2264:	85 37       	cpi	r24, 0x75	; 117
    2266:	29 f4       	brne	.+10     	; 0x2272 <vfprintf+0x216>
    2268:	2f 7e       	andi	r18, 0xEF	; 239
    226a:	b2 2e       	mov	r11, r18
    226c:	2a e0       	ldi	r18, 0x0A	; 10
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	25 c0       	rjmp	.+74     	; 0x22bc <vfprintf+0x260>
    2272:	f2 2f       	mov	r31, r18
    2274:	f9 7f       	andi	r31, 0xF9	; 249
    2276:	bf 2e       	mov	r11, r31
    2278:	8f 36       	cpi	r24, 0x6F	; 111
    227a:	c1 f0       	breq	.+48     	; 0x22ac <vfprintf+0x250>
    227c:	18 f4       	brcc	.+6      	; 0x2284 <vfprintf+0x228>
    227e:	88 35       	cpi	r24, 0x58	; 88
    2280:	79 f0       	breq	.+30     	; 0x22a0 <vfprintf+0x244>
    2282:	b4 c0       	rjmp	.+360    	; 0x23ec <vfprintf+0x390>
    2284:	80 37       	cpi	r24, 0x70	; 112
    2286:	19 f0       	breq	.+6      	; 0x228e <vfprintf+0x232>
    2288:	88 37       	cpi	r24, 0x78	; 120
    228a:	21 f0       	breq	.+8      	; 0x2294 <vfprintf+0x238>
    228c:	af c0       	rjmp	.+350    	; 0x23ec <vfprintf+0x390>
    228e:	2f 2f       	mov	r18, r31
    2290:	20 61       	ori	r18, 0x10	; 16
    2292:	b2 2e       	mov	r11, r18
    2294:	b4 fe       	sbrs	r11, 4
    2296:	0d c0       	rjmp	.+26     	; 0x22b2 <vfprintf+0x256>
    2298:	8b 2d       	mov	r24, r11
    229a:	84 60       	ori	r24, 0x04	; 4
    229c:	b8 2e       	mov	r11, r24
    229e:	09 c0       	rjmp	.+18     	; 0x22b2 <vfprintf+0x256>
    22a0:	24 ff       	sbrs	r18, 4
    22a2:	0a c0       	rjmp	.+20     	; 0x22b8 <vfprintf+0x25c>
    22a4:	9f 2f       	mov	r25, r31
    22a6:	96 60       	ori	r25, 0x06	; 6
    22a8:	b9 2e       	mov	r11, r25
    22aa:	06 c0       	rjmp	.+12     	; 0x22b8 <vfprintf+0x25c>
    22ac:	28 e0       	ldi	r18, 0x08	; 8
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <vfprintf+0x260>
    22b2:	20 e1       	ldi	r18, 0x10	; 16
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <vfprintf+0x260>
    22b8:	20 e1       	ldi	r18, 0x10	; 16
    22ba:	32 e0       	ldi	r19, 0x02	; 2
    22bc:	f8 01       	movw	r30, r16
    22be:	b7 fe       	sbrs	r11, 7
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <vfprintf+0x274>
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	0c 5f       	subi	r16, 0xFC	; 252
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	06 c0       	rjmp	.+12     	; 0x22dc <vfprintf+0x280>
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 5f       	subi	r16, 0xFE	; 254
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	a4 01       	movw	r20, r8
    22de:	0e 94 92 13 	call	0x2724	; 0x2724 <__ultoa_invert>
    22e2:	a8 2e       	mov	r10, r24
    22e4:	a8 18       	sub	r10, r8
    22e6:	fb 2d       	mov	r31, r11
    22e8:	ff 77       	andi	r31, 0x7F	; 127
    22ea:	bf 2e       	mov	r11, r31
    22ec:	b6 fe       	sbrs	r11, 6
    22ee:	0b c0       	rjmp	.+22     	; 0x2306 <vfprintf+0x2aa>
    22f0:	2b 2d       	mov	r18, r11
    22f2:	2e 7f       	andi	r18, 0xFE	; 254
    22f4:	a5 14       	cp	r10, r5
    22f6:	50 f4       	brcc	.+20     	; 0x230c <vfprintf+0x2b0>
    22f8:	b4 fe       	sbrs	r11, 4
    22fa:	0a c0       	rjmp	.+20     	; 0x2310 <vfprintf+0x2b4>
    22fc:	b2 fc       	sbrc	r11, 2
    22fe:	08 c0       	rjmp	.+16     	; 0x2310 <vfprintf+0x2b4>
    2300:	2b 2d       	mov	r18, r11
    2302:	2e 7e       	andi	r18, 0xEE	; 238
    2304:	05 c0       	rjmp	.+10     	; 0x2310 <vfprintf+0x2b4>
    2306:	7a 2c       	mov	r7, r10
    2308:	2b 2d       	mov	r18, r11
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <vfprintf+0x2b6>
    230c:	7a 2c       	mov	r7, r10
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <vfprintf+0x2b6>
    2310:	75 2c       	mov	r7, r5
    2312:	24 ff       	sbrs	r18, 4
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <vfprintf+0x2d4>
    2316:	fe 01       	movw	r30, r28
    2318:	ea 0d       	add	r30, r10
    231a:	f1 1d       	adc	r31, r1
    231c:	80 81       	ld	r24, Z
    231e:	80 33       	cpi	r24, 0x30	; 48
    2320:	11 f4       	brne	.+4      	; 0x2326 <vfprintf+0x2ca>
    2322:	29 7e       	andi	r18, 0xE9	; 233
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <vfprintf+0x2dc>
    2326:	22 ff       	sbrs	r18, 2
    2328:	06 c0       	rjmp	.+12     	; 0x2336 <vfprintf+0x2da>
    232a:	73 94       	inc	r7
    232c:	73 94       	inc	r7
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <vfprintf+0x2dc>
    2330:	82 2f       	mov	r24, r18
    2332:	86 78       	andi	r24, 0x86	; 134
    2334:	09 f0       	breq	.+2      	; 0x2338 <vfprintf+0x2dc>
    2336:	73 94       	inc	r7
    2338:	23 fd       	sbrc	r18, 3
    233a:	13 c0       	rjmp	.+38     	; 0x2362 <vfprintf+0x306>
    233c:	20 ff       	sbrs	r18, 0
    233e:	06 c0       	rjmp	.+12     	; 0x234c <vfprintf+0x2f0>
    2340:	5a 2c       	mov	r5, r10
    2342:	73 14       	cp	r7, r3
    2344:	18 f4       	brcc	.+6      	; 0x234c <vfprintf+0x2f0>
    2346:	53 0c       	add	r5, r3
    2348:	57 18       	sub	r5, r7
    234a:	73 2c       	mov	r7, r3
    234c:	73 14       	cp	r7, r3
    234e:	68 f4       	brcc	.+26     	; 0x236a <vfprintf+0x30e>
    2350:	b7 01       	movw	r22, r14
    2352:	80 e2       	ldi	r24, 0x20	; 32
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	2c 87       	std	Y+12, r18	; 0x0c
    2358:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    235c:	73 94       	inc	r7
    235e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2360:	f5 cf       	rjmp	.-22     	; 0x234c <vfprintf+0x2f0>
    2362:	73 14       	cp	r7, r3
    2364:	10 f4       	brcc	.+4      	; 0x236a <vfprintf+0x30e>
    2366:	37 18       	sub	r3, r7
    2368:	01 c0       	rjmp	.+2      	; 0x236c <vfprintf+0x310>
    236a:	31 2c       	mov	r3, r1
    236c:	24 ff       	sbrs	r18, 4
    236e:	12 c0       	rjmp	.+36     	; 0x2394 <vfprintf+0x338>
    2370:	b7 01       	movw	r22, r14
    2372:	80 e3       	ldi	r24, 0x30	; 48
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	2c 87       	std	Y+12, r18	; 0x0c
    2378:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    237c:	2c 85       	ldd	r18, Y+12	; 0x0c
    237e:	22 ff       	sbrs	r18, 2
    2380:	17 c0       	rjmp	.+46     	; 0x23b0 <vfprintf+0x354>
    2382:	21 ff       	sbrs	r18, 1
    2384:	03 c0       	rjmp	.+6      	; 0x238c <vfprintf+0x330>
    2386:	88 e5       	ldi	r24, 0x58	; 88
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <vfprintf+0x334>
    238c:	88 e7       	ldi	r24, 0x78	; 120
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	b7 01       	movw	r22, r14
    2392:	0c c0       	rjmp	.+24     	; 0x23ac <vfprintf+0x350>
    2394:	82 2f       	mov	r24, r18
    2396:	86 78       	andi	r24, 0x86	; 134
    2398:	59 f0       	breq	.+22     	; 0x23b0 <vfprintf+0x354>
    239a:	21 fd       	sbrc	r18, 1
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <vfprintf+0x346>
    239e:	80 e2       	ldi	r24, 0x20	; 32
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <vfprintf+0x348>
    23a2:	8b e2       	ldi	r24, 0x2B	; 43
    23a4:	27 fd       	sbrc	r18, 7
    23a6:	8d e2       	ldi	r24, 0x2D	; 45
    23a8:	b7 01       	movw	r22, r14
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    23b0:	a5 14       	cp	r10, r5
    23b2:	38 f4       	brcc	.+14     	; 0x23c2 <vfprintf+0x366>
    23b4:	b7 01       	movw	r22, r14
    23b6:	80 e3       	ldi	r24, 0x30	; 48
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    23be:	5a 94       	dec	r5
    23c0:	f7 cf       	rjmp	.-18     	; 0x23b0 <vfprintf+0x354>
    23c2:	aa 94       	dec	r10
    23c4:	f4 01       	movw	r30, r8
    23c6:	ea 0d       	add	r30, r10
    23c8:	f1 1d       	adc	r31, r1
    23ca:	80 81       	ld	r24, Z
    23cc:	b7 01       	movw	r22, r14
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    23d4:	a1 10       	cpse	r10, r1
    23d6:	f5 cf       	rjmp	.-22     	; 0x23c2 <vfprintf+0x366>
    23d8:	33 20       	and	r3, r3
    23da:	09 f4       	brne	.+2      	; 0x23de <vfprintf+0x382>
    23dc:	51 ce       	rjmp	.-862    	; 0x2080 <vfprintf+0x24>
    23de:	b7 01       	movw	r22, r14
    23e0:	80 e2       	ldi	r24, 0x20	; 32
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 60 13 	call	0x26c0	; 0x26c0 <fputc>
    23e8:	3a 94       	dec	r3
    23ea:	f6 cf       	rjmp	.-20     	; 0x23d8 <vfprintf+0x37c>
    23ec:	f7 01       	movw	r30, r14
    23ee:	86 81       	ldd	r24, Z+6	; 0x06
    23f0:	97 81       	ldd	r25, Z+7	; 0x07
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <vfprintf+0x39c>
    23f4:	8f ef       	ldi	r24, 0xFF	; 255
    23f6:	9f ef       	ldi	r25, 0xFF	; 255
    23f8:	2c 96       	adiw	r28, 0x0c	; 12
    23fa:	e2 e1       	ldi	r30, 0x12	; 18
    23fc:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__>

00002400 <calloc>:
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	86 9f       	mul	r24, r22
    240a:	80 01       	movw	r16, r0
    240c:	87 9f       	mul	r24, r23
    240e:	10 0d       	add	r17, r0
    2410:	96 9f       	mul	r25, r22
    2412:	10 0d       	add	r17, r0
    2414:	11 24       	eor	r1, r1
    2416:	c8 01       	movw	r24, r16
    2418:	0e 94 1c 12 	call	0x2438	; 0x2438 <malloc>
    241c:	ec 01       	movw	r28, r24
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	29 f0       	breq	.+10     	; 0x242c <calloc+0x2c>
    2422:	a8 01       	movw	r20, r16
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	0e 94 4e 13 	call	0x269c	; 0x269c <memset>
    242c:	ce 01       	movw	r24, r28
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	08 95       	ret

00002438 <malloc>:
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	82 30       	cpi	r24, 0x02	; 2
    243e:	91 05       	cpc	r25, r1
    2440:	10 f4       	brcc	.+4      	; 0x2446 <malloc+0xe>
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	e0 91 84 03 	lds	r30, 0x0384
    244a:	f0 91 85 03 	lds	r31, 0x0385
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	a0 e0       	ldi	r26, 0x00	; 0
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	30 97       	sbiw	r30, 0x00	; 0
    2458:	39 f1       	breq	.+78     	; 0x24a8 <malloc+0x70>
    245a:	40 81       	ld	r20, Z
    245c:	51 81       	ldd	r21, Z+1	; 0x01
    245e:	48 17       	cp	r20, r24
    2460:	59 07       	cpc	r21, r25
    2462:	b8 f0       	brcs	.+46     	; 0x2492 <malloc+0x5a>
    2464:	48 17       	cp	r20, r24
    2466:	59 07       	cpc	r21, r25
    2468:	71 f4       	brne	.+28     	; 0x2486 <malloc+0x4e>
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	10 97       	sbiw	r26, 0x00	; 0
    2470:	29 f0       	breq	.+10     	; 0x247c <malloc+0x44>
    2472:	13 96       	adiw	r26, 0x03	; 3
    2474:	9c 93       	st	X, r25
    2476:	8e 93       	st	-X, r24
    2478:	12 97       	sbiw	r26, 0x02	; 2
    247a:	2c c0       	rjmp	.+88     	; 0x24d4 <malloc+0x9c>
    247c:	90 93 85 03 	sts	0x0385, r25
    2480:	80 93 84 03 	sts	0x0384, r24
    2484:	27 c0       	rjmp	.+78     	; 0x24d4 <malloc+0x9c>
    2486:	21 15       	cp	r18, r1
    2488:	31 05       	cpc	r19, r1
    248a:	31 f0       	breq	.+12     	; 0x2498 <malloc+0x60>
    248c:	42 17       	cp	r20, r18
    248e:	53 07       	cpc	r21, r19
    2490:	18 f0       	brcs	.+6      	; 0x2498 <malloc+0x60>
    2492:	a9 01       	movw	r20, r18
    2494:	db 01       	movw	r26, r22
    2496:	01 c0       	rjmp	.+2      	; 0x249a <malloc+0x62>
    2498:	ef 01       	movw	r28, r30
    249a:	9a 01       	movw	r18, r20
    249c:	bd 01       	movw	r22, r26
    249e:	df 01       	movw	r26, r30
    24a0:	02 80       	ldd	r0, Z+2	; 0x02
    24a2:	f3 81       	ldd	r31, Z+3	; 0x03
    24a4:	e0 2d       	mov	r30, r0
    24a6:	d7 cf       	rjmp	.-82     	; 0x2456 <malloc+0x1e>
    24a8:	21 15       	cp	r18, r1
    24aa:	31 05       	cpc	r19, r1
    24ac:	f9 f0       	breq	.+62     	; 0x24ec <malloc+0xb4>
    24ae:	28 1b       	sub	r18, r24
    24b0:	39 0b       	sbc	r19, r25
    24b2:	24 30       	cpi	r18, 0x04	; 4
    24b4:	31 05       	cpc	r19, r1
    24b6:	80 f4       	brcc	.+32     	; 0x24d8 <malloc+0xa0>
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	9b 81       	ldd	r25, Y+3	; 0x03
    24bc:	61 15       	cp	r22, r1
    24be:	71 05       	cpc	r23, r1
    24c0:	21 f0       	breq	.+8      	; 0x24ca <malloc+0x92>
    24c2:	fb 01       	movw	r30, r22
    24c4:	93 83       	std	Z+3, r25	; 0x03
    24c6:	82 83       	std	Z+2, r24	; 0x02
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <malloc+0x9a>
    24ca:	90 93 85 03 	sts	0x0385, r25
    24ce:	80 93 84 03 	sts	0x0384, r24
    24d2:	fe 01       	movw	r30, r28
    24d4:	32 96       	adiw	r30, 0x02	; 2
    24d6:	44 c0       	rjmp	.+136    	; 0x2560 <malloc+0x128>
    24d8:	fe 01       	movw	r30, r28
    24da:	e2 0f       	add	r30, r18
    24dc:	f3 1f       	adc	r31, r19
    24de:	81 93       	st	Z+, r24
    24e0:	91 93       	st	Z+, r25
    24e2:	22 50       	subi	r18, 0x02	; 2
    24e4:	31 09       	sbc	r19, r1
    24e6:	39 83       	std	Y+1, r19	; 0x01
    24e8:	28 83       	st	Y, r18
    24ea:	3a c0       	rjmp	.+116    	; 0x2560 <malloc+0x128>
    24ec:	20 91 82 03 	lds	r18, 0x0382
    24f0:	30 91 83 03 	lds	r19, 0x0383
    24f4:	23 2b       	or	r18, r19
    24f6:	41 f4       	brne	.+16     	; 0x2508 <malloc+0xd0>
    24f8:	20 91 02 01 	lds	r18, 0x0102
    24fc:	30 91 03 01 	lds	r19, 0x0103
    2500:	30 93 83 03 	sts	0x0383, r19
    2504:	20 93 82 03 	sts	0x0382, r18
    2508:	20 91 00 01 	lds	r18, 0x0100
    250c:	30 91 01 01 	lds	r19, 0x0101
    2510:	21 15       	cp	r18, r1
    2512:	31 05       	cpc	r19, r1
    2514:	41 f4       	brne	.+16     	; 0x2526 <malloc+0xee>
    2516:	2d b7       	in	r18, 0x3d	; 61
    2518:	3e b7       	in	r19, 0x3e	; 62
    251a:	40 91 04 01 	lds	r20, 0x0104
    251e:	50 91 05 01 	lds	r21, 0x0105
    2522:	24 1b       	sub	r18, r20
    2524:	35 0b       	sbc	r19, r21
    2526:	e0 91 82 03 	lds	r30, 0x0382
    252a:	f0 91 83 03 	lds	r31, 0x0383
    252e:	e2 17       	cp	r30, r18
    2530:	f3 07       	cpc	r31, r19
    2532:	a0 f4       	brcc	.+40     	; 0x255c <malloc+0x124>
    2534:	2e 1b       	sub	r18, r30
    2536:	3f 0b       	sbc	r19, r31
    2538:	28 17       	cp	r18, r24
    253a:	39 07       	cpc	r19, r25
    253c:	78 f0       	brcs	.+30     	; 0x255c <malloc+0x124>
    253e:	ac 01       	movw	r20, r24
    2540:	4e 5f       	subi	r20, 0xFE	; 254
    2542:	5f 4f       	sbci	r21, 0xFF	; 255
    2544:	24 17       	cp	r18, r20
    2546:	35 07       	cpc	r19, r21
    2548:	48 f0       	brcs	.+18     	; 0x255c <malloc+0x124>
    254a:	4e 0f       	add	r20, r30
    254c:	5f 1f       	adc	r21, r31
    254e:	50 93 83 03 	sts	0x0383, r21
    2552:	40 93 82 03 	sts	0x0382, r20
    2556:	81 93       	st	Z+, r24
    2558:	91 93       	st	Z+, r25
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <malloc+0x128>
    255c:	e0 e0       	ldi	r30, 0x00	; 0
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	cf 01       	movw	r24, r30
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <free>:
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	09 f4       	brne	.+2      	; 0x2572 <free+0xa>
    2570:	87 c0       	rjmp	.+270    	; 0x2680 <free+0x118>
    2572:	fc 01       	movw	r30, r24
    2574:	32 97       	sbiw	r30, 0x02	; 2
    2576:	13 82       	std	Z+3, r1	; 0x03
    2578:	12 82       	std	Z+2, r1	; 0x02
    257a:	c0 91 84 03 	lds	r28, 0x0384
    257e:	d0 91 85 03 	lds	r29, 0x0385
    2582:	20 97       	sbiw	r28, 0x00	; 0
    2584:	81 f4       	brne	.+32     	; 0x25a6 <free+0x3e>
    2586:	20 81       	ld	r18, Z
    2588:	31 81       	ldd	r19, Z+1	; 0x01
    258a:	28 0f       	add	r18, r24
    258c:	39 1f       	adc	r19, r25
    258e:	80 91 82 03 	lds	r24, 0x0382
    2592:	90 91 83 03 	lds	r25, 0x0383
    2596:	82 17       	cp	r24, r18
    2598:	93 07       	cpc	r25, r19
    259a:	79 f5       	brne	.+94     	; 0x25fa <free+0x92>
    259c:	f0 93 83 03 	sts	0x0383, r31
    25a0:	e0 93 82 03 	sts	0x0382, r30
    25a4:	6d c0       	rjmp	.+218    	; 0x2680 <free+0x118>
    25a6:	de 01       	movw	r26, r28
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	ae 17       	cp	r26, r30
    25ae:	bf 07       	cpc	r27, r31
    25b0:	50 f4       	brcc	.+20     	; 0x25c6 <free+0x5e>
    25b2:	12 96       	adiw	r26, 0x02	; 2
    25b4:	4d 91       	ld	r20, X+
    25b6:	5c 91       	ld	r21, X
    25b8:	13 97       	sbiw	r26, 0x03	; 3
    25ba:	9d 01       	movw	r18, r26
    25bc:	41 15       	cp	r20, r1
    25be:	51 05       	cpc	r21, r1
    25c0:	09 f1       	breq	.+66     	; 0x2604 <free+0x9c>
    25c2:	da 01       	movw	r26, r20
    25c4:	f3 cf       	rjmp	.-26     	; 0x25ac <free+0x44>
    25c6:	b3 83       	std	Z+3, r27	; 0x03
    25c8:	a2 83       	std	Z+2, r26	; 0x02
    25ca:	40 81       	ld	r20, Z
    25cc:	51 81       	ldd	r21, Z+1	; 0x01
    25ce:	84 0f       	add	r24, r20
    25d0:	95 1f       	adc	r25, r21
    25d2:	8a 17       	cp	r24, r26
    25d4:	9b 07       	cpc	r25, r27
    25d6:	71 f4       	brne	.+28     	; 0x25f4 <free+0x8c>
    25d8:	8d 91       	ld	r24, X+
    25da:	9c 91       	ld	r25, X
    25dc:	11 97       	sbiw	r26, 0x01	; 1
    25de:	84 0f       	add	r24, r20
    25e0:	95 1f       	adc	r25, r21
    25e2:	02 96       	adiw	r24, 0x02	; 2
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	12 96       	adiw	r26, 0x02	; 2
    25ea:	8d 91       	ld	r24, X+
    25ec:	9c 91       	ld	r25, X
    25ee:	13 97       	sbiw	r26, 0x03	; 3
    25f0:	93 83       	std	Z+3, r25	; 0x03
    25f2:	82 83       	std	Z+2, r24	; 0x02
    25f4:	21 15       	cp	r18, r1
    25f6:	31 05       	cpc	r19, r1
    25f8:	29 f4       	brne	.+10     	; 0x2604 <free+0x9c>
    25fa:	f0 93 85 03 	sts	0x0385, r31
    25fe:	e0 93 84 03 	sts	0x0384, r30
    2602:	3e c0       	rjmp	.+124    	; 0x2680 <free+0x118>
    2604:	d9 01       	movw	r26, r18
    2606:	13 96       	adiw	r26, 0x03	; 3
    2608:	fc 93       	st	X, r31
    260a:	ee 93       	st	-X, r30
    260c:	12 97       	sbiw	r26, 0x02	; 2
    260e:	4d 91       	ld	r20, X+
    2610:	5d 91       	ld	r21, X+
    2612:	a4 0f       	add	r26, r20
    2614:	b5 1f       	adc	r27, r21
    2616:	ea 17       	cp	r30, r26
    2618:	fb 07       	cpc	r31, r27
    261a:	79 f4       	brne	.+30     	; 0x263a <free+0xd2>
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	84 0f       	add	r24, r20
    2622:	95 1f       	adc	r25, r21
    2624:	02 96       	adiw	r24, 0x02	; 2
    2626:	d9 01       	movw	r26, r18
    2628:	11 96       	adiw	r26, 0x01	; 1
    262a:	9c 93       	st	X, r25
    262c:	8e 93       	st	-X, r24
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	13 96       	adiw	r26, 0x03	; 3
    2634:	9c 93       	st	X, r25
    2636:	8e 93       	st	-X, r24
    2638:	12 97       	sbiw	r26, 0x02	; 2
    263a:	e0 e0       	ldi	r30, 0x00	; 0
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	19 f0       	breq	.+6      	; 0x264c <free+0xe4>
    2646:	fe 01       	movw	r30, r28
    2648:	ec 01       	movw	r28, r24
    264a:	f9 cf       	rjmp	.-14     	; 0x263e <free+0xd6>
    264c:	ce 01       	movw	r24, r28
    264e:	02 96       	adiw	r24, 0x02	; 2
    2650:	28 81       	ld	r18, Y
    2652:	39 81       	ldd	r19, Y+1	; 0x01
    2654:	82 0f       	add	r24, r18
    2656:	93 1f       	adc	r25, r19
    2658:	20 91 82 03 	lds	r18, 0x0382
    265c:	30 91 83 03 	lds	r19, 0x0383
    2660:	28 17       	cp	r18, r24
    2662:	39 07       	cpc	r19, r25
    2664:	69 f4       	brne	.+26     	; 0x2680 <free+0x118>
    2666:	30 97       	sbiw	r30, 0x00	; 0
    2668:	29 f4       	brne	.+10     	; 0x2674 <free+0x10c>
    266a:	10 92 85 03 	sts	0x0385, r1
    266e:	10 92 84 03 	sts	0x0384, r1
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <free+0x110>
    2674:	13 82       	std	Z+3, r1	; 0x03
    2676:	12 82       	std	Z+2, r1	; 0x02
    2678:	d0 93 83 03 	sts	0x0383, r29
    267c:	c0 93 82 03 	sts	0x0382, r28
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	08 95       	ret

00002686 <strnlen_P>:
    2686:	fc 01       	movw	r30, r24
    2688:	05 90       	lpm	r0, Z+
    268a:	61 50       	subi	r22, 0x01	; 1
    268c:	70 40       	sbci	r23, 0x00	; 0
    268e:	01 10       	cpse	r0, r1
    2690:	d8 f7       	brcc	.-10     	; 0x2688 <strnlen_P+0x2>
    2692:	80 95       	com	r24
    2694:	90 95       	com	r25
    2696:	8e 0f       	add	r24, r30
    2698:	9f 1f       	adc	r25, r31
    269a:	08 95       	ret

0000269c <memset>:
    269c:	dc 01       	movw	r26, r24
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <memset+0x6>
    26a0:	6d 93       	st	X+, r22
    26a2:	41 50       	subi	r20, 0x01	; 1
    26a4:	50 40       	sbci	r21, 0x00	; 0
    26a6:	e0 f7       	brcc	.-8      	; 0x26a0 <memset+0x4>
    26a8:	08 95       	ret

000026aa <strnlen>:
    26aa:	fc 01       	movw	r30, r24
    26ac:	61 50       	subi	r22, 0x01	; 1
    26ae:	70 40       	sbci	r23, 0x00	; 0
    26b0:	01 90       	ld	r0, Z+
    26b2:	01 10       	cpse	r0, r1
    26b4:	d8 f7       	brcc	.-10     	; 0x26ac <strnlen+0x2>
    26b6:	80 95       	com	r24
    26b8:	90 95       	com	r25
    26ba:	8e 0f       	add	r24, r30
    26bc:	9f 1f       	adc	r25, r31
    26be:	08 95       	ret

000026c0 <fputc>:
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	18 2f       	mov	r17, r24
    26ca:	09 2f       	mov	r16, r25
    26cc:	eb 01       	movw	r28, r22
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	81 fd       	sbrc	r24, 1
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <fputc+0x1a>
    26d4:	8f ef       	ldi	r24, 0xFF	; 255
    26d6:	9f ef       	ldi	r25, 0xFF	; 255
    26d8:	20 c0       	rjmp	.+64     	; 0x271a <fputc+0x5a>
    26da:	82 ff       	sbrs	r24, 2
    26dc:	10 c0       	rjmp	.+32     	; 0x26fe <fputc+0x3e>
    26de:	4e 81       	ldd	r20, Y+6	; 0x06
    26e0:	5f 81       	ldd	r21, Y+7	; 0x07
    26e2:	2c 81       	ldd	r18, Y+4	; 0x04
    26e4:	3d 81       	ldd	r19, Y+5	; 0x05
    26e6:	42 17       	cp	r20, r18
    26e8:	53 07       	cpc	r21, r19
    26ea:	7c f4       	brge	.+30     	; 0x270a <fputc+0x4a>
    26ec:	e8 81       	ld	r30, Y
    26ee:	f9 81       	ldd	r31, Y+1	; 0x01
    26f0:	9f 01       	movw	r18, r30
    26f2:	2f 5f       	subi	r18, 0xFF	; 255
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	39 83       	std	Y+1, r19	; 0x01
    26f8:	28 83       	st	Y, r18
    26fa:	10 83       	st	Z, r17
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <fputc+0x4a>
    26fe:	e8 85       	ldd	r30, Y+8	; 0x08
    2700:	f9 85       	ldd	r31, Y+9	; 0x09
    2702:	81 2f       	mov	r24, r17
    2704:	09 95       	icall
    2706:	89 2b       	or	r24, r25
    2708:	29 f7       	brne	.-54     	; 0x26d4 <fputc+0x14>
    270a:	2e 81       	ldd	r18, Y+6	; 0x06
    270c:	3f 81       	ldd	r19, Y+7	; 0x07
    270e:	2f 5f       	subi	r18, 0xFF	; 255
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	3f 83       	std	Y+7, r19	; 0x07
    2714:	2e 83       	std	Y+6, r18	; 0x06
    2716:	81 2f       	mov	r24, r17
    2718:	90 2f       	mov	r25, r16
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	08 95       	ret

00002724 <__ultoa_invert>:
    2724:	fa 01       	movw	r30, r20
    2726:	aa 27       	eor	r26, r26
    2728:	28 30       	cpi	r18, 0x08	; 8
    272a:	51 f1       	breq	.+84     	; 0x2780 <__ultoa_invert+0x5c>
    272c:	20 31       	cpi	r18, 0x10	; 16
    272e:	81 f1       	breq	.+96     	; 0x2790 <__ultoa_invert+0x6c>
    2730:	e8 94       	clt
    2732:	6f 93       	push	r22
    2734:	6e 7f       	andi	r22, 0xFE	; 254
    2736:	6e 5f       	subi	r22, 0xFE	; 254
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	8f 4f       	sbci	r24, 0xFF	; 255
    273c:	9f 4f       	sbci	r25, 0xFF	; 255
    273e:	af 4f       	sbci	r26, 0xFF	; 255
    2740:	b1 e0       	ldi	r27, 0x01	; 1
    2742:	3e d0       	rcall	.+124    	; 0x27c0 <__ultoa_invert+0x9c>
    2744:	b4 e0       	ldi	r27, 0x04	; 4
    2746:	3c d0       	rcall	.+120    	; 0x27c0 <__ultoa_invert+0x9c>
    2748:	67 0f       	add	r22, r23
    274a:	78 1f       	adc	r23, r24
    274c:	89 1f       	adc	r24, r25
    274e:	9a 1f       	adc	r25, r26
    2750:	a1 1d       	adc	r26, r1
    2752:	68 0f       	add	r22, r24
    2754:	79 1f       	adc	r23, r25
    2756:	8a 1f       	adc	r24, r26
    2758:	91 1d       	adc	r25, r1
    275a:	a1 1d       	adc	r26, r1
    275c:	6a 0f       	add	r22, r26
    275e:	71 1d       	adc	r23, r1
    2760:	81 1d       	adc	r24, r1
    2762:	91 1d       	adc	r25, r1
    2764:	a1 1d       	adc	r26, r1
    2766:	20 d0       	rcall	.+64     	; 0x27a8 <__ultoa_invert+0x84>
    2768:	09 f4       	brne	.+2      	; 0x276c <__ultoa_invert+0x48>
    276a:	68 94       	set
    276c:	3f 91       	pop	r19
    276e:	2a e0       	ldi	r18, 0x0A	; 10
    2770:	26 9f       	mul	r18, r22
    2772:	11 24       	eor	r1, r1
    2774:	30 19       	sub	r19, r0
    2776:	30 5d       	subi	r19, 0xD0	; 208
    2778:	31 93       	st	Z+, r19
    277a:	de f6       	brtc	.-74     	; 0x2732 <__ultoa_invert+0xe>
    277c:	cf 01       	movw	r24, r30
    277e:	08 95       	ret
    2780:	46 2f       	mov	r20, r22
    2782:	47 70       	andi	r20, 0x07	; 7
    2784:	40 5d       	subi	r20, 0xD0	; 208
    2786:	41 93       	st	Z+, r20
    2788:	b3 e0       	ldi	r27, 0x03	; 3
    278a:	0f d0       	rcall	.+30     	; 0x27aa <__ultoa_invert+0x86>
    278c:	c9 f7       	brne	.-14     	; 0x2780 <__ultoa_invert+0x5c>
    278e:	f6 cf       	rjmp	.-20     	; 0x277c <__ultoa_invert+0x58>
    2790:	46 2f       	mov	r20, r22
    2792:	4f 70       	andi	r20, 0x0F	; 15
    2794:	40 5d       	subi	r20, 0xD0	; 208
    2796:	4a 33       	cpi	r20, 0x3A	; 58
    2798:	18 f0       	brcs	.+6      	; 0x27a0 <__ultoa_invert+0x7c>
    279a:	49 5d       	subi	r20, 0xD9	; 217
    279c:	31 fd       	sbrc	r19, 1
    279e:	40 52       	subi	r20, 0x20	; 32
    27a0:	41 93       	st	Z+, r20
    27a2:	02 d0       	rcall	.+4      	; 0x27a8 <__ultoa_invert+0x84>
    27a4:	a9 f7       	brne	.-22     	; 0x2790 <__ultoa_invert+0x6c>
    27a6:	ea cf       	rjmp	.-44     	; 0x277c <__ultoa_invert+0x58>
    27a8:	b4 e0       	ldi	r27, 0x04	; 4
    27aa:	a6 95       	lsr	r26
    27ac:	97 95       	ror	r25
    27ae:	87 95       	ror	r24
    27b0:	77 95       	ror	r23
    27b2:	67 95       	ror	r22
    27b4:	ba 95       	dec	r27
    27b6:	c9 f7       	brne	.-14     	; 0x27aa <__ultoa_invert+0x86>
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	61 05       	cpc	r22, r1
    27bc:	71 05       	cpc	r23, r1
    27be:	08 95       	ret
    27c0:	9b 01       	movw	r18, r22
    27c2:	ac 01       	movw	r20, r24
    27c4:	0a 2e       	mov	r0, r26
    27c6:	06 94       	lsr	r0
    27c8:	57 95       	ror	r21
    27ca:	47 95       	ror	r20
    27cc:	37 95       	ror	r19
    27ce:	27 95       	ror	r18
    27d0:	ba 95       	dec	r27
    27d2:	c9 f7       	brne	.-14     	; 0x27c6 <__ultoa_invert+0xa2>
    27d4:	62 0f       	add	r22, r18
    27d6:	73 1f       	adc	r23, r19
    27d8:	84 1f       	adc	r24, r20
    27da:	95 1f       	adc	r25, r21
    27dc:	a0 1d       	adc	r26, r0
    27de:	08 95       	ret

000027e0 <__prologue_saves__>:
    27e0:	2f 92       	push	r2
    27e2:	3f 92       	push	r3
    27e4:	4f 92       	push	r4
    27e6:	5f 92       	push	r5
    27e8:	6f 92       	push	r6
    27ea:	7f 92       	push	r7
    27ec:	8f 92       	push	r8
    27ee:	9f 92       	push	r9
    27f0:	af 92       	push	r10
    27f2:	bf 92       	push	r11
    27f4:	cf 92       	push	r12
    27f6:	df 92       	push	r13
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	ca 1b       	sub	r28, r26
    280a:	db 0b       	sbc	r29, r27
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	09 94       	ijmp

00002818 <__epilogue_restores__>:
    2818:	2a 88       	ldd	r2, Y+18	; 0x12
    281a:	39 88       	ldd	r3, Y+17	; 0x11
    281c:	48 88       	ldd	r4, Y+16	; 0x10
    281e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2820:	6e 84       	ldd	r6, Y+14	; 0x0e
    2822:	7d 84       	ldd	r7, Y+13	; 0x0d
    2824:	8c 84       	ldd	r8, Y+12	; 0x0c
    2826:	9b 84       	ldd	r9, Y+11	; 0x0b
    2828:	aa 84       	ldd	r10, Y+10	; 0x0a
    282a:	b9 84       	ldd	r11, Y+9	; 0x09
    282c:	c8 84       	ldd	r12, Y+8	; 0x08
    282e:	df 80       	ldd	r13, Y+7	; 0x07
    2830:	ee 80       	ldd	r14, Y+6	; 0x06
    2832:	fd 80       	ldd	r15, Y+5	; 0x05
    2834:	0c 81       	ldd	r16, Y+4	; 0x04
    2836:	1b 81       	ldd	r17, Y+3	; 0x03
    2838:	aa 81       	ldd	r26, Y+2	; 0x02
    283a:	b9 81       	ldd	r27, Y+1	; 0x01
    283c:	ce 0f       	add	r28, r30
    283e:	d1 1d       	adc	r29, r1
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	ed 01       	movw	r28, r26
    284c:	08 95       	ret

0000284e <_exit>:
    284e:	f8 94       	cli

00002850 <__stop_program>:
    2850:	ff cf       	rjmp	.-2      	; 0x2850 <__stop_program>
