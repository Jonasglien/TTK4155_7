
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00002770  00002804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  008002b2  008002b2  000029b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b8b  00000000  00000000  00002d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000109e  00000000  00000000  00006925  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001271  00000000  00000000  000079c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a84  00000000  00000000  00008c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b8b  00000000  00000000  000096b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002818  00000000  00000000  0000a243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  0000ca5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_1>
       8:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_2>
       c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_3>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_16>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      54:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      58:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      5c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      60:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      64:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      68:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      6c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_3>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_2>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_1>:
      ea:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000f4 <font>:
	...
      fc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     10c:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     11c:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     12c:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     13c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     14c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     15c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     16c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     17c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     18c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     19c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ac:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1bc:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1cc:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1dc:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1ec:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1fc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     20c:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     21c:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     22c:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     23c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     24c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     25c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     26c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     27c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     28c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     29c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ac:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2bc:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2cc:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2dc:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2ec:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2fc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     30c:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     31c:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     32c:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     33c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     34c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     35c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     36c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     37c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     38c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     39c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ac:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3bc:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3cc:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3dc:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3ec:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3fc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     40c:	01 01 01 01 01 01 01 ff                             ........

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d4 e0       	ldi	r29, 0x04	; 4
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	12 e0       	ldi	r17, 0x02	; 2
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	e0 e7       	ldi	r30, 0x70	; 112
     428:	f7 e2       	ldi	r31, 0x27	; 39
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x10>
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a2 3b       	cpi	r26, 0xB2	; 178
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0xc>

00000436 <__do_clear_bss>:
     436:	23 e0       	ldi	r18, 0x03	; 3
     438:	a2 eb       	ldi	r26, 0xB2	; 178
     43a:	b2 e0       	ldi	r27, 0x02	; 2
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a4 34       	cpi	r26, 0x44	; 68
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <main>
     44a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000452 <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	91 05       	cpc	r25, r1
     456:	71 f0       	breq	.+28     	; 0x474 <readADC+0x22>
     458:	1c f4       	brge	.+6      	; 0x460 <readADC+0xe>
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	39 f0       	breq	.+14     	; 0x46c <readADC+0x1a>
     45e:	1c c0       	rjmp	.+56     	; 0x498 <readADC+0x46>
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	91 05       	cpc	r25, r1
     464:	59 f0       	breq	.+22     	; 0x47c <readADC+0x2a>
     466:	04 97       	sbiw	r24, 0x04	; 4
     468:	69 f0       	breq	.+26     	; 0x484 <readADC+0x32>
     46a:	16 c0       	rjmp	.+44     	; 0x498 <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // Joystick X_axis
     46c:	84 e1       	ldi	r24, 0x14	; 20
     46e:	80 93 00 14 	sts	0x1400, r24
     472:	0b c0       	rjmp	.+22     	; 0x48a <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Joystick Y_axis
     474:	85 e1       	ldi	r24, 0x15	; 21
     476:	80 93 00 14 	sts	0x1400, r24
     47a:	07 c0       	rjmp	.+14     	; 0x48a <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
     47c:	86 e1       	ldi	r24, 0x16	; 22
     47e:	80 93 00 14 	sts	0x1400, r24
     482:	03 c0       	rjmp	.+6      	; 0x48a <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
     484:	87 e1       	ldi	r24, 0x17	; 23
     486:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	82 e5       	ldi	r24, 0x52	; 82
     48c:	8a 95       	dec	r24
     48e:	f1 f7       	brne	.-4      	; 0x48c <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
     490:	80 91 00 14 	lds	r24, 0x1400
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // Joystick X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Joystick Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
     49c:	08 95       	ret

0000049e <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     49e:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     4a0:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     4a2:	85 b7       	in	r24, 0x35	; 53
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     4a8:	85 b7       	in	r24, 0x35	; 53
     4aa:	82 60       	ori	r24, 0x02	; 2
     4ac:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     4ae:	85 b7       	in	r24, 0x35	; 53
     4b0:	84 60       	ori	r24, 0x04	; 4
     4b2:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     4b4:	85 b7       	in	r24, 0x35	; 53
     4b6:	88 60       	ori	r24, 0x08	; 8
     4b8:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     4ba:	8b b7       	in	r24, 0x3b	; 59
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     4c0:	8b b7       	in	r24, 0x3b	; 59
     4c2:	80 68       	ori	r24, 0x80	; 128
     4c4:	8b bf       	out	0x3b, r24	; 59
     4c6:	08 95       	ret

000004c8 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	2f 93       	push	r18
     4d4:	3f 93       	push	r19
     4d6:	4f 93       	push	r20
     4d8:	5f 93       	push	r21
     4da:	6f 93       	push	r22
     4dc:	7f 93       	push	r23
     4de:	8f 93       	push	r24
     4e0:	9f 93       	push	r25
     4e2:	af 93       	push	r26
     4e4:	bf 93       	push	r27
     4e6:	ef 93       	push	r30
     4e8:	ff 93       	push	r31
	//printf("Right button pressed, printing values:\t\t");
	//printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
	menu_right_button_flag();//sets the interupt flag
     4ea:	0e 94 cd 06 	call	0xd9a	; 0xd9a <menu_right_button_flag>
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
	menu_left_button_flag();//sets the interrupt flag
     532:	0e 94 c9 06 	call	0xd92	; 0xd92 <menu_left_button_flag>
     536:	ff 91       	pop	r31
     538:	ef 91       	pop	r30
     53a:	bf 91       	pop	r27
     53c:	af 91       	pop	r26
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	7f 91       	pop	r23
     544:	6f 91       	pop	r22
     546:	5f 91       	pop	r21
     548:	4f 91       	pop	r20
     54a:	3f 91       	pop	r19
     54c:	2f 91       	pop	r18
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	0f 90       	pop	r0
     554:	1f 90       	pop	r1
     556:	18 95       	reti

00000558 <CAN_construct_meassage>:
CAN_message_t* CAN_message_receive(void){	
	return &CAN_receive_buffer;
}

void CAN_construct_meassage(int id, uint8_t length){
	CAN_send_buffer.id = id;
     558:	90 93 b4 02 	sts	0x02B4, r25
     55c:	80 93 b3 02 	sts	0x02B3, r24
	CAN_send_buffer.length = length;
     560:	60 93 b5 02 	sts	0x02B5, r22
	for(uint8_t i = 0; i < length; i++){
     564:	66 23       	and	r22, r22
     566:	41 f0       	breq	.+16     	; 0x578 <CAN_construct_meassage+0x20>
     568:	86 eb       	ldi	r24, 0xB6	; 182
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
     56e:	11 92       	st	Z+, r1
     570:	2e 2f       	mov	r18, r30
     572:	28 1b       	sub	r18, r24
}

void CAN_construct_meassage(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
     574:	26 17       	cp	r18, r22
     576:	d8 f3       	brcs	.-10     	; 0x56e <CAN_construct_meassage+0x16>
     578:	08 95       	ret

0000057a <CAN_initialize>:
static CAN_message_t CAN_receive_buffer; //VOLATILE ??????????????????????????????
static CAN_message_t CAN_send_buffer;
uint8_t FLAG_new_message = 0;

void CAN_initialize(void){
	MCP2515_initialize();
     57a:	0e 94 08 06 	call	0xc10	; 0xc10 <MCP2515_initialize>
	int i = 1;
	i++;
	EMCUCR &= ~(1<<ISC2);
     57e:	86 b7       	in	r24, 0x36	; 54
     580:	8e 7f       	andi	r24, 0xFE	; 254
     582:	86 bf       	out	0x36, r24	; 54
	GICR |= (1<<INT2);
     584:	8b b7       	in	r24, 0x3b	; 59
     586:	80 62       	ori	r24, 0x20	; 32
     588:	8b bf       	out	0x3b, r24	; 59
	MCP2515_bit_modify(CANINTE,0b00000001,0b00000001);
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	8b e2       	ldi	r24, 0x2B	; 43
     590:	0e 94 ee 05 	call	0xbdc	; 0xbdc <MCP2515_bit_modify>
	CAN_construct_meassage(CAN_ID,CAN_MESSAGE_LENGTH);
     594:	68 e0       	ldi	r22, 0x08	; 8
     596:	88 e2       	ldi	r24, 0x28	; 40
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 ac 02 	call	0x558	; 0x558 <CAN_construct_meassage>
     59e:	08 95       	ret

000005a0 <__vector_3>:
	MCP2515_bit_modify(MCP_CANINTF,0xFF,0); //clear all interrupts //CHANGE THIS SO IT JUST CLEARS THE CORRECT INTERRUPTS
}



ISR(INT2_vect){//interrupt incomming message
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	8f 93       	push	r24
	cli();
     5ac:	f8 94       	cli
	//IF there is a message in inbox 0, flag 1<<0, then if there is a message in inbox 1, flag 1<<1 this
	FLAG_new_message = 0b01;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 b2 02 	sts	0x02B2, r24
	sei();
     5b4:	78 94       	sei
}
     5b6:	8f 91       	pop	r24
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	c4 e6       	ldi	r28, 0x64	; 100
     5cc:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     5ce:	00 91 c8 02 	lds	r16, 0x02C8
     5d2:	10 91 c9 02 	lds	r17, 0x02C9
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     5de:	01 58       	subi	r16, 0x81	; 129
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
     5e2:	08 1b       	sub	r16, r24
     5e4:	19 0b       	sbc	r17, r25
     5e6:	10 93 c9 02 	sts	0x02C9, r17
     5ea:	00 93 c8 02 	sts	0x02C8, r16
		calibrate_y += 127 - readADC(2);
     5ee:	00 91 c6 02 	lds	r16, 0x02C6
     5f2:	10 91 c7 02 	lds	r17, 0x02C7
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     5fe:	01 58       	subi	r16, 0x81	; 129
     600:	1f 4f       	sbci	r17, 0xFF	; 255
     602:	08 1b       	sub	r16, r24
     604:	19 0b       	sbc	r17, r25
     606:	10 93 c7 02 	sts	0x02C7, r17
     60a:	00 93 c6 02 	sts	0x02C6, r16
     60e:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     610:	20 97       	sbiw	r28, 0x00	; 0
     612:	e9 f6       	brne	.-70     	; 0x5ce <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     614:	80 91 c8 02 	lds	r24, 0x02C8
     618:	90 91 c9 02 	lds	r25, 0x02C9
     61c:	24 e6       	ldi	r18, 0x64	; 100
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	b9 01       	movw	r22, r18
     622:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__divmodhi4>
     626:	70 93 c9 02 	sts	0x02C9, r23
     62a:	60 93 c8 02 	sts	0x02C8, r22
	calibrate_y /= CALIBRATE_READINGS;
     62e:	80 91 c6 02 	lds	r24, 0x02C6
     632:	90 91 c7 02 	lds	r25, 0x02C7
     636:	b9 01       	movw	r22, r18
     638:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__divmodhi4>
     63c:	70 93 c7 02 	sts	0x02C7, r23
     640:	60 93 c6 02 	sts	0x02C6, r22
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     64e:	2f 92       	push	r2
     650:	3f 92       	push	r3
     652:	4f 92       	push	r4
     654:	5f 92       	push	r5
     656:	6f 92       	push	r6
     658:	7f 92       	push	r7
     65a:	8f 92       	push	r8
     65c:	9f 92       	push	r9
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	00 d0       	rcall	.+0      	; 0x674 <signal_to_range+0x26>
     674:	00 d0       	rcall	.+0      	; 0x676 <signal_to_range+0x28>
     676:	00 d0       	rcall	.+0      	; 0x678 <signal_to_range+0x2a>
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	3c 01       	movw	r6, r24
     67e:	7a 83       	std	Y+2, r23	; 0x02
     680:	69 83       	std	Y+1, r22	; 0x01
     682:	5c 83       	std	Y+4, r21	; 0x04
     684:	4b 83       	std	Y+3, r20	; 0x03
     686:	3e 83       	std	Y+6, r19	; 0x06
     688:	2d 83       	std	Y+5, r18	; 0x05
     68a:	18 01       	movw	r2, r16
     68c:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     68e:	b9 01       	movw	r22, r18
     690:	88 27       	eor	r24, r24
     692:	77 fd       	sbrc	r23, 7
     694:	80 95       	com	r24
     696:	98 2f       	mov	r25, r24
     698:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     69c:	4b 01       	movw	r8, r22
     69e:	5c 01       	movw	r10, r24
     6a0:	b3 01       	movw	r22, r6
     6a2:	6e 0d       	add	r22, r14
     6a4:	7f 1d       	adc	r23, r15
     6a6:	29 81       	ldd	r18, Y+1	; 0x01
     6a8:	3a 81       	ldd	r19, Y+2	; 0x02
     6aa:	62 1b       	sub	r22, r18
     6ac:	73 0b       	sbc	r23, r19
     6ae:	88 27       	eor	r24, r24
     6b0:	77 fd       	sbrc	r23, 7
     6b2:	80 95       	com	r24
     6b4:	98 2f       	mov	r25, r24
     6b6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     6ba:	2b 01       	movw	r4, r22
     6bc:	3c 01       	movw	r6, r24
     6be:	b1 01       	movw	r22, r2
     6c0:	8d 81       	ldd	r24, Y+5	; 0x05
     6c2:	9e 81       	ldd	r25, Y+6	; 0x06
     6c4:	68 1b       	sub	r22, r24
     6c6:	79 0b       	sbc	r23, r25
     6c8:	88 27       	eor	r24, r24
     6ca:	77 fd       	sbrc	r23, 7
     6cc:	80 95       	com	r24
     6ce:	98 2f       	mov	r25, r24
     6d0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     6d4:	9b 01       	movw	r18, r22
     6d6:	ac 01       	movw	r20, r24
     6d8:	c3 01       	movw	r24, r6
     6da:	b2 01       	movw	r22, r4
     6dc:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
     6e0:	2b 01       	movw	r4, r22
     6e2:	3c 01       	movw	r6, r24
     6e4:	6b 81       	ldd	r22, Y+3	; 0x03
     6e6:	7c 81       	ldd	r23, Y+4	; 0x04
     6e8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ea:	fa 81       	ldd	r31, Y+2	; 0x02
     6ec:	6e 1b       	sub	r22, r30
     6ee:	7f 0b       	sbc	r23, r31
     6f0:	88 27       	eor	r24, r24
     6f2:	77 fd       	sbrc	r23, 7
     6f4:	80 95       	com	r24
     6f6:	98 2f       	mov	r25, r24
     6f8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	c3 01       	movw	r24, r6
     702:	b2 01       	movw	r22, r4
     704:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__divsf3>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c5 01       	movw	r24, r10
     70e:	b4 01       	movw	r22, r8
     710:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__addsf3>
     714:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     718:	c1 01       	movw	r24, r2
     71a:	80 1b       	sub	r24, r16
     71c:	91 0b       	sbc	r25, r17
     71e:	68 17       	cp	r22, r24
     720:	79 07       	cpc	r23, r25
     722:	74 f5       	brge	.+92     	; 0x780 <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     724:	8d 81       	ldd	r24, Y+5	; 0x05
     726:	9e 81       	ldd	r25, Y+6	; 0x06
     728:	80 0f       	add	r24, r16
     72a:	91 1f       	adc	r25, r17
     72c:	86 17       	cp	r24, r22
     72e:	97 07       	cpc	r25, r23
     730:	4c f5       	brge	.+82     	; 0x784 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     732:	f8 01       	movw	r30, r16
     734:	11 23       	and	r17, r17
     736:	0c f4       	brge	.+2      	; 0x73a <signal_to_range+0xec>
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	f5 95       	asr	r31
     73c:	e7 95       	ror	r30
     73e:	d8 01       	movw	r26, r16
     740:	12 c0       	rjmp	.+36     	; 0x766 <signal_to_range+0x118>
     742:	8a 0f       	add	r24, r26
     744:	9b 1f       	adc	r25, r27
     746:	ac 01       	movw	r20, r24
     748:	4e 0f       	add	r20, r30
     74a:	5f 1f       	adc	r21, r31
     74c:	64 17       	cp	r22, r20
     74e:	75 07       	cpc	r23, r21
     750:	14 f0       	brlt	.+4      	; 0x756 <signal_to_range+0x108>
				reference += step;
     752:	69 01       	movw	r12, r18
     754:	0b c0       	rjmp	.+22     	; 0x76c <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
     756:	c6 01       	movw	r24, r12
     758:	8e 1b       	sub	r24, r30
     75a:	9f 0b       	sbc	r25, r31
     75c:	86 17       	cp	r24, r22
     75e:	97 07       	cpc	r25, r23
     760:	14 f0       	brlt	.+4      	; 0x766 <signal_to_range+0x118>
				reference -= step;
     762:	c0 1a       	sub	r12, r16
     764:	d1 0a       	sbc	r13, r17
     766:	c6 01       	movw	r24, r12
     768:	80 1b       	sub	r24, r16
     76a:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     76c:	96 01       	movw	r18, r12
     76e:	20 0f       	add	r18, r16
     770:	31 1f       	adc	r19, r17
     772:	62 17       	cp	r22, r18
     774:	73 07       	cpc	r23, r19
     776:	2c f7       	brge	.-54     	; 0x742 <signal_to_range+0xf4>
     778:	86 17       	cp	r24, r22
     77a:	97 07       	cpc	r25, r23
     77c:	14 f7       	brge	.-60     	; 0x742 <signal_to_range+0xf4>
     77e:	04 c0       	rjmp	.+8      	; 0x788 <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     780:	61 01       	movw	r12, r2
     782:	02 c0       	rjmp	.+4      	; 0x788 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     784:	cd 80       	ldd	r12, Y+5	; 0x05
     786:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     788:	c6 01       	movw	r24, r12
     78a:	26 96       	adiw	r28, 0x06	; 6
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	9f 90       	pop	r9
     7ac:	8f 90       	pop	r8
     7ae:	7f 90       	pop	r7
     7b0:	6f 90       	pop	r6
     7b2:	5f 90       	pop	r5
     7b4:	4f 90       	pop	r4
     7b6:	3f 90       	pop	r3
     7b8:	2f 90       	pop	r2
     7ba:	08 95       	ret

000007bc <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
	switch(channel){
     7cc:	82 35       	cpi	r24, 0x52	; 82
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <read_control_input+0x16>
     7d0:	74 c0       	rjmp	.+232    	; 0x8ba <read_control_input+0xfe>
     7d2:	20 f4       	brcc	.+8      	; 0x7dc <read_control_input+0x20>
     7d4:	8c 34       	cpi	r24, 0x4C	; 76
     7d6:	09 f4       	brne	.+2      	; 0x7da <read_control_input+0x1e>
     7d8:	4e c0       	rjmp	.+156    	; 0x876 <read_control_input+0xba>
     7da:	91 c0       	rjmp	.+290    	; 0x8fe <read_control_input+0x142>
     7dc:	88 35       	cpi	r24, 0x58	; 88
     7de:	19 f0       	breq	.+6      	; 0x7e6 <read_control_input+0x2a>
     7e0:	89 35       	cpi	r24, 0x59	; 89
     7e2:	29 f1       	breq	.+74     	; 0x82e <read_control_input+0x72>
     7e4:	8c c0       	rjmp	.+280    	; 0x8fe <read_control_input+0x142>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     7e6:	c0 90 c4 02 	lds	r12, 0x02C4
     7ea:	d0 90 c5 02 	lds	r13, 0x02C5
     7ee:	e0 90 c8 02 	lds	r14, 0x02C8
     7f2:	f0 90 c9 02 	lds	r15, 0x02C9
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     7fe:	0f 2e       	mov	r0, r31
     800:	fa e0       	ldi	r31, 0x0A	; 10
     802:	af 2e       	mov	r10, r31
     804:	b1 2c       	mov	r11, r1
     806:	f0 2d       	mov	r31, r0
     808:	04 e6       	ldi	r16, 0x64	; 100
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	2c e9       	ldi	r18, 0x9C	; 156
     80e:	3f ef       	ldi	r19, 0xFF	; 255
     810:	4f ef       	ldi	r20, 0xFF	; 255
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 27 03 	call	0x64e	; 0x64e <signal_to_range>
     81c:	90 93 c5 02 	sts	0x02C5, r25
     820:	80 93 c4 02 	sts	0x02C4, r24
			return ref_X;
     824:	80 91 c4 02 	lds	r24, 0x02C4
     828:	90 91 c5 02 	lds	r25, 0x02C5
     82c:	6a c0       	rjmp	.+212    	; 0x902 <read_control_input+0x146>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     82e:	c0 90 c2 02 	lds	r12, 0x02C2
     832:	d0 90 c3 02 	lds	r13, 0x02C3
     836:	e0 90 c6 02 	lds	r14, 0x02C6
     83a:	f0 90 c7 02 	lds	r15, 0x02C7
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     846:	0f 2e       	mov	r0, r31
     848:	fa e0       	ldi	r31, 0x0A	; 10
     84a:	af 2e       	mov	r10, r31
     84c:	b1 2c       	mov	r11, r1
     84e:	f0 2d       	mov	r31, r0
     850:	04 e6       	ldi	r16, 0x64	; 100
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	2c e9       	ldi	r18, 0x9C	; 156
     856:	3f ef       	ldi	r19, 0xFF	; 255
     858:	4f ef       	ldi	r20, 0xFF	; 255
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	0e 94 27 03 	call	0x64e	; 0x64e <signal_to_range>
     864:	90 93 c3 02 	sts	0x02C3, r25
     868:	80 93 c2 02 	sts	0x02C2, r24
			return ref_Y;
     86c:	80 91 c2 02 	lds	r24, 0x02C2
     870:	90 91 c3 02 	lds	r25, 0x02C3
     874:	46 c0       	rjmp	.+140    	; 0x902 <read_control_input+0x146>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     876:	c0 90 c0 02 	lds	r12, 0x02C0
     87a:	d0 90 c1 02 	lds	r13, 0x02C1
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     886:	0f 2e       	mov	r0, r31
     888:	fa e0       	ldi	r31, 0x0A	; 10
     88a:	af 2e       	mov	r10, r31
     88c:	b1 2c       	mov	r11, r1
     88e:	f0 2d       	mov	r31, r0
     890:	e1 2c       	mov	r14, r1
     892:	f1 2c       	mov	r15, r1
     894:	04 e6       	ldi	r16, 0x64	; 100
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	0e 94 27 03 	call	0x64e	; 0x64e <signal_to_range>
     8a8:	90 93 c1 02 	sts	0x02C1, r25
     8ac:	80 93 c0 02 	sts	0x02C0, r24
		return ref_L;
     8b0:	80 91 c0 02 	lds	r24, 0x02C0
     8b4:	90 91 c1 02 	lds	r25, 0x02C1
     8b8:	24 c0       	rjmp	.+72     	; 0x902 <read_control_input+0x146>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
     8ba:	c0 90 be 02 	lds	r12, 0x02BE
     8be:	d0 90 bf 02 	lds	r13, 0x02BF
     8c2:	84 e0       	ldi	r24, 0x04	; 4
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     8ca:	0f 2e       	mov	r0, r31
     8cc:	fa e0       	ldi	r31, 0x0A	; 10
     8ce:	af 2e       	mov	r10, r31
     8d0:	b1 2c       	mov	r11, r1
     8d2:	f0 2d       	mov	r31, r0
     8d4:	e1 2c       	mov	r14, r1
     8d6:	f1 2c       	mov	r15, r1
     8d8:	04 e6       	ldi	r16, 0x64	; 100
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	4f ef       	ldi	r20, 0xFF	; 255
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	0e 94 27 03 	call	0x64e	; 0x64e <signal_to_range>
     8ec:	90 93 bf 02 	sts	0x02BF, r25
     8f0:	80 93 be 02 	sts	0x02BE, r24
			return ref_R;
     8f4:	80 91 be 02 	lds	r24, 0x02BE
     8f8:	90 91 bf 02 	lds	r25, 0x02BF
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <read_control_input+0x146>
	}
	return 0;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
}
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	08 95       	ret

00000914 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     914:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <calibrate_joystick>
	ref_X = read_control_input('X');
     918:	88 e5       	ldi	r24, 0x58	; 88
     91a:	0e 94 de 03 	call	0x7bc	; 0x7bc <read_control_input>
     91e:	90 93 c5 02 	sts	0x02C5, r25
     922:	80 93 c4 02 	sts	0x02C4, r24
	ref_Y = read_control_input('Y');
     926:	89 e5       	ldi	r24, 0x59	; 89
     928:	0e 94 de 03 	call	0x7bc	; 0x7bc <read_control_input>
     92c:	90 93 c3 02 	sts	0x02C3, r25
     930:	80 93 c2 02 	sts	0x02C2, r24
	ref_L = read_control_input('L');
     934:	8c e4       	ldi	r24, 0x4C	; 76
     936:	0e 94 de 03 	call	0x7bc	; 0x7bc <read_control_input>
     93a:	90 93 c1 02 	sts	0x02C1, r25
     93e:	80 93 c0 02 	sts	0x02C0, r24
	ref_R = read_control_input('R');
     942:	82 e5       	ldi	r24, 0x52	; 82
     944:	0e 94 de 03 	call	0x7bc	; 0x7bc <read_control_input>
     948:	90 93 bf 02 	sts	0x02BF, r25
     94c:	80 93 be 02 	sts	0x02BE, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     950:	20 91 c6 02 	lds	r18, 0x02C6
     954:	30 91 c7 02 	lds	r19, 0x02C7
     958:	80 91 c8 02 	lds	r24, 0x02C8
     95c:	90 91 c9 02 	lds	r25, 0x02C9
     960:	3f 93       	push	r19
     962:	2f 93       	push	r18
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	8c e0       	ldi	r24, 0x0C	; 12
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     974:	60 91 be 02 	lds	r22, 0x02BE
     978:	70 91 bf 02 	lds	r23, 0x02BF
     97c:	40 91 c0 02 	lds	r20, 0x02C0
     980:	50 91 c1 02 	lds	r21, 0x02C1
     984:	20 91 c2 02 	lds	r18, 0x02C2
     988:	30 91 c3 02 	lds	r19, 0x02C3
     98c:	80 91 c4 02 	lds	r24, 0x02C4
     990:	90 91 c5 02 	lds	r25, 0x02C5
     994:	7f 93       	push	r23
     996:	6f 93       	push	r22
     998:	5f 93       	push	r21
     99a:	4f 93       	push	r20
     99c:	3f 93       	push	r19
     99e:	2f 93       	push	r18
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	85 e3       	ldi	r24, 0x35	; 53
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <printf>
     9b0:	8d b7       	in	r24, 0x3d	; 61
     9b2:	9e b7       	in	r25, 0x3e	; 62
     9b4:	40 96       	adiw	r24, 0x10	; 16
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	9e bf       	out	0x3e, r25	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	8d bf       	out	0x3d, r24	; 61
     9c0:	08 95       	ret

000009c2 <bootscreen>:


void bootscreen(void){
	int x = 24;
	int y = 61;
	sram_draw_line(x,y,x-15,y-60);//letter G
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	49 e0       	ldi	r20, 0x09	; 9
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	6d e3       	ldi	r22, 0x3D	; 61
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	88 e1       	ldi	r24, 0x18	; 24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	47 e2       	ldi	r20, 0x27	; 39
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	89 e0       	ldi	r24, 0x09	; 9
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x+15,y-60,x+12,y-48);
     9ea:	2d e0       	ldi	r18, 0x0D	; 13
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	44 e2       	ldi	r20, 0x24	; 36
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	87 e2       	ldi	r24, 0x27	; 39
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x+12,y-48,x-6,y-48);
     9fe:	2d e0       	ldi	r18, 0x0D	; 13
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	42 e1       	ldi	r20, 0x12	; 18
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	6d e0       	ldi	r22, 0x0D	; 13
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	84 e2       	ldi	r24, 0x24	; 36
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-6,y-48,x,y-24);
     a12:	25 e2       	ldi	r18, 0x25	; 37
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	48 e1       	ldi	r20, 0x18	; 24
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	6d e0       	ldi	r22, 0x0D	; 13
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	82 e1       	ldi	r24, 0x12	; 18
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x,y-24,x+3,y-36);
     a26:	29 e1       	ldi	r18, 0x19	; 25
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	4b e1       	ldi	r20, 0x1B	; 27
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	65 e2       	ldi	r22, 0x25	; 37
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	88 e1       	ldi	r24, 0x18	; 24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x+3,y-36,x+9,y-36);
     a3a:	29 e1       	ldi	r18, 0x19	; 25
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	41 e2       	ldi	r20, 0x21	; 33
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	69 e1       	ldi	r22, 0x19	; 25
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	8b e1       	ldi	r24, 0x1B	; 27
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x+9,y-36,x,y);//end of letter
     a4e:	2d e3       	ldi	r18, 0x3D	; 61
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	48 e1       	ldi	r20, 0x18	; 24
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	69 e1       	ldi	r22, 0x19	; 25
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	81 e2       	ldi	r24, 0x21	; 33
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	
	
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	45 e4       	ldi	r20, 0x45	; 69
     a66:	6d e3       	ldi	r22, 0x3D	; 61
     a68:	8b e3       	ldi	r24, 0x3B	; 59
     a6a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <sram_draw_rectangle>

	x += 40;
	sram_draw_line(x,y,x+15,y-60);//number 7
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	47 e7       	ldi	r20, 0x77	; 119
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	6d e3       	ldi	r22, 0x3D	; 61
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	88 e6       	ldi	r24, 0x68	; 104
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	47 e7       	ldi	r20, 0x77	; 119
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	89 e5       	ldi	r24, 0x59	; 89
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-15,y-60,x-12,y-48);
     a96:	2d e0       	ldi	r18, 0x0D	; 13
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	4c e5       	ldi	r20, 0x5C	; 92
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	89 e5       	ldi	r24, 0x59	; 89
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-12,y-48,x+6,y-48);
     aaa:	2d e0       	ldi	r18, 0x0D	; 13
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	4e e6       	ldi	r20, 0x6E	; 110
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	6d e0       	ldi	r22, 0x0D	; 13
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	8c e5       	ldi	r24, 0x5C	; 92
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x+6,y-48,x+3,y-36);
     abe:	29 e1       	ldi	r18, 0x19	; 25
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	4b e6       	ldi	r20, 0x6B	; 107
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	6d e0       	ldi	r22, 0x0D	; 13
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	8e e6       	ldi	r24, 0x6E	; 110
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x+3,y-36,x-9,y-36);
     ad2:	29 e1       	ldi	r18, 0x19	; 25
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4f e5       	ldi	r20, 0x5F	; 95
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	69 e1       	ldi	r22, 0x19	; 25
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	8b e6       	ldi	r24, 0x6B	; 107
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-9,y-36,x-6,y-24);
     ae6:	25 e2       	ldi	r18, 0x25	; 37
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	42 e6       	ldi	r20, 0x62	; 98
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	69 e1       	ldi	r22, 0x19	; 25
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	8f e5       	ldi	r24, 0x5F	; 95
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-6,y-24,x,y-24);
     afa:	25 e2       	ldi	r18, 0x25	; 37
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	48 e6       	ldi	r20, 0x68	; 104
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	65 e2       	ldi	r22, 0x25	; 37
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	82 e6       	ldi	r24, 0x62	; 98
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x,y-24,x-3,y-12);
     b0e:	21 e3       	ldi	r18, 0x31	; 49
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	45 e6       	ldi	r20, 0x65	; 101
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	65 e2       	ldi	r22, 0x25	; 37
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	88 e6       	ldi	r24, 0x68	; 104
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x-3,y-12,x,y);//end of number
     b22:	2d e3       	ldi	r18, 0x3D	; 61
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	48 e6       	ldi	r20, 0x68	; 104
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	61 e3       	ldi	r22, 0x31	; 49
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	85 e6       	ldi	r24, 0x65	; 101
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	write_screen();
     b36:	0e 94 86 0b 	call	0x170c	; 0x170c <write_screen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b3a:	2f ef       	ldi	r18, 0xFF	; 255
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9e e0       	ldi	r25, 0x0E	; 14
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	90 40       	sbci	r25, 0x00	; 0
     b46:	e1 f7       	brne	.-8      	; 0xb40 <bootscreen+0x17e>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <bootscreen+0x188>
     b4a:	00 00       	nop
     b4c:	08 95       	ret

00000b4e <initalize>:




void initalize(void){
	cli();//disable interrupts
     b4e:	f8 94       	cli
	init_UART(UBBR);
     b50:	8f e1       	ldi	r24, 0x1F	; 31
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 cc 0c 	call	0x1998	; 0x1998 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     b58:	81 e4       	ldi	r24, 0x41	; 65
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	8a e4       	ldi	r24, 0x4A	; 74
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	86 e5       	ldi	r24, 0x56	; 86
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	9f 93       	push	r25
     b6e:	8f 93       	push	r24
     b70:	8b e5       	ldi	r24, 0x5B	; 91
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <printf>
	
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     b7c:	85 b7       	in	r24, 0x35	; 53
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     b82:	80 b7       	in	r24, 0x30	; 48
     b84:	80 62       	ori	r24, 0x20	; 32
     b86:	80 bf       	out	0x30, r24	; 48

	oled_ini();
     b88:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <oled_ini>
	sram_init();
     b8c:	0e 94 90 0b 	call	0x1720	; 0x1720 <sram_init>
	bootscreen();
     b90:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <bootscreen>
	write_screen();
     b94:	0e 94 86 0b 	call	0x170c	; 0x170c <write_screen>
	
	initialize_menu();
     b98:	0e 94 1b 06 	call	0xc36	; 0xc36 <initialize_menu>
	
	initialize_control_input();
     b9c:	0e 94 8a 04 	call	0x914	; 0x914 <initialize_control_input>
	
	initalize_interrupts();
     ba0:	0e 94 4f 02 	call	0x49e	; 0x49e <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
     ba4:	8c e3       	ldi	r24, 0x3C	; 60
     ba6:	0e 94 99 0c 	call	0x1932	; 0x1932 <initialize_timer>
	
	CAN_initialize();
     baa:	0e 94 bd 02 	call	0x57a	; 0x57a <CAN_initialize>
	
	sei();//enable interrupts
     bae:	78 94       	sei
     bb0:	8d b7       	in	r24, 0x3d	; 61
     bb2:	9e b7       	in	r25, 0x3e	; 62
     bb4:	08 96       	adiw	r24, 0x08	; 8
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	9e bf       	out	0x3e, r25	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	8d bf       	out	0x3d, r24	; 61
     bc0:	08 95       	ret

00000bc2 <main>:
#include "menu.h"
#include "can.h"

int main(void)
{
	initalize();
     bc2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <initalize>
	oled_goto_line(7);
     bc6:	87 e0       	ldi	r24, 0x07	; 7
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	sram_write_string(" - BYGGERN - G17");
     bce:	81 ea       	ldi	r24, 0xA1	; 161
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
	while(1){
		menu_update();
     bd6:	0e 94 1b 08 	call	0x1036	; 0x1036 <menu_update>
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <main+0x14>

00000bdc <MCP2515_bit_modify>:
	uint8_t recieved_status = SPI_read();
	SPI_deselect();
	return recieved_status;
}

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, uint8_t data){
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	18 2f       	mov	r17, r24
     be4:	d6 2f       	mov	r29, r22
     be6:	c4 2f       	mov	r28, r20
	SPI_select();
     be8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <SPI_select>
	SPI_send(MCP_BITMOD);
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	0e 94 87 0c 	call	0x190e	; 0x190e <SPI_send>
	SPI_send(adr);
     bf2:	81 2f       	mov	r24, r17
     bf4:	0e 94 87 0c 	call	0x190e	; 0x190e <SPI_send>
	SPI_send(mask);
     bf8:	8d 2f       	mov	r24, r29
     bfa:	0e 94 87 0c 	call	0x190e	; 0x190e <SPI_send>
	SPI_send(data);
     bfe:	8c 2f       	mov	r24, r28
     c00:	0e 94 87 0c 	call	0x190e	; 0x190e <SPI_send>
	SPI_deselect();
     c04:	0e 94 8d 0c 	call	0x191a	; 0x191a <SPI_deselect>
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	08 95       	ret

00000c10 <MCP2515_initialize>:
 */ 

#include "MCP2515_driver.h"

void MCP2515_initialize(void){
	SPI_initialize();
     c10:	0e 94 8f 0c 	call	0x191e	; 0x191e <SPI_initialize>
 	SPI_select();
     c14:	0e 94 8b 0c 	call	0x1916	; 0x1916 <SPI_select>
	SPI_send(MCP_RESET);
     c18:	80 ec       	ldi	r24, 0xC0	; 192
     c1a:	0e 94 87 0c 	call	0x190e	; 0x190e <SPI_send>
	SPI_deselect();
     c1e:	0e 94 8d 0c 	call	0x191a	; 0x191a <SPI_deselect>
	SPI_select();
     c22:	0e 94 8b 0c 	call	0x1916	; 0x1916 <SPI_select>
	//MCP2515_bit_modify(MCP_CANCTRL,0b11100000,MODE_CONFIG);
	MCP2515_bit_modify(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);
     c26:	40 e4       	ldi	r20, 0x40	; 64
     c28:	60 ee       	ldi	r22, 0xE0	; 224
     c2a:	8f e0       	ldi	r24, 0x0F	; 15
     c2c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <MCP2515_bit_modify>
	//MCP2515_bit_modify(MCP_CANCTRL,0b11100000,0x00);
	SPI_deselect();
     c30:	0e 94 8d 0c 	call	0x191a	; 0x191a <SPI_deselect>
     c34:	08 95       	ret

00000c36 <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c3a:	c3 e2       	ldi	r28, 0x23	; 35
     c3c:	d3 e0       	ldi	r29, 0x03	; 3
     c3e:	d0 93 0a 03 	sts	0x030A, r29
     c42:	c0 93 09 03 	sts	0x0309, r28
	new_menu->ptr_child = ptr_child;
     c46:	10 92 0c 03 	sts	0x030C, r1
     c4a:	10 92 0b 03 	sts	0x030B, r1
	new_menu->ptr_parent = ptr_parent;
     c4e:	10 92 0e 03 	sts	0x030E, r1
     c52:	10 92 0d 03 	sts	0x030D, r1
	
	new_menu->title = title;
     c56:	e5 e0       	ldi	r30, 0x05	; 5
     c58:	f3 e0       	ldi	r31, 0x03	; 3
     c5a:	8a ee       	ldi	r24, 0xEA	; 234
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	91 83       	std	Z+1, r25	; 0x01
     c60:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	90 93 08 03 	sts	0x0308, r25
     c6a:	80 93 07 03 	sts	0x0307, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c6e:	27 ed       	ldi	r18, 0xD7	; 215
     c70:	32 e0       	ldi	r19, 0x02	; 2
     c72:	30 93 28 03 	sts	0x0328, r19
     c76:	20 93 27 03 	sts	0x0327, r18
	new_menu->ptr_child = ptr_child;
     c7a:	6f e0       	ldi	r22, 0x0F	; 15
     c7c:	73 e0       	ldi	r23, 0x03	; 3
     c7e:	70 93 2a 03 	sts	0x032A, r23
     c82:	60 93 29 03 	sts	0x0329, r22
	new_menu->ptr_parent = ptr_parent;
     c86:	10 92 2c 03 	sts	0x032C, r1
     c8a:	10 92 2b 03 	sts	0x032B, r1
	
	new_menu->title = title;
     c8e:	44 ee       	ldi	r20, 0xE4	; 228
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	59 83       	std	Y+1, r21	; 0x01
     c94:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     c96:	90 93 26 03 	sts	0x0326, r25
     c9a:	80 93 25 03 	sts	0x0325, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c9e:	f0 93 dc 02 	sts	0x02DC, r31
     ca2:	e0 93 db 02 	sts	0x02DB, r30
	new_menu->ptr_child = ptr_child;
     ca6:	c1 ef       	ldi	r28, 0xF1	; 241
     ca8:	d2 e0       	ldi	r29, 0x02	; 2
     caa:	d0 93 de 02 	sts	0x02DE, r29
     cae:	c0 93 dd 02 	sts	0x02DD, r28
	new_menu->ptr_parent = ptr_parent;
     cb2:	10 92 e0 02 	sts	0x02E0, r1
     cb6:	10 92 df 02 	sts	0x02DF, r1
	
	new_menu->title = title;
     cba:	4c ed       	ldi	r20, 0xDC	; 220
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	d9 01       	movw	r26, r18
     cc0:	4d 93       	st	X+, r20
     cc2:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     cc4:	90 93 da 02 	sts	0x02DA, r25
     cc8:	80 93 d9 02 	sts	0x02D9, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     ccc:	2b ef       	ldi	r18, 0xFB	; 251
     cce:	32 e0       	ldi	r19, 0x02	; 2
     cd0:	30 93 f6 02 	sts	0x02F6, r19
     cd4:	20 93 f5 02 	sts	0x02F5, r18
	new_menu->ptr_child = ptr_child;
     cd8:	10 92 f8 02 	sts	0x02F8, r1
     cdc:	10 92 f7 02 	sts	0x02F7, r1
	new_menu->ptr_parent = ptr_parent;
     ce0:	f0 93 fa 02 	sts	0x02FA, r31
     ce4:	e0 93 f9 02 	sts	0x02F9, r30
	
	new_menu->title = title;
     ce8:	86 ed       	ldi	r24, 0xD6	; 214
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	99 83       	std	Y+1, r25	; 0x01
     cee:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	90 93 f4 02 	sts	0x02F4, r25
     cf8:	80 93 f3 02 	sts	0x02F3, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     cfc:	d0 93 00 03 	sts	0x0300, r29
     d00:	c0 93 ff 02 	sts	0x02FF, r28
	new_menu->ptr_child = ptr_child;
     d04:	10 92 02 03 	sts	0x0302, r1
     d08:	10 92 01 03 	sts	0x0301, r1
	new_menu->ptr_parent = ptr_parent;
     d0c:	f0 93 04 03 	sts	0x0304, r31
     d10:	e0 93 03 03 	sts	0x0303, r30
	
	new_menu->title = title;
     d14:	4d ec       	ldi	r20, 0xCD	; 205
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	d9 01       	movw	r26, r18
     d1a:	4d 93       	st	X+, r20
     d1c:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     d1e:	90 93 fe 02 	sts	0x02FE, r25
     d22:	80 93 fd 02 	sts	0x02FD, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d26:	c9 e1       	ldi	r28, 0x19	; 25
     d28:	d3 e0       	ldi	r29, 0x03	; 3
     d2a:	d0 93 14 03 	sts	0x0314, r29
     d2e:	c0 93 13 03 	sts	0x0313, r28
	new_menu->ptr_child = ptr_child;
     d32:	10 92 16 03 	sts	0x0316, r1
     d36:	10 92 15 03 	sts	0x0315, r1
	new_menu->ptr_parent = ptr_parent;
     d3a:	f0 93 18 03 	sts	0x0318, r31
     d3e:	e0 93 17 03 	sts	0x0317, r30
	
	new_menu->title = title;
     d42:	22 ec       	ldi	r18, 0xC2	; 194
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	db 01       	movw	r26, r22
     d48:	2d 93       	st	X+, r18
     d4a:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     d4c:	90 93 12 03 	sts	0x0312, r25
     d50:	80 93 11 03 	sts	0x0311, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d54:	70 93 1e 03 	sts	0x031E, r23
     d58:	60 93 1d 03 	sts	0x031D, r22
	new_menu->ptr_child = ptr_child;
     d5c:	10 92 20 03 	sts	0x0320, r1
     d60:	10 92 1f 03 	sts	0x031F, r1
	new_menu->ptr_parent = ptr_parent;
     d64:	f0 93 22 03 	sts	0x0322, r31
     d68:	e0 93 21 03 	sts	0x0321, r30
	
	new_menu->title = title;
     d6c:	28 eb       	ldi	r18, 0xB8	; 184
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	39 83       	std	Y+1, r19	; 0x01
     d72:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     d74:	90 93 1c 03 	sts	0x031C, r25
     d78:	80 93 1b 03 	sts	0x031B, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     d7c:	f0 93 d4 02 	sts	0x02D4, r31
     d80:	e0 93 d3 02 	sts	0x02D3, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     d84:	f0 93 d6 02 	sts	0x02D6, r31
     d88:	e0 93 d5 02 	sts	0x02D5, r30
	
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <menu_left_button_flag>:
	return 0;
	
}

void menu_left_button_flag(void){
	left_button_flag = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 cc 02 	sts	0x02CC, r24
     d98:	08 95       	ret

00000d9a <menu_right_button_flag>:
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 cd 02 	sts	0x02CD, r24
     da0:	08 95       	ret

00000da2 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
     daa:	60 ea       	ldi	r22, 0xA0	; 160
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	81 ee       	ldi	r24, 0xE1	; 225
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <strcpy_P>
	sram_write_string(temp);
     db6:	81 ee       	ldi	r24, 0xE1	; 225
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
	sram_clear_line(1);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 af 0b 	call	0x175e	; 0x175e <sram_clear_line>
	oled_goto_line(2);
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	strcpy_P(temp,btn_1);
     dcc:	60 eb       	ldi	r22, 0xB0	; 176
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	81 ee       	ldi	r24, 0xE1	; 225
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <strcpy_P>
	sram_write_string(temp);
     dd8:	81 ee       	ldi	r24, 0xE1	; 225
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
	write_screen();
     de0:	0e 94 86 0b 	call	0x170c	; 0x170c <write_screen>
	while (right_button_flag == 0){	
     de4:	80 91 cd 02 	lds	r24, 0x02CD
     de8:	81 11       	cpse	r24, r1
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <menu_set_contrast+0x68>
		write_c(0x81);
     dec:	81 e8       	ldi	r24, 0x81	; 129
     dee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <write_c>
		write_c(readADC(3)/2);
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	0e 94 7f 08 	call	0x10fe	; 0x10fe <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	write_screen();
	while (right_button_flag == 0){	
     e02:	80 91 cd 02 	lds	r24, 0x02CD
     e06:	88 23       	and	r24, r24
     e08:	89 f3       	breq	.-30     	; 0xdec <menu_set_contrast+0x4a>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	right_button_flag = 0;
     e0a:	10 92 cd 02 	sts	0x02CD, r1
     e0e:	08 95       	ret

00000e10 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
     e18:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
     e1a:	8c 2f       	mov	r24, r28
     e1c:	0e 94 af 0b 	call	0x175e	; 0x175e <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
     e20:	cf 5f       	subi	r28, 0xFF	; 255
     e22:	c7 30       	cpi	r28, 0x07	; 7
     e24:	d1 f7       	brne	.-12     	; 0xe1a <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
     e2e:	69 e9       	ldi	r22, 0x99	; 153
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	81 ee       	ldi	r24, 0xE1	; 225
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 57 0f 	call	0x1eae	; 0x1eae <strcpy_P>
	sram_write_string(temp);
     e3a:	81 ee       	ldi	r24, 0xE1	; 225
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
	oled_goto_line(2);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	strcpy_P(temp,btn_1);
     e4a:	60 eb       	ldi	r22, 0xB0	; 176
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	81 ee       	ldi	r24, 0xE1	; 225
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 57 0f 	call	0x1eae	; 0x1eae <strcpy_P>
	sram_write_string(temp);
     e56:	81 ee       	ldi	r24, 0xE1	; 225
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
	write_screen();
     e5e:	0e 94 86 0b 	call	0x170c	; 0x170c <write_screen>
	while (right_button_flag == 0){
     e62:	80 91 cd 02 	lds	r24, 0x02CD
     e66:	81 11       	cpse	r24, r1
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <menu_calibrate_joystick+0x6e>
     e6a:	8c ec       	ldi	r24, 0xCC	; 204
     e6c:	94 e0       	ldi	r25, 0x04	; 4
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <menu_calibrate_joystick+0x5e>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <menu_calibrate_joystick+0x64>
     e74:	00 00       	nop
     e76:	80 91 cd 02 	lds	r24, 0x02CD
     e7a:	88 23       	and	r24, r24
     e7c:	b1 f3       	breq	.-20     	; 0xe6a <menu_calibrate_joystick+0x5a>
		_delay_ms(1);
	}
	right_button_flag = 0;
     e7e:	10 92 cd 02 	sts	0x02CD, r1
	
	
	oled_clear_line(0);
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
     e8a:	6b e8       	ldi	r22, 0x8B	; 139
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	81 ee       	ldi	r24, 0xE1	; 225
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	0e 94 57 0f 	call	0x1eae	; 0x1eae <strcpy_P>
	sram_write_string(temp);
     e96:	81 ee       	ldi	r24, 0xE1	; 225
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
     e9e:	c0 e7       	ldi	r28, 0x70	; 112
     ea0:	d0 e0       	ldi	r29, 0x00	; 0
     ea2:	08 e7       	ldi	r16, 0x78	; 120
     ea4:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
     eae:	fe 01       	movw	r30, r28
     eb0:	65 91       	lpm	r22, Z+
     eb2:	74 91       	lpm	r23, Z
     eb4:	81 ee       	ldi	r24, 0xE1	; 225
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <strcpy_P>
		sram_write_string(temp);
     ebc:	81 ee       	ldi	r24, 0xE1	; 225
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
		write_screen();
     ec4:	0e 94 86 0b 	call	0x170c	; 0x170c <write_screen>
		while (right_button_flag == 0){
     ec8:	80 91 cd 02 	lds	r24, 0x02CD
     ecc:	81 11       	cpse	r24, r1
     ece:	0a c0       	rjmp	.+20     	; 0xee4 <menu_calibrate_joystick+0xd4>
     ed0:	8c ec       	ldi	r24, 0xCC	; 204
     ed2:	94 e0       	ldi	r25, 0x04	; 4
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <menu_calibrate_joystick+0xc4>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <menu_calibrate_joystick+0xca>
     eda:	00 00       	nop
     edc:	80 91 cd 02 	lds	r24, 0x02CD
     ee0:	88 23       	and	r24, r24
     ee2:	b1 f3       	breq	.-20     	; 0xed0 <menu_calibrate_joystick+0xc0>
			_delay_ms(1);
		}
		right_button_flag = 0;
     ee4:	10 92 cd 02 	sts	0x02CD, r1
     ee8:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
     eea:	c0 17       	cp	r28, r16
     eec:	d1 07       	cpc	r29, r17
     eee:	d9 f6       	brne	.-74     	; 0xea6 <menu_calibrate_joystick+0x96>
		while (right_button_flag == 0){
			_delay_ms(1);
		}
		right_button_flag = 0;
	}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <menu_function_selected>:
void menu_right_button_flag(void){
	right_button_flag = 1;
}

void menu_function_selected(void){
	if(current_selected == &option_1){
     efa:	80 91 d5 02 	lds	r24, 0x02D5
     efe:	90 91 d6 02 	lds	r25, 0x02D6
     f02:	22 e0       	ldi	r18, 0x02	; 2
     f04:	8b 3f       	cpi	r24, 0xFB	; 251
     f06:	92 07       	cpc	r25, r18
     f08:	19 f4       	brne	.+6      	; 0xf10 <menu_function_selected+0x16>
		menu_set_contrast();
     f0a:	0e 94 d1 06 	call	0xda2	; 0xda2 <menu_set_contrast>
     f0e:	08 95       	ret
	}else if(current_selected == &debug_1){
     f10:	89 51       	subi	r24, 0x19	; 25
     f12:	93 40       	sbci	r25, 0x03	; 3
     f14:	11 f4       	brne	.+4      	; 0xf1a <menu_function_selected+0x20>
		menu_calibrate_joystick();
     f16:	0e 94 08 07 	call	0xe10	; 0xe10 <menu_calibrate_joystick>
     f1a:	08 95       	ret

00000f1c <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
     f1c:	89 e5       	ldi	r24, 0x59	; 89
     f1e:	0e 94 de 03 	call	0x7bc	; 0x7bc <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
     f22:	87 34       	cpi	r24, 0x47	; 71
     f24:	91 05       	cpc	r25, r1
     f26:	4c f1       	brlt	.+82     	; 0xf7a <navigate_menu+0x5e>
     f28:	20 91 ca 02 	lds	r18, 0x02CA
     f2c:	30 91 cb 02 	lds	r19, 0x02CB
     f30:	27 34       	cpi	r18, 0x47	; 71
     f32:	31 05       	cpc	r19, r1
     f34:	14 f5       	brge	.+68     	; 0xf7a <navigate_menu+0x5e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
     f36:	e0 91 d5 02 	lds	r30, 0x02D5
     f3a:	f0 91 d6 02 	lds	r31, 0x02D6
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	18 16       	cp	r1, r24
     f46:	19 06       	cpc	r1, r25
     f48:	8c f4       	brge	.+34     	; 0xf6c <navigate_menu+0x50>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
     f4e:	04 80       	ldd	r0, Z+4	; 0x04
     f50:	f5 81       	ldd	r31, Z+5	; 0x05
     f52:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	22 81       	ldd	r18, Z+2	; 0x02
     f58:	33 81       	ldd	r19, Z+3	; 0x03
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	31 09       	sbc	r19, r1
     f5e:	82 17       	cp	r24, r18
     f60:	93 07       	cpc	r25, r19
     f62:	ac f3       	brlt	.-22     	; 0xf4e <navigate_menu+0x32>
     f64:	f0 93 d6 02 	sts	0x02D6, r31
     f68:	e0 93 d5 02 	sts	0x02D5, r30
			current_selected = current_selected->ptr_sib_down;
		}
		y_lock = RANGE_MAX;
     f6c:	84 e6       	ldi	r24, 0x64	; 100
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	90 93 cb 02 	sts	0x02CB, r25
     f74:	80 93 ca 02 	sts	0x02CA, r24
     f78:	25 c0       	rjmp	.+74     	; 0xfc4 <navigate_menu+0xa8>
		
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && y_lock >= -NAVIGATION_TRHESHOLD)
     f7a:	8a 3b       	cpi	r24, 0xBA	; 186
     f7c:	2f ef       	ldi	r18, 0xFF	; 255
     f7e:	92 07       	cpc	r25, r18
     f80:	c4 f4       	brge	.+48     	; 0xfb2 <navigate_menu+0x96>
     f82:	20 91 ca 02 	lds	r18, 0x02CA
     f86:	30 91 cb 02 	lds	r19, 0x02CB
     f8a:	2a 3b       	cpi	r18, 0xBA	; 186
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	8c f0       	brlt	.+34     	; 0xfb2 <navigate_menu+0x96>
	{
		current_selected = current_selected->ptr_sib_down;
     f90:	e0 91 d5 02 	lds	r30, 0x02D5
     f94:	f0 91 d6 02 	lds	r31, 0x02D6
     f98:	84 81       	ldd	r24, Z+4	; 0x04
     f9a:	95 81       	ldd	r25, Z+5	; 0x05
     f9c:	90 93 d6 02 	sts	0x02D6, r25
     fa0:	80 93 d5 02 	sts	0x02D5, r24
		y_lock = RANGE_MIN;
     fa4:	8c e9       	ldi	r24, 0x9C	; 156
     fa6:	9f ef       	ldi	r25, 0xFF	; 255
     fa8:	90 93 cb 02 	sts	0x02CB, r25
     fac:	80 93 ca 02 	sts	0x02CA, r24
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <navigate_menu+0xa8>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
     fb2:	8b 5b       	subi	r24, 0xBB	; 187
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	8b 38       	cpi	r24, 0x8B	; 139
     fb8:	91 05       	cpc	r25, r1
     fba:	20 f4       	brcc	.+8      	; 0xfc4 <navigate_menu+0xa8>
		y_lock = 0;
     fbc:	10 92 cb 02 	sts	0x02CB, r1
     fc0:	10 92 ca 02 	sts	0x02CA, r1
	}
	if (right_button_flag == 1)
     fc4:	80 91 cd 02 	lds	r24, 0x02CD
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	b1 f4       	brne	.+44     	; 0xff8 <navigate_menu+0xdc>
	{
		right_button_flag = 0;
     fcc:	10 92 cd 02 	sts	0x02CD, r1
		if(current_selected->ptr_child != NULL){
     fd0:	e0 91 d5 02 	lds	r30, 0x02D5
     fd4:	f0 91 d6 02 	lds	r31, 0x02D6
     fd8:	86 81       	ldd	r24, Z+6	; 0x06
     fda:	97 81       	ldd	r25, Z+7	; 0x07
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	49 f0       	breq	.+18     	; 0xff2 <navigate_menu+0xd6>
			current_head = current_selected->ptr_child;
     fe0:	90 93 d4 02 	sts	0x02D4, r25
     fe4:	80 93 d3 02 	sts	0x02D3, r24
			current_selected = current_selected->ptr_child;
     fe8:	90 93 d6 02 	sts	0x02D6, r25
     fec:	80 93 d5 02 	sts	0x02D5, r24
     ff0:	1f c0       	rjmp	.+62     	; 0x1030 <navigate_menu+0x114>
		}else{
			menu_function_selected();
     ff2:	0e 94 7d 07 	call	0xefa	; 0xefa <menu_function_selected>
     ff6:	1c c0       	rjmp	.+56     	; 0x1030 <navigate_menu+0x114>
		}
	}else if (left_button_flag == 1){
     ff8:	80 91 cc 02 	lds	r24, 0x02CC
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	c1 f4       	brne	.+48     	; 0x1030 <navigate_menu+0x114>
		left_button_flag = 0;
    1000:	10 92 cc 02 	sts	0x02CC, r1
		if (current_selected->ptr_parent != NULL){
    1004:	e0 91 d5 02 	lds	r30, 0x02D5
    1008:	f0 91 d6 02 	lds	r31, 0x02D6
    100c:	80 85       	ldd	r24, Z+8	; 0x08
    100e:	91 85       	ldd	r25, Z+9	; 0x09
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	71 f0       	breq	.+28     	; 0x1030 <navigate_menu+0x114>
			current_head = current_head->ptr_parent;
    1014:	e0 91 d3 02 	lds	r30, 0x02D3
    1018:	f0 91 d4 02 	lds	r31, 0x02D4
    101c:	20 85       	ldd	r18, Z+8	; 0x08
    101e:	31 85       	ldd	r19, Z+9	; 0x09
    1020:	30 93 d4 02 	sts	0x02D4, r19
    1024:	20 93 d3 02 	sts	0x02D3, r18
			current_selected = current_selected->ptr_parent;
    1028:	90 93 d6 02 	sts	0x02D6, r25
    102c:	80 93 d5 02 	sts	0x02D5, r24
		}
	}
	return 0;
	
}
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	08 95       	ret

00001036 <menu_update>:
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
	
}
int abc = 0;
void menu_update(void){
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    103e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <navigate_menu>
    1042:	89 2b       	or	r24, r25
    1044:	09 f0       	breq	.+2      	; 0x1048 <menu_update+0x12>
    1046:	4a c0       	rjmp	.+148    	; 0x10dc <menu_update+0xa6>
    1048:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    104a:	8c 2f       	mov	r24, r28
    104c:	0e 94 af 0b 	call	0x175e	; 0x175e <sram_clear_line>
    1050:	cf 5f       	subi	r28, 0xFF	; 255
int abc = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    1052:	c7 30       	cpi	r28, 0x07	; 7
    1054:	d1 f7       	brne	.-12     	; 0x104a <menu_update+0x14>
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
    1056:	e0 91 d3 02 	lds	r30, 0x02D3
    105a:	f0 91 d4 02 	lds	r31, 0x02D4
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	18 16       	cp	r1, r24
    1064:	19 06       	cpc	r1, r25
    1066:	d4 f5       	brge	.+116    	; 0x10dc <menu_update+0xa6>
    1068:	c0 e0       	ldi	r28, 0x00	; 0
    106a:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    106c:	10 e8       	ldi	r17, 0x80	; 128
    106e:	01 e8       	ldi	r16, 0x81	; 129
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    1070:	ce 01       	movw	r24, r28
    1072:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
			oled_goto_column(0);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    107e:	e0 91 d3 02 	lds	r30, 0x02D3
    1082:	f0 91 d4 02 	lds	r31, 0x02D4
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	81 ee       	ldi	r24, 0xE1	; 225
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1092:	20 91 d3 02 	lds	r18, 0x02D3
    1096:	30 91 d4 02 	lds	r19, 0x02D4
    109a:	80 91 d5 02 	lds	r24, 0x02D5
    109e:	90 91 d6 02 	lds	r25, 0x02D6
    10a2:	28 17       	cp	r18, r24
    10a4:	39 07       	cpc	r19, r25
    10a6:	11 f4       	brne	.+4      	; 0x10ac <menu_update+0x76>
    10a8:	80 2f       	mov	r24, r16
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <menu_update+0x78>
    10ac:	81 2f       	mov	r24, r17
    10ae:	0e 94 88 09 	call	0x1310	; 0x1310 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    10b2:	81 ee       	ldi	r24, 0xE1	; 225
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <sram_write_string>
			current_head = current_head->ptr_sib_down;
    10ba:	e0 91 d3 02 	lds	r30, 0x02D3
    10be:	f0 91 d4 02 	lds	r31, 0x02D4
    10c2:	04 80       	ldd	r0, Z+4	; 0x04
    10c4:	f5 81       	ldd	r31, Z+5	; 0x05
    10c6:	e0 2d       	mov	r30, r0
    10c8:	f0 93 d4 02 	sts	0x02D4, r31
    10cc:	e0 93 d3 02 	sts	0x02D3, r30
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
    10d0:	21 96       	adiw	r28, 0x01	; 1
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	93 81       	ldd	r25, Z+3	; 0x03
    10d6:	c8 17       	cp	r28, r24
    10d8:	d9 07       	cpc	r29, r25
    10da:	54 f2       	brlt	.-108    	; 0x1070 <menu_update+0x3a>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    10dc:	0e 94 ae 0c 	call	0x195c	; 0x195c <timer_check_flag>
    10e0:	88 23       	and	r24, r24
    10e2:	41 f0       	breq	.+16     	; 0x10f4 <menu_update+0xbe>
		write_screen();
    10e4:	0e 94 86 0b 	call	0x170c	; 0x170c <write_screen>
		timer_disable_flag();
    10e8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <timer_disable_flag>
		sram_scroll_data(7,1);
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	87 e0       	ldi	r24, 0x07	; 7
    10f0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <sram_scroll_data>
	}
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <write_c>:

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    10fe:	e0 91 0a 01 	lds	r30, 0x010A
    1102:	f0 91 0b 01 	lds	r31, 0x010B
    1106:	80 83       	st	Z, r24
    1108:	08 95       	ret

0000110a <oled_home>:
	}
}

void oled_home(void)
{
	page_sram = 0;
    110a:	10 92 d2 02 	sts	0x02D2, r1
    110e:	10 92 d1 02 	sts	0x02D1, r1
	col_sram = 0;
    1112:	10 92 d0 02 	sts	0x02D0, r1
    1116:	10 92 cf 02 	sts	0x02CF, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    111a:	e0 91 0a 01 	lds	r30, 0x010A
    111e:	f0 91 0b 01 	lds	r31, 0x010B
    1122:	81 e2       	ldi	r24, 0x21	; 33
    1124:	80 83       	st	Z, r24
    1126:	e0 91 0a 01 	lds	r30, 0x010A
    112a:	f0 91 0b 01 	lds	r31, 0x010B
    112e:	10 82       	st	Z, r1
    1130:	e0 91 0a 01 	lds	r30, 0x010A
    1134:	f0 91 0b 01 	lds	r31, 0x010B
    1138:	8f e7       	ldi	r24, 0x7F	; 127
    113a:	80 83       	st	Z, r24
    113c:	e0 91 0a 01 	lds	r30, 0x010A
    1140:	f0 91 0b 01 	lds	r31, 0x010B
    1144:	82 e2       	ldi	r24, 0x22	; 34
    1146:	80 83       	st	Z, r24
    1148:	e0 91 0a 01 	lds	r30, 0x010A
    114c:	f0 91 0b 01 	lds	r31, 0x010B
    1150:	10 82       	st	Z, r1
    1152:	e0 91 0a 01 	lds	r30, 0x010A
    1156:	f0 91 0b 01 	lds	r31, 0x010B
    115a:	87 e0       	ldi	r24, 0x07	; 7
    115c:	80 83       	st	Z, r24
    115e:	08 95       	ret

00001160 <oled_goto_line>:
	//write_c(0x10);
}



void oled_goto_line(unsigned int line){
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
	oled_home();
    1166:	0e 94 85 08 	call	0x110a	; 0x110a <oled_home>
	page_sram = line;
    116a:	d0 93 d2 02 	sts	0x02D2, r29
    116e:	c0 93 d1 02 	sts	0x02D1, r28
	if(line%8){
    1172:	ce 01       	movw	r24, r28
    1174:	87 70       	andi	r24, 0x07	; 7
    1176:	99 27       	eor	r25, r25
    1178:	89 2b       	or	r24, r25
    117a:	89 f0       	breq	.+34     	; 0x119e <oled_goto_line+0x3e>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    117c:	e0 91 0a 01 	lds	r30, 0x010A
    1180:	f0 91 0b 01 	lds	r31, 0x010B
    1184:	10 82       	st	Z, r1
    1186:	e0 91 0a 01 	lds	r30, 0x010A
    118a:	f0 91 0b 01 	lds	r31, 0x010B
    118e:	80 e1       	ldi	r24, 0x10	; 16
    1190:	80 83       	st	Z, r24
	oled_home();
	page_sram = line;
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
    1192:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1194:	e0 91 0a 01 	lds	r30, 0x010A
    1198:	f0 91 0b 01 	lds	r31, 0x010B
    119c:	c0 83       	st	Z, r28
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <oled_goto_column>:


void oled_goto_column(unsigned int column){
	col_sram = column%128;
    11a4:	8f 77       	andi	r24, 0x7F	; 127
    11a6:	99 27       	eor	r25, r25
    11a8:	90 93 d0 02 	sts	0x02D0, r25
    11ac:	80 93 cf 02 	sts	0x02CF, r24
    11b0:	08 95       	ret

000011b2 <oled_clear_line>:
}

void oled_clear_line(unsigned int line){
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    11b8:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	if(line < 8){
    11bc:	28 97       	sbiw	r28, 0x08	; 8
    11be:	50 f4       	brcc	.+20     	; 0x11d4 <oled_clear_line+0x22>
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    11c4:	e0 91 08 01 	lds	r30, 0x0108
    11c8:	f0 91 09 01 	lds	r31, 0x0109
    11cc:	10 82       	st	Z, r1
    11ce:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	c1 f7       	brne	.-16     	; 0x11c4 <oled_clear_line+0x12>
			write_d(0b00000000);
		}
	}
} 
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <oled_reset>:

}


void oled_reset(void)
{		
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
    11de:	c0 e0       	ldi	r28, 0x00	; 0
    11e0:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
    11e2:	ce 01       	movw	r24, r28
    11e4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
    11e8:	21 96       	adiw	r28, 0x01	; 1
    11ea:	c8 30       	cpi	r28, 0x08	; 8
    11ec:	d1 05       	cpc	r29, r1
    11ee:	c9 f7       	brne	.-14     	; 0x11e2 <oled_reset+0x8>
		oled_clear_line(i);
	}
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    11f6:	85 b7       	in	r24, 0x35	; 53
    11f8:	80 68       	ori	r24, 0x80	; 128
    11fa:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    11fc:	80 b7       	in	r24, 0x30	; 48
    11fe:	80 62       	ori	r24, 0x20	; 32
    1200:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1202:	e0 91 0a 01 	lds	r30, 0x010A
    1206:	f0 91 0b 01 	lds	r31, 0x010B
    120a:	8e ea       	ldi	r24, 0xAE	; 174
    120c:	80 83       	st	Z, r24
    120e:	e0 91 0a 01 	lds	r30, 0x010A
    1212:	f0 91 0b 01 	lds	r31, 0x010B
    1216:	81 ea       	ldi	r24, 0xA1	; 161
    1218:	80 83       	st	Z, r24
    121a:	e0 91 0a 01 	lds	r30, 0x010A
    121e:	f0 91 0b 01 	lds	r31, 0x010B
    1222:	8a ed       	ldi	r24, 0xDA	; 218
    1224:	80 83       	st	Z, r24
    1226:	e0 91 0a 01 	lds	r30, 0x010A
    122a:	f0 91 0b 01 	lds	r31, 0x010B
    122e:	82 e1       	ldi	r24, 0x12	; 18
    1230:	80 83       	st	Z, r24
    1232:	e0 91 0a 01 	lds	r30, 0x010A
    1236:	f0 91 0b 01 	lds	r31, 0x010B
    123a:	88 ec       	ldi	r24, 0xC8	; 200
    123c:	80 83       	st	Z, r24
    123e:	e0 91 0a 01 	lds	r30, 0x010A
    1242:	f0 91 0b 01 	lds	r31, 0x010B
    1246:	88 ea       	ldi	r24, 0xA8	; 168
    1248:	80 83       	st	Z, r24
    124a:	e0 91 0a 01 	lds	r30, 0x010A
    124e:	f0 91 0b 01 	lds	r31, 0x010B
    1252:	8f e3       	ldi	r24, 0x3F	; 63
    1254:	80 83       	st	Z, r24
    1256:	e0 91 0a 01 	lds	r30, 0x010A
    125a:	f0 91 0b 01 	lds	r31, 0x010B
    125e:	85 ed       	ldi	r24, 0xD5	; 213
    1260:	80 83       	st	Z, r24
    1262:	e0 91 0a 01 	lds	r30, 0x010A
    1266:	f0 91 0b 01 	lds	r31, 0x010B
    126a:	80 e8       	ldi	r24, 0x80	; 128
    126c:	80 83       	st	Z, r24
    126e:	e0 91 0a 01 	lds	r30, 0x010A
    1272:	f0 91 0b 01 	lds	r31, 0x010B
    1276:	81 e8       	ldi	r24, 0x81	; 129
    1278:	80 83       	st	Z, r24
    127a:	e0 91 0a 01 	lds	r30, 0x010A
    127e:	f0 91 0b 01 	lds	r31, 0x010B
    1282:	80 e5       	ldi	r24, 0x50	; 80
    1284:	80 83       	st	Z, r24
    1286:	e0 91 0a 01 	lds	r30, 0x010A
    128a:	f0 91 0b 01 	lds	r31, 0x010B
    128e:	89 ed       	ldi	r24, 0xD9	; 217
    1290:	80 83       	st	Z, r24
    1292:	e0 91 0a 01 	lds	r30, 0x010A
    1296:	f0 91 0b 01 	lds	r31, 0x010B
    129a:	81 e2       	ldi	r24, 0x21	; 33
    129c:	80 83       	st	Z, r24
    129e:	e0 91 0a 01 	lds	r30, 0x010A
    12a2:	f0 91 0b 01 	lds	r31, 0x010B
    12a6:	80 e2       	ldi	r24, 0x20	; 32
    12a8:	80 83       	st	Z, r24
    12aa:	e0 91 0a 01 	lds	r30, 0x010A
    12ae:	f0 91 0b 01 	lds	r31, 0x010B
    12b2:	10 82       	st	Z, r1
    12b4:	e0 91 0a 01 	lds	r30, 0x010A
    12b8:	f0 91 0b 01 	lds	r31, 0x010B
    12bc:	8b ed       	ldi	r24, 0xDB	; 219
    12be:	80 83       	st	Z, r24
    12c0:	e0 91 0a 01 	lds	r30, 0x010A
    12c4:	f0 91 0b 01 	lds	r31, 0x010B
    12c8:	80 e3       	ldi	r24, 0x30	; 48
    12ca:	80 83       	st	Z, r24
    12cc:	e0 91 0a 01 	lds	r30, 0x010A
    12d0:	f0 91 0b 01 	lds	r31, 0x010B
    12d4:	8d ea       	ldi	r24, 0xAD	; 173
    12d6:	80 83       	st	Z, r24
    12d8:	e0 91 0a 01 	lds	r30, 0x010A
    12dc:	f0 91 0b 01 	lds	r31, 0x010B
    12e0:	10 82       	st	Z, r1
    12e2:	e0 91 0a 01 	lds	r30, 0x010A
    12e6:	f0 91 0b 01 	lds	r31, 0x010B
    12ea:	84 ea       	ldi	r24, 0xA4	; 164
    12ec:	80 83       	st	Z, r24
    12ee:	e0 91 0a 01 	lds	r30, 0x010A
    12f2:	f0 91 0b 01 	lds	r31, 0x010B
    12f6:	86 ea       	ldi	r24, 0xA6	; 166
    12f8:	80 83       	st	Z, r24
    12fa:	e0 91 0a 01 	lds	r30, 0x010A
    12fe:	f0 91 0b 01 	lds	r31, 0x010B
    1302:	8f ea       	ldi	r24, 0xAF	; 175
    1304:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
    1306:	0e 94 ed 08 	call	0x11da	; 0x11da <oled_reset>
	oled_home();
    130a:	0e 94 85 08 	call	0x110a	; 0x110a <oled_home>
    130e:	08 95       	ret

00001310 <sram_write_char>:
	}
}


int sram_write_char(char letter){
	if (letter == '\n'){
    1310:	8a 30       	cpi	r24, 0x0A	; 10
    1312:	91 f4       	brne	.+36     	; 0x1338 <sram_write_char+0x28>
		page_sram = (page_sram+1)%8;
    1314:	80 91 d1 02 	lds	r24, 0x02D1
    1318:	90 91 d2 02 	lds	r25, 0x02D2
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	87 70       	andi	r24, 0x07	; 7
    1320:	99 27       	eor	r25, r25
    1322:	90 93 d2 02 	sts	0x02D2, r25
    1326:	80 93 d1 02 	sts	0x02D1, r24
		col_sram = 0;
    132a:	10 92 d0 02 	sts	0x02D0, r1
    132e:	10 92 cf 02 	sts	0x02CF, r1
		return 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	08 95       	ret
	}else if(letter != '\0'){
    1338:	88 23       	and	r24, r24
    133a:	99 f1       	breq	.+102    	; 0x13a2 <sram_write_char+0x92>
    133c:	e8 2f       	mov	r30, r24
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	ee 0f       	add	r30, r30
    1346:	ff 1f       	adc	r31, r31
    1348:	ee 0f       	add	r30, r30
    134a:	ff 1f       	adc	r31, r31
    134c:	ec 50       	subi	r30, 0x0C	; 12
    134e:	f0 40       	sbci	r31, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
    1354:	a0 91 d1 02 	lds	r26, 0x02D1
    1358:	b0 91 d2 02 	lds	r27, 0x02D2
    135c:	b6 95       	lsr	r27
    135e:	ba 2f       	mov	r27, r26
    1360:	aa 27       	eor	r26, r26
    1362:	b7 95       	ror	r27
    1364:	a7 95       	ror	r26
    1366:	20 91 cf 02 	lds	r18, 0x02CF
    136a:	30 91 d0 02 	lds	r19, 0x02D0
    136e:	a2 0f       	add	r26, r18
    1370:	b3 1f       	adc	r27, r19
    1372:	20 91 06 01 	lds	r18, 0x0106
    1376:	30 91 07 01 	lds	r19, 0x0107
    137a:	a2 0f       	add	r26, r18
    137c:	b3 1f       	adc	r27, r19
    137e:	24 91       	lpm	r18, Z
    1380:	2c 93       	st	X, r18
			col_sram++;
    1382:	20 91 cf 02 	lds	r18, 0x02CF
    1386:	30 91 d0 02 	lds	r19, 0x02D0
    138a:	2f 5f       	subi	r18, 0xFF	; 255
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	30 93 d0 02 	sts	0x02D0, r19
    1392:	20 93 cf 02 	sts	0x02CF, r18
	if (letter == '\n'){
		page_sram = (page_sram+1)%8;
		col_sram = 0;
		return 1;
	}else if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	31 96       	adiw	r30, 0x01	; 1
    139a:	88 30       	cpi	r24, 0x08	; 8
    139c:	91 05       	cpc	r25, r1
    139e:	d1 f6       	brne	.-76     	; 0x1354 <sram_write_char+0x44>
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <sram_write_char+0x98>
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
			col_sram++;
		}
		return 1;
	}else{
		return 0;
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	08 95       	ret
	}else if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
			col_sram++;
		}
		return 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 0;
	}
}
    13ac:	08 95       	ret

000013ae <sram_write_string>:


//char screendata[8][128][8]; //line, col, data(8)
volatile char *ext_ram = (char *) 0x1800;

void sram_write_string(char letters[]){
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (sram_write_char(letters[i++])){
    13b4:	89 91       	ld	r24, Y+
    13b6:	0e 94 88 09 	call	0x1310	; 0x1310 <sram_write_char>
    13ba:	89 2b       	or	r24, r25
    13bc:	d9 f7       	brne	.-10     	; 0x13b4 <sram_write_string+0x6>
	}
}
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <sram_write_or>:
void sram_write_and(int page, int col, char data){
	ext_ram[page%8*128 + col%128] &= data;
}

void sram_write_or(int page, int col, char data){
	ext_ram[page%8*128 + col%128] |= data;
    13c4:	87 70       	andi	r24, 0x07	; 7
    13c6:	90 78       	andi	r25, 0x80	; 128
    13c8:	99 23       	and	r25, r25
    13ca:	24 f4       	brge	.+8      	; 0x13d4 <sram_write_or+0x10>
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	88 6f       	ori	r24, 0xF8	; 248
    13d0:	9f 6f       	ori	r25, 0xFF	; 255
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	fc 01       	movw	r30, r24
    13d6:	f6 95       	lsr	r31
    13d8:	fe 2f       	mov	r31, r30
    13da:	ee 27       	eor	r30, r30
    13dc:	f7 95       	ror	r31
    13de:	e7 95       	ror	r30
    13e0:	6f 77       	andi	r22, 0x7F	; 127
    13e2:	70 78       	andi	r23, 0x80	; 128
    13e4:	77 23       	and	r23, r23
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <sram_write_or+0x30>
    13e8:	61 50       	subi	r22, 0x01	; 1
    13ea:	71 09       	sbc	r23, r1
    13ec:	60 68       	ori	r22, 0x80	; 128
    13ee:	7f 6f       	ori	r23, 0xFF	; 255
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	6e 0f       	add	r22, r30
    13f6:	7f 1f       	adc	r23, r31
    13f8:	e0 91 06 01 	lds	r30, 0x0106
    13fc:	f0 91 07 01 	lds	r31, 0x0107
    1400:	e6 0f       	add	r30, r22
    1402:	f7 1f       	adc	r31, r23
    1404:	80 81       	ld	r24, Z
    1406:	48 2b       	or	r20, r24
    1408:	40 83       	st	Z, r20
    140a:	08 95       	ret

0000140c <sram_pixel>:
}

int sram_pixel(int x, int y){
	if(x >= 0 && x < 128 && y >= 0 && y < 64){
    140c:	80 38       	cpi	r24, 0x80	; 128
    140e:	91 05       	cpc	r25, r1
    1410:	30 f5       	brcc	.+76     	; 0x145e <sram_pixel+0x52>
    1412:	60 34       	cpi	r22, 0x40	; 64
    1414:	71 05       	cpc	r23, r1
    1416:	30 f5       	brcc	.+76     	; 0x1464 <sram_pixel+0x58>
		sram_write_or((y/8),x,(1<<(y%8)));
    1418:	9b 01       	movw	r18, r22
    141a:	27 70       	andi	r18, 0x07	; 7
    141c:	30 78       	andi	r19, 0x80	; 128
    141e:	33 23       	and	r19, r19
    1420:	34 f4       	brge	.+12     	; 0x142e <sram_pixel+0x22>
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	31 09       	sbc	r19, r1
    1426:	28 6f       	ori	r18, 0xF8	; 248
    1428:	3f 6f       	ori	r19, 0xFF	; 255
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <sram_pixel+0x2c>
    1434:	44 0f       	add	r20, r20
    1436:	55 1f       	adc	r21, r21
    1438:	2a 95       	dec	r18
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <sram_pixel+0x28>
    143c:	fb 01       	movw	r30, r22
    143e:	ff 23       	and	r31, r31
    1440:	0c f4       	brge	.+2      	; 0x1444 <sram_pixel+0x38>
    1442:	37 96       	adiw	r30, 0x07	; 7
    1444:	bc 01       	movw	r22, r24
    1446:	cf 01       	movw	r24, r30
    1448:	95 95       	asr	r25
    144a:	87 95       	ror	r24
    144c:	95 95       	asr	r25
    144e:	87 95       	ror	r24
    1450:	95 95       	asr	r25
    1452:	87 95       	ror	r24
    1454:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sram_write_or>
		return 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	08 95       	ret
	}
	return 0;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	08 95       	ret
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
}
    1468:	08 95       	ret

0000146a <sram_draw_line>:

void sram_draw_line(int x0, int y0, int x1, int y1){
    146a:	2f 92       	push	r2
    146c:	3f 92       	push	r3
    146e:	4f 92       	push	r4
    1470:	5f 92       	push	r5
    1472:	6f 92       	push	r6
    1474:	7f 92       	push	r7
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	60 97       	sbiw	r28, 0x10	; 16
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	1c 01       	movw	r2, r24
    14a0:	7a 87       	std	Y+10, r23	; 0x0a
    14a2:	69 87       	std	Y+9, r22	; 0x09
    14a4:	5c 87       	std	Y+12, r21	; 0x0c
    14a6:	4b 87       	std	Y+11, r20	; 0x0b
    14a8:	38 87       	std	Y+8, r19	; 0x08
    14aa:	2f 83       	std	Y+7, r18	; 0x07
	if(x0 > x1){
    14ac:	48 17       	cp	r20, r24
    14ae:	59 07       	cpc	r21, r25
    14b0:	0c f4       	brge	.+2      	; 0x14b4 <sram_draw_line+0x4a>
    14b2:	be c0       	rjmp	.+380    	; 0x1630 <sram_draw_line+0x1c6>
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
    14b4:	84 17       	cp	r24, r20
    14b6:	95 07       	cpc	r25, r21
    14b8:	09 f4       	brne	.+2      	; 0x14bc <sram_draw_line+0x52>
    14ba:	93 c0       	rjmp	.+294    	; 0x15e2 <sram_draw_line+0x178>
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    14bc:	b9 01       	movw	r22, r18
    14be:	29 85       	ldd	r18, Y+9	; 0x09
    14c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c2:	62 1b       	sub	r22, r18
    14c4:	73 0b       	sbc	r23, r19
    14c6:	88 27       	eor	r24, r24
    14c8:	77 fd       	sbrc	r23, 7
    14ca:	80 95       	com	r24
    14cc:	98 2f       	mov	r25, r24
    14ce:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
    14d2:	6b 01       	movw	r12, r22
    14d4:	7c 01       	movw	r14, r24
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	62 19       	sub	r22, r2
    14dc:	73 09       	sbc	r23, r3
    14de:	88 27       	eor	r24, r24
    14e0:	77 fd       	sbrc	r23, 7
    14e2:	80 95       	com	r24
    14e4:	98 2f       	mov	r25, r24
    14e6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	c7 01       	movw	r24, r14
    14f0:	b6 01       	movw	r22, r12
    14f2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__divsf3>
    14f6:	6b 83       	std	Y+3, r22	; 0x03
    14f8:	7c 83       	std	Y+4, r23	; 0x04
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	9e 83       	std	Y+6, r25	; 0x06
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
		for(double x = x0; x < x1; x += 0.1){
    14fe:	b1 01       	movw	r22, r2
    1500:	88 27       	eor	r24, r24
    1502:	77 fd       	sbrc	r23, 7
    1504:	80 95       	com	r24
    1506:	98 2f       	mov	r25, r24
    1508:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
    150c:	69 83       	std	Y+1, r22	; 0x01
    150e:	7a 83       	std	Y+2, r23	; 0x02
    1510:	e8 2e       	mov	r14, r24
    1512:	f9 2e       	mov	r15, r25
    1514:	eb 85       	ldd	r30, Y+11	; 0x0b
    1516:	fc 85       	ldd	r31, Y+12	; 0x0c
    1518:	bf 01       	movw	r22, r30
    151a:	88 27       	eor	r24, r24
    151c:	77 fd       	sbrc	r23, 7
    151e:	80 95       	com	r24
    1520:	98 2f       	mov	r25, r24
    1522:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
    1526:	4b 01       	movw	r8, r22
    1528:	5c 01       	movw	r10, r24
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	69 81       	ldd	r22, Y+1	; 0x01
    1530:	7a 81       	ldd	r23, Y+2	; 0x02
    1532:	8e 2d       	mov	r24, r14
    1534:	9f 2d       	mov	r25, r15
    1536:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__cmpsf2>
    153a:	88 23       	and	r24, r24
    153c:	0c f0       	brlt	.+2      	; 0x1540 <sram_draw_line+0xd6>
    153e:	51 c0       	rjmp	.+162    	; 0x15e2 <sram_draw_line+0x178>
    1540:	19 81       	ldd	r17, Y+1	; 0x01
    1542:	ca 80       	ldd	r12, Y+2	; 0x02
    1544:	0f 2d       	mov	r16, r15
			sram_pixel(x,(gradient*(x-x0))+y0);
    1546:	29 85       	ldd	r18, Y+9	; 0x09
    1548:	3a 85       	ldd	r19, Y+10	; 0x0a
    154a:	29 01       	movw	r4, r18
    154c:	66 24       	eor	r6, r6
    154e:	57 fc       	sbrc	r5, 7
    1550:	60 94       	com	r6
    1552:	76 2c       	mov	r7, r6
    1554:	3e 86       	std	Y+14, r3	; 0x0e
    1556:	2d 86       	std	Y+13, r2	; 0x0d
    1558:	2e 2c       	mov	r2, r14
    155a:	3f 2c       	mov	r3, r15
    155c:	c8 8a       	std	Y+16, r12	; 0x10
    155e:	ef 86       	std	Y+15, r14	; 0x0f
    1560:	29 81       	ldd	r18, Y+1	; 0x01
    1562:	3a 81       	ldd	r19, Y+2	; 0x02
    1564:	42 2d       	mov	r20, r2
    1566:	53 2d       	mov	r21, r3
    1568:	61 2f       	mov	r22, r17
    156a:	78 89       	ldd	r23, Y+16	; 0x10
    156c:	8f 85       	ldd	r24, Y+15	; 0x0f
    156e:	90 2f       	mov	r25, r16
    1570:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__subsf3>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	4d 81       	ldd	r20, Y+5	; 0x05
    157a:	5e 81       	ldd	r21, Y+6	; 0x06
    157c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3>
    1580:	6b 01       	movw	r12, r22
    1582:	7c 01       	movw	r14, r24
    1584:	c3 01       	movw	r24, r6
    1586:	b2 01       	movw	r22, r4
    1588:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
    158c:	9b 01       	movw	r18, r22
    158e:	ac 01       	movw	r20, r24
    1590:	c7 01       	movw	r24, r14
    1592:	b6 01       	movw	r22, r12
    1594:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__addsf3>
    1598:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__fixsfsi>
    159c:	6b 01       	movw	r12, r22
    159e:	7c 01       	movw	r14, r24
    15a0:	61 2f       	mov	r22, r17
    15a2:	78 89       	ldd	r23, Y+16	; 0x10
    15a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a6:	90 2f       	mov	r25, r16
    15a8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__fixsfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	b6 01       	movw	r22, r12
    15b2:	0e 94 06 0a 	call	0x140c	; 0x140c <sram_pixel>
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
	
	
	
	if(x0 != x1){//CANT DIVIDE BY ZERO!
		for(double x = x0; x < x1; x += 0.1){
    15b6:	2d ec       	ldi	r18, 0xCD	; 205
    15b8:	3c ec       	ldi	r19, 0xCC	; 204
    15ba:	4c ec       	ldi	r20, 0xCC	; 204
    15bc:	5d e3       	ldi	r21, 0x3D	; 61
    15be:	61 2f       	mov	r22, r17
    15c0:	78 89       	ldd	r23, Y+16	; 0x10
    15c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c4:	90 2f       	mov	r25, r16
    15c6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__addsf3>
    15ca:	16 2f       	mov	r17, r22
    15cc:	78 8b       	std	Y+16, r23	; 0x10
    15ce:	8f 87       	std	Y+15, r24	; 0x0f
    15d0:	09 2f       	mov	r16, r25
    15d2:	a5 01       	movw	r20, r10
    15d4:	94 01       	movw	r18, r8
    15d6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__cmpsf2>
    15da:	88 23       	and	r24, r24
    15dc:	0c f2       	brlt	.-126    	; 0x1560 <sram_draw_line+0xf6>
    15de:	2d 84       	ldd	r2, Y+13	; 0x0d
    15e0:	3e 84       	ldd	r3, Y+14	; 0x0e
			sram_pixel(x,(gradient*(x-x0))+y0);
		}
	}
	
	if(y0 > y1){//rearranging after size
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	ef 81       	ldd	r30, Y+7	; 0x07
    15e8:	f8 85       	ldd	r31, Y+8	; 0x08
    15ea:	e8 17       	cp	r30, r24
    15ec:	f9 07       	cpc	r31, r25
    15ee:	34 f4       	brge	.+12     	; 0x15fc <sram_draw_line+0x192>
    15f0:	99 85       	ldd	r25, Y+9	; 0x09
    15f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f4:	fa 87       	std	Y+10, r31	; 0x0a
    15f6:	e9 87       	std	Y+9, r30	; 0x09
    15f8:	9f 83       	std	Y+7, r25	; 0x07
    15fa:	88 87       	std	Y+8, r24	; 0x08
		y1 = y0;
		y0 = temp_val;
	}
	
	
	if(x0 == x1){//f we were to divide by zero, the lines straight uppward woild not be drawn. This fixes that
    15fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    15fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    1600:	22 16       	cp	r2, r18
    1602:	33 06       	cpc	r3, r19
    1604:	09 f0       	breq	.+2      	; 0x1608 <sram_draw_line+0x19e>
    1606:	46 c0       	rjmp	.+140    	; 0x1694 <sram_draw_line+0x22a>
		for (uint8_t y = y0; y < y1; y++)
    1608:	f9 84       	ldd	r15, Y+9	; 0x09
    160a:	69 85       	ldd	r22, Y+9	; 0x09
    160c:	7a 85       	ldd	r23, Y+10	; 0x0a
    160e:	77 27       	eor	r23, r23
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	68 17       	cp	r22, r24
    1616:	79 07       	cpc	r23, r25
    1618:	ec f5       	brge	.+122    	; 0x1694 <sram_draw_line+0x22a>
    161a:	8c 01       	movw	r16, r24
		{
			sram_pixel(x0,y);
    161c:	c1 01       	movw	r24, r2
    161e:	0e 94 06 0a 	call	0x140c	; 0x140c <sram_pixel>
		y0 = temp_val;
	}
	
	
	if(x0 == x1){//f we were to divide by zero, the lines straight uppward woild not be drawn. This fixes that
		for (uint8_t y = y0; y < y1; y++)
    1622:	f3 94       	inc	r15
    1624:	6f 2d       	mov	r22, r15
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	60 17       	cp	r22, r16
    162a:	71 07       	cpc	r23, r17
    162c:	bc f3       	brlt	.-18     	; 0x161c <sram_draw_line+0x1b2>
    162e:	32 c0       	rjmp	.+100    	; 0x1694 <sram_draw_line+0x22a>
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	ef 81       	ldd	r30, Y+7	; 0x07
    1636:	f8 85       	ldd	r31, Y+8	; 0x08
    1638:	6e 1b       	sub	r22, r30
    163a:	7f 0b       	sbc	r23, r31
    163c:	88 27       	eor	r24, r24
    163e:	77 fd       	sbrc	r23, 7
    1640:	80 95       	com	r24
    1642:	98 2f       	mov	r25, r24
    1644:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
    1648:	6b 01       	movw	r12, r22
    164a:	7c 01       	movw	r14, r24
    164c:	b1 01       	movw	r22, r2
    164e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1650:	3c 85       	ldd	r19, Y+12	; 0x0c
    1652:	62 1b       	sub	r22, r18
    1654:	73 0b       	sbc	r23, r19
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__divsf3>
    166e:	6b 83       	std	Y+3, r22	; 0x03
    1670:	7c 83       	std	Y+4, r23	; 0x04
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	99 85       	ldd	r25, Y+9	; 0x09
    1678:	8a 85       	ldd	r24, Y+10	; 0x0a
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
		y0 = temp_val;
    167a:	ef 81       	ldd	r30, Y+7	; 0x07
    167c:	f8 85       	ldd	r31, Y+8	; 0x08
    167e:	fa 87       	std	Y+10, r31	; 0x0a
    1680:	e9 87       	std	Y+9, r30	; 0x09
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
		temp_val = y1;
		y1 = y0;
    1682:	9f 83       	std	Y+7, r25	; 0x07
    1684:	88 87       	std	Y+8, r24	; 0x08
		y0 = temp_val;
	}
	double gradient = ((double)(y1-y0)/(double)(x1-x0));	
    1686:	92 2d       	mov	r25, r2
    1688:	83 2d       	mov	r24, r3

void sram_draw_line(int x0, int y0, int x1, int y1){
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
		x0 = temp_val;
    168a:	2b 84       	ldd	r2, Y+11	; 0x0b
    168c:	3c 84       	ldd	r3, Y+12	; 0x0c
}

void sram_draw_line(int x0, int y0, int x1, int y1){
	if(x0 > x1){
		int temp_val = x1;
		x1 = x0;
    168e:	9b 87       	std	Y+11, r25	; 0x0b
    1690:	8c 87       	std	Y+12, r24	; 0x0c
    1692:	35 cf       	rjmp	.-406    	; 0x14fe <sram_draw_line+0x94>
		for (uint8_t y = y0; y < y1; y++)
		{
			sram_pixel(x0,y);
		}
	}
}
    1694:	60 96       	adiw	r28, 0x10	; 16
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	3f 90       	pop	r3
    16c2:	2f 90       	pop	r2
    16c4:	08 95       	ret

000016c6 <write_line>:
	for(unsigned int line = 0; line < 8; line++){//Sends the data from the sram to the oled
		write_line(line);
	}
}

void write_line(uint8_t line){
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
	oled_goto_line(line);
    16ca:	c8 2f       	mov	r28, r24
    16cc:	d0 e0       	ldi	r29, 0x00	; 0
    16ce:	ce 01       	movw	r24, r28
    16d0:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	for(unsigned int k = 0; k < 128; k++){
		write_d(ext_ram[line*128 + k]);
    16d4:	ce 01       	movw	r24, r28
    16d6:	96 95       	lsr	r25
    16d8:	98 2f       	mov	r25, r24
    16da:	88 27       	eor	r24, r24
    16dc:	97 95       	ror	r25
    16de:	87 95       	ror	r24
    16e0:	9c 01       	movw	r18, r24
    16e2:	20 58       	subi	r18, 0x80	; 128
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	e0 91 06 01 	lds	r30, 0x0106
    16ea:	f0 91 07 01 	lds	r31, 0x0107
    16ee:	e8 0f       	add	r30, r24
    16f0:	f9 1f       	adc	r31, r25
    16f2:	40 81       	ld	r20, Z
}


void write_d(uint8_t data)
{
	*oled_data = data;
    16f4:	e0 91 08 01 	lds	r30, 0x0108
    16f8:	f0 91 09 01 	lds	r31, 0x0109
    16fc:	40 83       	st	Z, r20
    16fe:	01 96       	adiw	r24, 0x01	; 1
	}
}

void write_line(uint8_t line){
	oled_goto_line(line);
	for(unsigned int k = 0; k < 128; k++){
    1700:	82 17       	cp	r24, r18
    1702:	93 07       	cpc	r25, r19
    1704:	81 f7       	brne	.-32     	; 0x16e6 <write_line+0x20>
		write_d(ext_ram[line*128 + k]);
	}
}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <write_screen>:
		sram_pixel(-x+x0,y0+sqrt((pow(radius,2)-pow(x,2))));
	}
}


void write_screen(void){	
    170c:	cf 93       	push	r28
    170e:	c0 e0       	ldi	r28, 0x00	; 0
	for(unsigned int line = 0; line < 8; line++){//Sends the data from the sram to the oled
		write_line(line);
    1710:	8c 2f       	mov	r24, r28
    1712:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <write_line>
    1716:	cf 5f       	subi	r28, 0xFF	; 255
	}
}


void write_screen(void){	
	for(unsigned int line = 0; line < 8; line++){//Sends the data from the sram to the oled
    1718:	c8 30       	cpi	r28, 0x08	; 8
    171a:	d1 f7       	brne	.-12     	; 0x1710 <write_screen+0x4>
		write_line(line);
	}
}
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <sram_init>:
	}else{
		return 0;
	}
}

void sram_init(void){
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
    172a:	9c 01       	movw	r18, r24
    172c:	24 0f       	add	r18, r20
    172e:	35 1f       	adc	r19, r21
    1730:	e0 91 06 01 	lds	r30, 0x0106
    1734:	f0 91 07 01 	lds	r31, 0x0107
    1738:	e2 0f       	add	r30, r18
    173a:	f3 1f       	adc	r31, r19
    173c:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	80 38       	cpi	r24, 0x80	; 128
    1742:	91 05       	cpc	r25, r1
    1744:	91 f7       	brne	.-28     	; 0x172a <sram_init+0xa>
    1746:	40 58       	subi	r20, 0x80	; 128
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
    174a:	41 15       	cp	r20, r1
    174c:	84 e0       	ldi	r24, 0x04	; 4
    174e:	58 07       	cpc	r21, r24
    1750:	19 f0       	breq	.+6      	; 0x1758 <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
    1752:	87 2f       	mov	r24, r23
    1754:	96 2f       	mov	r25, r22
    1756:	e9 cf       	rjmp	.-46     	; 0x172a <sram_init+0xa>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
		}
	}
	write_screen();
    1758:	0e 94 86 0b 	call	0x170c	; 0x170c <write_screen>
    175c:	08 95       	ret

0000175e <sram_clear_line>:
	for(unsigned int k = 0; k < 128; k++){
		write_d(ext_ram[line*128 + k]);
	}
}

void sram_clear_line(uint8_t line){
    175e:	cf 93       	push	r28
    1760:	c8 2f       	mov	r28, r24
	oled_goto_line(line);
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 b0 08 	call	0x1160	; 0x1160 <oled_goto_line>
	if(line < 8){
    1768:	c8 30       	cpi	r28, 0x08	; 8
    176a:	00 f5       	brcc	.+64     	; 0x17ac <sram_clear_line+0x4e>
		for(unsigned int i = 0; i < 128; i++){
			ext_ram[line*128 + i] = 0b00000000;
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	c8 9f       	mul	r28, r24
    1770:	90 01       	movw	r18, r0
    1772:	11 24       	eor	r1, r1
    1774:	a9 01       	movw	r20, r18
    1776:	40 58       	subi	r20, 0x80	; 128
    1778:	5f 4f       	sbci	r21, 0xFF	; 255
    177a:	e0 91 06 01 	lds	r30, 0x0106
    177e:	f0 91 07 01 	lds	r31, 0x0107
    1782:	e2 0f       	add	r30, r18
    1784:	f3 1f       	adc	r31, r19
    1786:	10 82       	st	Z, r1
    1788:	2f 5f       	subi	r18, 0xFF	; 255
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
}

void sram_clear_line(uint8_t line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    178c:	24 17       	cp	r18, r20
    178e:	35 07       	cpc	r19, r21
    1790:	a1 f7       	brne	.-24     	; 0x177a <sram_clear_line+0x1c>
			ext_ram[line*128 + i] = 0b00000000;
		}
		edited |= 1 << line;
    1792:	21 e0       	ldi	r18, 0x01	; 1
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	c9 01       	movw	r24, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <sram_clear_line+0x40>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	ca 95       	dec	r28
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <sram_clear_line+0x3c>
    17a2:	90 91 ce 02 	lds	r25, 0x02CE
    17a6:	89 2b       	or	r24, r25
    17a8:	80 93 ce 02 	sts	0x02CE, r24
	}
}
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <sram_scroll_data>:

uint8_t tempdata[8];
void sram_scroll_data(uint8_t line, uint8_t scroll){
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	d8 2f       	mov	r29, r24
    17bc:	c6 2f       	mov	r28, r22
	if(scroll > 8){
    17be:	69 30       	cpi	r22, 0x09	; 9
    17c0:	20 f0       	brcs	.+8      	; 0x17ca <sram_scroll_data+0x1a>
		scroll -= 8;
    17c2:	c8 50       	subi	r28, 0x08	; 8
		sram_scroll_data(line,scroll);
    17c4:	6c 2f       	mov	r22, r28
    17c6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <sram_scroll_data>
	}
	for (uint8_t s = 0; s < scroll; s++){
    17ca:	cc 23       	and	r28, r28
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <sram_scroll_data+0x20>
    17ce:	5c c0       	rjmp	.+184    	; 0x1888 <sram_scroll_data+0xd8>
    17d0:	a0 91 06 01 	lds	r26, 0x0106
    17d4:	b0 91 07 01 	lds	r27, 0x0107
    17d8:	20 e8       	ldi	r18, 0x80	; 128
    17da:	d2 9f       	mul	r29, r18
    17dc:	a0 0d       	add	r26, r0
    17de:	b1 1d       	adc	r27, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	8d e2       	ldi	r24, 0x2D	; 45
    17e4:	93 e0       	ldi	r25, 0x03	; 3
		tempdata[s] = ext_ram[line*128 + s];
    17e6:	fc 01       	movw	r30, r24
    17e8:	2d 91       	ld	r18, X+
    17ea:	21 93       	st	Z+, r18
    17ec:	2e 2f       	mov	r18, r30
    17ee:	28 1b       	sub	r18, r24
void sram_scroll_data(uint8_t line, uint8_t scroll){
	if(scroll > 8){
		scroll -= 8;
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
    17f0:	2c 17       	cp	r18, r28
    17f2:	d0 f3       	brcs	.-12     	; 0x17e8 <sram_scroll_data+0x38>
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    17f4:	8c 2f       	mov	r24, r28
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	60 e8       	ldi	r22, 0x80	; 128
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	68 1b       	sub	r22, r24
    17fe:	79 0b       	sbc	r23, r25
    1800:	16 16       	cp	r1, r22
    1802:	17 06       	cpc	r1, r23
    1804:	0c f4       	brge	.+2      	; 0x1808 <sram_scroll_data+0x58>
    1806:	44 c0       	rjmp	.+136    	; 0x1890 <sram_scroll_data+0xe0>
    1808:	18 c0       	rjmp	.+48     	; 0x183a <sram_scroll_data+0x8a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    180a:	40 91 06 01 	lds	r20, 0x0106
    180e:	50 91 07 01 	lds	r21, 0x0107
    1812:	2e 0d       	add	r18, r14
    1814:	3f 1d       	adc	r19, r15
    1816:	fa 01       	movw	r30, r20
    1818:	e2 0f       	add	r30, r18
    181a:	f3 1f       	adc	r31, r19
    181c:	28 0f       	add	r18, r24
    181e:	39 1f       	adc	r19, r25
    1820:	42 0f       	add	r20, r18
    1822:	53 1f       	adc	r21, r19
    1824:	da 01       	movw	r26, r20
    1826:	2c 91       	ld	r18, X
    1828:	20 83       	st	Z, r18
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    182a:	1f 5f       	subi	r17, 0xFF	; 255
    182c:	21 2f       	mov	r18, r17
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	26 17       	cp	r18, r22
    1832:	37 07       	cpc	r19, r23
    1834:	54 f3       	brlt	.-44     	; 0x180a <sram_scroll_data+0x5a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    1836:	cc 23       	and	r28, r28
    1838:	d1 f0       	breq	.+52     	; 0x186e <sram_scroll_data+0xbe>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
    183a:	b0 e8       	ldi	r27, 0x80	; 128
    183c:	db 9f       	mul	r29, r27
    183e:	90 01       	movw	r18, r0
    1840:	11 24       	eor	r1, r1
    1842:	28 1b       	sub	r18, r24
    1844:	39 0b       	sbc	r19, r25
    1846:	4d e2       	ldi	r20, 0x2D	; 45
    1848:	53 e0       	ldi	r21, 0x03	; 3
    184a:	fa 01       	movw	r30, r20
    184c:	2e 5a       	subi	r18, 0xAE	; 174
    184e:	32 40       	sbci	r19, 0x02	; 2
    1850:	c9 01       	movw	r24, r18
    1852:	8e 0f       	add	r24, r30
    1854:	9f 1f       	adc	r25, r31
    1856:	a0 91 06 01 	lds	r26, 0x0106
    185a:	b0 91 07 01 	lds	r27, 0x0107
    185e:	a8 0f       	add	r26, r24
    1860:	b9 1f       	adc	r27, r25
    1862:	81 91       	ld	r24, Z+
    1864:	8c 93       	st	X, r24
    1866:	8e 2f       	mov	r24, r30
    1868:	84 1b       	sub	r24, r20
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    186a:	8c 17       	cp	r24, r28
    186c:	88 f3       	brcs	.-30     	; 0x1850 <sram_scroll_data+0xa0>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <sram_scroll_data+0xc8>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	da 95       	dec	r29
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <sram_scroll_data+0xc4>
    187c:	d0 91 ce 02 	lds	r29, 0x02CE
    1880:	8d 2b       	or	r24, r29
    1882:	80 93 ce 02 	sts	0x02CE, r24
    1886:	0c c0       	rjmp	.+24     	; 0x18a0 <sram_scroll_data+0xf0>
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    1888:	60 e8       	ldi	r22, 0x80	; 128
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    1890:	20 e8       	ldi	r18, 0x80	; 128
    1892:	d2 9f       	mul	r29, r18
    1894:	70 01       	movw	r14, r0
    1896:	11 24       	eor	r1, r1
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	b5 cf       	rjmp	.-150    	; 0x180a <sram_scroll_data+0x5a>
	}
	for (uint8_t s = 0; s < scroll; s++){
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
}
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	08 95       	ret

000018ac <sram_draw_rectangle>:
	sram_draw_line(x1,y1,x2,y2);
	sram_draw_line(x2,y2,x0,y0);
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	c4 2f       	mov	r28, r20
	sram_draw_line(x0,y0,x0,y1);
    18be:	e2 2e       	mov	r14, r18
    18c0:	f1 2c       	mov	r15, r1
    18c2:	06 2f       	mov	r16, r22
    18c4:	10 e0       	ldi	r17, 0x00	; 0
    18c6:	c8 2e       	mov	r12, r24
    18c8:	d1 2c       	mov	r13, r1
    18ca:	97 01       	movw	r18, r14
    18cc:	a6 01       	movw	r20, r12
    18ce:	b8 01       	movw	r22, r16
    18d0:	c6 01       	movw	r24, r12
    18d2:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x0,y0,x1,y0);
    18d6:	d0 e0       	ldi	r29, 0x00	; 0
    18d8:	98 01       	movw	r18, r16
    18da:	ae 01       	movw	r20, r28
    18dc:	b8 01       	movw	r22, r16
    18de:	c6 01       	movw	r24, r12
    18e0:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x0,y1,x1,y1);
    18e4:	97 01       	movw	r18, r14
    18e6:	ae 01       	movw	r20, r28
    18e8:	b7 01       	movw	r22, r14
    18ea:	c6 01       	movw	r24, r12
    18ec:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
	sram_draw_line(x1,y0,x1,y1);
    18f0:	97 01       	movw	r18, r14
    18f2:	ae 01       	movw	r20, r28
    18f4:	b8 01       	movw	r22, r16
    18f6:	ce 01       	movw	r24, r28
    18f8:	0e 94 35 0a 	call	0x146a	; 0x146a <sram_draw_line>
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	08 95       	ret

0000190e <SPI_send>:
}


void SPI_send(char data) {
	//Start the transmission
	SPDR = data;
    190e:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
    1910:	77 9b       	sbis	0x0e, 7	; 14
    1912:	fe cf       	rjmp	.-4      	; 0x1910 <SPI_send+0x2>
}
    1914:	08 95       	ret

00001916 <SPI_select>:

	return SPDR;
}

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
    1916:	c4 98       	cbi	0x18, 4	; 24
    1918:	08 95       	ret

0000191a <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
    191a:	c4 9a       	sbi	0x18, 4	; 24
    191c:	08 95       	ret

0000191e <SPI_initialize>:
#define		SPI_MOSI		PB5
#define		SPI_MISO		PB6
#define		SPI_SCK			PB7

void SPI_initialize(void){
	DDRB |=	(1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
    191e:	87 b3       	in	r24, 0x17	; 23
    1920:	80 6b       	ori	r24, 0xB0	; 176
    1922:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << SPI_MISO);
    1924:	be 98       	cbi	0x17, 6	; 23
	//BIT_ON(SPCR,SPIE);		//SPI INTERRUPT ENABLE
	//BIT_OFF(SPCR,DORD);		//transmit the most significant bit first, change to ON if we transmit the Least significant first
	BIT_ON(SPCR,MSTR);		//MASTER/SLAVE SELECT, set to 1 for master, 0 for slave (master wanted)
    1926:	6c 9a       	sbi	0x0d, 4	; 13
	//BIT_ON(SPCR,CPOL);		//CLOCK POLARITY, NO IDEA WHAT WE NEED!!!!!!!!!!!!!
	//BIT_ON(SPCR,CPHA);		//CLOCK PHASE, NO IDEA!!!!!!!!!!!
	//BIT_ON(SPCR,SPR1);		//SPI CLOCK RATE SELECT, BIT 1
	//BIT_ON(SPCR,SPR0);		//SPI CLOCK RATE SELECT, BIT 0
	BIT_ON(SPCR,SPE);		//SPI ENABLE, overrides the normal pins function (we want this)
    1928:	6e 9a       	sbi	0x0d, 6	; 13
	SPSR |= (1 << SPI2X); //ADD COMMENT------------------------------------------------------------------------------------------------------------
    192a:	70 9a       	sbi	0x0e, 0	; 14
	//sei();
	SPI_deselect();
    192c:	0e 94 8d 0c 	call	0x191a	; 0x191a <SPI_deselect>
    1930:	08 95       	ret

00001932 <initialize_timer>:

#include "timer.h"

uint8_t FLAG_refresh_screen;

void initialize_timer(uint8_t fps){	//	Function for initilization of the timers
    1932:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    1934:	89 b7       	in	r24, 0x39	; 57
    1936:	81 60       	ori	r24, 0x01	; 1
    1938:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    193a:	83 b7       	in	r24, 0x33	; 51
    193c:	8d 60       	ori	r24, 0x0D	; 13
    193e:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	60 ec       	ldi	r22, 0xC0	; 192
    1948:	72 e1       	ldi	r23, 0x12	; 18
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__divmodsi4>
    1952:	21 bf       	out	0x31, r18	; 49
	FLAG_refresh_screen = 1;//since we are initializing we want to refresh the page
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 39 03 	sts	0x0339, r24
    195a:	08 95       	ret

0000195c <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	return FLAG_refresh_screen;
}
    195c:	80 91 39 03 	lds	r24, 0x0339
    1960:	08 95       	ret

00001962 <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_refresh_screen = 0;
    1962:	10 92 39 03 	sts	0x0339, r1
    1966:	08 95       	ret

00001968 <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	8f 93       	push	r24
	FLAG_refresh_screen = 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	80 93 39 03 	sts	0x0339, r24
}
    197a:	8f 91       	pop	r24
    197c:	0f 90       	pop	r0
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	0f 90       	pop	r0
    1982:	1f 90       	pop	r1
    1984:	18 95       	reti

00001986 <send_UART>:
 */ 
#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );
    1986:	5d 9b       	sbis	0x0b, 5	; 11
    1988:	fe cf       	rjmp	.-4      	; 0x1986 <send_UART>
	UDR0 = letter;
    198a:	8c b9       	out	0x0c, r24	; 12
    198c:	08 95       	ret

0000198e <recieve_UART>:
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
}

unsigned int recieve_UART(void){
	while (!(UCSR0A & (1 << RXC0)));
    198e:	5f 9b       	sbis	0x0b, 7	; 11
    1990:	fe cf       	rjmp	.-4      	; 0x198e <recieve_UART>
	return UDR0;
    1992:	8c b1       	in	r24, 0x0c	; 12
}
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	08 95       	ret

00001998 <init_UART>:
	UDR0 = letter;
}

void init_UART(unsigned int ubrr){
	//set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    1998:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
    199a:	89 b9       	out	0x09, r24	; 9
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    199c:	88 e1       	ldi	r24, 0x18	; 24
    199e:	8a b9       	out	0x0a, r24	; 10
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
    19a0:	67 ec       	ldi	r22, 0xC7	; 199
    19a2:	7c e0       	ldi	r23, 0x0C	; 12
    19a4:	83 ec       	ldi	r24, 0xC3	; 195
    19a6:	9c e0       	ldi	r25, 0x0C	; 12
    19a8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <fdevopen>
    19ac:	08 95       	ret

000019ae <__subsf3>:
    19ae:	50 58       	subi	r21, 0x80	; 128

000019b0 <__addsf3>:
    19b0:	bb 27       	eor	r27, r27
    19b2:	aa 27       	eor	r26, r26
    19b4:	0e d0       	rcall	.+28     	; 0x19d2 <__addsf3x>
    19b6:	75 c1       	rjmp	.+746    	; 0x1ca2 <__fp_round>
    19b8:	66 d1       	rcall	.+716    	; 0x1c86 <__fp_pscA>
    19ba:	30 f0       	brcs	.+12     	; 0x19c8 <__addsf3+0x18>
    19bc:	6b d1       	rcall	.+726    	; 0x1c94 <__fp_pscB>
    19be:	20 f0       	brcs	.+8      	; 0x19c8 <__addsf3+0x18>
    19c0:	31 f4       	brne	.+12     	; 0x19ce <__addsf3+0x1e>
    19c2:	9f 3f       	cpi	r25, 0xFF	; 255
    19c4:	11 f4       	brne	.+4      	; 0x19ca <__addsf3+0x1a>
    19c6:	1e f4       	brtc	.+6      	; 0x19ce <__addsf3+0x1e>
    19c8:	5b c1       	rjmp	.+694    	; 0x1c80 <__fp_nan>
    19ca:	0e f4       	brtc	.+2      	; 0x19ce <__addsf3+0x1e>
    19cc:	e0 95       	com	r30
    19ce:	e7 fb       	bst	r30, 7
    19d0:	51 c1       	rjmp	.+674    	; 0x1c74 <__fp_inf>

000019d2 <__addsf3x>:
    19d2:	e9 2f       	mov	r30, r25
    19d4:	77 d1       	rcall	.+750    	; 0x1cc4 <__fp_split3>
    19d6:	80 f3       	brcs	.-32     	; 0x19b8 <__addsf3+0x8>
    19d8:	ba 17       	cp	r27, r26
    19da:	62 07       	cpc	r22, r18
    19dc:	73 07       	cpc	r23, r19
    19de:	84 07       	cpc	r24, r20
    19e0:	95 07       	cpc	r25, r21
    19e2:	18 f0       	brcs	.+6      	; 0x19ea <__addsf3x+0x18>
    19e4:	71 f4       	brne	.+28     	; 0x1a02 <__addsf3x+0x30>
    19e6:	9e f5       	brtc	.+102    	; 0x1a4e <__addsf3x+0x7c>
    19e8:	8f c1       	rjmp	.+798    	; 0x1d08 <__fp_zero>
    19ea:	0e f4       	brtc	.+2      	; 0x19ee <__addsf3x+0x1c>
    19ec:	e0 95       	com	r30
    19ee:	0b 2e       	mov	r0, r27
    19f0:	ba 2f       	mov	r27, r26
    19f2:	a0 2d       	mov	r26, r0
    19f4:	0b 01       	movw	r0, r22
    19f6:	b9 01       	movw	r22, r18
    19f8:	90 01       	movw	r18, r0
    19fa:	0c 01       	movw	r0, r24
    19fc:	ca 01       	movw	r24, r20
    19fe:	a0 01       	movw	r20, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	ff 27       	eor	r31, r31
    1a04:	59 1b       	sub	r21, r25
    1a06:	99 f0       	breq	.+38     	; 0x1a2e <__addsf3x+0x5c>
    1a08:	59 3f       	cpi	r21, 0xF9	; 249
    1a0a:	50 f4       	brcc	.+20     	; 0x1a20 <__addsf3x+0x4e>
    1a0c:	50 3e       	cpi	r21, 0xE0	; 224
    1a0e:	68 f1       	brcs	.+90     	; 0x1a6a <__addsf3x+0x98>
    1a10:	1a 16       	cp	r1, r26
    1a12:	f0 40       	sbci	r31, 0x00	; 0
    1a14:	a2 2f       	mov	r26, r18
    1a16:	23 2f       	mov	r18, r19
    1a18:	34 2f       	mov	r19, r20
    1a1a:	44 27       	eor	r20, r20
    1a1c:	58 5f       	subi	r21, 0xF8	; 248
    1a1e:	f3 cf       	rjmp	.-26     	; 0x1a06 <__addsf3x+0x34>
    1a20:	46 95       	lsr	r20
    1a22:	37 95       	ror	r19
    1a24:	27 95       	ror	r18
    1a26:	a7 95       	ror	r26
    1a28:	f0 40       	sbci	r31, 0x00	; 0
    1a2a:	53 95       	inc	r21
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__addsf3x+0x4e>
    1a2e:	7e f4       	brtc	.+30     	; 0x1a4e <__addsf3x+0x7c>
    1a30:	1f 16       	cp	r1, r31
    1a32:	ba 0b       	sbc	r27, r26
    1a34:	62 0b       	sbc	r22, r18
    1a36:	73 0b       	sbc	r23, r19
    1a38:	84 0b       	sbc	r24, r20
    1a3a:	ba f0       	brmi	.+46     	; 0x1a6a <__addsf3x+0x98>
    1a3c:	91 50       	subi	r25, 0x01	; 1
    1a3e:	a1 f0       	breq	.+40     	; 0x1a68 <__addsf3x+0x96>
    1a40:	ff 0f       	add	r31, r31
    1a42:	bb 1f       	adc	r27, r27
    1a44:	66 1f       	adc	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	88 1f       	adc	r24, r24
    1a4a:	c2 f7       	brpl	.-16     	; 0x1a3c <__addsf3x+0x6a>
    1a4c:	0e c0       	rjmp	.+28     	; 0x1a6a <__addsf3x+0x98>
    1a4e:	ba 0f       	add	r27, r26
    1a50:	62 1f       	adc	r22, r18
    1a52:	73 1f       	adc	r23, r19
    1a54:	84 1f       	adc	r24, r20
    1a56:	48 f4       	brcc	.+18     	; 0x1a6a <__addsf3x+0x98>
    1a58:	87 95       	ror	r24
    1a5a:	77 95       	ror	r23
    1a5c:	67 95       	ror	r22
    1a5e:	b7 95       	ror	r27
    1a60:	f7 95       	ror	r31
    1a62:	9e 3f       	cpi	r25, 0xFE	; 254
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <__addsf3x+0x96>
    1a66:	b3 cf       	rjmp	.-154    	; 0x19ce <__addsf3+0x1e>
    1a68:	93 95       	inc	r25
    1a6a:	88 0f       	add	r24, r24
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <__addsf3x+0x9e>
    1a6e:	99 27       	eor	r25, r25
    1a70:	ee 0f       	add	r30, r30
    1a72:	97 95       	ror	r25
    1a74:	87 95       	ror	r24
    1a76:	08 95       	ret

00001a78 <__cmpsf2>:
    1a78:	d9 d0       	rcall	.+434    	; 0x1c2c <__fp_cmp>
    1a7a:	08 f4       	brcc	.+2      	; 0x1a7e <__cmpsf2+0x6>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	08 95       	ret

00001a80 <__divsf3>:
    1a80:	0c d0       	rcall	.+24     	; 0x1a9a <__divsf3x>
    1a82:	0f c1       	rjmp	.+542    	; 0x1ca2 <__fp_round>
    1a84:	07 d1       	rcall	.+526    	; 0x1c94 <__fp_pscB>
    1a86:	40 f0       	brcs	.+16     	; 0x1a98 <__divsf3+0x18>
    1a88:	fe d0       	rcall	.+508    	; 0x1c86 <__fp_pscA>
    1a8a:	30 f0       	brcs	.+12     	; 0x1a98 <__divsf3+0x18>
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <__divsf3+0x16>
    1a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a90:	19 f0       	breq	.+6      	; 0x1a98 <__divsf3+0x18>
    1a92:	f0 c0       	rjmp	.+480    	; 0x1c74 <__fp_inf>
    1a94:	51 11       	cpse	r21, r1
    1a96:	39 c1       	rjmp	.+626    	; 0x1d0a <__fp_szero>
    1a98:	f3 c0       	rjmp	.+486    	; 0x1c80 <__fp_nan>

00001a9a <__divsf3x>:
    1a9a:	14 d1       	rcall	.+552    	; 0x1cc4 <__fp_split3>
    1a9c:	98 f3       	brcs	.-26     	; 0x1a84 <__divsf3+0x4>

00001a9e <__divsf3_pse>:
    1a9e:	99 23       	and	r25, r25
    1aa0:	c9 f3       	breq	.-14     	; 0x1a94 <__divsf3+0x14>
    1aa2:	55 23       	and	r21, r21
    1aa4:	b1 f3       	breq	.-20     	; 0x1a92 <__divsf3+0x12>
    1aa6:	95 1b       	sub	r25, r21
    1aa8:	55 0b       	sbc	r21, r21
    1aaa:	bb 27       	eor	r27, r27
    1aac:	aa 27       	eor	r26, r26
    1aae:	62 17       	cp	r22, r18
    1ab0:	73 07       	cpc	r23, r19
    1ab2:	84 07       	cpc	r24, r20
    1ab4:	38 f0       	brcs	.+14     	; 0x1ac4 <__divsf3_pse+0x26>
    1ab6:	9f 5f       	subi	r25, 0xFF	; 255
    1ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aba:	22 0f       	add	r18, r18
    1abc:	33 1f       	adc	r19, r19
    1abe:	44 1f       	adc	r20, r20
    1ac0:	aa 1f       	adc	r26, r26
    1ac2:	a9 f3       	breq	.-22     	; 0x1aae <__divsf3_pse+0x10>
    1ac4:	33 d0       	rcall	.+102    	; 0x1b2c <__divsf3_pse+0x8e>
    1ac6:	0e 2e       	mov	r0, r30
    1ac8:	3a f0       	brmi	.+14     	; 0x1ad8 <__divsf3_pse+0x3a>
    1aca:	e0 e8       	ldi	r30, 0x80	; 128
    1acc:	30 d0       	rcall	.+96     	; 0x1b2e <__divsf3_pse+0x90>
    1ace:	91 50       	subi	r25, 0x01	; 1
    1ad0:	50 40       	sbci	r21, 0x00	; 0
    1ad2:	e6 95       	lsr	r30
    1ad4:	00 1c       	adc	r0, r0
    1ad6:	ca f7       	brpl	.-14     	; 0x1aca <__divsf3_pse+0x2c>
    1ad8:	29 d0       	rcall	.+82     	; 0x1b2c <__divsf3_pse+0x8e>
    1ada:	fe 2f       	mov	r31, r30
    1adc:	27 d0       	rcall	.+78     	; 0x1b2c <__divsf3_pse+0x8e>
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	26 17       	cp	r18, r22
    1ae8:	37 07       	cpc	r19, r23
    1aea:	48 07       	cpc	r20, r24
    1aec:	ab 07       	cpc	r26, r27
    1aee:	b0 e8       	ldi	r27, 0x80	; 128
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <__divsf3_pse+0x56>
    1af2:	bb 0b       	sbc	r27, r27
    1af4:	80 2d       	mov	r24, r0
    1af6:	bf 01       	movw	r22, r30
    1af8:	ff 27       	eor	r31, r31
    1afa:	93 58       	subi	r25, 0x83	; 131
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	2a f0       	brmi	.+10     	; 0x1b0a <__divsf3_pse+0x6c>
    1b00:	9e 3f       	cpi	r25, 0xFE	; 254
    1b02:	51 05       	cpc	r21, r1
    1b04:	68 f0       	brcs	.+26     	; 0x1b20 <__divsf3_pse+0x82>
    1b06:	b6 c0       	rjmp	.+364    	; 0x1c74 <__fp_inf>
    1b08:	00 c1       	rjmp	.+512    	; 0x1d0a <__fp_szero>
    1b0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0c:	ec f3       	brlt	.-6      	; 0x1b08 <__divsf3_pse+0x6a>
    1b0e:	98 3e       	cpi	r25, 0xE8	; 232
    1b10:	dc f3       	brlt	.-10     	; 0x1b08 <__divsf3_pse+0x6a>
    1b12:	86 95       	lsr	r24
    1b14:	77 95       	ror	r23
    1b16:	67 95       	ror	r22
    1b18:	b7 95       	ror	r27
    1b1a:	f7 95       	ror	r31
    1b1c:	9f 5f       	subi	r25, 0xFF	; 255
    1b1e:	c9 f7       	brne	.-14     	; 0x1b12 <__divsf3_pse+0x74>
    1b20:	88 0f       	add	r24, r24
    1b22:	91 1d       	adc	r25, r1
    1b24:	96 95       	lsr	r25
    1b26:	87 95       	ror	r24
    1b28:	97 f9       	bld	r25, 7
    1b2a:	08 95       	ret
    1b2c:	e1 e0       	ldi	r30, 0x01	; 1
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	bb 1f       	adc	r27, r27
    1b36:	62 17       	cp	r22, r18
    1b38:	73 07       	cpc	r23, r19
    1b3a:	84 07       	cpc	r24, r20
    1b3c:	ba 07       	cpc	r27, r26
    1b3e:	20 f0       	brcs	.+8      	; 0x1b48 <__divsf3_pse+0xaa>
    1b40:	62 1b       	sub	r22, r18
    1b42:	73 0b       	sbc	r23, r19
    1b44:	84 0b       	sbc	r24, r20
    1b46:	ba 0b       	sbc	r27, r26
    1b48:	ee 1f       	adc	r30, r30
    1b4a:	88 f7       	brcc	.-30     	; 0x1b2e <__divsf3_pse+0x90>
    1b4c:	e0 95       	com	r30
    1b4e:	08 95       	ret

00001b50 <__fixsfsi>:
    1b50:	04 d0       	rcall	.+8      	; 0x1b5a <__fixunssfsi>
    1b52:	68 94       	set
    1b54:	b1 11       	cpse	r27, r1
    1b56:	d9 c0       	rjmp	.+434    	; 0x1d0a <__fp_szero>
    1b58:	08 95       	ret

00001b5a <__fixunssfsi>:
    1b5a:	bc d0       	rcall	.+376    	; 0x1cd4 <__fp_splitA>
    1b5c:	88 f0       	brcs	.+34     	; 0x1b80 <__fixunssfsi+0x26>
    1b5e:	9f 57       	subi	r25, 0x7F	; 127
    1b60:	90 f0       	brcs	.+36     	; 0x1b86 <__fixunssfsi+0x2c>
    1b62:	b9 2f       	mov	r27, r25
    1b64:	99 27       	eor	r25, r25
    1b66:	b7 51       	subi	r27, 0x17	; 23
    1b68:	a0 f0       	brcs	.+40     	; 0x1b92 <__fixunssfsi+0x38>
    1b6a:	d1 f0       	breq	.+52     	; 0x1ba0 <__fixunssfsi+0x46>
    1b6c:	66 0f       	add	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	1a f0       	brmi	.+6      	; 0x1b7c <__fixunssfsi+0x22>
    1b76:	ba 95       	dec	r27
    1b78:	c9 f7       	brne	.-14     	; 0x1b6c <__fixunssfsi+0x12>
    1b7a:	12 c0       	rjmp	.+36     	; 0x1ba0 <__fixunssfsi+0x46>
    1b7c:	b1 30       	cpi	r27, 0x01	; 1
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <__fixunssfsi+0x46>
    1b80:	c3 d0       	rcall	.+390    	; 0x1d08 <__fp_zero>
    1b82:	b1 e0       	ldi	r27, 0x01	; 1
    1b84:	08 95       	ret
    1b86:	c0 c0       	rjmp	.+384    	; 0x1d08 <__fp_zero>
    1b88:	67 2f       	mov	r22, r23
    1b8a:	78 2f       	mov	r23, r24
    1b8c:	88 27       	eor	r24, r24
    1b8e:	b8 5f       	subi	r27, 0xF8	; 248
    1b90:	39 f0       	breq	.+14     	; 0x1ba0 <__fixunssfsi+0x46>
    1b92:	b9 3f       	cpi	r27, 0xF9	; 249
    1b94:	cc f3       	brlt	.-14     	; 0x1b88 <__fixunssfsi+0x2e>
    1b96:	86 95       	lsr	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b3 95       	inc	r27
    1b9e:	d9 f7       	brne	.-10     	; 0x1b96 <__fixunssfsi+0x3c>
    1ba0:	3e f4       	brtc	.+14     	; 0x1bb0 <__fixunssfsi+0x56>
    1ba2:	90 95       	com	r25
    1ba4:	80 95       	com	r24
    1ba6:	70 95       	com	r23
    1ba8:	61 95       	neg	r22
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	8f 4f       	sbci	r24, 0xFF	; 255
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	08 95       	ret

00001bb2 <__floatunsisf>:
    1bb2:	e8 94       	clt
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <__floatsisf+0x12>

00001bb6 <__floatsisf>:
    1bb6:	97 fb       	bst	r25, 7
    1bb8:	3e f4       	brtc	.+14     	; 0x1bc8 <__floatsisf+0x12>
    1bba:	90 95       	com	r25
    1bbc:	80 95       	com	r24
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	99 23       	and	r25, r25
    1bca:	a9 f0       	breq	.+42     	; 0x1bf6 <__floatsisf+0x40>
    1bcc:	f9 2f       	mov	r31, r25
    1bce:	96 e9       	ldi	r25, 0x96	; 150
    1bd0:	bb 27       	eor	r27, r27
    1bd2:	93 95       	inc	r25
    1bd4:	f6 95       	lsr	r31
    1bd6:	87 95       	ror	r24
    1bd8:	77 95       	ror	r23
    1bda:	67 95       	ror	r22
    1bdc:	b7 95       	ror	r27
    1bde:	f1 11       	cpse	r31, r1
    1be0:	f8 cf       	rjmp	.-16     	; 0x1bd2 <__floatsisf+0x1c>
    1be2:	fa f4       	brpl	.+62     	; 0x1c22 <__floatsisf+0x6c>
    1be4:	bb 0f       	add	r27, r27
    1be6:	11 f4       	brne	.+4      	; 0x1bec <__floatsisf+0x36>
    1be8:	60 ff       	sbrs	r22, 0
    1bea:	1b c0       	rjmp	.+54     	; 0x1c22 <__floatsisf+0x6c>
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	16 c0       	rjmp	.+44     	; 0x1c22 <__floatsisf+0x6c>
    1bf6:	88 23       	and	r24, r24
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <__floatsisf+0x48>
    1bfa:	96 e9       	ldi	r25, 0x96	; 150
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <__floatsisf+0x6a>
    1bfe:	77 23       	and	r23, r23
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <__floatsisf+0x54>
    1c02:	9e e8       	ldi	r25, 0x8E	; 142
    1c04:	87 2f       	mov	r24, r23
    1c06:	76 2f       	mov	r23, r22
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <__floatsisf+0x5e>
    1c0a:	66 23       	and	r22, r22
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <__floatsisf+0x74>
    1c0e:	96 e8       	ldi	r25, 0x86	; 134
    1c10:	86 2f       	mov	r24, r22
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	2a f0       	brmi	.+10     	; 0x1c22 <__floatsisf+0x6c>
    1c18:	9a 95       	dec	r25
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	da f7       	brpl	.-10     	; 0x1c18 <__floatsisf+0x62>
    1c22:	88 0f       	add	r24, r24
    1c24:	96 95       	lsr	r25
    1c26:	87 95       	ror	r24
    1c28:	97 f9       	bld	r25, 7
    1c2a:	08 95       	ret

00001c2c <__fp_cmp>:
    1c2c:	99 0f       	add	r25, r25
    1c2e:	00 08       	sbc	r0, r0
    1c30:	55 0f       	add	r21, r21
    1c32:	aa 0b       	sbc	r26, r26
    1c34:	e0 e8       	ldi	r30, 0x80	; 128
    1c36:	fe ef       	ldi	r31, 0xFE	; 254
    1c38:	16 16       	cp	r1, r22
    1c3a:	17 06       	cpc	r1, r23
    1c3c:	e8 07       	cpc	r30, r24
    1c3e:	f9 07       	cpc	r31, r25
    1c40:	c0 f0       	brcs	.+48     	; 0x1c72 <__fp_cmp+0x46>
    1c42:	12 16       	cp	r1, r18
    1c44:	13 06       	cpc	r1, r19
    1c46:	e4 07       	cpc	r30, r20
    1c48:	f5 07       	cpc	r31, r21
    1c4a:	98 f0       	brcs	.+38     	; 0x1c72 <__fp_cmp+0x46>
    1c4c:	62 1b       	sub	r22, r18
    1c4e:	73 0b       	sbc	r23, r19
    1c50:	84 0b       	sbc	r24, r20
    1c52:	95 0b       	sbc	r25, r21
    1c54:	39 f4       	brne	.+14     	; 0x1c64 <__fp_cmp+0x38>
    1c56:	0a 26       	eor	r0, r26
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <__fp_cmp+0x46>
    1c5a:	23 2b       	or	r18, r19
    1c5c:	24 2b       	or	r18, r20
    1c5e:	25 2b       	or	r18, r21
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <__fp_cmp+0x3e>
    1c62:	08 95       	ret
    1c64:	0a 26       	eor	r0, r26
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <__fp_cmp+0x3e>
    1c68:	a1 40       	sbci	r26, 0x01	; 1
    1c6a:	a6 95       	lsr	r26
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	81 1d       	adc	r24, r1
    1c70:	81 1d       	adc	r24, r1
    1c72:	08 95       	ret

00001c74 <__fp_inf>:
    1c74:	97 f9       	bld	r25, 7
    1c76:	9f 67       	ori	r25, 0x7F	; 127
    1c78:	80 e8       	ldi	r24, 0x80	; 128
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	08 95       	ret

00001c80 <__fp_nan>:
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	80 ec       	ldi	r24, 0xC0	; 192
    1c84:	08 95       	ret

00001c86 <__fp_pscA>:
    1c86:	00 24       	eor	r0, r0
    1c88:	0a 94       	dec	r0
    1c8a:	16 16       	cp	r1, r22
    1c8c:	17 06       	cpc	r1, r23
    1c8e:	18 06       	cpc	r1, r24
    1c90:	09 06       	cpc	r0, r25
    1c92:	08 95       	ret

00001c94 <__fp_pscB>:
    1c94:	00 24       	eor	r0, r0
    1c96:	0a 94       	dec	r0
    1c98:	12 16       	cp	r1, r18
    1c9a:	13 06       	cpc	r1, r19
    1c9c:	14 06       	cpc	r1, r20
    1c9e:	05 06       	cpc	r0, r21
    1ca0:	08 95       	ret

00001ca2 <__fp_round>:
    1ca2:	09 2e       	mov	r0, r25
    1ca4:	03 94       	inc	r0
    1ca6:	00 0c       	add	r0, r0
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <__fp_round+0xc>
    1caa:	88 23       	and	r24, r24
    1cac:	52 f0       	brmi	.+20     	; 0x1cc2 <__fp_round+0x20>
    1cae:	bb 0f       	add	r27, r27
    1cb0:	40 f4       	brcc	.+16     	; 0x1cc2 <__fp_round+0x20>
    1cb2:	bf 2b       	or	r27, r31
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <__fp_round+0x18>
    1cb6:	60 ff       	sbrs	r22, 0
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <__fp_round+0x20>
    1cba:	6f 5f       	subi	r22, 0xFF	; 255
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	08 95       	ret

00001cc4 <__fp_split3>:
    1cc4:	57 fd       	sbrc	r21, 7
    1cc6:	90 58       	subi	r25, 0x80	; 128
    1cc8:	44 0f       	add	r20, r20
    1cca:	55 1f       	adc	r21, r21
    1ccc:	59 f0       	breq	.+22     	; 0x1ce4 <__fp_splitA+0x10>
    1cce:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd0:	71 f0       	breq	.+28     	; 0x1cee <__fp_splitA+0x1a>
    1cd2:	47 95       	ror	r20

00001cd4 <__fp_splitA>:
    1cd4:	88 0f       	add	r24, r24
    1cd6:	97 fb       	bst	r25, 7
    1cd8:	99 1f       	adc	r25, r25
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <__fp_splitA+0x20>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	79 f0       	breq	.+30     	; 0x1cfe <__fp_splitA+0x2a>
    1ce0:	87 95       	ror	r24
    1ce2:	08 95       	ret
    1ce4:	12 16       	cp	r1, r18
    1ce6:	13 06       	cpc	r1, r19
    1ce8:	14 06       	cpc	r1, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	f2 cf       	rjmp	.-28     	; 0x1cd2 <__fp_split3+0xe>
    1cee:	46 95       	lsr	r20
    1cf0:	f1 df       	rcall	.-30     	; 0x1cd4 <__fp_splitA>
    1cf2:	08 c0       	rjmp	.+16     	; 0x1d04 <__fp_splitA+0x30>
    1cf4:	16 16       	cp	r1, r22
    1cf6:	17 06       	cpc	r1, r23
    1cf8:	18 06       	cpc	r1, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	f1 cf       	rjmp	.-30     	; 0x1ce0 <__fp_splitA+0xc>
    1cfe:	86 95       	lsr	r24
    1d00:	71 05       	cpc	r23, r1
    1d02:	61 05       	cpc	r22, r1
    1d04:	08 94       	sec
    1d06:	08 95       	ret

00001d08 <__fp_zero>:
    1d08:	e8 94       	clt

00001d0a <__fp_szero>:
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	66 27       	eor	r22, r22
    1d0e:	77 27       	eor	r23, r23
    1d10:	cb 01       	movw	r24, r22
    1d12:	97 f9       	bld	r25, 7
    1d14:	08 95       	ret

00001d16 <__mulsf3>:
    1d16:	0b d0       	rcall	.+22     	; 0x1d2e <__mulsf3x>
    1d18:	c4 cf       	rjmp	.-120    	; 0x1ca2 <__fp_round>
    1d1a:	b5 df       	rcall	.-150    	; 0x1c86 <__fp_pscA>
    1d1c:	28 f0       	brcs	.+10     	; 0x1d28 <__mulsf3+0x12>
    1d1e:	ba df       	rcall	.-140    	; 0x1c94 <__fp_pscB>
    1d20:	18 f0       	brcs	.+6      	; 0x1d28 <__mulsf3+0x12>
    1d22:	95 23       	and	r25, r21
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <__mulsf3+0x12>
    1d26:	a6 cf       	rjmp	.-180    	; 0x1c74 <__fp_inf>
    1d28:	ab cf       	rjmp	.-170    	; 0x1c80 <__fp_nan>
    1d2a:	11 24       	eor	r1, r1
    1d2c:	ee cf       	rjmp	.-36     	; 0x1d0a <__fp_szero>

00001d2e <__mulsf3x>:
    1d2e:	ca df       	rcall	.-108    	; 0x1cc4 <__fp_split3>
    1d30:	a0 f3       	brcs	.-24     	; 0x1d1a <__mulsf3+0x4>

00001d32 <__mulsf3_pse>:
    1d32:	95 9f       	mul	r25, r21
    1d34:	d1 f3       	breq	.-12     	; 0x1d2a <__mulsf3+0x14>
    1d36:	95 0f       	add	r25, r21
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	55 1f       	adc	r21, r21
    1d3c:	62 9f       	mul	r22, r18
    1d3e:	f0 01       	movw	r30, r0
    1d40:	72 9f       	mul	r23, r18
    1d42:	bb 27       	eor	r27, r27
    1d44:	f0 0d       	add	r31, r0
    1d46:	b1 1d       	adc	r27, r1
    1d48:	63 9f       	mul	r22, r19
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	b1 1d       	adc	r27, r1
    1d50:	aa 1f       	adc	r26, r26
    1d52:	64 9f       	mul	r22, r20
    1d54:	66 27       	eor	r22, r22
    1d56:	b0 0d       	add	r27, r0
    1d58:	a1 1d       	adc	r26, r1
    1d5a:	66 1f       	adc	r22, r22
    1d5c:	82 9f       	mul	r24, r18
    1d5e:	22 27       	eor	r18, r18
    1d60:	b0 0d       	add	r27, r0
    1d62:	a1 1d       	adc	r26, r1
    1d64:	62 1f       	adc	r22, r18
    1d66:	73 9f       	mul	r23, r19
    1d68:	b0 0d       	add	r27, r0
    1d6a:	a1 1d       	adc	r26, r1
    1d6c:	62 1f       	adc	r22, r18
    1d6e:	83 9f       	mul	r24, r19
    1d70:	a0 0d       	add	r26, r0
    1d72:	61 1d       	adc	r22, r1
    1d74:	22 1f       	adc	r18, r18
    1d76:	74 9f       	mul	r23, r20
    1d78:	33 27       	eor	r19, r19
    1d7a:	a0 0d       	add	r26, r0
    1d7c:	61 1d       	adc	r22, r1
    1d7e:	23 1f       	adc	r18, r19
    1d80:	84 9f       	mul	r24, r20
    1d82:	60 0d       	add	r22, r0
    1d84:	21 1d       	adc	r18, r1
    1d86:	82 2f       	mov	r24, r18
    1d88:	76 2f       	mov	r23, r22
    1d8a:	6a 2f       	mov	r22, r26
    1d8c:	11 24       	eor	r1, r1
    1d8e:	9f 57       	subi	r25, 0x7F	; 127
    1d90:	50 40       	sbci	r21, 0x00	; 0
    1d92:	8a f0       	brmi	.+34     	; 0x1db6 <__mulsf3_pse+0x84>
    1d94:	e1 f0       	breq	.+56     	; 0x1dce <__mulsf3_pse+0x9c>
    1d96:	88 23       	and	r24, r24
    1d98:	4a f0       	brmi	.+18     	; 0x1dac <__mulsf3_pse+0x7a>
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	66 1f       	adc	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	91 50       	subi	r25, 0x01	; 1
    1da8:	50 40       	sbci	r21, 0x00	; 0
    1daa:	a9 f7       	brne	.-22     	; 0x1d96 <__mulsf3_pse+0x64>
    1dac:	9e 3f       	cpi	r25, 0xFE	; 254
    1dae:	51 05       	cpc	r21, r1
    1db0:	70 f0       	brcs	.+28     	; 0x1dce <__mulsf3_pse+0x9c>
    1db2:	60 cf       	rjmp	.-320    	; 0x1c74 <__fp_inf>
    1db4:	aa cf       	rjmp	.-172    	; 0x1d0a <__fp_szero>
    1db6:	5f 3f       	cpi	r21, 0xFF	; 255
    1db8:	ec f3       	brlt	.-6      	; 0x1db4 <__mulsf3_pse+0x82>
    1dba:	98 3e       	cpi	r25, 0xE8	; 232
    1dbc:	dc f3       	brlt	.-10     	; 0x1db4 <__mulsf3_pse+0x82>
    1dbe:	86 95       	lsr	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	b7 95       	ror	r27
    1dc6:	f7 95       	ror	r31
    1dc8:	e7 95       	ror	r30
    1dca:	9f 5f       	subi	r25, 0xFF	; 255
    1dcc:	c1 f7       	brne	.-16     	; 0x1dbe <__mulsf3_pse+0x8c>
    1dce:	fe 2b       	or	r31, r30
    1dd0:	88 0f       	add	r24, r24
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__divmodhi4>:
    1ddc:	97 fb       	bst	r25, 7
    1dde:	07 2e       	mov	r0, r23
    1de0:	16 f4       	brtc	.+4      	; 0x1de6 <__divmodhi4+0xa>
    1de2:	00 94       	com	r0
    1de4:	07 d0       	rcall	.+14     	; 0x1df4 <__divmodhi4_neg1>
    1de6:	77 fd       	sbrc	r23, 7
    1de8:	09 d0       	rcall	.+18     	; 0x1dfc <__divmodhi4_neg2>
    1dea:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodhi4>
    1dee:	07 fc       	sbrc	r0, 7
    1df0:	05 d0       	rcall	.+10     	; 0x1dfc <__divmodhi4_neg2>
    1df2:	3e f4       	brtc	.+14     	; 0x1e02 <__divmodhi4_exit>

00001df4 <__divmodhi4_neg1>:
    1df4:	90 95       	com	r25
    1df6:	81 95       	neg	r24
    1df8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfa:	08 95       	ret

00001dfc <__divmodhi4_neg2>:
    1dfc:	70 95       	com	r23
    1dfe:	61 95       	neg	r22
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255

00001e02 <__divmodhi4_exit>:
    1e02:	08 95       	ret

00001e04 <__divmodsi4>:
    1e04:	05 2e       	mov	r0, r21
    1e06:	97 fb       	bst	r25, 7
    1e08:	1e f4       	brtc	.+6      	; 0x1e10 <__divmodsi4+0xc>
    1e0a:	00 94       	com	r0
    1e0c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__negsi2>
    1e10:	57 fd       	sbrc	r21, 7
    1e12:	07 d0       	rcall	.+14     	; 0x1e22 <__divmodsi4_neg2>
    1e14:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__udivmodsi4>
    1e18:	07 fc       	sbrc	r0, 7
    1e1a:	03 d0       	rcall	.+6      	; 0x1e22 <__divmodsi4_neg2>
    1e1c:	4e f4       	brtc	.+18     	; 0x1e30 <__divmodsi4_exit>
    1e1e:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__negsi2>

00001e22 <__divmodsi4_neg2>:
    1e22:	50 95       	com	r21
    1e24:	40 95       	com	r20
    1e26:	30 95       	com	r19
    1e28:	21 95       	neg	r18
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255

00001e30 <__divmodsi4_exit>:
    1e30:	08 95       	ret

00001e32 <__negsi2>:
    1e32:	90 95       	com	r25
    1e34:	80 95       	com	r24
    1e36:	70 95       	com	r23
    1e38:	61 95       	neg	r22
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	08 95       	ret

00001e42 <__udivmodhi4>:
    1e42:	aa 1b       	sub	r26, r26
    1e44:	bb 1b       	sub	r27, r27
    1e46:	51 e1       	ldi	r21, 0x11	; 17
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <__udivmodhi4_ep>

00001e4a <__udivmodhi4_loop>:
    1e4a:	aa 1f       	adc	r26, r26
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	a6 17       	cp	r26, r22
    1e50:	b7 07       	cpc	r27, r23
    1e52:	10 f0       	brcs	.+4      	; 0x1e58 <__udivmodhi4_ep>
    1e54:	a6 1b       	sub	r26, r22
    1e56:	b7 0b       	sbc	r27, r23

00001e58 <__udivmodhi4_ep>:
    1e58:	88 1f       	adc	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	5a 95       	dec	r21
    1e5e:	a9 f7       	brne	.-22     	; 0x1e4a <__udivmodhi4_loop>
    1e60:	80 95       	com	r24
    1e62:	90 95       	com	r25
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	08 95       	ret

00001e6a <__udivmodsi4>:
    1e6a:	a1 e2       	ldi	r26, 0x21	; 33
    1e6c:	1a 2e       	mov	r1, r26
    1e6e:	aa 1b       	sub	r26, r26
    1e70:	bb 1b       	sub	r27, r27
    1e72:	fd 01       	movw	r30, r26
    1e74:	0d c0       	rjmp	.+26     	; 0x1e90 <__udivmodsi4_ep>

00001e76 <__udivmodsi4_loop>:
    1e76:	aa 1f       	adc	r26, r26
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	ee 1f       	adc	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	a2 17       	cp	r26, r18
    1e80:	b3 07       	cpc	r27, r19
    1e82:	e4 07       	cpc	r30, r20
    1e84:	f5 07       	cpc	r31, r21
    1e86:	20 f0       	brcs	.+8      	; 0x1e90 <__udivmodsi4_ep>
    1e88:	a2 1b       	sub	r26, r18
    1e8a:	b3 0b       	sbc	r27, r19
    1e8c:	e4 0b       	sbc	r30, r20
    1e8e:	f5 0b       	sbc	r31, r21

00001e90 <__udivmodsi4_ep>:
    1e90:	66 1f       	adc	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	1a 94       	dec	r1
    1e9a:	69 f7       	brne	.-38     	; 0x1e76 <__udivmodsi4_loop>
    1e9c:	60 95       	com	r22
    1e9e:	70 95       	com	r23
    1ea0:	80 95       	com	r24
    1ea2:	90 95       	com	r25
    1ea4:	9b 01       	movw	r18, r22
    1ea6:	ac 01       	movw	r20, r24
    1ea8:	bd 01       	movw	r22, r26
    1eaa:	cf 01       	movw	r24, r30
    1eac:	08 95       	ret

00001eae <strcpy_P>:
    1eae:	fb 01       	movw	r30, r22
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	05 90       	lpm	r0, Z+
    1eb4:	0d 92       	st	X+, r0
    1eb6:	00 20       	and	r0, r0
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <strcpy_P+0x4>
    1eba:	08 95       	ret

00001ebc <fdevopen>:
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	ec 01       	movw	r28, r24
    1ec6:	8b 01       	movw	r16, r22
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	31 f4       	brne	.+12     	; 0x1ed8 <fdevopen+0x1c>
    1ecc:	61 15       	cp	r22, r1
    1ece:	71 05       	cpc	r23, r1
    1ed0:	19 f4       	brne	.+6      	; 0x1ed8 <fdevopen+0x1c>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	38 c0       	rjmp	.+112    	; 0x1f48 <fdevopen+0x8c>
    1ed8:	6e e0       	ldi	r22, 0x0E	; 14
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 8f 11 	call	0x231e	; 0x231e <calloc>
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	a1 f3       	breq	.-24     	; 0x1ed2 <fdevopen+0x16>
    1eea:	80 e8       	ldi	r24, 0x80	; 128
    1eec:	83 83       	std	Z+3, r24	; 0x03
    1eee:	01 15       	cp	r16, r1
    1ef0:	11 05       	cpc	r17, r1
    1ef2:	71 f0       	breq	.+28     	; 0x1f10 <fdevopen+0x54>
    1ef4:	13 87       	std	Z+11, r17	; 0x0b
    1ef6:	02 87       	std	Z+10, r16	; 0x0a
    1ef8:	81 e8       	ldi	r24, 0x81	; 129
    1efa:	83 83       	std	Z+3, r24	; 0x03
    1efc:	80 91 3a 03 	lds	r24, 0x033A
    1f00:	90 91 3b 03 	lds	r25, 0x033B
    1f04:	89 2b       	or	r24, r25
    1f06:	21 f4       	brne	.+8      	; 0x1f10 <fdevopen+0x54>
    1f08:	f0 93 3b 03 	sts	0x033B, r31
    1f0c:	e0 93 3a 03 	sts	0x033A, r30
    1f10:	20 97       	sbiw	r28, 0x00	; 0
    1f12:	c9 f0       	breq	.+50     	; 0x1f46 <fdevopen+0x8a>
    1f14:	d1 87       	std	Z+9, r29	; 0x09
    1f16:	c0 87       	std	Z+8, r28	; 0x08
    1f18:	83 81       	ldd	r24, Z+3	; 0x03
    1f1a:	82 60       	ori	r24, 0x02	; 2
    1f1c:	83 83       	std	Z+3, r24	; 0x03
    1f1e:	80 91 3c 03 	lds	r24, 0x033C
    1f22:	90 91 3d 03 	lds	r25, 0x033D
    1f26:	89 2b       	or	r24, r25
    1f28:	71 f4       	brne	.+28     	; 0x1f46 <fdevopen+0x8a>
    1f2a:	f0 93 3d 03 	sts	0x033D, r31
    1f2e:	e0 93 3c 03 	sts	0x033C, r30
    1f32:	80 91 3e 03 	lds	r24, 0x033E
    1f36:	90 91 3f 03 	lds	r25, 0x033F
    1f3a:	89 2b       	or	r24, r25
    1f3c:	21 f4       	brne	.+8      	; 0x1f46 <fdevopen+0x8a>
    1f3e:	f0 93 3f 03 	sts	0x033F, r31
    1f42:	e0 93 3e 03 	sts	0x033E, r30
    1f46:	cf 01       	movw	r24, r30
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <printf>:
    1f52:	a0 e0       	ldi	r26, 0x00	; 0
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ef ea       	ldi	r30, 0xAF	; 175
    1f58:	ff e0       	ldi	r31, 0x0F	; 15
    1f5a:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__prologue_saves__+0x20>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	35 96       	adiw	r30, 0x05	; 5
    1f62:	61 91       	ld	r22, Z+
    1f64:	71 91       	ld	r23, Z+
    1f66:	af 01       	movw	r20, r30
    1f68:	80 91 3c 03 	lds	r24, 0x033C
    1f6c:	90 91 3d 03 	lds	r25, 0x033D
    1f70:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <vfprintf>
    1f74:	e2 e0       	ldi	r30, 0x02	; 2
    1f76:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__epilogue_restores__+0x20>

00001f7a <vfprintf>:
    1f7a:	ac e0       	ldi	r26, 0x0C	; 12
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1f80:	ff e0       	ldi	r31, 0x0F	; 15
    1f82:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__prologue_saves__>
    1f86:	7c 01       	movw	r14, r24
    1f88:	6b 01       	movw	r12, r22
    1f8a:	8a 01       	movw	r16, r20
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	17 82       	std	Z+7, r1	; 0x07
    1f90:	16 82       	std	Z+6, r1	; 0x06
    1f92:	83 81       	ldd	r24, Z+3	; 0x03
    1f94:	81 ff       	sbrs	r24, 1
    1f96:	bd c1       	rjmp	.+890    	; 0x2312 <vfprintf+0x398>
    1f98:	ce 01       	movw	r24, r28
    1f9a:	01 96       	adiw	r24, 0x01	; 1
    1f9c:	4c 01       	movw	r8, r24
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	f6 01       	movw	r30, r12
    1fa4:	93 fd       	sbrc	r25, 3
    1fa6:	85 91       	lpm	r24, Z+
    1fa8:	93 ff       	sbrs	r25, 3
    1faa:	81 91       	ld	r24, Z+
    1fac:	6f 01       	movw	r12, r30
    1fae:	88 23       	and	r24, r24
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <vfprintf+0x3a>
    1fb2:	ab c1       	rjmp	.+854    	; 0x230a <vfprintf+0x390>
    1fb4:	85 32       	cpi	r24, 0x25	; 37
    1fb6:	39 f4       	brne	.+14     	; 0x1fc6 <vfprintf+0x4c>
    1fb8:	93 fd       	sbrc	r25, 3
    1fba:	85 91       	lpm	r24, Z+
    1fbc:	93 ff       	sbrs	r25, 3
    1fbe:	81 91       	ld	r24, Z+
    1fc0:	6f 01       	movw	r12, r30
    1fc2:	85 32       	cpi	r24, 0x25	; 37
    1fc4:	29 f4       	brne	.+10     	; 0x1fd0 <vfprintf+0x56>
    1fc6:	b7 01       	movw	r22, r14
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    1fce:	e7 cf       	rjmp	.-50     	; 0x1f9e <vfprintf+0x24>
    1fd0:	51 2c       	mov	r5, r1
    1fd2:	31 2c       	mov	r3, r1
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	20 32       	cpi	r18, 0x20	; 32
    1fd8:	a0 f4       	brcc	.+40     	; 0x2002 <vfprintf+0x88>
    1fda:	8b 32       	cpi	r24, 0x2B	; 43
    1fdc:	69 f0       	breq	.+26     	; 0x1ff8 <vfprintf+0x7e>
    1fde:	30 f4       	brcc	.+12     	; 0x1fec <vfprintf+0x72>
    1fe0:	80 32       	cpi	r24, 0x20	; 32
    1fe2:	59 f0       	breq	.+22     	; 0x1ffa <vfprintf+0x80>
    1fe4:	83 32       	cpi	r24, 0x23	; 35
    1fe6:	69 f4       	brne	.+26     	; 0x2002 <vfprintf+0x88>
    1fe8:	20 61       	ori	r18, 0x10	; 16
    1fea:	2c c0       	rjmp	.+88     	; 0x2044 <vfprintf+0xca>
    1fec:	8d 32       	cpi	r24, 0x2D	; 45
    1fee:	39 f0       	breq	.+14     	; 0x1ffe <vfprintf+0x84>
    1ff0:	80 33       	cpi	r24, 0x30	; 48
    1ff2:	39 f4       	brne	.+14     	; 0x2002 <vfprintf+0x88>
    1ff4:	21 60       	ori	r18, 0x01	; 1
    1ff6:	26 c0       	rjmp	.+76     	; 0x2044 <vfprintf+0xca>
    1ff8:	22 60       	ori	r18, 0x02	; 2
    1ffa:	24 60       	ori	r18, 0x04	; 4
    1ffc:	23 c0       	rjmp	.+70     	; 0x2044 <vfprintf+0xca>
    1ffe:	28 60       	ori	r18, 0x08	; 8
    2000:	21 c0       	rjmp	.+66     	; 0x2044 <vfprintf+0xca>
    2002:	27 fd       	sbrc	r18, 7
    2004:	27 c0       	rjmp	.+78     	; 0x2054 <vfprintf+0xda>
    2006:	30 ed       	ldi	r19, 0xD0	; 208
    2008:	38 0f       	add	r19, r24
    200a:	3a 30       	cpi	r19, 0x0A	; 10
    200c:	78 f4       	brcc	.+30     	; 0x202c <vfprintf+0xb2>
    200e:	26 ff       	sbrs	r18, 6
    2010:	06 c0       	rjmp	.+12     	; 0x201e <vfprintf+0xa4>
    2012:	fa e0       	ldi	r31, 0x0A	; 10
    2014:	5f 9e       	mul	r5, r31
    2016:	30 0d       	add	r19, r0
    2018:	11 24       	eor	r1, r1
    201a:	53 2e       	mov	r5, r19
    201c:	13 c0       	rjmp	.+38     	; 0x2044 <vfprintf+0xca>
    201e:	8a e0       	ldi	r24, 0x0A	; 10
    2020:	38 9e       	mul	r3, r24
    2022:	30 0d       	add	r19, r0
    2024:	11 24       	eor	r1, r1
    2026:	33 2e       	mov	r3, r19
    2028:	20 62       	ori	r18, 0x20	; 32
    202a:	0c c0       	rjmp	.+24     	; 0x2044 <vfprintf+0xca>
    202c:	8e 32       	cpi	r24, 0x2E	; 46
    202e:	21 f4       	brne	.+8      	; 0x2038 <vfprintf+0xbe>
    2030:	26 fd       	sbrc	r18, 6
    2032:	6b c1       	rjmp	.+726    	; 0x230a <vfprintf+0x390>
    2034:	20 64       	ori	r18, 0x40	; 64
    2036:	06 c0       	rjmp	.+12     	; 0x2044 <vfprintf+0xca>
    2038:	8c 36       	cpi	r24, 0x6C	; 108
    203a:	11 f4       	brne	.+4      	; 0x2040 <vfprintf+0xc6>
    203c:	20 68       	ori	r18, 0x80	; 128
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <vfprintf+0xca>
    2040:	88 36       	cpi	r24, 0x68	; 104
    2042:	41 f4       	brne	.+16     	; 0x2054 <vfprintf+0xda>
    2044:	f6 01       	movw	r30, r12
    2046:	93 fd       	sbrc	r25, 3
    2048:	85 91       	lpm	r24, Z+
    204a:	93 ff       	sbrs	r25, 3
    204c:	81 91       	ld	r24, Z+
    204e:	6f 01       	movw	r12, r30
    2050:	81 11       	cpse	r24, r1
    2052:	c1 cf       	rjmp	.-126    	; 0x1fd6 <vfprintf+0x5c>
    2054:	98 2f       	mov	r25, r24
    2056:	9f 7d       	andi	r25, 0xDF	; 223
    2058:	95 54       	subi	r25, 0x45	; 69
    205a:	93 30       	cpi	r25, 0x03	; 3
    205c:	28 f4       	brcc	.+10     	; 0x2068 <vfprintf+0xee>
    205e:	0c 5f       	subi	r16, 0xFC	; 252
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	ff e3       	ldi	r31, 0x3F	; 63
    2064:	f9 83       	std	Y+1, r31	; 0x01
    2066:	0d c0       	rjmp	.+26     	; 0x2082 <vfprintf+0x108>
    2068:	83 36       	cpi	r24, 0x63	; 99
    206a:	31 f0       	breq	.+12     	; 0x2078 <vfprintf+0xfe>
    206c:	83 37       	cpi	r24, 0x73	; 115
    206e:	71 f0       	breq	.+28     	; 0x208c <vfprintf+0x112>
    2070:	83 35       	cpi	r24, 0x53	; 83
    2072:	09 f0       	breq	.+2      	; 0x2076 <vfprintf+0xfc>
    2074:	5b c0       	rjmp	.+182    	; 0x212c <vfprintf+0x1b2>
    2076:	22 c0       	rjmp	.+68     	; 0x20bc <vfprintf+0x142>
    2078:	f8 01       	movw	r30, r16
    207a:	80 81       	ld	r24, Z
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	0e 5f       	subi	r16, 0xFE	; 254
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	44 24       	eor	r4, r4
    2084:	43 94       	inc	r4
    2086:	51 2c       	mov	r5, r1
    2088:	54 01       	movw	r10, r8
    208a:	15 c0       	rjmp	.+42     	; 0x20b6 <vfprintf+0x13c>
    208c:	38 01       	movw	r6, r16
    208e:	f2 e0       	ldi	r31, 0x02	; 2
    2090:	6f 0e       	add	r6, r31
    2092:	71 1c       	adc	r7, r1
    2094:	f8 01       	movw	r30, r16
    2096:	a0 80       	ld	r10, Z
    2098:	b1 80       	ldd	r11, Z+1	; 0x01
    209a:	26 ff       	sbrs	r18, 6
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <vfprintf+0x12a>
    209e:	65 2d       	mov	r22, r5
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <vfprintf+0x12e>
    20a4:	6f ef       	ldi	r22, 0xFF	; 255
    20a6:	7f ef       	ldi	r23, 0xFF	; 255
    20a8:	c5 01       	movw	r24, r10
    20aa:	2c 87       	std	Y+12, r18	; 0x0c
    20ac:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <strnlen>
    20b0:	2c 01       	movw	r4, r24
    20b2:	83 01       	movw	r16, r6
    20b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    20b6:	2f 77       	andi	r18, 0x7F	; 127
    20b8:	22 2e       	mov	r2, r18
    20ba:	17 c0       	rjmp	.+46     	; 0x20ea <vfprintf+0x170>
    20bc:	38 01       	movw	r6, r16
    20be:	f2 e0       	ldi	r31, 0x02	; 2
    20c0:	6f 0e       	add	r6, r31
    20c2:	71 1c       	adc	r7, r1
    20c4:	f8 01       	movw	r30, r16
    20c6:	a0 80       	ld	r10, Z
    20c8:	b1 80       	ldd	r11, Z+1	; 0x01
    20ca:	26 ff       	sbrs	r18, 6
    20cc:	03 c0       	rjmp	.+6      	; 0x20d4 <vfprintf+0x15a>
    20ce:	65 2d       	mov	r22, r5
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <vfprintf+0x15e>
    20d4:	6f ef       	ldi	r22, 0xFF	; 255
    20d6:	7f ef       	ldi	r23, 0xFF	; 255
    20d8:	c5 01       	movw	r24, r10
    20da:	2c 87       	std	Y+12, r18	; 0x0c
    20dc:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <strnlen_P>
    20e0:	2c 01       	movw	r4, r24
    20e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    20e4:	20 68       	ori	r18, 0x80	; 128
    20e6:	22 2e       	mov	r2, r18
    20e8:	83 01       	movw	r16, r6
    20ea:	23 fc       	sbrc	r2, 3
    20ec:	1b c0       	rjmp	.+54     	; 0x2124 <vfprintf+0x1aa>
    20ee:	83 2d       	mov	r24, r3
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	48 16       	cp	r4, r24
    20f4:	59 06       	cpc	r5, r25
    20f6:	b0 f4       	brcc	.+44     	; 0x2124 <vfprintf+0x1aa>
    20f8:	b7 01       	movw	r22, r14
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    2102:	3a 94       	dec	r3
    2104:	f4 cf       	rjmp	.-24     	; 0x20ee <vfprintf+0x174>
    2106:	f5 01       	movw	r30, r10
    2108:	27 fc       	sbrc	r2, 7
    210a:	85 91       	lpm	r24, Z+
    210c:	27 fe       	sbrs	r2, 7
    210e:	81 91       	ld	r24, Z+
    2110:	5f 01       	movw	r10, r30
    2112:	b7 01       	movw	r22, r14
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    211a:	31 10       	cpse	r3, r1
    211c:	3a 94       	dec	r3
    211e:	f1 e0       	ldi	r31, 0x01	; 1
    2120:	4f 1a       	sub	r4, r31
    2122:	51 08       	sbc	r5, r1
    2124:	41 14       	cp	r4, r1
    2126:	51 04       	cpc	r5, r1
    2128:	71 f7       	brne	.-36     	; 0x2106 <vfprintf+0x18c>
    212a:	e5 c0       	rjmp	.+458    	; 0x22f6 <vfprintf+0x37c>
    212c:	84 36       	cpi	r24, 0x64	; 100
    212e:	11 f0       	breq	.+4      	; 0x2134 <vfprintf+0x1ba>
    2130:	89 36       	cpi	r24, 0x69	; 105
    2132:	39 f5       	brne	.+78     	; 0x2182 <vfprintf+0x208>
    2134:	f8 01       	movw	r30, r16
    2136:	27 ff       	sbrs	r18, 7
    2138:	07 c0       	rjmp	.+14     	; 0x2148 <vfprintf+0x1ce>
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	0c 5f       	subi	r16, 0xFC	; 252
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	08 c0       	rjmp	.+16     	; 0x2158 <vfprintf+0x1de>
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	88 27       	eor	r24, r24
    214e:	77 fd       	sbrc	r23, 7
    2150:	80 95       	com	r24
    2152:	98 2f       	mov	r25, r24
    2154:	0e 5f       	subi	r16, 0xFE	; 254
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	2f 76       	andi	r18, 0x6F	; 111
    215a:	b2 2e       	mov	r11, r18
    215c:	97 ff       	sbrs	r25, 7
    215e:	09 c0       	rjmp	.+18     	; 0x2172 <vfprintf+0x1f8>
    2160:	90 95       	com	r25
    2162:	80 95       	com	r24
    2164:	70 95       	com	r23
    2166:	61 95       	neg	r22
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	8f 4f       	sbci	r24, 0xFF	; 255
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	20 68       	ori	r18, 0x80	; 128
    2170:	b2 2e       	mov	r11, r18
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	a4 01       	movw	r20, r8
    2178:	0e 94 21 13 	call	0x2642	; 0x2642 <__ultoa_invert>
    217c:	a8 2e       	mov	r10, r24
    217e:	a8 18       	sub	r10, r8
    2180:	44 c0       	rjmp	.+136    	; 0x220a <vfprintf+0x290>
    2182:	85 37       	cpi	r24, 0x75	; 117
    2184:	29 f4       	brne	.+10     	; 0x2190 <vfprintf+0x216>
    2186:	2f 7e       	andi	r18, 0xEF	; 239
    2188:	b2 2e       	mov	r11, r18
    218a:	2a e0       	ldi	r18, 0x0A	; 10
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	25 c0       	rjmp	.+74     	; 0x21da <vfprintf+0x260>
    2190:	f2 2f       	mov	r31, r18
    2192:	f9 7f       	andi	r31, 0xF9	; 249
    2194:	bf 2e       	mov	r11, r31
    2196:	8f 36       	cpi	r24, 0x6F	; 111
    2198:	c1 f0       	breq	.+48     	; 0x21ca <vfprintf+0x250>
    219a:	18 f4       	brcc	.+6      	; 0x21a2 <vfprintf+0x228>
    219c:	88 35       	cpi	r24, 0x58	; 88
    219e:	79 f0       	breq	.+30     	; 0x21be <vfprintf+0x244>
    21a0:	b4 c0       	rjmp	.+360    	; 0x230a <vfprintf+0x390>
    21a2:	80 37       	cpi	r24, 0x70	; 112
    21a4:	19 f0       	breq	.+6      	; 0x21ac <vfprintf+0x232>
    21a6:	88 37       	cpi	r24, 0x78	; 120
    21a8:	21 f0       	breq	.+8      	; 0x21b2 <vfprintf+0x238>
    21aa:	af c0       	rjmp	.+350    	; 0x230a <vfprintf+0x390>
    21ac:	2f 2f       	mov	r18, r31
    21ae:	20 61       	ori	r18, 0x10	; 16
    21b0:	b2 2e       	mov	r11, r18
    21b2:	b4 fe       	sbrs	r11, 4
    21b4:	0d c0       	rjmp	.+26     	; 0x21d0 <vfprintf+0x256>
    21b6:	8b 2d       	mov	r24, r11
    21b8:	84 60       	ori	r24, 0x04	; 4
    21ba:	b8 2e       	mov	r11, r24
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <vfprintf+0x256>
    21be:	24 ff       	sbrs	r18, 4
    21c0:	0a c0       	rjmp	.+20     	; 0x21d6 <vfprintf+0x25c>
    21c2:	9f 2f       	mov	r25, r31
    21c4:	96 60       	ori	r25, 0x06	; 6
    21c6:	b9 2e       	mov	r11, r25
    21c8:	06 c0       	rjmp	.+12     	; 0x21d6 <vfprintf+0x25c>
    21ca:	28 e0       	ldi	r18, 0x08	; 8
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <vfprintf+0x260>
    21d0:	20 e1       	ldi	r18, 0x10	; 16
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <vfprintf+0x260>
    21d6:	20 e1       	ldi	r18, 0x10	; 16
    21d8:	32 e0       	ldi	r19, 0x02	; 2
    21da:	f8 01       	movw	r30, r16
    21dc:	b7 fe       	sbrs	r11, 7
    21de:	07 c0       	rjmp	.+14     	; 0x21ee <vfprintf+0x274>
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	0c 5f       	subi	r16, 0xFC	; 252
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <vfprintf+0x280>
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 5f       	subi	r16, 0xFE	; 254
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	a4 01       	movw	r20, r8
    21fc:	0e 94 21 13 	call	0x2642	; 0x2642 <__ultoa_invert>
    2200:	a8 2e       	mov	r10, r24
    2202:	a8 18       	sub	r10, r8
    2204:	fb 2d       	mov	r31, r11
    2206:	ff 77       	andi	r31, 0x7F	; 127
    2208:	bf 2e       	mov	r11, r31
    220a:	b6 fe       	sbrs	r11, 6
    220c:	0b c0       	rjmp	.+22     	; 0x2224 <vfprintf+0x2aa>
    220e:	2b 2d       	mov	r18, r11
    2210:	2e 7f       	andi	r18, 0xFE	; 254
    2212:	a5 14       	cp	r10, r5
    2214:	50 f4       	brcc	.+20     	; 0x222a <vfprintf+0x2b0>
    2216:	b4 fe       	sbrs	r11, 4
    2218:	0a c0       	rjmp	.+20     	; 0x222e <vfprintf+0x2b4>
    221a:	b2 fc       	sbrc	r11, 2
    221c:	08 c0       	rjmp	.+16     	; 0x222e <vfprintf+0x2b4>
    221e:	2b 2d       	mov	r18, r11
    2220:	2e 7e       	andi	r18, 0xEE	; 238
    2222:	05 c0       	rjmp	.+10     	; 0x222e <vfprintf+0x2b4>
    2224:	7a 2c       	mov	r7, r10
    2226:	2b 2d       	mov	r18, r11
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <vfprintf+0x2b6>
    222a:	7a 2c       	mov	r7, r10
    222c:	01 c0       	rjmp	.+2      	; 0x2230 <vfprintf+0x2b6>
    222e:	75 2c       	mov	r7, r5
    2230:	24 ff       	sbrs	r18, 4
    2232:	0d c0       	rjmp	.+26     	; 0x224e <vfprintf+0x2d4>
    2234:	fe 01       	movw	r30, r28
    2236:	ea 0d       	add	r30, r10
    2238:	f1 1d       	adc	r31, r1
    223a:	80 81       	ld	r24, Z
    223c:	80 33       	cpi	r24, 0x30	; 48
    223e:	11 f4       	brne	.+4      	; 0x2244 <vfprintf+0x2ca>
    2240:	29 7e       	andi	r18, 0xE9	; 233
    2242:	09 c0       	rjmp	.+18     	; 0x2256 <vfprintf+0x2dc>
    2244:	22 ff       	sbrs	r18, 2
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <vfprintf+0x2da>
    2248:	73 94       	inc	r7
    224a:	73 94       	inc	r7
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <vfprintf+0x2dc>
    224e:	82 2f       	mov	r24, r18
    2250:	86 78       	andi	r24, 0x86	; 134
    2252:	09 f0       	breq	.+2      	; 0x2256 <vfprintf+0x2dc>
    2254:	73 94       	inc	r7
    2256:	23 fd       	sbrc	r18, 3
    2258:	13 c0       	rjmp	.+38     	; 0x2280 <vfprintf+0x306>
    225a:	20 ff       	sbrs	r18, 0
    225c:	06 c0       	rjmp	.+12     	; 0x226a <vfprintf+0x2f0>
    225e:	5a 2c       	mov	r5, r10
    2260:	73 14       	cp	r7, r3
    2262:	18 f4       	brcc	.+6      	; 0x226a <vfprintf+0x2f0>
    2264:	53 0c       	add	r5, r3
    2266:	57 18       	sub	r5, r7
    2268:	73 2c       	mov	r7, r3
    226a:	73 14       	cp	r7, r3
    226c:	68 f4       	brcc	.+26     	; 0x2288 <vfprintf+0x30e>
    226e:	b7 01       	movw	r22, r14
    2270:	80 e2       	ldi	r24, 0x20	; 32
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	2c 87       	std	Y+12, r18	; 0x0c
    2276:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    227a:	73 94       	inc	r7
    227c:	2c 85       	ldd	r18, Y+12	; 0x0c
    227e:	f5 cf       	rjmp	.-22     	; 0x226a <vfprintf+0x2f0>
    2280:	73 14       	cp	r7, r3
    2282:	10 f4       	brcc	.+4      	; 0x2288 <vfprintf+0x30e>
    2284:	37 18       	sub	r3, r7
    2286:	01 c0       	rjmp	.+2      	; 0x228a <vfprintf+0x310>
    2288:	31 2c       	mov	r3, r1
    228a:	24 ff       	sbrs	r18, 4
    228c:	12 c0       	rjmp	.+36     	; 0x22b2 <vfprintf+0x338>
    228e:	b7 01       	movw	r22, r14
    2290:	80 e3       	ldi	r24, 0x30	; 48
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	2c 87       	std	Y+12, r18	; 0x0c
    2296:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    229a:	2c 85       	ldd	r18, Y+12	; 0x0c
    229c:	22 ff       	sbrs	r18, 2
    229e:	17 c0       	rjmp	.+46     	; 0x22ce <vfprintf+0x354>
    22a0:	21 ff       	sbrs	r18, 1
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <vfprintf+0x330>
    22a4:	88 e5       	ldi	r24, 0x58	; 88
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <vfprintf+0x334>
    22aa:	88 e7       	ldi	r24, 0x78	; 120
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	b7 01       	movw	r22, r14
    22b0:	0c c0       	rjmp	.+24     	; 0x22ca <vfprintf+0x350>
    22b2:	82 2f       	mov	r24, r18
    22b4:	86 78       	andi	r24, 0x86	; 134
    22b6:	59 f0       	breq	.+22     	; 0x22ce <vfprintf+0x354>
    22b8:	21 fd       	sbrc	r18, 1
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <vfprintf+0x346>
    22bc:	80 e2       	ldi	r24, 0x20	; 32
    22be:	01 c0       	rjmp	.+2      	; 0x22c2 <vfprintf+0x348>
    22c0:	8b e2       	ldi	r24, 0x2B	; 43
    22c2:	27 fd       	sbrc	r18, 7
    22c4:	8d e2       	ldi	r24, 0x2D	; 45
    22c6:	b7 01       	movw	r22, r14
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    22ce:	a5 14       	cp	r10, r5
    22d0:	38 f4       	brcc	.+14     	; 0x22e0 <vfprintf+0x366>
    22d2:	b7 01       	movw	r22, r14
    22d4:	80 e3       	ldi	r24, 0x30	; 48
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    22dc:	5a 94       	dec	r5
    22de:	f7 cf       	rjmp	.-18     	; 0x22ce <vfprintf+0x354>
    22e0:	aa 94       	dec	r10
    22e2:	f4 01       	movw	r30, r8
    22e4:	ea 0d       	add	r30, r10
    22e6:	f1 1d       	adc	r31, r1
    22e8:	80 81       	ld	r24, Z
    22ea:	b7 01       	movw	r22, r14
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    22f2:	a1 10       	cpse	r10, r1
    22f4:	f5 cf       	rjmp	.-22     	; 0x22e0 <vfprintf+0x366>
    22f6:	33 20       	and	r3, r3
    22f8:	09 f4       	brne	.+2      	; 0x22fc <vfprintf+0x382>
    22fa:	51 ce       	rjmp	.-862    	; 0x1f9e <vfprintf+0x24>
    22fc:	b7 01       	movw	r22, r14
    22fe:	80 e2       	ldi	r24, 0x20	; 32
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 ef 12 	call	0x25de	; 0x25de <fputc>
    2306:	3a 94       	dec	r3
    2308:	f6 cf       	rjmp	.-20     	; 0x22f6 <vfprintf+0x37c>
    230a:	f7 01       	movw	r30, r14
    230c:	86 81       	ldd	r24, Z+6	; 0x06
    230e:	97 81       	ldd	r25, Z+7	; 0x07
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <vfprintf+0x39c>
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	9f ef       	ldi	r25, 0xFF	; 255
    2316:	2c 96       	adiw	r28, 0x0c	; 12
    2318:	e2 e1       	ldi	r30, 0x12	; 18
    231a:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__epilogue_restores__>

0000231e <calloc>:
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	86 9f       	mul	r24, r22
    2328:	80 01       	movw	r16, r0
    232a:	87 9f       	mul	r24, r23
    232c:	10 0d       	add	r17, r0
    232e:	96 9f       	mul	r25, r22
    2330:	10 0d       	add	r17, r0
    2332:	11 24       	eor	r1, r1
    2334:	c8 01       	movw	r24, r16
    2336:	0e 94 ab 11 	call	0x2356	; 0x2356 <malloc>
    233a:	ec 01       	movw	r28, r24
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	29 f0       	breq	.+10     	; 0x234a <calloc+0x2c>
    2340:	a8 01       	movw	r20, r16
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 dd 12 	call	0x25ba	; 0x25ba <memset>
    234a:	ce 01       	movw	r24, r28
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	1f 91       	pop	r17
    2352:	0f 91       	pop	r16
    2354:	08 95       	ret

00002356 <malloc>:
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	91 05       	cpc	r25, r1
    235e:	10 f4       	brcc	.+4      	; 0x2364 <malloc+0xe>
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	e0 91 42 03 	lds	r30, 0x0342
    2368:	f0 91 43 03 	lds	r31, 0x0343
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	a0 e0       	ldi	r26, 0x00	; 0
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	30 97       	sbiw	r30, 0x00	; 0
    2376:	39 f1       	breq	.+78     	; 0x23c6 <malloc+0x70>
    2378:	40 81       	ld	r20, Z
    237a:	51 81       	ldd	r21, Z+1	; 0x01
    237c:	48 17       	cp	r20, r24
    237e:	59 07       	cpc	r21, r25
    2380:	b8 f0       	brcs	.+46     	; 0x23b0 <malloc+0x5a>
    2382:	48 17       	cp	r20, r24
    2384:	59 07       	cpc	r21, r25
    2386:	71 f4       	brne	.+28     	; 0x23a4 <malloc+0x4e>
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	10 97       	sbiw	r26, 0x00	; 0
    238e:	29 f0       	breq	.+10     	; 0x239a <malloc+0x44>
    2390:	13 96       	adiw	r26, 0x03	; 3
    2392:	9c 93       	st	X, r25
    2394:	8e 93       	st	-X, r24
    2396:	12 97       	sbiw	r26, 0x02	; 2
    2398:	2c c0       	rjmp	.+88     	; 0x23f2 <malloc+0x9c>
    239a:	90 93 43 03 	sts	0x0343, r25
    239e:	80 93 42 03 	sts	0x0342, r24
    23a2:	27 c0       	rjmp	.+78     	; 0x23f2 <malloc+0x9c>
    23a4:	21 15       	cp	r18, r1
    23a6:	31 05       	cpc	r19, r1
    23a8:	31 f0       	breq	.+12     	; 0x23b6 <malloc+0x60>
    23aa:	42 17       	cp	r20, r18
    23ac:	53 07       	cpc	r21, r19
    23ae:	18 f0       	brcs	.+6      	; 0x23b6 <malloc+0x60>
    23b0:	a9 01       	movw	r20, r18
    23b2:	db 01       	movw	r26, r22
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <malloc+0x62>
    23b6:	ef 01       	movw	r28, r30
    23b8:	9a 01       	movw	r18, r20
    23ba:	bd 01       	movw	r22, r26
    23bc:	df 01       	movw	r26, r30
    23be:	02 80       	ldd	r0, Z+2	; 0x02
    23c0:	f3 81       	ldd	r31, Z+3	; 0x03
    23c2:	e0 2d       	mov	r30, r0
    23c4:	d7 cf       	rjmp	.-82     	; 0x2374 <malloc+0x1e>
    23c6:	21 15       	cp	r18, r1
    23c8:	31 05       	cpc	r19, r1
    23ca:	f9 f0       	breq	.+62     	; 0x240a <malloc+0xb4>
    23cc:	28 1b       	sub	r18, r24
    23ce:	39 0b       	sbc	r19, r25
    23d0:	24 30       	cpi	r18, 0x04	; 4
    23d2:	31 05       	cpc	r19, r1
    23d4:	80 f4       	brcc	.+32     	; 0x23f6 <malloc+0xa0>
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	9b 81       	ldd	r25, Y+3	; 0x03
    23da:	61 15       	cp	r22, r1
    23dc:	71 05       	cpc	r23, r1
    23de:	21 f0       	breq	.+8      	; 0x23e8 <malloc+0x92>
    23e0:	fb 01       	movw	r30, r22
    23e2:	93 83       	std	Z+3, r25	; 0x03
    23e4:	82 83       	std	Z+2, r24	; 0x02
    23e6:	04 c0       	rjmp	.+8      	; 0x23f0 <malloc+0x9a>
    23e8:	90 93 43 03 	sts	0x0343, r25
    23ec:	80 93 42 03 	sts	0x0342, r24
    23f0:	fe 01       	movw	r30, r28
    23f2:	32 96       	adiw	r30, 0x02	; 2
    23f4:	44 c0       	rjmp	.+136    	; 0x247e <malloc+0x128>
    23f6:	fe 01       	movw	r30, r28
    23f8:	e2 0f       	add	r30, r18
    23fa:	f3 1f       	adc	r31, r19
    23fc:	81 93       	st	Z+, r24
    23fe:	91 93       	st	Z+, r25
    2400:	22 50       	subi	r18, 0x02	; 2
    2402:	31 09       	sbc	r19, r1
    2404:	39 83       	std	Y+1, r19	; 0x01
    2406:	28 83       	st	Y, r18
    2408:	3a c0       	rjmp	.+116    	; 0x247e <malloc+0x128>
    240a:	20 91 40 03 	lds	r18, 0x0340
    240e:	30 91 41 03 	lds	r19, 0x0341
    2412:	23 2b       	or	r18, r19
    2414:	41 f4       	brne	.+16     	; 0x2426 <malloc+0xd0>
    2416:	20 91 02 01 	lds	r18, 0x0102
    241a:	30 91 03 01 	lds	r19, 0x0103
    241e:	30 93 41 03 	sts	0x0341, r19
    2422:	20 93 40 03 	sts	0x0340, r18
    2426:	20 91 00 01 	lds	r18, 0x0100
    242a:	30 91 01 01 	lds	r19, 0x0101
    242e:	21 15       	cp	r18, r1
    2430:	31 05       	cpc	r19, r1
    2432:	41 f4       	brne	.+16     	; 0x2444 <malloc+0xee>
    2434:	2d b7       	in	r18, 0x3d	; 61
    2436:	3e b7       	in	r19, 0x3e	; 62
    2438:	40 91 04 01 	lds	r20, 0x0104
    243c:	50 91 05 01 	lds	r21, 0x0105
    2440:	24 1b       	sub	r18, r20
    2442:	35 0b       	sbc	r19, r21
    2444:	e0 91 40 03 	lds	r30, 0x0340
    2448:	f0 91 41 03 	lds	r31, 0x0341
    244c:	e2 17       	cp	r30, r18
    244e:	f3 07       	cpc	r31, r19
    2450:	a0 f4       	brcc	.+40     	; 0x247a <malloc+0x124>
    2452:	2e 1b       	sub	r18, r30
    2454:	3f 0b       	sbc	r19, r31
    2456:	28 17       	cp	r18, r24
    2458:	39 07       	cpc	r19, r25
    245a:	78 f0       	brcs	.+30     	; 0x247a <malloc+0x124>
    245c:	ac 01       	movw	r20, r24
    245e:	4e 5f       	subi	r20, 0xFE	; 254
    2460:	5f 4f       	sbci	r21, 0xFF	; 255
    2462:	24 17       	cp	r18, r20
    2464:	35 07       	cpc	r19, r21
    2466:	48 f0       	brcs	.+18     	; 0x247a <malloc+0x124>
    2468:	4e 0f       	add	r20, r30
    246a:	5f 1f       	adc	r21, r31
    246c:	50 93 41 03 	sts	0x0341, r21
    2470:	40 93 40 03 	sts	0x0340, r20
    2474:	81 93       	st	Z+, r24
    2476:	91 93       	st	Z+, r25
    2478:	02 c0       	rjmp	.+4      	; 0x247e <malloc+0x128>
    247a:	e0 e0       	ldi	r30, 0x00	; 0
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	cf 01       	movw	r24, r30
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	08 95       	ret

00002486 <free>:
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	09 f4       	brne	.+2      	; 0x2490 <free+0xa>
    248e:	87 c0       	rjmp	.+270    	; 0x259e <free+0x118>
    2490:	fc 01       	movw	r30, r24
    2492:	32 97       	sbiw	r30, 0x02	; 2
    2494:	13 82       	std	Z+3, r1	; 0x03
    2496:	12 82       	std	Z+2, r1	; 0x02
    2498:	c0 91 42 03 	lds	r28, 0x0342
    249c:	d0 91 43 03 	lds	r29, 0x0343
    24a0:	20 97       	sbiw	r28, 0x00	; 0
    24a2:	81 f4       	brne	.+32     	; 0x24c4 <free+0x3e>
    24a4:	20 81       	ld	r18, Z
    24a6:	31 81       	ldd	r19, Z+1	; 0x01
    24a8:	28 0f       	add	r18, r24
    24aa:	39 1f       	adc	r19, r25
    24ac:	80 91 40 03 	lds	r24, 0x0340
    24b0:	90 91 41 03 	lds	r25, 0x0341
    24b4:	82 17       	cp	r24, r18
    24b6:	93 07       	cpc	r25, r19
    24b8:	79 f5       	brne	.+94     	; 0x2518 <free+0x92>
    24ba:	f0 93 41 03 	sts	0x0341, r31
    24be:	e0 93 40 03 	sts	0x0340, r30
    24c2:	6d c0       	rjmp	.+218    	; 0x259e <free+0x118>
    24c4:	de 01       	movw	r26, r28
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	ae 17       	cp	r26, r30
    24cc:	bf 07       	cpc	r27, r31
    24ce:	50 f4       	brcc	.+20     	; 0x24e4 <free+0x5e>
    24d0:	12 96       	adiw	r26, 0x02	; 2
    24d2:	4d 91       	ld	r20, X+
    24d4:	5c 91       	ld	r21, X
    24d6:	13 97       	sbiw	r26, 0x03	; 3
    24d8:	9d 01       	movw	r18, r26
    24da:	41 15       	cp	r20, r1
    24dc:	51 05       	cpc	r21, r1
    24de:	09 f1       	breq	.+66     	; 0x2522 <free+0x9c>
    24e0:	da 01       	movw	r26, r20
    24e2:	f3 cf       	rjmp	.-26     	; 0x24ca <free+0x44>
    24e4:	b3 83       	std	Z+3, r27	; 0x03
    24e6:	a2 83       	std	Z+2, r26	; 0x02
    24e8:	40 81       	ld	r20, Z
    24ea:	51 81       	ldd	r21, Z+1	; 0x01
    24ec:	84 0f       	add	r24, r20
    24ee:	95 1f       	adc	r25, r21
    24f0:	8a 17       	cp	r24, r26
    24f2:	9b 07       	cpc	r25, r27
    24f4:	71 f4       	brne	.+28     	; 0x2512 <free+0x8c>
    24f6:	8d 91       	ld	r24, X+
    24f8:	9c 91       	ld	r25, X
    24fa:	11 97       	sbiw	r26, 0x01	; 1
    24fc:	84 0f       	add	r24, r20
    24fe:	95 1f       	adc	r25, r21
    2500:	02 96       	adiw	r24, 0x02	; 2
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	12 96       	adiw	r26, 0x02	; 2
    2508:	8d 91       	ld	r24, X+
    250a:	9c 91       	ld	r25, X
    250c:	13 97       	sbiw	r26, 0x03	; 3
    250e:	93 83       	std	Z+3, r25	; 0x03
    2510:	82 83       	std	Z+2, r24	; 0x02
    2512:	21 15       	cp	r18, r1
    2514:	31 05       	cpc	r19, r1
    2516:	29 f4       	brne	.+10     	; 0x2522 <free+0x9c>
    2518:	f0 93 43 03 	sts	0x0343, r31
    251c:	e0 93 42 03 	sts	0x0342, r30
    2520:	3e c0       	rjmp	.+124    	; 0x259e <free+0x118>
    2522:	d9 01       	movw	r26, r18
    2524:	13 96       	adiw	r26, 0x03	; 3
    2526:	fc 93       	st	X, r31
    2528:	ee 93       	st	-X, r30
    252a:	12 97       	sbiw	r26, 0x02	; 2
    252c:	4d 91       	ld	r20, X+
    252e:	5d 91       	ld	r21, X+
    2530:	a4 0f       	add	r26, r20
    2532:	b5 1f       	adc	r27, r21
    2534:	ea 17       	cp	r30, r26
    2536:	fb 07       	cpc	r31, r27
    2538:	79 f4       	brne	.+30     	; 0x2558 <free+0xd2>
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	84 0f       	add	r24, r20
    2540:	95 1f       	adc	r25, r21
    2542:	02 96       	adiw	r24, 0x02	; 2
    2544:	d9 01       	movw	r26, r18
    2546:	11 96       	adiw	r26, 0x01	; 1
    2548:	9c 93       	st	X, r25
    254a:	8e 93       	st	-X, r24
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	13 96       	adiw	r26, 0x03	; 3
    2552:	9c 93       	st	X, r25
    2554:	8e 93       	st	-X, r24
    2556:	12 97       	sbiw	r26, 0x02	; 2
    2558:	e0 e0       	ldi	r30, 0x00	; 0
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	9b 81       	ldd	r25, Y+3	; 0x03
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	19 f0       	breq	.+6      	; 0x256a <free+0xe4>
    2564:	fe 01       	movw	r30, r28
    2566:	ec 01       	movw	r28, r24
    2568:	f9 cf       	rjmp	.-14     	; 0x255c <free+0xd6>
    256a:	ce 01       	movw	r24, r28
    256c:	02 96       	adiw	r24, 0x02	; 2
    256e:	28 81       	ld	r18, Y
    2570:	39 81       	ldd	r19, Y+1	; 0x01
    2572:	82 0f       	add	r24, r18
    2574:	93 1f       	adc	r25, r19
    2576:	20 91 40 03 	lds	r18, 0x0340
    257a:	30 91 41 03 	lds	r19, 0x0341
    257e:	28 17       	cp	r18, r24
    2580:	39 07       	cpc	r19, r25
    2582:	69 f4       	brne	.+26     	; 0x259e <free+0x118>
    2584:	30 97       	sbiw	r30, 0x00	; 0
    2586:	29 f4       	brne	.+10     	; 0x2592 <free+0x10c>
    2588:	10 92 43 03 	sts	0x0343, r1
    258c:	10 92 42 03 	sts	0x0342, r1
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <free+0x110>
    2592:	13 82       	std	Z+3, r1	; 0x03
    2594:	12 82       	std	Z+2, r1	; 0x02
    2596:	d0 93 41 03 	sts	0x0341, r29
    259a:	c0 93 40 03 	sts	0x0340, r28
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	08 95       	ret

000025a4 <strnlen_P>:
    25a4:	fc 01       	movw	r30, r24
    25a6:	05 90       	lpm	r0, Z+
    25a8:	61 50       	subi	r22, 0x01	; 1
    25aa:	70 40       	sbci	r23, 0x00	; 0
    25ac:	01 10       	cpse	r0, r1
    25ae:	d8 f7       	brcc	.-10     	; 0x25a6 <strnlen_P+0x2>
    25b0:	80 95       	com	r24
    25b2:	90 95       	com	r25
    25b4:	8e 0f       	add	r24, r30
    25b6:	9f 1f       	adc	r25, r31
    25b8:	08 95       	ret

000025ba <memset>:
    25ba:	dc 01       	movw	r26, r24
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <memset+0x6>
    25be:	6d 93       	st	X+, r22
    25c0:	41 50       	subi	r20, 0x01	; 1
    25c2:	50 40       	sbci	r21, 0x00	; 0
    25c4:	e0 f7       	brcc	.-8      	; 0x25be <memset+0x4>
    25c6:	08 95       	ret

000025c8 <strnlen>:
    25c8:	fc 01       	movw	r30, r24
    25ca:	61 50       	subi	r22, 0x01	; 1
    25cc:	70 40       	sbci	r23, 0x00	; 0
    25ce:	01 90       	ld	r0, Z+
    25d0:	01 10       	cpse	r0, r1
    25d2:	d8 f7       	brcc	.-10     	; 0x25ca <strnlen+0x2>
    25d4:	80 95       	com	r24
    25d6:	90 95       	com	r25
    25d8:	8e 0f       	add	r24, r30
    25da:	9f 1f       	adc	r25, r31
    25dc:	08 95       	ret

000025de <fputc>:
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	18 2f       	mov	r17, r24
    25e8:	09 2f       	mov	r16, r25
    25ea:	eb 01       	movw	r28, r22
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	81 fd       	sbrc	r24, 1
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <fputc+0x1a>
    25f2:	8f ef       	ldi	r24, 0xFF	; 255
    25f4:	9f ef       	ldi	r25, 0xFF	; 255
    25f6:	20 c0       	rjmp	.+64     	; 0x2638 <fputc+0x5a>
    25f8:	82 ff       	sbrs	r24, 2
    25fa:	10 c0       	rjmp	.+32     	; 0x261c <fputc+0x3e>
    25fc:	4e 81       	ldd	r20, Y+6	; 0x06
    25fe:	5f 81       	ldd	r21, Y+7	; 0x07
    2600:	2c 81       	ldd	r18, Y+4	; 0x04
    2602:	3d 81       	ldd	r19, Y+5	; 0x05
    2604:	42 17       	cp	r20, r18
    2606:	53 07       	cpc	r21, r19
    2608:	7c f4       	brge	.+30     	; 0x2628 <fputc+0x4a>
    260a:	e8 81       	ld	r30, Y
    260c:	f9 81       	ldd	r31, Y+1	; 0x01
    260e:	9f 01       	movw	r18, r30
    2610:	2f 5f       	subi	r18, 0xFF	; 255
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	39 83       	std	Y+1, r19	; 0x01
    2616:	28 83       	st	Y, r18
    2618:	10 83       	st	Z, r17
    261a:	06 c0       	rjmp	.+12     	; 0x2628 <fputc+0x4a>
    261c:	e8 85       	ldd	r30, Y+8	; 0x08
    261e:	f9 85       	ldd	r31, Y+9	; 0x09
    2620:	81 2f       	mov	r24, r17
    2622:	09 95       	icall
    2624:	89 2b       	or	r24, r25
    2626:	29 f7       	brne	.-54     	; 0x25f2 <fputc+0x14>
    2628:	2e 81       	ldd	r18, Y+6	; 0x06
    262a:	3f 81       	ldd	r19, Y+7	; 0x07
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	3f 83       	std	Y+7, r19	; 0x07
    2632:	2e 83       	std	Y+6, r18	; 0x06
    2634:	81 2f       	mov	r24, r17
    2636:	90 2f       	mov	r25, r16
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	08 95       	ret

00002642 <__ultoa_invert>:
    2642:	fa 01       	movw	r30, r20
    2644:	aa 27       	eor	r26, r26
    2646:	28 30       	cpi	r18, 0x08	; 8
    2648:	51 f1       	breq	.+84     	; 0x269e <__ultoa_invert+0x5c>
    264a:	20 31       	cpi	r18, 0x10	; 16
    264c:	81 f1       	breq	.+96     	; 0x26ae <__ultoa_invert+0x6c>
    264e:	e8 94       	clt
    2650:	6f 93       	push	r22
    2652:	6e 7f       	andi	r22, 0xFE	; 254
    2654:	6e 5f       	subi	r22, 0xFE	; 254
    2656:	7f 4f       	sbci	r23, 0xFF	; 255
    2658:	8f 4f       	sbci	r24, 0xFF	; 255
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	af 4f       	sbci	r26, 0xFF	; 255
    265e:	b1 e0       	ldi	r27, 0x01	; 1
    2660:	3e d0       	rcall	.+124    	; 0x26de <__ultoa_invert+0x9c>
    2662:	b4 e0       	ldi	r27, 0x04	; 4
    2664:	3c d0       	rcall	.+120    	; 0x26de <__ultoa_invert+0x9c>
    2666:	67 0f       	add	r22, r23
    2668:	78 1f       	adc	r23, r24
    266a:	89 1f       	adc	r24, r25
    266c:	9a 1f       	adc	r25, r26
    266e:	a1 1d       	adc	r26, r1
    2670:	68 0f       	add	r22, r24
    2672:	79 1f       	adc	r23, r25
    2674:	8a 1f       	adc	r24, r26
    2676:	91 1d       	adc	r25, r1
    2678:	a1 1d       	adc	r26, r1
    267a:	6a 0f       	add	r22, r26
    267c:	71 1d       	adc	r23, r1
    267e:	81 1d       	adc	r24, r1
    2680:	91 1d       	adc	r25, r1
    2682:	a1 1d       	adc	r26, r1
    2684:	20 d0       	rcall	.+64     	; 0x26c6 <__ultoa_invert+0x84>
    2686:	09 f4       	brne	.+2      	; 0x268a <__ultoa_invert+0x48>
    2688:	68 94       	set
    268a:	3f 91       	pop	r19
    268c:	2a e0       	ldi	r18, 0x0A	; 10
    268e:	26 9f       	mul	r18, r22
    2690:	11 24       	eor	r1, r1
    2692:	30 19       	sub	r19, r0
    2694:	30 5d       	subi	r19, 0xD0	; 208
    2696:	31 93       	st	Z+, r19
    2698:	de f6       	brtc	.-74     	; 0x2650 <__ultoa_invert+0xe>
    269a:	cf 01       	movw	r24, r30
    269c:	08 95       	ret
    269e:	46 2f       	mov	r20, r22
    26a0:	47 70       	andi	r20, 0x07	; 7
    26a2:	40 5d       	subi	r20, 0xD0	; 208
    26a4:	41 93       	st	Z+, r20
    26a6:	b3 e0       	ldi	r27, 0x03	; 3
    26a8:	0f d0       	rcall	.+30     	; 0x26c8 <__ultoa_invert+0x86>
    26aa:	c9 f7       	brne	.-14     	; 0x269e <__ultoa_invert+0x5c>
    26ac:	f6 cf       	rjmp	.-20     	; 0x269a <__ultoa_invert+0x58>
    26ae:	46 2f       	mov	r20, r22
    26b0:	4f 70       	andi	r20, 0x0F	; 15
    26b2:	40 5d       	subi	r20, 0xD0	; 208
    26b4:	4a 33       	cpi	r20, 0x3A	; 58
    26b6:	18 f0       	brcs	.+6      	; 0x26be <__ultoa_invert+0x7c>
    26b8:	49 5d       	subi	r20, 0xD9	; 217
    26ba:	31 fd       	sbrc	r19, 1
    26bc:	40 52       	subi	r20, 0x20	; 32
    26be:	41 93       	st	Z+, r20
    26c0:	02 d0       	rcall	.+4      	; 0x26c6 <__ultoa_invert+0x84>
    26c2:	a9 f7       	brne	.-22     	; 0x26ae <__ultoa_invert+0x6c>
    26c4:	ea cf       	rjmp	.-44     	; 0x269a <__ultoa_invert+0x58>
    26c6:	b4 e0       	ldi	r27, 0x04	; 4
    26c8:	a6 95       	lsr	r26
    26ca:	97 95       	ror	r25
    26cc:	87 95       	ror	r24
    26ce:	77 95       	ror	r23
    26d0:	67 95       	ror	r22
    26d2:	ba 95       	dec	r27
    26d4:	c9 f7       	brne	.-14     	; 0x26c8 <__ultoa_invert+0x86>
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	61 05       	cpc	r22, r1
    26da:	71 05       	cpc	r23, r1
    26dc:	08 95       	ret
    26de:	9b 01       	movw	r18, r22
    26e0:	ac 01       	movw	r20, r24
    26e2:	0a 2e       	mov	r0, r26
    26e4:	06 94       	lsr	r0
    26e6:	57 95       	ror	r21
    26e8:	47 95       	ror	r20
    26ea:	37 95       	ror	r19
    26ec:	27 95       	ror	r18
    26ee:	ba 95       	dec	r27
    26f0:	c9 f7       	brne	.-14     	; 0x26e4 <__ultoa_invert+0xa2>
    26f2:	62 0f       	add	r22, r18
    26f4:	73 1f       	adc	r23, r19
    26f6:	84 1f       	adc	r24, r20
    26f8:	95 1f       	adc	r25, r21
    26fa:	a0 1d       	adc	r26, r0
    26fc:	08 95       	ret

000026fe <__prologue_saves__>:
    26fe:	2f 92       	push	r2
    2700:	3f 92       	push	r3
    2702:	4f 92       	push	r4
    2704:	5f 92       	push	r5
    2706:	6f 92       	push	r6
    2708:	7f 92       	push	r7
    270a:	8f 92       	push	r8
    270c:	9f 92       	push	r9
    270e:	af 92       	push	r10
    2710:	bf 92       	push	r11
    2712:	cf 92       	push	r12
    2714:	df 92       	push	r13
    2716:	ef 92       	push	r14
    2718:	ff 92       	push	r15
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	ca 1b       	sub	r28, r26
    2728:	db 0b       	sbc	r29, r27
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	09 94       	ijmp

00002736 <__epilogue_restores__>:
    2736:	2a 88       	ldd	r2, Y+18	; 0x12
    2738:	39 88       	ldd	r3, Y+17	; 0x11
    273a:	48 88       	ldd	r4, Y+16	; 0x10
    273c:	5f 84       	ldd	r5, Y+15	; 0x0f
    273e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2740:	7d 84       	ldd	r7, Y+13	; 0x0d
    2742:	8c 84       	ldd	r8, Y+12	; 0x0c
    2744:	9b 84       	ldd	r9, Y+11	; 0x0b
    2746:	aa 84       	ldd	r10, Y+10	; 0x0a
    2748:	b9 84       	ldd	r11, Y+9	; 0x09
    274a:	c8 84       	ldd	r12, Y+8	; 0x08
    274c:	df 80       	ldd	r13, Y+7	; 0x07
    274e:	ee 80       	ldd	r14, Y+6	; 0x06
    2750:	fd 80       	ldd	r15, Y+5	; 0x05
    2752:	0c 81       	ldd	r16, Y+4	; 0x04
    2754:	1b 81       	ldd	r17, Y+3	; 0x03
    2756:	aa 81       	ldd	r26, Y+2	; 0x02
    2758:	b9 81       	ldd	r27, Y+1	; 0x01
    275a:	ce 0f       	add	r28, r30
    275c:	d1 1d       	adc	r29, r1
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	ed 01       	movw	r28, r26
    276a:	08 95       	ret

0000276c <_exit>:
    276c:	f8 94       	cli

0000276e <__stop_program>:
    276e:	ff cf       	rjmp	.-2      	; 0x276e <__stop_program>
