
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a6  00800100  00002494  00002528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  008003a6  008003a6  000027ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  0000282a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ca2  00000000  00000000  00002b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000107a  00000000  00000000  00006834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000127b  00000000  00000000  000078ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ac0  00000000  00000000  00008b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d0a  00000000  00000000  000095ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002943  00000000  00000000  0000a2f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  0000cc39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__ctors_end>
       4:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_1>
       8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_2>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_3>
      10:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      1c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      20:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      24:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      28:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      30:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      34:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      38:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      3c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      44:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      4c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      50:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      54:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      58:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      5c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      60:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      64:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      68:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>
      6c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_3>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_2>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_1>:
      ea:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000f4 <font>:
	...
      fc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     10c:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     11c:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     12c:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     13c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     14c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     15c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     16c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     17c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     18c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     19c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ac:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1bc:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1cc:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1dc:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1ec:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1fc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     20c:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     21c:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     22c:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     23c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     24c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     25c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     26c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     27c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     28c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     29c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ac:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2bc:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2cc:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2dc:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2ec:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2fc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     30c:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     31c:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     32c:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     33c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     34c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     35c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     36c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     37c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     38c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     39c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ac:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3bc:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3cc:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3dc:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3ec:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3fc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     40c:	01 01 01 01 01 01 01 ff                             ........

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d4 e0       	ldi	r29, 0x04	; 4
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	e4 e9       	ldi	r30, 0x94	; 148
     428:	f4 e2       	ldi	r31, 0x24	; 36
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x10>
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a6 3a       	cpi	r26, 0xA6	; 166
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0xc>

00000436 <__do_clear_bss>:
     436:	24 e0       	ldi	r18, 0x04	; 4
     438:	a6 ea       	ldi	r26, 0xA6	; 166
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a2 34       	cpi	r26, 0x42	; 66
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <main>
     44a:	0c 94 48 12 	jmp	0x2490	; 0x2490 <_exit>

0000044e <__bad_interrupt>:
     44e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000452 <readADC>:
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	91 05       	cpc	r25, r1
     456:	71 f0       	breq	.+28     	; 0x474 <readADC+0x22>
     458:	1c f4       	brge	.+6      	; 0x460 <readADC+0xe>
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	39 f0       	breq	.+14     	; 0x46c <readADC+0x1a>
     45e:	1c c0       	rjmp	.+56     	; 0x498 <readADC+0x46>
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	91 05       	cpc	r25, r1
     464:	59 f0       	breq	.+22     	; 0x47c <readADC+0x2a>
     466:	04 97       	sbiw	r24, 0x04	; 4
     468:	69 f0       	breq	.+26     	; 0x484 <readADC+0x32>
     46a:	16 c0       	rjmp	.+44     	; 0x498 <readADC+0x46>
     46c:	84 e1       	ldi	r24, 0x14	; 20
     46e:	80 93 00 14 	sts	0x1400, r24
     472:	0b c0       	rjmp	.+22     	; 0x48a <readADC+0x38>
     474:	85 e1       	ldi	r24, 0x15	; 21
     476:	80 93 00 14 	sts	0x1400, r24
     47a:	07 c0       	rjmp	.+14     	; 0x48a <readADC+0x38>
     47c:	86 e1       	ldi	r24, 0x16	; 22
     47e:	80 93 00 14 	sts	0x1400, r24
     482:	03 c0       	rjmp	.+6      	; 0x48a <readADC+0x38>
     484:	87 e1       	ldi	r24, 0x17	; 23
     486:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48a:	82 e5       	ldi	r24, 0x52	; 82
     48c:	8a 95       	dec	r24
     48e:	f1 f7       	brne	.-4      	; 0x48c <readADC+0x3a>
     490:	80 91 00 14 	lds	r24, 0x1400
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	08 95       	ret
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	08 95       	ret

0000049e <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     49e:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     4a0:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     4a2:	85 b7       	in	r24, 0x35	; 53
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     4a8:	85 b7       	in	r24, 0x35	; 53
     4aa:	82 60       	ori	r24, 0x02	; 2
     4ac:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     4ae:	85 b7       	in	r24, 0x35	; 53
     4b0:	84 60       	ori	r24, 0x04	; 4
     4b2:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     4b4:	85 b7       	in	r24, 0x35	; 53
     4b6:	88 60       	ori	r24, 0x08	; 8
     4b8:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     4ba:	8b b7       	in	r24, 0x3b	; 59
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     4c0:	8b b7       	in	r24, 0x3b	; 59
     4c2:	80 68       	ori	r24, 0x80	; 128
     4c4:	8b bf       	out	0x3b, r24	; 59
     4c6:	08 95       	ret

000004c8 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	2f 93       	push	r18
     4dc:	3f 93       	push	r19
     4de:	4f 93       	push	r20
     4e0:	5f 93       	push	r21
     4e2:	6f 93       	push	r22
     4e4:	7f 93       	push	r23
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     4f6:	8c e0       	ldi	r24, 0x0C	; 12
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     502:	82 e5       	ldi	r24, 0x52	; 82
     504:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     508:	f8 2e       	mov	r15, r24
     50a:	e9 2e       	mov	r14, r25
     50c:	8c e4       	ldi	r24, 0x4C	; 76
     50e:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     512:	18 2f       	mov	r17, r24
     514:	09 2f       	mov	r16, r25
     516:	89 e5       	ldi	r24, 0x59	; 89
     518:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     51c:	c8 2f       	mov	r28, r24
     51e:	d9 2f       	mov	r29, r25
     520:	88 e5       	ldi	r24, 0x58	; 88
     522:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	85 e3       	ldi	r24, 0x35	; 53
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
	menu_right_button_flag();
     542:	0e 94 fd 06 	call	0xdfa	; 0xdfa <menu_right_button_flag>
     546:	8d b7       	in	r24, 0x3d	; 61
     548:	9e b7       	in	r25, 0x3e	; 62
     54a:	0c 96       	adiw	r24, 0x0c	; 12
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	9e bf       	out	0x3e, r25	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	8d bf       	out	0x3d, r24	; 61
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
	menu_left_button_flag();
     5a6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <menu_left_button_flag>
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	0f 90       	pop	r0
     5c8:	1f 90       	pop	r1
     5ca:	18 95       	reti

000005cc <CAN_construct_meassage>:
CAN_message_t* CAN_message_receive(void){	
	return &CAN_receive_buffer;
}

void CAN_construct_meassage(int id, uint8_t length){
	CAN_send_buffer.id = id;
     5cc:	90 93 a7 03 	sts	0x03A7, r25
     5d0:	80 93 a6 03 	sts	0x03A6, r24
	CAN_send_buffer.length = length;
     5d4:	60 93 a8 03 	sts	0x03A8, r22
	for(uint8_t i = 0; i < length; i++){
     5d8:	66 23       	and	r22, r22
     5da:	41 f0       	breq	.+16     	; 0x5ec <CAN_construct_meassage+0x20>
     5dc:	89 ea       	ldi	r24, 0xA9	; 169
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
     5e2:	11 92       	st	Z+, r1
     5e4:	2e 2f       	mov	r18, r30
     5e6:	28 1b       	sub	r18, r24
}

void CAN_construct_meassage(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
     5e8:	26 17       	cp	r18, r22
     5ea:	d8 f3       	brcs	.-10     	; 0x5e2 <CAN_construct_meassage+0x16>
     5ec:	08 95       	ret

000005ee <CAN_initialize>:
static CAN_message_t CAN_send_buffer;

void CAN_initialize(void){
	int i = 1;
	i++;
	EMCUCR &= ~(1<<ISC2);
     5ee:	86 b7       	in	r24, 0x36	; 54
     5f0:	8e 7f       	andi	r24, 0xFE	; 254
     5f2:	86 bf       	out	0x36, r24	; 54
	GICR |= (1<<INT2);
     5f4:	8b b7       	in	r24, 0x3b	; 59
     5f6:	80 62       	ori	r24, 0x20	; 32
     5f8:	8b bf       	out	0x3b, r24	; 59
	MCP2515_bit_modify(CANINTE,0b00000001,0b00000001);
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	0e 94 1e 06 	call	0xc3c	; 0xc3c <MCP2515_bit_modify>
	CAN_construct_meassage(CAN_ID,CAN_MESSAGE_LENGTH);
     604:	68 e0       	ldi	r22, 0x08	; 8
     606:	88 e2       	ldi	r24, 0x28	; 40
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <CAN_construct_meassage>
     60e:	08 95       	ret

00000610 <CAN_read>:
	//printf("ID %i L: %i DATA: %i %i %i %i %i %i %i %i\n",CAN_send_buffer.id,CAN_send_buffer.length,CAN_send_buffer.data[0],CAN_send_buffer.data[1],CAN_send_buffer.data[2],CAN_send_buffer.data[3],CAN_send_buffer.data[4],CAN_send_buffer.data[5],CAN_send_buffer.data[6],CAN_send_buffer.data[7]);
	
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     610:	0e 94 0c 06 	call	0xc18	; 0xc18 <MCP2515_read>
}
     614:	08 95       	ret

00000616 <CAN_transmit_complete>:
ISR(INT2_vect){//interrupt button Left
	CAN_data_receive();
}


uint8_t CAN_transmit_complete(void){
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	1f 92       	push	r1
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62


	volatile char interrupt = MCP2515_read(MCP_CANINTF);
     620:	8c e2       	ldi	r24, 0x2C	; 44
     622:	0e 94 0c 06 	call	0xc18	; 0xc18 <MCP2515_read>
     626:	89 83       	std	Y+1, r24	; 0x01

	while((!((1 << MCP_RX0IF) & interrupt))&&(!((1 << MCP_RX1IF)&interrupt))){
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	81 fd       	sbrc	r24, 1
     62c:	0d c0       	rjmp	.+26     	; 0x648 <CAN_transmit_complete+0x32>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	82 fd       	sbrc	r24, 2
     632:	0a c0       	rjmp	.+20     	; 0x648 <CAN_transmit_complete+0x32>
		interrupt = MCP2515_read(MCP_CANINTF);
     634:	8c e2       	ldi	r24, 0x2C	; 44
     636:	0e 94 0c 06 	call	0xc18	; 0xc18 <MCP2515_read>
     63a:	89 83       	std	Y+1, r24	; 0x01
uint8_t CAN_transmit_complete(void){


	volatile char interrupt = MCP2515_read(MCP_CANINTF);

	while((!((1 << MCP_RX0IF) & interrupt))&&(!((1 << MCP_RX1IF)&interrupt))){
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	81 fd       	sbrc	r24, 1
     640:	03 c0       	rjmp	.+6      	; 0x648 <CAN_transmit_complete+0x32>
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	82 ff       	sbrs	r24, 2
     646:	f6 cf       	rjmp	.-20     	; 0x634 <CAN_transmit_complete+0x1e>
		interrupt = MCP2515_read(MCP_CANINTF);
	}
	

	if((1 << MCP_RX0IF)&interrupt){
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	81 fd       	sbrc	r24, 1
     64c:	05 c0       	rjmp	.+10     	; 0x658 <CAN_transmit_complete+0x42>
		return 0;
	}
	else if((1 << MCP_RX1IF)&interrupt){
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	82 ff       	sbrs	r24, 2
     652:	04 c0       	rjmp	.+8      	; 0x65c <CAN_transmit_complete+0x46>
		return 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	03 c0       	rjmp	.+6      	; 0x65e <CAN_transmit_complete+0x48>
		interrupt = MCP2515_read(MCP_CANINTF);
	}
	

	if((1 << MCP_RX0IF)&interrupt){
		return 0;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	01 c0       	rjmp	.+2      	; 0x65e <CAN_transmit_complete+0x48>
	}
	else if((1 << MCP_RX1IF)&interrupt){
		return 1;
	}
	else{
		return -1;
     65c:	8f ef       	ldi	r24, 0xFF	; 255
	}
     65e:	0f 90       	pop	r0
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <CAN_data_receive>:
#define RXBnSIDH 0x61
#define RXBnSIDL 0x62
#define RXBnDLC 0x65
#define RXBnDM 0x66

void CAN_data_receive() {
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
	uint8_t n = CAN_transmit_complete();
     66c:	0e 94 0b 03 	call	0x616	; 0x616 <CAN_transmit_complete>
	if (n >= 1){
     670:	88 23       	and	r24, r24
     672:	61 f1       	breq	.+88     	; 0x6cc <CAN_data_receive+0x66>
		CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     674:	c8 2f       	mov	r28, r24
     676:	c2 95       	swap	r28
     678:	c0 7f       	andi	r28, 0xF0	; 240
     67a:	82 e6       	ldi	r24, 0x62	; 98
     67c:	8c 0f       	add	r24, r28
     67e:	0e 94 08 03 	call	0x610	; 0x610 <CAN_read>
     682:	81 e6       	ldi	r24, 0x61	; 97
     684:	8c 0f       	add	r24, r28
     686:	0e 94 08 03 	call	0x610	; 0x610 <CAN_read>
     68a:	28 e0       	ldi	r18, 0x08	; 8
     68c:	82 9f       	mul	r24, r18
     68e:	c0 01       	movw	r24, r0
     690:	11 24       	eor	r1, r1
     692:	90 93 b2 03 	sts	0x03B2, r25
     696:	80 93 b1 03 	sts	0x03B1, r24
		CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     69a:	85 e6       	ldi	r24, 0x65	; 101
     69c:	8c 0f       	add	r24, r28
     69e:	0e 94 08 03 	call	0x610	; 0x610 <CAN_read>
     6a2:	8f 70       	andi	r24, 0x0F	; 15
     6a4:	80 93 b3 03 	sts	0x03B3, r24
		for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     6a8:	88 23       	and	r24, r24
     6aa:	81 f0       	breq	.+32     	; 0x6cc <CAN_data_receive+0x66>
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	c3 eb       	ldi	r28, 0xB3	; 179
     6b0:	d3 e0       	ldi	r29, 0x03	; 3
			CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
     6b2:	86 e6       	ldi	r24, 0x66	; 102
     6b4:	81 0f       	add	r24, r17
     6b6:	0e 94 08 03 	call	0x610	; 0x610 <CAN_read>
     6ba:	e1 2f       	mov	r30, r17
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	ef 54       	subi	r30, 0x4F	; 79
     6c0:	fc 4f       	sbci	r31, 0xFC	; 252
     6c2:	83 83       	std	Z+3, r24	; 0x03
void CAN_data_receive() {
	uint8_t n = CAN_transmit_complete();
	if (n >= 1){
		CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
		CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
		for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     6c4:	1f 5f       	subi	r17, 0xFF	; 255
     6c6:	88 81       	ld	r24, Y
     6c8:	18 17       	cp	r17, r24
     6ca:	98 f3       	brcs	.-26     	; 0x6b2 <CAN_data_receive+0x4c>
			CAN_receive_buffer.data[m] = CAN_read(RXBnDM + m);
		}
		
	}
	printf("%i",CAN_receive_buffer.data[0]);
     6cc:	80 91 b4 03 	lds	r24, 0x03B4
     6d0:	1f 92       	push	r1
     6d2:	8f 93       	push	r24
     6d4:	8e e4       	ldi	r24, 0x4E	; 78
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
	MCP2515_bit_modify(MCP_CANINTF,0xFF,0); //clear all interrupts
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	6f ef       	ldi	r22, 0xFF	; 255
     6e4:	8c e2       	ldi	r24, 0x2C	; 44
     6e6:	0e 94 1e 06 	call	0xc3c	; 0xc3c <MCP2515_bit_modify>
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	08 95       	ret

000006fa <__vector_3>:

ISR(INT2_vect){//interrupt button Left
     6fa:	1f 92       	push	r1
     6fc:	0f 92       	push	r0
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	2f 93       	push	r18
     706:	3f 93       	push	r19
     708:	4f 93       	push	r20
     70a:	5f 93       	push	r21
     70c:	6f 93       	push	r22
     70e:	7f 93       	push	r23
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	af 93       	push	r26
     716:	bf 93       	push	r27
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
	CAN_data_receive();
     71c:	0e 94 33 03 	call	0x666	; 0x666 <CAN_data_receive>
}
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <calibrate_joystick>:
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	c4 e6       	ldi	r28, 0x64	; 100
     74c:	d0 e0       	ldi	r29, 0x00	; 0
     74e:	00 91 c6 03 	lds	r16, 0x03C6
     752:	10 91 c7 03 	lds	r17, 0x03C7
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     75e:	01 58       	subi	r16, 0x81	; 129
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	08 1b       	sub	r16, r24
     764:	19 0b       	sbc	r17, r25
     766:	10 93 c7 03 	sts	0x03C7, r17
     76a:	00 93 c6 03 	sts	0x03C6, r16
     76e:	00 91 c4 03 	lds	r16, 0x03C4
     772:	10 91 c5 03 	lds	r17, 0x03C5
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     77e:	01 58       	subi	r16, 0x81	; 129
     780:	1f 4f       	sbci	r17, 0xFF	; 255
     782:	08 1b       	sub	r16, r24
     784:	19 0b       	sbc	r17, r25
     786:	10 93 c5 03 	sts	0x03C5, r17
     78a:	00 93 c4 03 	sts	0x03C4, r16
     78e:	21 97       	sbiw	r28, 0x01	; 1
     790:	20 97       	sbiw	r28, 0x00	; 0
     792:	e9 f6       	brne	.-70     	; 0x74e <calibrate_joystick+0xc>
     794:	80 91 c6 03 	lds	r24, 0x03C6
     798:	90 91 c7 03 	lds	r25, 0x03C7
     79c:	24 e6       	ldi	r18, 0x64	; 100
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	b9 01       	movw	r22, r18
     7a2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__divmodhi4>
     7a6:	70 93 c7 03 	sts	0x03C7, r23
     7aa:	60 93 c6 03 	sts	0x03C6, r22
     7ae:	80 91 c4 03 	lds	r24, 0x03C4
     7b2:	90 91 c5 03 	lds	r25, 0x03C5
     7b6:	b9 01       	movw	r22, r18
     7b8:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__divmodhi4>
     7bc:	70 93 c5 03 	sts	0x03C5, r23
     7c0:	60 93 c4 03 	sts	0x03C4, r22
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <signal_to_range>:
     7ce:	2f 92       	push	r2
     7d0:	3f 92       	push	r3
     7d2:	4f 92       	push	r4
     7d4:	5f 92       	push	r5
     7d6:	6f 92       	push	r6
     7d8:	7f 92       	push	r7
     7da:	8f 92       	push	r8
     7dc:	9f 92       	push	r9
     7de:	af 92       	push	r10
     7e0:	bf 92       	push	r11
     7e2:	cf 92       	push	r12
     7e4:	df 92       	push	r13
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <signal_to_range+0x26>
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <signal_to_range+0x28>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <signal_to_range+0x2a>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	3c 01       	movw	r6, r24
     7fe:	7a 83       	std	Y+2, r23	; 0x02
     800:	69 83       	std	Y+1, r22	; 0x01
     802:	5c 83       	std	Y+4, r21	; 0x04
     804:	4b 83       	std	Y+3, r20	; 0x03
     806:	3e 83       	std	Y+6, r19	; 0x06
     808:	2d 83       	std	Y+5, r18	; 0x05
     80a:	18 01       	movw	r2, r16
     80c:	85 01       	movw	r16, r10
     80e:	b9 01       	movw	r22, r18
     810:	88 27       	eor	r24, r24
     812:	77 fd       	sbrc	r23, 7
     814:	80 95       	com	r24
     816:	98 2f       	mov	r25, r24
     818:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__floatsisf>
     81c:	4b 01       	movw	r8, r22
     81e:	5c 01       	movw	r10, r24
     820:	b3 01       	movw	r22, r6
     822:	6e 0d       	add	r22, r14
     824:	7f 1d       	adc	r23, r15
     826:	29 81       	ldd	r18, Y+1	; 0x01
     828:	3a 81       	ldd	r19, Y+2	; 0x02
     82a:	62 1b       	sub	r22, r18
     82c:	73 0b       	sbc	r23, r19
     82e:	88 27       	eor	r24, r24
     830:	77 fd       	sbrc	r23, 7
     832:	80 95       	com	r24
     834:	98 2f       	mov	r25, r24
     836:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__floatsisf>
     83a:	2b 01       	movw	r4, r22
     83c:	3c 01       	movw	r6, r24
     83e:	b1 01       	movw	r22, r2
     840:	8d 81       	ldd	r24, Y+5	; 0x05
     842:	9e 81       	ldd	r25, Y+6	; 0x06
     844:	68 1b       	sub	r22, r24
     846:	79 0b       	sbc	r23, r25
     848:	88 27       	eor	r24, r24
     84a:	77 fd       	sbrc	r23, 7
     84c:	80 95       	com	r24
     84e:	98 2f       	mov	r25, r24
     850:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__floatsisf>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	c3 01       	movw	r24, r6
     85a:	b2 01       	movw	r22, r4
     85c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__mulsf3>
     860:	2b 01       	movw	r4, r22
     862:	3c 01       	movw	r6, r24
     864:	6b 81       	ldd	r22, Y+3	; 0x03
     866:	7c 81       	ldd	r23, Y+4	; 0x04
     868:	e9 81       	ldd	r30, Y+1	; 0x01
     86a:	fa 81       	ldd	r31, Y+2	; 0x02
     86c:	6e 1b       	sub	r22, r30
     86e:	7f 0b       	sbc	r23, r31
     870:	88 27       	eor	r24, r24
     872:	77 fd       	sbrc	r23, 7
     874:	80 95       	com	r24
     876:	98 2f       	mov	r25, r24
     878:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__floatsisf>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__divsf3>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	c5 01       	movw	r24, r10
     88e:	b4 01       	movw	r22, r8
     890:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__addsf3>
     894:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fixsfsi>
     898:	c1 01       	movw	r24, r2
     89a:	80 1b       	sub	r24, r16
     89c:	91 0b       	sbc	r25, r17
     89e:	68 17       	cp	r22, r24
     8a0:	79 07       	cpc	r23, r25
     8a2:	74 f5       	brge	.+92     	; 0x900 <signal_to_range+0x132>
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	9e 81       	ldd	r25, Y+6	; 0x06
     8a8:	80 0f       	add	r24, r16
     8aa:	91 1f       	adc	r25, r17
     8ac:	86 17       	cp	r24, r22
     8ae:	97 07       	cpc	r25, r23
     8b0:	4c f5       	brge	.+82     	; 0x904 <signal_to_range+0x136>
     8b2:	f8 01       	movw	r30, r16
     8b4:	11 23       	and	r17, r17
     8b6:	0c f4       	brge	.+2      	; 0x8ba <signal_to_range+0xec>
     8b8:	31 96       	adiw	r30, 0x01	; 1
     8ba:	f5 95       	asr	r31
     8bc:	e7 95       	ror	r30
     8be:	d8 01       	movw	r26, r16
     8c0:	12 c0       	rjmp	.+36     	; 0x8e6 <signal_to_range+0x118>
     8c2:	8a 0f       	add	r24, r26
     8c4:	9b 1f       	adc	r25, r27
     8c6:	ac 01       	movw	r20, r24
     8c8:	4e 0f       	add	r20, r30
     8ca:	5f 1f       	adc	r21, r31
     8cc:	64 17       	cp	r22, r20
     8ce:	75 07       	cpc	r23, r21
     8d0:	14 f0       	brlt	.+4      	; 0x8d6 <signal_to_range+0x108>
     8d2:	69 01       	movw	r12, r18
     8d4:	0b c0       	rjmp	.+22     	; 0x8ec <signal_to_range+0x11e>
     8d6:	c6 01       	movw	r24, r12
     8d8:	8e 1b       	sub	r24, r30
     8da:	9f 0b       	sbc	r25, r31
     8dc:	86 17       	cp	r24, r22
     8de:	97 07       	cpc	r25, r23
     8e0:	14 f0       	brlt	.+4      	; 0x8e6 <signal_to_range+0x118>
     8e2:	c0 1a       	sub	r12, r16
     8e4:	d1 0a       	sbc	r13, r17
     8e6:	c6 01       	movw	r24, r12
     8e8:	80 1b       	sub	r24, r16
     8ea:	91 0b       	sbc	r25, r17
     8ec:	96 01       	movw	r18, r12
     8ee:	20 0f       	add	r18, r16
     8f0:	31 1f       	adc	r19, r17
     8f2:	62 17       	cp	r22, r18
     8f4:	73 07       	cpc	r23, r19
     8f6:	2c f7       	brge	.-54     	; 0x8c2 <signal_to_range+0xf4>
     8f8:	86 17       	cp	r24, r22
     8fa:	97 07       	cpc	r25, r23
     8fc:	14 f7       	brge	.-60     	; 0x8c2 <signal_to_range+0xf4>
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <signal_to_range+0x13a>
     900:	61 01       	movw	r12, r2
     902:	02 c0       	rjmp	.+4      	; 0x908 <signal_to_range+0x13a>
     904:	cd 80       	ldd	r12, Y+5	; 0x05
     906:	de 80       	ldd	r13, Y+6	; 0x06
     908:	c6 01       	movw	r24, r12
     90a:	26 96       	adiw	r28, 0x06	; 6
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	9f 90       	pop	r9
     92c:	8f 90       	pop	r8
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	3f 90       	pop	r3
     938:	2f 90       	pop	r2
     93a:	08 95       	ret

0000093c <read_control_input>:
     93c:	af 92       	push	r10
     93e:	bf 92       	push	r11
     940:	cf 92       	push	r12
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	82 35       	cpi	r24, 0x52	; 82
     94e:	09 f4       	brne	.+2      	; 0x952 <read_control_input+0x16>
     950:	74 c0       	rjmp	.+232    	; 0xa3a <read_control_input+0xfe>
     952:	20 f4       	brcc	.+8      	; 0x95c <read_control_input+0x20>
     954:	8c 34       	cpi	r24, 0x4C	; 76
     956:	09 f4       	brne	.+2      	; 0x95a <read_control_input+0x1e>
     958:	4e c0       	rjmp	.+156    	; 0x9f6 <read_control_input+0xba>
     95a:	91 c0       	rjmp	.+290    	; 0xa7e <read_control_input+0x142>
     95c:	88 35       	cpi	r24, 0x58	; 88
     95e:	19 f0       	breq	.+6      	; 0x966 <read_control_input+0x2a>
     960:	89 35       	cpi	r24, 0x59	; 89
     962:	29 f1       	breq	.+74     	; 0x9ae <read_control_input+0x72>
     964:	8c c0       	rjmp	.+280    	; 0xa7e <read_control_input+0x142>
     966:	c0 90 c2 03 	lds	r12, 0x03C2
     96a:	d0 90 c3 03 	lds	r13, 0x03C3
     96e:	e0 90 c6 03 	lds	r14, 0x03C6
     972:	f0 90 c7 03 	lds	r15, 0x03C7
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     97e:	0f 2e       	mov	r0, r31
     980:	fa e0       	ldi	r31, 0x0A	; 10
     982:	af 2e       	mov	r10, r31
     984:	b1 2c       	mov	r11, r1
     986:	f0 2d       	mov	r31, r0
     988:	04 e6       	ldi	r16, 0x64	; 100
     98a:	10 e0       	ldi	r17, 0x00	; 0
     98c:	2c e9       	ldi	r18, 0x9C	; 156
     98e:	3f ef       	ldi	r19, 0xFF	; 255
     990:	4f ef       	ldi	r20, 0xFF	; 255
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	0e 94 e7 03 	call	0x7ce	; 0x7ce <signal_to_range>
     99c:	90 93 c3 03 	sts	0x03C3, r25
     9a0:	80 93 c2 03 	sts	0x03C2, r24
     9a4:	80 91 c2 03 	lds	r24, 0x03C2
     9a8:	90 91 c3 03 	lds	r25, 0x03C3
     9ac:	6a c0       	rjmp	.+212    	; 0xa82 <read_control_input+0x146>
     9ae:	c0 90 c0 03 	lds	r12, 0x03C0
     9b2:	d0 90 c1 03 	lds	r13, 0x03C1
     9b6:	e0 90 c4 03 	lds	r14, 0x03C4
     9ba:	f0 90 c5 03 	lds	r15, 0x03C5
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fa e0       	ldi	r31, 0x0A	; 10
     9ca:	af 2e       	mov	r10, r31
     9cc:	b1 2c       	mov	r11, r1
     9ce:	f0 2d       	mov	r31, r0
     9d0:	04 e6       	ldi	r16, 0x64	; 100
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	2c e9       	ldi	r18, 0x9C	; 156
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
     9d8:	4f ef       	ldi	r20, 0xFF	; 255
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <signal_to_range>
     9e4:	90 93 c1 03 	sts	0x03C1, r25
     9e8:	80 93 c0 03 	sts	0x03C0, r24
     9ec:	80 91 c0 03 	lds	r24, 0x03C0
     9f0:	90 91 c1 03 	lds	r25, 0x03C1
     9f4:	46 c0       	rjmp	.+140    	; 0xa82 <read_control_input+0x146>
     9f6:	c0 90 be 03 	lds	r12, 0x03BE
     9fa:	d0 90 bf 03 	lds	r13, 0x03BF
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     a06:	0f 2e       	mov	r0, r31
     a08:	fa e0       	ldi	r31, 0x0A	; 10
     a0a:	af 2e       	mov	r10, r31
     a0c:	b1 2c       	mov	r11, r1
     a0e:	f0 2d       	mov	r31, r0
     a10:	e1 2c       	mov	r14, r1
     a12:	f1 2c       	mov	r15, r1
     a14:	04 e6       	ldi	r16, 0x64	; 100
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	4f ef       	ldi	r20, 0xFF	; 255
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	0e 94 e7 03 	call	0x7ce	; 0x7ce <signal_to_range>
     a28:	90 93 bf 03 	sts	0x03BF, r25
     a2c:	80 93 be 03 	sts	0x03BE, r24
     a30:	80 91 be 03 	lds	r24, 0x03BE
     a34:	90 91 bf 03 	lds	r25, 0x03BF
     a38:	24 c0       	rjmp	.+72     	; 0xa82 <read_control_input+0x146>
     a3a:	c0 90 bc 03 	lds	r12, 0x03BC
     a3e:	d0 90 bd 03 	lds	r13, 0x03BD
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     a4a:	0f 2e       	mov	r0, r31
     a4c:	fa e0       	ldi	r31, 0x0A	; 10
     a4e:	af 2e       	mov	r10, r31
     a50:	b1 2c       	mov	r11, r1
     a52:	f0 2d       	mov	r31, r0
     a54:	e1 2c       	mov	r14, r1
     a56:	f1 2c       	mov	r15, r1
     a58:	04 e6       	ldi	r16, 0x64	; 100
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	4f ef       	ldi	r20, 0xFF	; 255
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	0e 94 e7 03 	call	0x7ce	; 0x7ce <signal_to_range>
     a6c:	90 93 bd 03 	sts	0x03BD, r25
     a70:	80 93 bc 03 	sts	0x03BC, r24
     a74:	80 91 bc 03 	lds	r24, 0x03BC
     a78:	90 91 bd 03 	lds	r25, 0x03BD
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <read_control_input+0x146>
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	bf 90       	pop	r11
     a90:	af 90       	pop	r10
     a92:	08 95       	ret

00000a94 <initialize_control_input>:
     a94:	0e 94 a1 03 	call	0x742	; 0x742 <calibrate_joystick>
     a98:	88 e5       	ldi	r24, 0x58	; 88
     a9a:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     a9e:	90 93 c3 03 	sts	0x03C3, r25
     aa2:	80 93 c2 03 	sts	0x03C2, r24
     aa6:	89 e5       	ldi	r24, 0x59	; 89
     aa8:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     aac:	90 93 c1 03 	sts	0x03C1, r25
     ab0:	80 93 c0 03 	sts	0x03C0, r24
     ab4:	8c e4       	ldi	r24, 0x4C	; 76
     ab6:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     aba:	90 93 bf 03 	sts	0x03BF, r25
     abe:	80 93 be 03 	sts	0x03BE, r24
     ac2:	82 e5       	ldi	r24, 0x52	; 82
     ac4:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
     ac8:	90 93 bd 03 	sts	0x03BD, r25
     acc:	80 93 bc 03 	sts	0x03BC, r24
     ad0:	20 91 c4 03 	lds	r18, 0x03C4
     ad4:	30 91 c5 03 	lds	r19, 0x03C5
     ad8:	80 91 c6 03 	lds	r24, 0x03C6
     adc:	90 91 c7 03 	lds	r25, 0x03C7
     ae0:	3f 93       	push	r19
     ae2:	2f 93       	push	r18
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	81 e5       	ldi	r24, 0x51	; 81
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	9f 93       	push	r25
     aee:	8f 93       	push	r24
     af0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     af4:	60 91 bc 03 	lds	r22, 0x03BC
     af8:	70 91 bd 03 	lds	r23, 0x03BD
     afc:	40 91 be 03 	lds	r20, 0x03BE
     b00:	50 91 bf 03 	lds	r21, 0x03BF
     b04:	20 91 c0 03 	lds	r18, 0x03C0
     b08:	30 91 c1 03 	lds	r19, 0x03C1
     b0c:	80 91 c2 03 	lds	r24, 0x03C2
     b10:	90 91 c3 03 	lds	r25, 0x03C3
     b14:	7f 93       	push	r23
     b16:	6f 93       	push	r22
     b18:	5f 93       	push	r21
     b1a:	4f 93       	push	r20
     b1c:	3f 93       	push	r19
     b1e:	2f 93       	push	r18
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	8a e7       	ldi	r24, 0x7A	; 122
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
     b30:	8d b7       	in	r24, 0x3d	; 61
     b32:	9e b7       	in	r25, 0x3e	; 62
     b34:	40 96       	adiw	r24, 0x10	; 16
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	9e bf       	out	0x3e, r25	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	8d bf       	out	0x3d, r24	; 61
     b40:	08 95       	ret

00000b42 <initalize>:




void initalize(void){
	cli();//disable interrupts
     b42:	f8 94       	cli
	init_UART(UBBR);
     b44:	8f e1       	ldi	r24, 0x1F	; 31
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <init_UART>
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
     b4c:	83 ea       	ldi	r24, 0xA3	; 163
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	8c ea       	ldi	r24, 0xAC	; 172
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	9f 93       	push	r25
     b5a:	8f 93       	push	r24
     b5c:	88 eb       	ldi	r24, 0xB8	; 184
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	9f 93       	push	r25
     b62:	8f 93       	push	r24
     b64:	8d eb       	ldi	r24, 0xBD	; 189
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <printf>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     b70:	85 b7       	in	r24, 0x35	; 53
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     b76:	80 b7       	in	r24, 0x30	; 48
     b78:	80 62       	ori	r24, 0x20	; 32
     b7a:	80 bf       	out	0x30, r24	; 48
	
	oled_ini();
     b7c:	0e 94 2e 09 	call	0x125c	; 0x125c <oled_ini>
	sram_init();
     b80:	0e 94 23 0a 	call	0x1446	; 0x1446 <sram_init>
	//bootscreen();
	//write_screen();
	
	
	printf("OLED successfully initialized\n");
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <puts>
	initialize_menu();
     b8c:	0e 94 4b 06 	call	0xc96	; 0xc96 <initialize_menu>
	
	initialize_control_input();
     b90:	0e 94 4a 05 	call	0xa94	; 0xa94 <initialize_control_input>
	printf("control input successfully initialized\n\n");
     b94:	81 e2       	ldi	r24, 0x21	; 33
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <puts>
	//SRAM_test();
	printf("SRAM successfully initialized\n");
     b9c:	89 e4       	ldi	r24, 0x49	; 73
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <puts>
	initalize_interrupts();
     ba4:	0e 94 4f 02 	call	0x49e	; 0x49e <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     ba8:	87 e6       	ldi	r24, 0x67	; 103
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <puts>
	printf("Interrupts activated\n");
     bb0:	8b e8       	ldi	r24, 0x8B	; 139
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     bb8:	80 ea       	ldi	r24, 0xA0	; 160
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <puts>
	sei();//enable interrupts
     bc0:	78 94       	sei
     bc2:	8d b7       	in	r24, 0x3d	; 61
     bc4:	9e b7       	in	r25, 0x3e	; 62
     bc6:	08 96       	adiw	r24, 0x08	; 8
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	9e bf       	out	0x3e, r25	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	8d bf       	out	0x3d, r24	; 61
     bd2:	08 95       	ret

00000bd4 <main>:

int initialize_timer(uint8_t fps);
int main(void)
{
	
	initalize();
     bd4:	0e 94 a1 05 	call	0xb42	; 0xb42 <initalize>
	
	sram_init();
     bd8:	0e 94 23 0a 	call	0x1446	; 0x1446 <sram_init>
	oled_goto_line(7);
     bdc:	87 e0       	ldi	r24, 0x07	; 7
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	//sram_write_string(" - BYGGERN - G17");
	initialize_timer(60);//60 FPS
     be4:	8c e3       	ldi	r24, 0x3C	; 60
     be6:	0e 94 3d 0b 	call	0x167a	; 0x167a <initialize_timer>
	
	
	MCP2515_initialize();
     bea:	0e 94 38 06 	call	0xc70	; 0xc70 <MCP2515_initialize>
	CAN_initialize();
     bee:	0e 94 f7 02 	call	0x5ee	; 0x5ee <CAN_initialize>
// 	uint8_t data[8];
// 	data[0] = 0;
	sei();
     bf2:	78 94       	sei
// 	
// 	for(int i = 0; i < 20; i++){
// 		printf("%i %i\n",i,d[i]);
// 	}
		
	sei();
     bf4:	78 94       	sei
	oled_goto_line(7);
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	sram_write_string("<----<<<");
     bfe:	89 eb       	ldi	r24, 0xB9	; 185
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	9f e5       	ldi	r25, 0x5F	; 95
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <main+0x36>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <main+0x3c>
     c10:	00 00       	nop
	while(1){
		_delay_ms(20);
		menu_update();
     c12:	0e 94 4e 08 	call	0x109c	; 0x109c <menu_update>
     c16:	f7 cf       	rjmp	.-18     	; 0xc06 <main+0x32>

00000c18 <MCP2515_read>:
     c18:	cf 93       	push	r28
     c1a:	c8 2f       	mov	r28, r24
     c1c:	0e 94 2f 0b 	call	0x165e	; 0x165e <SPI_select>
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
     c26:	8c 2f       	mov	r24, r28
     c28:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
     c2c:	0e 94 28 0b 	call	0x1650	; 0x1650 <SPI_read>
     c30:	c8 2f       	mov	r28, r24
     c32:	0e 94 31 0b 	call	0x1662	; 0x1662 <SPI_deselect>
     c36:	8c 2f       	mov	r24, r28
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <MCP2515_bit_modify>:
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	18 2f       	mov	r17, r24
     c44:	d6 2f       	mov	r29, r22
     c46:	c4 2f       	mov	r28, r20
     c48:	0e 94 2f 0b 	call	0x165e	; 0x165e <SPI_select>
     c4c:	85 e0       	ldi	r24, 0x05	; 5
     c4e:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
     c52:	81 2f       	mov	r24, r17
     c54:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
     c58:	8d 2f       	mov	r24, r29
     c5a:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
     c5e:	8c 2f       	mov	r24, r28
     c60:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
     c64:	0e 94 31 0b 	call	0x1662	; 0x1662 <SPI_deselect>
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	08 95       	ret

00000c70 <MCP2515_initialize>:
     c70:	0e 94 33 0b 	call	0x1666	; 0x1666 <SPI_initialize>
     c74:	0e 94 2f 0b 	call	0x165e	; 0x165e <SPI_select>
     c78:	80 ec       	ldi	r24, 0xC0	; 192
     c7a:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
     c7e:	0e 94 31 0b 	call	0x1662	; 0x1662 <SPI_deselect>
     c82:	0e 94 2f 0b 	call	0x165e	; 0x165e <SPI_select>
     c86:	40 e4       	ldi	r20, 0x40	; 64
     c88:	60 ee       	ldi	r22, 0xE0	; 224
     c8a:	8f e0       	ldi	r24, 0x0F	; 15
     c8c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <MCP2515_bit_modify>
     c90:	0e 94 31 0b 	call	0x1662	; 0x1662 <SPI_deselect>
     c94:	08 95       	ret

00000c96 <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     c9a:	c1 e2       	ldi	r28, 0x21	; 33
     c9c:	d4 e0       	ldi	r29, 0x04	; 4
     c9e:	d0 93 08 04 	sts	0x0408, r29
     ca2:	c0 93 07 04 	sts	0x0407, r28
	new_menu->ptr_child = ptr_child;
     ca6:	10 92 0a 04 	sts	0x040A, r1
     caa:	10 92 09 04 	sts	0x0409, r1
	new_menu->ptr_parent = ptr_parent;
     cae:	10 92 0c 04 	sts	0x040C, r1
     cb2:	10 92 0b 04 	sts	0x040B, r1
	
	new_menu->title = title;
     cb6:	e3 e0       	ldi	r30, 0x03	; 3
     cb8:	f4 e0       	ldi	r31, 0x04	; 4
     cba:	8a ee       	ldi	r24, 0xEA	; 234
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	90 93 06 04 	sts	0x0406, r25
     cca:	80 93 05 04 	sts	0x0405, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     cce:	25 ed       	ldi	r18, 0xD5	; 213
     cd0:	33 e0       	ldi	r19, 0x03	; 3
     cd2:	30 93 26 04 	sts	0x0426, r19
     cd6:	20 93 25 04 	sts	0x0425, r18
	new_menu->ptr_child = ptr_child;
     cda:	6d e0       	ldi	r22, 0x0D	; 13
     cdc:	74 e0       	ldi	r23, 0x04	; 4
     cde:	70 93 28 04 	sts	0x0428, r23
     ce2:	60 93 27 04 	sts	0x0427, r22
	new_menu->ptr_parent = ptr_parent;
     ce6:	10 92 2a 04 	sts	0x042A, r1
     cea:	10 92 29 04 	sts	0x0429, r1
	
	new_menu->title = title;
     cee:	44 ee       	ldi	r20, 0xE4	; 228
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	59 83       	std	Y+1, r21	; 0x01
     cf4:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     cf6:	90 93 24 04 	sts	0x0424, r25
     cfa:	80 93 23 04 	sts	0x0423, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     cfe:	f0 93 da 03 	sts	0x03DA, r31
     d02:	e0 93 d9 03 	sts	0x03D9, r30
	new_menu->ptr_child = ptr_child;
     d06:	cf ee       	ldi	r28, 0xEF	; 239
     d08:	d3 e0       	ldi	r29, 0x03	; 3
     d0a:	d0 93 dc 03 	sts	0x03DC, r29
     d0e:	c0 93 db 03 	sts	0x03DB, r28
	new_menu->ptr_parent = ptr_parent;
     d12:	10 92 de 03 	sts	0x03DE, r1
     d16:	10 92 dd 03 	sts	0x03DD, r1
	
	new_menu->title = title;
     d1a:	4c ed       	ldi	r20, 0xDC	; 220
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	d9 01       	movw	r26, r18
     d20:	4d 93       	st	X+, r20
     d22:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     d24:	90 93 d8 03 	sts	0x03D8, r25
     d28:	80 93 d7 03 	sts	0x03D7, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d2c:	29 ef       	ldi	r18, 0xF9	; 249
     d2e:	33 e0       	ldi	r19, 0x03	; 3
     d30:	30 93 f4 03 	sts	0x03F4, r19
     d34:	20 93 f3 03 	sts	0x03F3, r18
	new_menu->ptr_child = ptr_child;
     d38:	10 92 f6 03 	sts	0x03F6, r1
     d3c:	10 92 f5 03 	sts	0x03F5, r1
	new_menu->ptr_parent = ptr_parent;
     d40:	f0 93 f8 03 	sts	0x03F8, r31
     d44:	e0 93 f7 03 	sts	0x03F7, r30
	
	new_menu->title = title;
     d48:	86 ed       	ldi	r24, 0xD6	; 214
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	99 83       	std	Y+1, r25	; 0x01
     d4e:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	90 93 f2 03 	sts	0x03F2, r25
     d58:	80 93 f1 03 	sts	0x03F1, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d5c:	d0 93 fe 03 	sts	0x03FE, r29
     d60:	c0 93 fd 03 	sts	0x03FD, r28
	new_menu->ptr_child = ptr_child;
     d64:	10 92 00 04 	sts	0x0400, r1
     d68:	10 92 ff 03 	sts	0x03FF, r1
	new_menu->ptr_parent = ptr_parent;
     d6c:	f0 93 02 04 	sts	0x0402, r31
     d70:	e0 93 01 04 	sts	0x0401, r30
	
	new_menu->title = title;
     d74:	4d ec       	ldi	r20, 0xCD	; 205
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	d9 01       	movw	r26, r18
     d7a:	4d 93       	st	X+, r20
     d7c:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     d7e:	90 93 fc 03 	sts	0x03FC, r25
     d82:	80 93 fb 03 	sts	0x03FB, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     d86:	c7 e1       	ldi	r28, 0x17	; 23
     d88:	d4 e0       	ldi	r29, 0x04	; 4
     d8a:	d0 93 12 04 	sts	0x0412, r29
     d8e:	c0 93 11 04 	sts	0x0411, r28
	new_menu->ptr_child = ptr_child;
     d92:	10 92 14 04 	sts	0x0414, r1
     d96:	10 92 13 04 	sts	0x0413, r1
	new_menu->ptr_parent = ptr_parent;
     d9a:	f0 93 16 04 	sts	0x0416, r31
     d9e:	e0 93 15 04 	sts	0x0415, r30
	
	new_menu->title = title;
     da2:	22 ec       	ldi	r18, 0xC2	; 194
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	db 01       	movw	r26, r22
     da8:	2d 93       	st	X+, r18
     daa:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     dac:	90 93 10 04 	sts	0x0410, r25
     db0:	80 93 0f 04 	sts	0x040F, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     db4:	70 93 1c 04 	sts	0x041C, r23
     db8:	60 93 1b 04 	sts	0x041B, r22
	new_menu->ptr_child = ptr_child;
     dbc:	10 92 1e 04 	sts	0x041E, r1
     dc0:	10 92 1d 04 	sts	0x041D, r1
	new_menu->ptr_parent = ptr_parent;
     dc4:	f0 93 20 04 	sts	0x0420, r31
     dc8:	e0 93 1f 04 	sts	0x041F, r30
	
	new_menu->title = title;
     dcc:	28 eb       	ldi	r18, 0xB8	; 184
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	39 83       	std	Y+1, r19	; 0x01
     dd2:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     dd4:	90 93 1a 04 	sts	0x041A, r25
     dd8:	80 93 19 04 	sts	0x0419, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     ddc:	f0 93 d2 03 	sts	0x03D2, r31
     de0:	e0 93 d1 03 	sts	0x03D1, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     de4:	f0 93 d4 03 	sts	0x03D4, r31
     de8:	e0 93 d3 03 	sts	0x03D3, r30
	
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <menu_left_button_flag>:
	return 0;
	
}

void menu_left_button_flag(void){
	left_button_flag = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 93 ca 03 	sts	0x03CA, r24
     df8:	08 95       	ret

00000dfa <menu_right_button_flag>:
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 cb 03 	sts	0x03CB, r24
     e00:	08 95       	ret

00000e02 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
     e0a:	60 ea       	ldi	r22, 0xA0	; 160
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	8f ed       	ldi	r24, 0xDF	; 223
     e10:	93 e0       	ldi	r25, 0x03	; 3
     e12:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy_P>
	sram_write_string(temp);
     e16:	8f ed       	ldi	r24, 0xDF	; 223
     e18:	93 e0       	ldi	r25, 0x03	; 3
     e1a:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
	sram_clear_line(1);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 76 0a 	call	0x14ec	; 0x14ec <sram_clear_line>
	oled_goto_line(2);
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	strcpy_P(temp,btn_1);
     e2e:	60 eb       	ldi	r22, 0xB0	; 176
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	8f ed       	ldi	r24, 0xDF	; 223
     e34:	93 e0       	ldi	r25, 0x03	; 3
     e36:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy_P>
	sram_write_string(temp);
     e3a:	8f ed       	ldi	r24, 0xDF	; 223
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
	write_screen();
     e42:	0e 94 43 0a 	call	0x1486	; 0x1486 <write_screen>
	while (right_button_flag == 0){	
     e46:	80 91 cb 03 	lds	r24, 0x03CB
     e4a:	81 11       	cpse	r24, r1
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <menu_set_contrast+0x6a>
		write_c(0x81);
     e4e:	81 e8       	ldi	r24, 0x81	; 129
     e50:	0e 94 b2 08 	call	0x1164	; 0x1164 <write_c>
		write_c(readADC(3)/2);
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 29 02 	call	0x452	; 0x452 <readADC>
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	0e 94 b2 08 	call	0x1164	; 0x1164 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	write_screen();
	while (right_button_flag == 0){	
     e64:	80 91 cb 03 	lds	r24, 0x03CB
     e68:	88 23       	and	r24, r24
     e6a:	89 f3       	breq	.-30     	; 0xe4e <menu_set_contrast+0x4c>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	right_button_flag = 0;
     e6c:	10 92 cb 03 	sts	0x03CB, r1
     e70:	08 95       	ret

00000e72 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	c0 e0       	ldi	r28, 0x00	; 0
     e7c:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 7; i++){
		sram_clear_line(i);
     e7e:	ce 01       	movw	r24, r28
     e80:	0e 94 76 0a 	call	0x14ec	; 0x14ec <sram_clear_line>
     e84:	21 96       	adiw	r28, 0x01	; 1
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
     e86:	c7 30       	cpi	r28, 0x07	; 7
     e88:	d1 05       	cpc	r29, r1
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <menu_calibrate_joystick+0xc>
		sram_clear_line(i);
	}
	oled_goto_line(0);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
     e94:	69 e9       	ldi	r22, 0x99	; 153
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	8f ed       	ldi	r24, 0xDF	; 223
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy_P>
	sram_write_string(temp);
     ea0:	8f ed       	ldi	r24, 0xDF	; 223
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
	oled_goto_line(2);
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	strcpy_P(temp,btn_1);
     eb0:	60 eb       	ldi	r22, 0xB0	; 176
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	8f ed       	ldi	r24, 0xDF	; 223
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy_P>
	sram_write_string(temp);
     ebc:	8f ed       	ldi	r24, 0xDF	; 223
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
	write_screen();
     ec4:	0e 94 43 0a 	call	0x1486	; 0x1486 <write_screen>
	while (right_button_flag == 0){
     ec8:	80 91 cb 03 	lds	r24, 0x03CB
     ecc:	81 11       	cpse	r24, r1
     ece:	0a c0       	rjmp	.+20     	; 0xee4 <menu_calibrate_joystick+0x72>
     ed0:	8c ec       	ldi	r24, 0xCC	; 204
     ed2:	94 e0       	ldi	r25, 0x04	; 4
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <menu_calibrate_joystick+0x62>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <menu_calibrate_joystick+0x68>
     eda:	00 00       	nop
     edc:	80 91 cb 03 	lds	r24, 0x03CB
     ee0:	88 23       	and	r24, r24
     ee2:	b1 f3       	breq	.-20     	; 0xed0 <menu_calibrate_joystick+0x5e>
		_delay_ms(1);
	}
	right_button_flag = 0;
     ee4:	10 92 cb 03 	sts	0x03CB, r1
	
	
	oled_clear_line(0);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 0c 09 	call	0x1218	; 0x1218 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
     ef0:	6b e8       	ldi	r22, 0x8B	; 139
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	8f ed       	ldi	r24, 0xDF	; 223
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy_P>
	sram_write_string(temp);
     efc:	8f ed       	ldi	r24, 0xDF	; 223
     efe:	93 e0       	ldi	r25, 0x03	; 3
     f00:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
     f04:	c0 e7       	ldi	r28, 0x70	; 112
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	08 e7       	ldi	r16, 0x78	; 120
     f0a:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 0c 09 	call	0x1218	; 0x1218 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
     f14:	fe 01       	movw	r30, r28
     f16:	65 91       	lpm	r22, Z+
     f18:	74 91       	lpm	r23, Z
     f1a:	8f ed       	ldi	r24, 0xDF	; 223
     f1c:	93 e0       	ldi	r25, 0x03	; 3
     f1e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy_P>
		sram_write_string(temp);
     f22:	8f ed       	ldi	r24, 0xDF	; 223
     f24:	93 e0       	ldi	r25, 0x03	; 3
     f26:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
		write_screen();
     f2a:	0e 94 43 0a 	call	0x1486	; 0x1486 <write_screen>
		while (right_button_flag == 0){
     f2e:	80 91 cb 03 	lds	r24, 0x03CB
     f32:	81 11       	cpse	r24, r1
     f34:	0a c0       	rjmp	.+20     	; 0xf4a <menu_calibrate_joystick+0xd8>
     f36:	8c ec       	ldi	r24, 0xCC	; 204
     f38:	94 e0       	ldi	r25, 0x04	; 4
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <menu_calibrate_joystick+0xc8>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <menu_calibrate_joystick+0xce>
     f40:	00 00       	nop
     f42:	80 91 cb 03 	lds	r24, 0x03CB
     f46:	88 23       	and	r24, r24
     f48:	b1 f3       	breq	.-20     	; 0xf36 <menu_calibrate_joystick+0xc4>
			_delay_ms(1);
		}
		right_button_flag = 0;
     f4a:	10 92 cb 03 	sts	0x03CB, r1
     f4e:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
     f50:	c0 17       	cp	r28, r16
     f52:	d1 07       	cpc	r29, r17
     f54:	d9 f6       	brne	.-74     	; 0xf0c <menu_calibrate_joystick+0x9a>
		while (right_button_flag == 0){
			_delay_ms(1);
		}
		right_button_flag = 0;
	}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	08 95       	ret

00000f60 <menu_function_selected>:
void menu_right_button_flag(void){
	right_button_flag = 1;
}

void menu_function_selected(void){
	if(current_selected == &option_1){
     f60:	80 91 d3 03 	lds	r24, 0x03D3
     f64:	90 91 d4 03 	lds	r25, 0x03D4
     f68:	23 e0       	ldi	r18, 0x03	; 3
     f6a:	89 3f       	cpi	r24, 0xF9	; 249
     f6c:	92 07       	cpc	r25, r18
     f6e:	19 f4       	brne	.+6      	; 0xf76 <menu_function_selected+0x16>
		menu_set_contrast();
     f70:	0e 94 01 07 	call	0xe02	; 0xe02 <menu_set_contrast>
     f74:	08 95       	ret
	}else if(current_selected == &debug_1){
     f76:	87 51       	subi	r24, 0x17	; 23
     f78:	94 40       	sbci	r25, 0x04	; 4
     f7a:	11 f4       	brne	.+4      	; 0xf80 <menu_function_selected+0x20>
		menu_calibrate_joystick();
     f7c:	0e 94 39 07 	call	0xe72	; 0xe72 <menu_calibrate_joystick>
     f80:	08 95       	ret

00000f82 <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
     f82:	89 e5       	ldi	r24, 0x59	; 89
     f84:	0e 94 9e 04 	call	0x93c	; 0x93c <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
     f88:	87 34       	cpi	r24, 0x47	; 71
     f8a:	91 05       	cpc	r25, r1
     f8c:	4c f1       	brlt	.+82     	; 0xfe0 <navigate_menu+0x5e>
     f8e:	20 91 c8 03 	lds	r18, 0x03C8
     f92:	30 91 c9 03 	lds	r19, 0x03C9
     f96:	27 34       	cpi	r18, 0x47	; 71
     f98:	31 05       	cpc	r19, r1
     f9a:	14 f5       	brge	.+68     	; 0xfe0 <navigate_menu+0x5e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
     f9c:	e0 91 d3 03 	lds	r30, 0x03D3
     fa0:	f0 91 d4 03 	lds	r31, 0x03D4
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	18 16       	cp	r1, r24
     fac:	19 06       	cpc	r1, r25
     fae:	8c f4       	brge	.+34     	; 0xfd2 <navigate_menu+0x50>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
     fb4:	04 80       	ldd	r0, Z+4	; 0x04
     fb6:	f5 81       	ldd	r31, Z+5	; 0x05
     fb8:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	22 81       	ldd	r18, Z+2	; 0x02
     fbe:	33 81       	ldd	r19, Z+3	; 0x03
     fc0:	21 50       	subi	r18, 0x01	; 1
     fc2:	31 09       	sbc	r19, r1
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	ac f3       	brlt	.-22     	; 0xfb4 <navigate_menu+0x32>
     fca:	f0 93 d4 03 	sts	0x03D4, r31
     fce:	e0 93 d3 03 	sts	0x03D3, r30
			current_selected = current_selected->ptr_sib_down;
		}
		y_lock = RANGE_MAX;
     fd2:	84 e6       	ldi	r24, 0x64	; 100
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	90 93 c9 03 	sts	0x03C9, r25
     fda:	80 93 c8 03 	sts	0x03C8, r24
     fde:	25 c0       	rjmp	.+74     	; 0x102a <navigate_menu+0xa8>
		
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && y_lock >= -NAVIGATION_TRHESHOLD)
     fe0:	8a 3b       	cpi	r24, 0xBA	; 186
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	92 07       	cpc	r25, r18
     fe6:	c4 f4       	brge	.+48     	; 0x1018 <navigate_menu+0x96>
     fe8:	20 91 c8 03 	lds	r18, 0x03C8
     fec:	30 91 c9 03 	lds	r19, 0x03C9
     ff0:	2a 3b       	cpi	r18, 0xBA	; 186
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	8c f0       	brlt	.+34     	; 0x1018 <navigate_menu+0x96>
	{
		current_selected = current_selected->ptr_sib_down;
     ff6:	e0 91 d3 03 	lds	r30, 0x03D3
     ffa:	f0 91 d4 03 	lds	r31, 0x03D4
     ffe:	84 81       	ldd	r24, Z+4	; 0x04
    1000:	95 81       	ldd	r25, Z+5	; 0x05
    1002:	90 93 d4 03 	sts	0x03D4, r25
    1006:	80 93 d3 03 	sts	0x03D3, r24
		y_lock = RANGE_MIN;
    100a:	8c e9       	ldi	r24, 0x9C	; 156
    100c:	9f ef       	ldi	r25, 0xFF	; 255
    100e:	90 93 c9 03 	sts	0x03C9, r25
    1012:	80 93 c8 03 	sts	0x03C8, r24
    1016:	09 c0       	rjmp	.+18     	; 0x102a <navigate_menu+0xa8>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    1018:	8b 5b       	subi	r24, 0xBB	; 187
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	8b 38       	cpi	r24, 0x8B	; 139
    101e:	91 05       	cpc	r25, r1
    1020:	20 f4       	brcc	.+8      	; 0x102a <navigate_menu+0xa8>
		y_lock = 0;
    1022:	10 92 c9 03 	sts	0x03C9, r1
    1026:	10 92 c8 03 	sts	0x03C8, r1
	}
	if (right_button_flag == 1)
    102a:	80 91 cb 03 	lds	r24, 0x03CB
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	b1 f4       	brne	.+44     	; 0x105e <navigate_menu+0xdc>
	{
		right_button_flag = 0;
    1032:	10 92 cb 03 	sts	0x03CB, r1
		if(current_selected->ptr_child != NULL){
    1036:	e0 91 d3 03 	lds	r30, 0x03D3
    103a:	f0 91 d4 03 	lds	r31, 0x03D4
    103e:	86 81       	ldd	r24, Z+6	; 0x06
    1040:	97 81       	ldd	r25, Z+7	; 0x07
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	49 f0       	breq	.+18     	; 0x1058 <navigate_menu+0xd6>
			current_head = current_selected->ptr_child;
    1046:	90 93 d2 03 	sts	0x03D2, r25
    104a:	80 93 d1 03 	sts	0x03D1, r24
			current_selected = current_selected->ptr_child;
    104e:	90 93 d4 03 	sts	0x03D4, r25
    1052:	80 93 d3 03 	sts	0x03D3, r24
    1056:	1f c0       	rjmp	.+62     	; 0x1096 <navigate_menu+0x114>
		}else{
			menu_function_selected();
    1058:	0e 94 b0 07 	call	0xf60	; 0xf60 <menu_function_selected>
    105c:	1c c0       	rjmp	.+56     	; 0x1096 <navigate_menu+0x114>
		}
	}else if (left_button_flag == 1){
    105e:	80 91 ca 03 	lds	r24, 0x03CA
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	c1 f4       	brne	.+48     	; 0x1096 <navigate_menu+0x114>
		left_button_flag = 0;
    1066:	10 92 ca 03 	sts	0x03CA, r1
		if (current_selected->ptr_parent != NULL){
    106a:	e0 91 d3 03 	lds	r30, 0x03D3
    106e:	f0 91 d4 03 	lds	r31, 0x03D4
    1072:	80 85       	ldd	r24, Z+8	; 0x08
    1074:	91 85       	ldd	r25, Z+9	; 0x09
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	71 f0       	breq	.+28     	; 0x1096 <navigate_menu+0x114>
			current_head = current_head->ptr_parent;
    107a:	e0 91 d1 03 	lds	r30, 0x03D1
    107e:	f0 91 d2 03 	lds	r31, 0x03D2
    1082:	20 85       	ldd	r18, Z+8	; 0x08
    1084:	31 85       	ldd	r19, Z+9	; 0x09
    1086:	30 93 d2 03 	sts	0x03D2, r19
    108a:	20 93 d1 03 	sts	0x03D1, r18
			current_selected = current_selected->ptr_parent;
    108e:	90 93 d4 03 	sts	0x03D4, r25
    1092:	80 93 d3 03 	sts	0x03D3, r24
		}
	}
	return 0;
	
}
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	08 95       	ret

0000109c <menu_update>:
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
	
}

void menu_update(void){
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    10a4:	0e 94 c1 07 	call	0xf82	; 0xf82 <navigate_menu>
    10a8:	89 2b       	or	r24, r25
    10aa:	09 f0       	breq	.+2      	; 0x10ae <menu_update+0x12>
    10ac:	4c c0       	rjmp	.+152    	; 0x1146 <menu_update+0xaa>
    10ae:	c0 e0       	ldi	r28, 0x00	; 0
    10b0:	d0 e0       	ldi	r29, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    10b2:	ce 01       	movw	r24, r28
    10b4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <sram_clear_line>

void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    10b8:	21 96       	adiw	r28, 0x01	; 1
    10ba:	c7 30       	cpi	r28, 0x07	; 7
    10bc:	d1 05       	cpc	r29, r1
    10be:	c9 f7       	brne	.-14     	; 0x10b2 <menu_update+0x16>
			sram_clear_line(j);
		}

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
    10c0:	e0 91 d1 03 	lds	r30, 0x03D1
    10c4:	f0 91 d2 03 	lds	r31, 0x03D2
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	93 81       	ldd	r25, Z+3	; 0x03
    10cc:	18 16       	cp	r1, r24
    10ce:	19 06       	cpc	r1, r25
    10d0:	d4 f5       	brge	.+116    	; 0x1146 <menu_update+0xaa>
    10d2:	c0 e0       	ldi	r28, 0x00	; 0
    10d4:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    10d6:	10 e8       	ldi	r17, 0x80	; 128
    10d8:	01 e8       	ldi	r16, 0x81	; 129

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    10da:	ce 01       	movw	r24, r28
    10dc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
			oled_goto_column(0);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 05 09 	call	0x120a	; 0x120a <oled_goto_column>
			strcpy_P(temp,current_head->title);
    10e8:	e0 91 d1 03 	lds	r30, 0x03D1
    10ec:	f0 91 d2 03 	lds	r31, 0x03D2
    10f0:	60 81       	ld	r22, Z
    10f2:	71 81       	ldd	r23, Z+1	; 0x01
    10f4:	8f ed       	ldi	r24, 0xDF	; 223
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    10fc:	20 91 d1 03 	lds	r18, 0x03D1
    1100:	30 91 d2 03 	lds	r19, 0x03D2
    1104:	80 91 d3 03 	lds	r24, 0x03D3
    1108:	90 91 d4 03 	lds	r25, 0x03D4
    110c:	28 17       	cp	r18, r24
    110e:	39 07       	cpc	r19, r25
    1110:	11 f4       	brne	.+4      	; 0x1116 <menu_update+0x7a>
    1112:	80 2f       	mov	r24, r16
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <menu_update+0x7c>
    1116:	81 2f       	mov	r24, r17
    1118:	0e 94 bb 09 	call	0x1376	; 0x1376 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    111c:	8f ed       	ldi	r24, 0xDF	; 223
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	0e 94 18 0a 	call	0x1430	; 0x1430 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    1124:	e0 91 d1 03 	lds	r30, 0x03D1
    1128:	f0 91 d2 03 	lds	r31, 0x03D2
    112c:	04 80       	ldd	r0, Z+4	; 0x04
    112e:	f5 81       	ldd	r31, Z+5	; 0x05
    1130:	e0 2d       	mov	r30, r0
    1132:	f0 93 d2 03 	sts	0x03D2, r31
    1136:	e0 93 d1 03 	sts	0x03D1, r30
			sram_clear_line(j);
		}

		//sram_init();
		
		for (int i = 0; i < current_head->n_sib; i++)
    113a:	21 96       	adiw	r28, 0x01	; 1
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	c8 17       	cp	r28, r24
    1142:	d9 07       	cpc	r29, r25
    1144:	54 f2       	brlt	.-108    	; 0x10da <menu_update+0x3e>
			sram_write_string(temp);
			current_head = current_head->ptr_sib_down;
		}
		
}
	oled_goto_line(7);
    1146:	87 e0       	ldi	r24, 0x07	; 7
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>

	sram_scroll_data(7,1);
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	0e 94 a6 0a 	call	0x154c	; 0x154c <sram_scroll_data>
	write_screen();
    1156:	0e 94 43 0a 	call	0x1486	; 0x1486 <write_screen>
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <write_c>:

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1164:	e0 91 0a 01 	lds	r30, 0x010A
    1168:	f0 91 0b 01 	lds	r31, 0x010B
    116c:	80 83       	st	Z, r24
    116e:	08 95       	ret

00001170 <oled_home>:
	}
}

void oled_home(void)
{
	page_sram = 0;
    1170:	10 92 d0 03 	sts	0x03D0, r1
    1174:	10 92 cf 03 	sts	0x03CF, r1
	col_sram = 0;
    1178:	10 92 ce 03 	sts	0x03CE, r1
    117c:	10 92 cd 03 	sts	0x03CD, r1

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1180:	e0 91 0a 01 	lds	r30, 0x010A
    1184:	f0 91 0b 01 	lds	r31, 0x010B
    1188:	81 e2       	ldi	r24, 0x21	; 33
    118a:	80 83       	st	Z, r24
    118c:	e0 91 0a 01 	lds	r30, 0x010A
    1190:	f0 91 0b 01 	lds	r31, 0x010B
    1194:	10 82       	st	Z, r1
    1196:	e0 91 0a 01 	lds	r30, 0x010A
    119a:	f0 91 0b 01 	lds	r31, 0x010B
    119e:	8f e7       	ldi	r24, 0x7F	; 127
    11a0:	80 83       	st	Z, r24
    11a2:	e0 91 0a 01 	lds	r30, 0x010A
    11a6:	f0 91 0b 01 	lds	r31, 0x010B
    11aa:	82 e2       	ldi	r24, 0x22	; 34
    11ac:	80 83       	st	Z, r24
    11ae:	e0 91 0a 01 	lds	r30, 0x010A
    11b2:	f0 91 0b 01 	lds	r31, 0x010B
    11b6:	10 82       	st	Z, r1
    11b8:	e0 91 0a 01 	lds	r30, 0x010A
    11bc:	f0 91 0b 01 	lds	r31, 0x010B
    11c0:	87 e0       	ldi	r24, 0x07	; 7
    11c2:	80 83       	st	Z, r24
    11c4:	08 95       	ret

000011c6 <oled_goto_line>:
	//write_c(0x10);
}



void oled_goto_line(unsigned int line){
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	ec 01       	movw	r28, r24
	oled_home();
    11cc:	0e 94 b8 08 	call	0x1170	; 0x1170 <oled_home>
	page_sram = line;
    11d0:	d0 93 d0 03 	sts	0x03D0, r29
    11d4:	c0 93 cf 03 	sts	0x03CF, r28
	if(line%8){
    11d8:	ce 01       	movw	r24, r28
    11da:	87 70       	andi	r24, 0x07	; 7
    11dc:	99 27       	eor	r25, r25
    11de:	89 2b       	or	r24, r25
    11e0:	89 f0       	breq	.+34     	; 0x1204 <oled_goto_line+0x3e>

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    11e2:	e0 91 0a 01 	lds	r30, 0x010A
    11e6:	f0 91 0b 01 	lds	r31, 0x010B
    11ea:	10 82       	st	Z, r1
    11ec:	e0 91 0a 01 	lds	r30, 0x010A
    11f0:	f0 91 0b 01 	lds	r31, 0x010B
    11f4:	80 e1       	ldi	r24, 0x10	; 16
    11f6:	80 83       	st	Z, r24
	oled_home();
	page_sram = line;
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
    11f8:	c0 6b       	ori	r28, 0xB0	; 176

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    11fa:	e0 91 0a 01 	lds	r30, 0x010A
    11fe:	f0 91 0b 01 	lds	r31, 0x010B
    1202:	c0 83       	st	Z, r28
	if(line%8){
		write_c(0x00);
		write_c(0x10);
		write_c(0xB0 | line);
	}
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <oled_goto_column>:


void oled_goto_column(unsigned int column){
	col_sram = column%128;
    120a:	8f 77       	andi	r24, 0x7F	; 127
    120c:	99 27       	eor	r25, r25
    120e:	90 93 ce 03 	sts	0x03CE, r25
    1212:	80 93 cd 03 	sts	0x03CD, r24
    1216:	08 95       	ret

00001218 <oled_clear_line>:
}

void oled_clear_line(unsigned int line){
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    121e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	if(line < 8){
    1222:	28 97       	sbiw	r28, 0x08	; 8
    1224:	50 f4       	brcc	.+20     	; 0x123a <oled_clear_line+0x22>
    1226:	80 e8       	ldi	r24, 0x80	; 128
    1228:	90 e0       	ldi	r25, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    122a:	e0 91 08 01 	lds	r30, 0x0108
    122e:	f0 91 09 01 	lds	r31, 0x0109
    1232:	10 82       	st	Z, r1
    1234:	01 97       	sbiw	r24, 0x01	; 1
}

void oled_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	c1 f7       	brne	.-16     	; 0x122a <oled_clear_line+0x12>
			write_d(0b00000000);
		}
	}
} 
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <oled_reset>:

}


void oled_reset(void)
{		
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
	for(int i = 0; i < 8;i++){
    1244:	c0 e0       	ldi	r28, 0x00	; 0
    1246:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(i);
    1248:	ce 01       	movw	r24, r28
    124a:	0e 94 0c 09 	call	0x1218	; 0x1218 <oled_clear_line>
}


void oled_reset(void)
{		
	for(int i = 0; i < 8;i++){
    124e:	21 96       	adiw	r28, 0x01	; 1
    1250:	c8 30       	cpi	r28, 0x08	; 8
    1252:	d1 05       	cpc	r29, r1
    1254:	c9 f7       	brne	.-14     	; 0x1248 <oled_reset+0x8>
		oled_clear_line(i);
	}
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <oled_ini>:


void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    125c:	85 b7       	in	r24, 0x35	; 53
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1262:	80 b7       	in	r24, 0x30	; 48
    1264:	80 62       	ori	r24, 0x20	; 32
    1266:	80 bf       	out	0x30, r24	; 48

int page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1268:	e0 91 0a 01 	lds	r30, 0x010A
    126c:	f0 91 0b 01 	lds	r31, 0x010B
    1270:	8e ea       	ldi	r24, 0xAE	; 174
    1272:	80 83       	st	Z, r24
    1274:	e0 91 0a 01 	lds	r30, 0x010A
    1278:	f0 91 0b 01 	lds	r31, 0x010B
    127c:	81 ea       	ldi	r24, 0xA1	; 161
    127e:	80 83       	st	Z, r24
    1280:	e0 91 0a 01 	lds	r30, 0x010A
    1284:	f0 91 0b 01 	lds	r31, 0x010B
    1288:	8a ed       	ldi	r24, 0xDA	; 218
    128a:	80 83       	st	Z, r24
    128c:	e0 91 0a 01 	lds	r30, 0x010A
    1290:	f0 91 0b 01 	lds	r31, 0x010B
    1294:	82 e1       	ldi	r24, 0x12	; 18
    1296:	80 83       	st	Z, r24
    1298:	e0 91 0a 01 	lds	r30, 0x010A
    129c:	f0 91 0b 01 	lds	r31, 0x010B
    12a0:	88 ec       	ldi	r24, 0xC8	; 200
    12a2:	80 83       	st	Z, r24
    12a4:	e0 91 0a 01 	lds	r30, 0x010A
    12a8:	f0 91 0b 01 	lds	r31, 0x010B
    12ac:	88 ea       	ldi	r24, 0xA8	; 168
    12ae:	80 83       	st	Z, r24
    12b0:	e0 91 0a 01 	lds	r30, 0x010A
    12b4:	f0 91 0b 01 	lds	r31, 0x010B
    12b8:	8f e3       	ldi	r24, 0x3F	; 63
    12ba:	80 83       	st	Z, r24
    12bc:	e0 91 0a 01 	lds	r30, 0x010A
    12c0:	f0 91 0b 01 	lds	r31, 0x010B
    12c4:	85 ed       	ldi	r24, 0xD5	; 213
    12c6:	80 83       	st	Z, r24
    12c8:	e0 91 0a 01 	lds	r30, 0x010A
    12cc:	f0 91 0b 01 	lds	r31, 0x010B
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	80 83       	st	Z, r24
    12d4:	e0 91 0a 01 	lds	r30, 0x010A
    12d8:	f0 91 0b 01 	lds	r31, 0x010B
    12dc:	81 e8       	ldi	r24, 0x81	; 129
    12de:	80 83       	st	Z, r24
    12e0:	e0 91 0a 01 	lds	r30, 0x010A
    12e4:	f0 91 0b 01 	lds	r31, 0x010B
    12e8:	80 e5       	ldi	r24, 0x50	; 80
    12ea:	80 83       	st	Z, r24
    12ec:	e0 91 0a 01 	lds	r30, 0x010A
    12f0:	f0 91 0b 01 	lds	r31, 0x010B
    12f4:	89 ed       	ldi	r24, 0xD9	; 217
    12f6:	80 83       	st	Z, r24
    12f8:	e0 91 0a 01 	lds	r30, 0x010A
    12fc:	f0 91 0b 01 	lds	r31, 0x010B
    1300:	81 e2       	ldi	r24, 0x21	; 33
    1302:	80 83       	st	Z, r24
    1304:	e0 91 0a 01 	lds	r30, 0x010A
    1308:	f0 91 0b 01 	lds	r31, 0x010B
    130c:	80 e2       	ldi	r24, 0x20	; 32
    130e:	80 83       	st	Z, r24
    1310:	e0 91 0a 01 	lds	r30, 0x010A
    1314:	f0 91 0b 01 	lds	r31, 0x010B
    1318:	10 82       	st	Z, r1
    131a:	e0 91 0a 01 	lds	r30, 0x010A
    131e:	f0 91 0b 01 	lds	r31, 0x010B
    1322:	8b ed       	ldi	r24, 0xDB	; 219
    1324:	80 83       	st	Z, r24
    1326:	e0 91 0a 01 	lds	r30, 0x010A
    132a:	f0 91 0b 01 	lds	r31, 0x010B
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	80 83       	st	Z, r24
    1332:	e0 91 0a 01 	lds	r30, 0x010A
    1336:	f0 91 0b 01 	lds	r31, 0x010B
    133a:	8d ea       	ldi	r24, 0xAD	; 173
    133c:	80 83       	st	Z, r24
    133e:	e0 91 0a 01 	lds	r30, 0x010A
    1342:	f0 91 0b 01 	lds	r31, 0x010B
    1346:	10 82       	st	Z, r1
    1348:	e0 91 0a 01 	lds	r30, 0x010A
    134c:	f0 91 0b 01 	lds	r31, 0x010B
    1350:	84 ea       	ldi	r24, 0xA4	; 164
    1352:	80 83       	st	Z, r24
    1354:	e0 91 0a 01 	lds	r30, 0x010A
    1358:	f0 91 0b 01 	lds	r31, 0x010B
    135c:	86 ea       	ldi	r24, 0xA6	; 166
    135e:	80 83       	st	Z, r24
    1360:	e0 91 0a 01 	lds	r30, 0x010A
    1364:	f0 91 0b 01 	lds	r31, 0x010B
    1368:	8f ea       	ldi	r24, 0xAF	; 175
    136a:	80 83       	st	Z, r24
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	
	oled_reset();
    136c:	0e 94 20 09 	call	0x1240	; 0x1240 <oled_reset>
	oled_home();
    1370:	0e 94 b8 08 	call	0x1170	; 0x1170 <oled_home>
    1374:	08 95       	ret

00001376 <sram_write_char>:
	}
}


int sram_write_char(char letter){
	if (letter == '\n'){
    1376:	8a 30       	cpi	r24, 0x0A	; 10
    1378:	91 f4       	brne	.+36     	; 0x139e <sram_write_char+0x28>
		page_sram = (page_sram+1)%8;
    137a:	80 91 cf 03 	lds	r24, 0x03CF
    137e:	90 91 d0 03 	lds	r25, 0x03D0
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	87 70       	andi	r24, 0x07	; 7
    1386:	99 27       	eor	r25, r25
    1388:	90 93 d0 03 	sts	0x03D0, r25
    138c:	80 93 cf 03 	sts	0x03CF, r24
		col_sram = 0;
    1390:	10 92 ce 03 	sts	0x03CE, r1
    1394:	10 92 cd 03 	sts	0x03CD, r1
		return 1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	08 95       	ret
	}else if(letter != '\0'){
    139e:	88 23       	and	r24, r24
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <sram_write_char+0x2e>
    13a2:	43 c0       	rjmp	.+134    	; 0x142a <sram_write_char+0xb4>
    13a4:	e8 2f       	mov	r30, r24
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	ee 0f       	add	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	ec 50       	subi	r30, 0x0C	; 12
    13b6:	f0 40       	sbci	r31, 0x00	; 0
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
		for(unsigned int i = 0; i < 8; i++){
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
    13bc:	a0 91 cf 03 	lds	r26, 0x03CF
    13c0:	b0 91 d0 03 	lds	r27, 0x03D0
    13c4:	b6 95       	lsr	r27
    13c6:	ba 2f       	mov	r27, r26
    13c8:	aa 27       	eor	r26, r26
    13ca:	b7 95       	ror	r27
    13cc:	a7 95       	ror	r26
    13ce:	20 91 cd 03 	lds	r18, 0x03CD
    13d2:	30 91 ce 03 	lds	r19, 0x03CE
    13d6:	a2 0f       	add	r26, r18
    13d8:	b3 1f       	adc	r27, r19
    13da:	20 91 06 01 	lds	r18, 0x0106
    13de:	30 91 07 01 	lds	r19, 0x0107
    13e2:	a2 0f       	add	r26, r18
    13e4:	b3 1f       	adc	r27, r19
    13e6:	24 91       	lpm	r18, Z
    13e8:	2c 93       	st	X, r18
			col_sram++;
    13ea:	20 91 cd 03 	lds	r18, 0x03CD
    13ee:	30 91 ce 03 	lds	r19, 0x03CE
    13f2:	2f 5f       	subi	r18, 0xFF	; 255
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	30 93 ce 03 	sts	0x03CE, r19
    13fa:	20 93 cd 03 	sts	0x03CD, r18
	if (letter == '\n'){
		page_sram = (page_sram+1)%8;
		col_sram = 0;
		return 1;
	}else if(letter != '\0'){
		for(unsigned int i = 0; i < 8; i++){
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	31 96       	adiw	r30, 0x01	; 1
    1402:	88 30       	cpi	r24, 0x08	; 8
    1404:	91 05       	cpc	r25, r1
    1406:	d1 f6       	brne	.-76     	; 0x13bc <sram_write_char+0x46>
			ext_ram[page_sram*128 + col_sram] = pgm_read_byte(&font[letter-' '][i]);
			col_sram++;
		}
		edited |= (1 << page_sram);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	00 90 cf 03 	lds	r0, 0x03CF
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <sram_write_char+0xa0>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <sram_write_char+0x9c>
    141a:	90 91 cc 03 	lds	r25, 0x03CC
    141e:	89 2b       	or	r24, r25
    1420:	80 93 cc 03 	sts	0x03CC, r24
		return 1;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	08 95       	ret
	}else{
		return 0;
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    142e:	08 95       	ret

00001430 <sram_write_string>:


//char screendata[8][128][8]; //line, col, data(8)
volatile char *ext_ram = (char *) 0x1800;

void sram_write_string(char letters[]){
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while (sram_write_char(letters[i++])){
    1436:	89 91       	ld	r24, Y+
    1438:	0e 94 bb 09 	call	0x1376	; 0x1376 <sram_write_char>
    143c:	89 2b       	or	r24, r25
    143e:	d9 f7       	brne	.-10     	; 0x1436 <sram_write_string+0x6>
	}
}
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	08 95       	ret

00001446 <sram_init>:
	}else{
		return 0;
	}
}

void sram_init(void){
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <sram_init+0x32>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
    1450:	9c 01       	movw	r18, r24
    1452:	24 0f       	add	r18, r20
    1454:	35 1f       	adc	r19, r21
    1456:	e0 91 06 01 	lds	r30, 0x0106
    145a:	f0 91 07 01 	lds	r31, 0x0107
    145e:	e2 0f       	add	r30, r18
    1460:	f3 1f       	adc	r31, r19
    1462:	10 82       	st	Z, r1
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	80 38       	cpi	r24, 0x80	; 128
    1468:	91 05       	cpc	r25, r1
    146a:	91 f7       	brne	.-28     	; 0x1450 <sram_init+0xa>
    146c:	40 58       	subi	r20, 0x80	; 128
    146e:	5f 4f       	sbci	r21, 0xFF	; 255
		return 0;
	}
}

void sram_init(void){
	for(unsigned int r = 0; r < 8; r++){
    1470:	41 15       	cp	r20, r1
    1472:	84 e0       	ldi	r24, 0x04	; 4
    1474:	58 07       	cpc	r21, r24
    1476:	19 f0       	breq	.+6      	; 0x147e <sram_init+0x38>
	}else{
		return 0;
	}
}

void sram_init(void){
    1478:	87 2f       	mov	r24, r23
    147a:	96 2f       	mov	r25, r22
    147c:	e9 cf       	rjmp	.-46     	; 0x1450 <sram_init+0xa>
	for(unsigned int r = 0; r < 8; r++){
		for(unsigned int k = 0; k < 128; k++){
			ext_ram[r*128+k] = 0b00000000;
		}
	}
	edited = 0b11111111;
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	80 93 cc 03 	sts	0x03CC, r24
    1484:	08 95       	ret

00001486 <write_screen>:
		sram_pixel(-x+x0,y0+sqrt((pow(radius,2)-pow(x,2))));
	}
}


void write_screen(void){//update all the pages that are edited
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	c0 e0       	ldi	r28, 0x00	; 0
    1494:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
    1496:	00 e0       	ldi	r16, 0x00	; 0
    1498:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
    149a:	e1 2c       	mov	r14, r1
    149c:	f1 2c       	mov	r15, r1
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
    149e:	c8 01       	movw	r24, r16
    14a0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
		for(unsigned int k = 0; k < 128; k++){
    14a4:	2e 2d       	mov	r18, r14
    14a6:	3f 2d       	mov	r19, r15
			write_d(ext_ram[r*128 + k]);
    14a8:	a9 01       	movw	r20, r18
    14aa:	4c 0f       	add	r20, r28
    14ac:	5d 1f       	adc	r21, r29
    14ae:	e0 91 06 01 	lds	r30, 0x0106
    14b2:	f0 91 07 01 	lds	r31, 0x0107
    14b6:	e4 0f       	add	r30, r20
    14b8:	f5 1f       	adc	r31, r21
    14ba:	80 81       	ld	r24, Z
}


void write_d(uint8_t data)
{
	*oled_data = data;
    14bc:	e0 91 08 01 	lds	r30, 0x0108
    14c0:	f0 91 09 01 	lds	r31, 0x0109
    14c4:	80 83       	st	Z, r24
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
    14c6:	2f 5f       	subi	r18, 0xFF	; 255
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	20 38       	cpi	r18, 0x80	; 128
    14cc:	31 05       	cpc	r19, r1
    14ce:	61 f7       	brne	.-40     	; 0x14a8 <write_screen+0x22>
		
	}
	
	*/
	
	for(unsigned int r = 0; r < 8; r++){//old code that updates everything
    14d0:	0f 5f       	subi	r16, 0xFF	; 255
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	c0 58       	subi	r28, 0x80	; 128
    14d6:	df 4f       	sbci	r29, 0xFF	; 255
    14d8:	08 30       	cpi	r16, 0x08	; 8
    14da:	11 05       	cpc	r17, r1
    14dc:	01 f7       	brne	.-64     	; 0x149e <write_screen+0x18>
		oled_goto_line(r);
		for(unsigned int k = 0; k < 128; k++){
			write_d(ext_ram[r*128 + k]);
		}
	}
}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	08 95       	ret

000014ec <sram_clear_line>:

void sram_clear_line(unsigned int line){
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
	oled_goto_line(line);
    14f2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <oled_goto_line>
	if(line < 8){
    14f6:	c8 30       	cpi	r28, 0x08	; 8
    14f8:	d1 05       	cpc	r29, r1
    14fa:	28 f5       	brcc	.+74     	; 0x1546 <sram_clear_line+0x5a>
		for(unsigned int i = 0; i < 128; i++){
			ext_ram[line*128 + i] = 0b00000000;
    14fc:	be 01       	movw	r22, r28
    14fe:	76 95       	lsr	r23
    1500:	76 2f       	mov	r23, r22
    1502:	66 27       	eor	r22, r22
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	46 0f       	add	r20, r22
    1510:	57 1f       	adc	r21, r23
    1512:	e0 91 06 01 	lds	r30, 0x0106
    1516:	f0 91 07 01 	lds	r31, 0x0107
    151a:	e4 0f       	add	r30, r20
    151c:	f5 1f       	adc	r31, r21
    151e:	10 82       	st	Z, r1
}

void sram_clear_line(unsigned int line){
	oled_goto_line(line);
	if(line < 8){
		for(unsigned int i = 0; i < 128; i++){
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	20 38       	cpi	r18, 0x80	; 128
    1526:	31 05       	cpc	r19, r1
    1528:	89 f7       	brne	.-30     	; 0x150c <sram_clear_line+0x20>
			ext_ram[line*128 + i] = 0b00000000;
		}
		edited |= 1 << line;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 01       	movw	r18, r24
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <sram_clear_line+0x4a>
    1532:	22 0f       	add	r18, r18
    1534:	33 1f       	adc	r19, r19
    1536:	ca 95       	dec	r28
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <sram_clear_line+0x46>
    153a:	e9 01       	movw	r28, r18
    153c:	80 91 cc 03 	lds	r24, 0x03CC
    1540:	c8 2b       	or	r28, r24
    1542:	c0 93 cc 03 	sts	0x03CC, r28
	}
}
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <sram_scroll_data>:

uint8_t tempdata[8];
void sram_scroll_data(uint8_t line, uint8_t scroll){
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	d8 2f       	mov	r29, r24
    1558:	c6 2f       	mov	r28, r22
	if(scroll > 8){
    155a:	69 30       	cpi	r22, 0x09	; 9
    155c:	20 f0       	brcs	.+8      	; 0x1566 <sram_scroll_data+0x1a>
		scroll -= 8;
    155e:	c8 50       	subi	r28, 0x08	; 8
		sram_scroll_data(line,scroll);
    1560:	6c 2f       	mov	r22, r28
    1562:	0e 94 a6 0a 	call	0x154c	; 0x154c <sram_scroll_data>
	}
	for (uint8_t s = 0; s < scroll; s++){
    1566:	cc 23       	and	r28, r28
    1568:	09 f4       	brne	.+2      	; 0x156c <sram_scroll_data+0x20>
    156a:	5c c0       	rjmp	.+184    	; 0x1624 <sram_scroll_data+0xd8>
    156c:	a0 91 06 01 	lds	r26, 0x0106
    1570:	b0 91 07 01 	lds	r27, 0x0107
    1574:	20 e8       	ldi	r18, 0x80	; 128
    1576:	d2 9f       	mul	r29, r18
    1578:	a0 0d       	add	r26, r0
    157a:	b1 1d       	adc	r27, r1
    157c:	11 24       	eor	r1, r1
    157e:	8b e2       	ldi	r24, 0x2B	; 43
    1580:	94 e0       	ldi	r25, 0x04	; 4
		tempdata[s] = ext_ram[line*128 + s];
    1582:	fc 01       	movw	r30, r24
    1584:	2d 91       	ld	r18, X+
    1586:	21 93       	st	Z+, r18
    1588:	2e 2f       	mov	r18, r30
    158a:	28 1b       	sub	r18, r24
void sram_scroll_data(uint8_t line, uint8_t scroll){
	if(scroll > 8){
		scroll -= 8;
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
    158c:	2c 17       	cp	r18, r28
    158e:	d0 f3       	brcs	.-12     	; 0x1584 <sram_scroll_data+0x38>
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    1590:	8c 2f       	mov	r24, r28
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	60 e8       	ldi	r22, 0x80	; 128
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	68 1b       	sub	r22, r24
    159a:	79 0b       	sbc	r23, r25
    159c:	16 16       	cp	r1, r22
    159e:	17 06       	cpc	r1, r23
    15a0:	0c f4       	brge	.+2      	; 0x15a4 <sram_scroll_data+0x58>
    15a2:	44 c0       	rjmp	.+136    	; 0x162c <sram_scroll_data+0xe0>
    15a4:	18 c0       	rjmp	.+48     	; 0x15d6 <sram_scroll_data+0x8a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    15a6:	40 91 06 01 	lds	r20, 0x0106
    15aa:	50 91 07 01 	lds	r21, 0x0107
    15ae:	2e 0d       	add	r18, r14
    15b0:	3f 1d       	adc	r19, r15
    15b2:	fa 01       	movw	r30, r20
    15b4:	e2 0f       	add	r30, r18
    15b6:	f3 1f       	adc	r31, r19
    15b8:	28 0f       	add	r18, r24
    15ba:	39 1f       	adc	r19, r25
    15bc:	42 0f       	add	r20, r18
    15be:	53 1f       	adc	r21, r19
    15c0:	da 01       	movw	r26, r20
    15c2:	2c 91       	ld	r18, X
    15c4:	20 83       	st	Z, r18
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    15c6:	1f 5f       	subi	r17, 0xFF	; 255
    15c8:	21 2f       	mov	r18, r17
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	26 17       	cp	r18, r22
    15ce:	37 07       	cpc	r19, r23
    15d0:	54 f3       	brlt	.-44     	; 0x15a6 <sram_scroll_data+0x5a>
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    15d2:	cc 23       	and	r28, r28
    15d4:	d1 f0       	breq	.+52     	; 0x160a <sram_scroll_data+0xbe>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
    15d6:	b0 e8       	ldi	r27, 0x80	; 128
    15d8:	db 9f       	mul	r29, r27
    15da:	90 01       	movw	r18, r0
    15dc:	11 24       	eor	r1, r1
    15de:	28 1b       	sub	r18, r24
    15e0:	39 0b       	sbc	r19, r25
    15e2:	4b e2       	ldi	r20, 0x2B	; 43
    15e4:	54 e0       	ldi	r21, 0x04	; 4
    15e6:	fa 01       	movw	r30, r20
    15e8:	2c 5a       	subi	r18, 0xAC	; 172
    15ea:	33 40       	sbci	r19, 0x03	; 3
    15ec:	c9 01       	movw	r24, r18
    15ee:	8e 0f       	add	r24, r30
    15f0:	9f 1f       	adc	r25, r31
    15f2:	a0 91 06 01 	lds	r26, 0x0106
    15f6:	b0 91 07 01 	lds	r27, 0x0107
    15fa:	a8 0f       	add	r26, r24
    15fc:	b9 1f       	adc	r27, r25
    15fe:	81 91       	ld	r24, Z+
    1600:	8c 93       	st	X, r24
    1602:	8e 2f       	mov	r24, r30
    1604:	84 1b       	sub	r24, r20
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
	}
	for (uint8_t s = 0; s < scroll; s++){
    1606:	8c 17       	cp	r24, r28
    1608:	88 f3       	brcs	.-30     	; 0x15ec <sram_scroll_data+0xa0>
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <sram_scroll_data+0xc8>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	da 95       	dec	r29
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <sram_scroll_data+0xc4>
    1618:	d0 91 cc 03 	lds	r29, 0x03CC
    161c:	8d 2b       	or	r24, r29
    161e:	80 93 cc 03 	sts	0x03CC, r24
    1622:	0c c0       	rjmp	.+24     	; 0x163c <sram_scroll_data+0xf0>
		sram_scroll_data(line,scroll);
	}
	for (uint8_t s = 0; s < scroll; s++){
		tempdata[s] = ext_ram[line*128 + s];
	}
	for(uint8_t i = 0; i < 128-scroll; i++){
    1624:	60 e8       	ldi	r22, 0x80	; 128
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
		ext_ram[line*128 + i] = ext_ram[line*128 + i + scroll];
    162c:	20 e8       	ldi	r18, 0x80	; 128
    162e:	d2 9f       	mul	r29, r18
    1630:	70 01       	movw	r14, r0
    1632:	11 24       	eor	r1, r1
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	10 e0       	ldi	r17, 0x00	; 0
    163a:	b5 cf       	rjmp	.-150    	; 0x15a6 <sram_scroll_data+0x5a>
	}
	for (uint8_t s = 0; s < scroll; s++){
		ext_ram[line*128 + 127-scroll+s] = tempdata[s];
	}
	edited |= 1 << line;
}
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	08 95       	ret

00001648 <SPI_send>:
    1648:	8f b9       	out	0x0f, r24	; 15
    164a:	77 9b       	sbis	0x0e, 7	; 14
    164c:	fe cf       	rjmp	.-4      	; 0x164a <SPI_send+0x2>
    164e:	08 95       	ret

00001650 <SPI_read>:
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 24 0b 	call	0x1648	; 0x1648 <SPI_send>
    1656:	77 9b       	sbis	0x0e, 7	; 14
    1658:	fe cf       	rjmp	.-4      	; 0x1656 <SPI_read+0x6>
    165a:	8f b1       	in	r24, 0x0f	; 15
    165c:	08 95       	ret

0000165e <SPI_select>:
    165e:	c4 98       	cbi	0x18, 4	; 24
    1660:	08 95       	ret

00001662 <SPI_deselect>:
    1662:	c4 9a       	sbi	0x18, 4	; 24
    1664:	08 95       	ret

00001666 <SPI_initialize>:
    1666:	87 b3       	in	r24, 0x17	; 23
    1668:	80 6b       	ori	r24, 0xB0	; 176
    166a:	87 bb       	out	0x17, r24	; 23
    166c:	be 98       	cbi	0x17, 6	; 23
    166e:	6c 9a       	sbi	0x0d, 4	; 13
    1670:	6e 9a       	sbi	0x0d, 6	; 13
    1672:	70 9a       	sbi	0x0e, 0	; 14
    1674:	0e 94 31 0b 	call	0x1662	; 0x1662 <SPI_deselect>
    1678:	08 95       	ret

0000167a <initialize_timer>:
 *  Author: Amund Marton
 */ 

#include "timer.h"
uint8_t FLAG_refresh_screen;
int initialize_timer(uint8_t fps){
    167a:	28 2f       	mov	r18, r24
	TCNT0 = 0x00;//reset timer_0
    167c:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<COM01)|(1<<COM00)|(1<<CS02)|(1<<CS00);//COM0n: Set OC0 mode (on compare match)		CS0n:set prescaler (to 1024)
    167e:	83 b7       	in	r24, 0x33	; 51
    1680:	85 63       	ori	r24, 0x35	; 53
    1682:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	60 ec       	ldi	r22, 0xC0	; 192
    168c:	72 e1       	ldi	r23, 0x12	; 18
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodsi4>
    1696:	21 bf       	out	0x31, r18	; 49
	FLAG_refresh_screen = 1;//since we are initializing we want to refresh the page
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 37 04 	sts	0x0437, r24
    169e:	ff cf       	rjmp	.-2      	; 0x169e <initialize_timer+0x24>

000016a0 <send_UART>:
    16a0:	5d 9b       	sbis	0x0b, 5	; 11
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <send_UART>
    16a4:	8c b9       	out	0x0c, r24	; 12
    16a6:	08 95       	ret

000016a8 <recieve_UART>:
    16a8:	5f 9b       	sbis	0x0b, 7	; 11
    16aa:	fe cf       	rjmp	.-4      	; 0x16a8 <recieve_UART>
    16ac:	8c b1       	in	r24, 0x0c	; 12
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	08 95       	ret

000016b2 <init_UART>:
    16b2:	90 bd       	out	0x20, r25	; 32
    16b4:	89 b9       	out	0x09, r24	; 9
    16b6:	88 e1       	ldi	r24, 0x18	; 24
    16b8:	8a b9       	out	0x0a, r24	; 10
    16ba:	64 e5       	ldi	r22, 0x54	; 84
    16bc:	7b e0       	ldi	r23, 0x0B	; 11
    16be:	80 e5       	ldi	r24, 0x50	; 80
    16c0:	9b e0       	ldi	r25, 0x0B	; 11
    16c2:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <fdevopen>
    16c6:	08 95       	ret

000016c8 <__subsf3>:
    16c8:	50 58       	subi	r21, 0x80	; 128

000016ca <__addsf3>:
    16ca:	bb 27       	eor	r27, r27
    16cc:	aa 27       	eor	r26, r26
    16ce:	0e d0       	rcall	.+28     	; 0x16ec <__addsf3x>
    16d0:	4d c1       	rjmp	.+666    	; 0x196c <__fp_round>
    16d2:	3e d1       	rcall	.+636    	; 0x1950 <__fp_pscA>
    16d4:	30 f0       	brcs	.+12     	; 0x16e2 <__addsf3+0x18>
    16d6:	43 d1       	rcall	.+646    	; 0x195e <__fp_pscB>
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <__addsf3+0x18>
    16da:	31 f4       	brne	.+12     	; 0x16e8 <__addsf3+0x1e>
    16dc:	9f 3f       	cpi	r25, 0xFF	; 255
    16de:	11 f4       	brne	.+4      	; 0x16e4 <__addsf3+0x1a>
    16e0:	1e f4       	brtc	.+6      	; 0x16e8 <__addsf3+0x1e>
    16e2:	33 c1       	rjmp	.+614    	; 0x194a <__fp_nan>
    16e4:	0e f4       	brtc	.+2      	; 0x16e8 <__addsf3+0x1e>
    16e6:	e0 95       	com	r30
    16e8:	e7 fb       	bst	r30, 7
    16ea:	29 c1       	rjmp	.+594    	; 0x193e <__fp_inf>

000016ec <__addsf3x>:
    16ec:	e9 2f       	mov	r30, r25
    16ee:	4f d1       	rcall	.+670    	; 0x198e <__fp_split3>
    16f0:	80 f3       	brcs	.-32     	; 0x16d2 <__addsf3+0x8>
    16f2:	ba 17       	cp	r27, r26
    16f4:	62 07       	cpc	r22, r18
    16f6:	73 07       	cpc	r23, r19
    16f8:	84 07       	cpc	r24, r20
    16fa:	95 07       	cpc	r25, r21
    16fc:	18 f0       	brcs	.+6      	; 0x1704 <__addsf3x+0x18>
    16fe:	71 f4       	brne	.+28     	; 0x171c <__addsf3x+0x30>
    1700:	9e f5       	brtc	.+102    	; 0x1768 <__addsf3x+0x7c>
    1702:	67 c1       	rjmp	.+718    	; 0x19d2 <__fp_zero>
    1704:	0e f4       	brtc	.+2      	; 0x1708 <__addsf3x+0x1c>
    1706:	e0 95       	com	r30
    1708:	0b 2e       	mov	r0, r27
    170a:	ba 2f       	mov	r27, r26
    170c:	a0 2d       	mov	r26, r0
    170e:	0b 01       	movw	r0, r22
    1710:	b9 01       	movw	r22, r18
    1712:	90 01       	movw	r18, r0
    1714:	0c 01       	movw	r0, r24
    1716:	ca 01       	movw	r24, r20
    1718:	a0 01       	movw	r20, r0
    171a:	11 24       	eor	r1, r1
    171c:	ff 27       	eor	r31, r31
    171e:	59 1b       	sub	r21, r25
    1720:	99 f0       	breq	.+38     	; 0x1748 <__addsf3x+0x5c>
    1722:	59 3f       	cpi	r21, 0xF9	; 249
    1724:	50 f4       	brcc	.+20     	; 0x173a <__addsf3x+0x4e>
    1726:	50 3e       	cpi	r21, 0xE0	; 224
    1728:	68 f1       	brcs	.+90     	; 0x1784 <__addsf3x+0x98>
    172a:	1a 16       	cp	r1, r26
    172c:	f0 40       	sbci	r31, 0x00	; 0
    172e:	a2 2f       	mov	r26, r18
    1730:	23 2f       	mov	r18, r19
    1732:	34 2f       	mov	r19, r20
    1734:	44 27       	eor	r20, r20
    1736:	58 5f       	subi	r21, 0xF8	; 248
    1738:	f3 cf       	rjmp	.-26     	; 0x1720 <__addsf3x+0x34>
    173a:	46 95       	lsr	r20
    173c:	37 95       	ror	r19
    173e:	27 95       	ror	r18
    1740:	a7 95       	ror	r26
    1742:	f0 40       	sbci	r31, 0x00	; 0
    1744:	53 95       	inc	r21
    1746:	c9 f7       	brne	.-14     	; 0x173a <__addsf3x+0x4e>
    1748:	7e f4       	brtc	.+30     	; 0x1768 <__addsf3x+0x7c>
    174a:	1f 16       	cp	r1, r31
    174c:	ba 0b       	sbc	r27, r26
    174e:	62 0b       	sbc	r22, r18
    1750:	73 0b       	sbc	r23, r19
    1752:	84 0b       	sbc	r24, r20
    1754:	ba f0       	brmi	.+46     	; 0x1784 <__addsf3x+0x98>
    1756:	91 50       	subi	r25, 0x01	; 1
    1758:	a1 f0       	breq	.+40     	; 0x1782 <__addsf3x+0x96>
    175a:	ff 0f       	add	r31, r31
    175c:	bb 1f       	adc	r27, r27
    175e:	66 1f       	adc	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	c2 f7       	brpl	.-16     	; 0x1756 <__addsf3x+0x6a>
    1766:	0e c0       	rjmp	.+28     	; 0x1784 <__addsf3x+0x98>
    1768:	ba 0f       	add	r27, r26
    176a:	62 1f       	adc	r22, r18
    176c:	73 1f       	adc	r23, r19
    176e:	84 1f       	adc	r24, r20
    1770:	48 f4       	brcc	.+18     	; 0x1784 <__addsf3x+0x98>
    1772:	87 95       	ror	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	b7 95       	ror	r27
    177a:	f7 95       	ror	r31
    177c:	9e 3f       	cpi	r25, 0xFE	; 254
    177e:	08 f0       	brcs	.+2      	; 0x1782 <__addsf3x+0x96>
    1780:	b3 cf       	rjmp	.-154    	; 0x16e8 <__addsf3+0x1e>
    1782:	93 95       	inc	r25
    1784:	88 0f       	add	r24, r24
    1786:	08 f0       	brcs	.+2      	; 0x178a <__addsf3x+0x9e>
    1788:	99 27       	eor	r25, r25
    178a:	ee 0f       	add	r30, r30
    178c:	97 95       	ror	r25
    178e:	87 95       	ror	r24
    1790:	08 95       	ret

00001792 <__divsf3>:
    1792:	0c d0       	rcall	.+24     	; 0x17ac <__divsf3x>
    1794:	eb c0       	rjmp	.+470    	; 0x196c <__fp_round>
    1796:	e3 d0       	rcall	.+454    	; 0x195e <__fp_pscB>
    1798:	40 f0       	brcs	.+16     	; 0x17aa <__divsf3+0x18>
    179a:	da d0       	rcall	.+436    	; 0x1950 <__fp_pscA>
    179c:	30 f0       	brcs	.+12     	; 0x17aa <__divsf3+0x18>
    179e:	21 f4       	brne	.+8      	; 0x17a8 <__divsf3+0x16>
    17a0:	5f 3f       	cpi	r21, 0xFF	; 255
    17a2:	19 f0       	breq	.+6      	; 0x17aa <__divsf3+0x18>
    17a4:	cc c0       	rjmp	.+408    	; 0x193e <__fp_inf>
    17a6:	51 11       	cpse	r21, r1
    17a8:	15 c1       	rjmp	.+554    	; 0x19d4 <__fp_szero>
    17aa:	cf c0       	rjmp	.+414    	; 0x194a <__fp_nan>

000017ac <__divsf3x>:
    17ac:	f0 d0       	rcall	.+480    	; 0x198e <__fp_split3>
    17ae:	98 f3       	brcs	.-26     	; 0x1796 <__divsf3+0x4>

000017b0 <__divsf3_pse>:
    17b0:	99 23       	and	r25, r25
    17b2:	c9 f3       	breq	.-14     	; 0x17a6 <__divsf3+0x14>
    17b4:	55 23       	and	r21, r21
    17b6:	b1 f3       	breq	.-20     	; 0x17a4 <__divsf3+0x12>
    17b8:	95 1b       	sub	r25, r21
    17ba:	55 0b       	sbc	r21, r21
    17bc:	bb 27       	eor	r27, r27
    17be:	aa 27       	eor	r26, r26
    17c0:	62 17       	cp	r22, r18
    17c2:	73 07       	cpc	r23, r19
    17c4:	84 07       	cpc	r24, r20
    17c6:	38 f0       	brcs	.+14     	; 0x17d6 <__divsf3_pse+0x26>
    17c8:	9f 5f       	subi	r25, 0xFF	; 255
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	44 1f       	adc	r20, r20
    17d2:	aa 1f       	adc	r26, r26
    17d4:	a9 f3       	breq	.-22     	; 0x17c0 <__divsf3_pse+0x10>
    17d6:	33 d0       	rcall	.+102    	; 0x183e <__divsf3_pse+0x8e>
    17d8:	0e 2e       	mov	r0, r30
    17da:	3a f0       	brmi	.+14     	; 0x17ea <__divsf3_pse+0x3a>
    17dc:	e0 e8       	ldi	r30, 0x80	; 128
    17de:	30 d0       	rcall	.+96     	; 0x1840 <__divsf3_pse+0x90>
    17e0:	91 50       	subi	r25, 0x01	; 1
    17e2:	50 40       	sbci	r21, 0x00	; 0
    17e4:	e6 95       	lsr	r30
    17e6:	00 1c       	adc	r0, r0
    17e8:	ca f7       	brpl	.-14     	; 0x17dc <__divsf3_pse+0x2c>
    17ea:	29 d0       	rcall	.+82     	; 0x183e <__divsf3_pse+0x8e>
    17ec:	fe 2f       	mov	r31, r30
    17ee:	27 d0       	rcall	.+78     	; 0x183e <__divsf3_pse+0x8e>
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	88 1f       	adc	r24, r24
    17f6:	bb 1f       	adc	r27, r27
    17f8:	26 17       	cp	r18, r22
    17fa:	37 07       	cpc	r19, r23
    17fc:	48 07       	cpc	r20, r24
    17fe:	ab 07       	cpc	r26, r27
    1800:	b0 e8       	ldi	r27, 0x80	; 128
    1802:	09 f0       	breq	.+2      	; 0x1806 <__divsf3_pse+0x56>
    1804:	bb 0b       	sbc	r27, r27
    1806:	80 2d       	mov	r24, r0
    1808:	bf 01       	movw	r22, r30
    180a:	ff 27       	eor	r31, r31
    180c:	93 58       	subi	r25, 0x83	; 131
    180e:	5f 4f       	sbci	r21, 0xFF	; 255
    1810:	2a f0       	brmi	.+10     	; 0x181c <__divsf3_pse+0x6c>
    1812:	9e 3f       	cpi	r25, 0xFE	; 254
    1814:	51 05       	cpc	r21, r1
    1816:	68 f0       	brcs	.+26     	; 0x1832 <__divsf3_pse+0x82>
    1818:	92 c0       	rjmp	.+292    	; 0x193e <__fp_inf>
    181a:	dc c0       	rjmp	.+440    	; 0x19d4 <__fp_szero>
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	ec f3       	brlt	.-6      	; 0x181a <__divsf3_pse+0x6a>
    1820:	98 3e       	cpi	r25, 0xE8	; 232
    1822:	dc f3       	brlt	.-10     	; 0x181a <__divsf3_pse+0x6a>
    1824:	86 95       	lsr	r24
    1826:	77 95       	ror	r23
    1828:	67 95       	ror	r22
    182a:	b7 95       	ror	r27
    182c:	f7 95       	ror	r31
    182e:	9f 5f       	subi	r25, 0xFF	; 255
    1830:	c9 f7       	brne	.-14     	; 0x1824 <__divsf3_pse+0x74>
    1832:	88 0f       	add	r24, r24
    1834:	91 1d       	adc	r25, r1
    1836:	96 95       	lsr	r25
    1838:	87 95       	ror	r24
    183a:	97 f9       	bld	r25, 7
    183c:	08 95       	ret
    183e:	e1 e0       	ldi	r30, 0x01	; 1
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	88 1f       	adc	r24, r24
    1846:	bb 1f       	adc	r27, r27
    1848:	62 17       	cp	r22, r18
    184a:	73 07       	cpc	r23, r19
    184c:	84 07       	cpc	r24, r20
    184e:	ba 07       	cpc	r27, r26
    1850:	20 f0       	brcs	.+8      	; 0x185a <__divsf3_pse+0xaa>
    1852:	62 1b       	sub	r22, r18
    1854:	73 0b       	sbc	r23, r19
    1856:	84 0b       	sbc	r24, r20
    1858:	ba 0b       	sbc	r27, r26
    185a:	ee 1f       	adc	r30, r30
    185c:	88 f7       	brcc	.-30     	; 0x1840 <__divsf3_pse+0x90>
    185e:	e0 95       	com	r30
    1860:	08 95       	ret

00001862 <__fixsfsi>:
    1862:	04 d0       	rcall	.+8      	; 0x186c <__fixunssfsi>
    1864:	68 94       	set
    1866:	b1 11       	cpse	r27, r1
    1868:	b5 c0       	rjmp	.+362    	; 0x19d4 <__fp_szero>
    186a:	08 95       	ret

0000186c <__fixunssfsi>:
    186c:	98 d0       	rcall	.+304    	; 0x199e <__fp_splitA>
    186e:	88 f0       	brcs	.+34     	; 0x1892 <__fixunssfsi+0x26>
    1870:	9f 57       	subi	r25, 0x7F	; 127
    1872:	90 f0       	brcs	.+36     	; 0x1898 <__fixunssfsi+0x2c>
    1874:	b9 2f       	mov	r27, r25
    1876:	99 27       	eor	r25, r25
    1878:	b7 51       	subi	r27, 0x17	; 23
    187a:	a0 f0       	brcs	.+40     	; 0x18a4 <__fixunssfsi+0x38>
    187c:	d1 f0       	breq	.+52     	; 0x18b2 <__fixunssfsi+0x46>
    187e:	66 0f       	add	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	1a f0       	brmi	.+6      	; 0x188e <__fixunssfsi+0x22>
    1888:	ba 95       	dec	r27
    188a:	c9 f7       	brne	.-14     	; 0x187e <__fixunssfsi+0x12>
    188c:	12 c0       	rjmp	.+36     	; 0x18b2 <__fixunssfsi+0x46>
    188e:	b1 30       	cpi	r27, 0x01	; 1
    1890:	81 f0       	breq	.+32     	; 0x18b2 <__fixunssfsi+0x46>
    1892:	9f d0       	rcall	.+318    	; 0x19d2 <__fp_zero>
    1894:	b1 e0       	ldi	r27, 0x01	; 1
    1896:	08 95       	ret
    1898:	9c c0       	rjmp	.+312    	; 0x19d2 <__fp_zero>
    189a:	67 2f       	mov	r22, r23
    189c:	78 2f       	mov	r23, r24
    189e:	88 27       	eor	r24, r24
    18a0:	b8 5f       	subi	r27, 0xF8	; 248
    18a2:	39 f0       	breq	.+14     	; 0x18b2 <__fixunssfsi+0x46>
    18a4:	b9 3f       	cpi	r27, 0xF9	; 249
    18a6:	cc f3       	brlt	.-14     	; 0x189a <__fixunssfsi+0x2e>
    18a8:	86 95       	lsr	r24
    18aa:	77 95       	ror	r23
    18ac:	67 95       	ror	r22
    18ae:	b3 95       	inc	r27
    18b0:	d9 f7       	brne	.-10     	; 0x18a8 <__fixunssfsi+0x3c>
    18b2:	3e f4       	brtc	.+14     	; 0x18c2 <__fixunssfsi+0x56>
    18b4:	90 95       	com	r25
    18b6:	80 95       	com	r24
    18b8:	70 95       	com	r23
    18ba:	61 95       	neg	r22
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	08 95       	ret

000018c4 <__floatunsisf>:
    18c4:	e8 94       	clt
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <__floatsisf+0x12>

000018c8 <__floatsisf>:
    18c8:	97 fb       	bst	r25, 7
    18ca:	3e f4       	brtc	.+14     	; 0x18da <__floatsisf+0x12>
    18cc:	90 95       	com	r25
    18ce:	80 95       	com	r24
    18d0:	70 95       	com	r23
    18d2:	61 95       	neg	r22
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	8f 4f       	sbci	r24, 0xFF	; 255
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	99 23       	and	r25, r25
    18dc:	a9 f0       	breq	.+42     	; 0x1908 <__floatsisf+0x40>
    18de:	f9 2f       	mov	r31, r25
    18e0:	96 e9       	ldi	r25, 0x96	; 150
    18e2:	bb 27       	eor	r27, r27
    18e4:	93 95       	inc	r25
    18e6:	f6 95       	lsr	r31
    18e8:	87 95       	ror	r24
    18ea:	77 95       	ror	r23
    18ec:	67 95       	ror	r22
    18ee:	b7 95       	ror	r27
    18f0:	f1 11       	cpse	r31, r1
    18f2:	f8 cf       	rjmp	.-16     	; 0x18e4 <__floatsisf+0x1c>
    18f4:	fa f4       	brpl	.+62     	; 0x1934 <__floatsisf+0x6c>
    18f6:	bb 0f       	add	r27, r27
    18f8:	11 f4       	brne	.+4      	; 0x18fe <__floatsisf+0x36>
    18fa:	60 ff       	sbrs	r22, 0
    18fc:	1b c0       	rjmp	.+54     	; 0x1934 <__floatsisf+0x6c>
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	16 c0       	rjmp	.+44     	; 0x1934 <__floatsisf+0x6c>
    1908:	88 23       	and	r24, r24
    190a:	11 f0       	breq	.+4      	; 0x1910 <__floatsisf+0x48>
    190c:	96 e9       	ldi	r25, 0x96	; 150
    190e:	11 c0       	rjmp	.+34     	; 0x1932 <__floatsisf+0x6a>
    1910:	77 23       	and	r23, r23
    1912:	21 f0       	breq	.+8      	; 0x191c <__floatsisf+0x54>
    1914:	9e e8       	ldi	r25, 0x8E	; 142
    1916:	87 2f       	mov	r24, r23
    1918:	76 2f       	mov	r23, r22
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <__floatsisf+0x5e>
    191c:	66 23       	and	r22, r22
    191e:	71 f0       	breq	.+28     	; 0x193c <__floatsisf+0x74>
    1920:	96 e8       	ldi	r25, 0x86	; 134
    1922:	86 2f       	mov	r24, r22
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	2a f0       	brmi	.+10     	; 0x1934 <__floatsisf+0x6c>
    192a:	9a 95       	dec	r25
    192c:	66 0f       	add	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	da f7       	brpl	.-10     	; 0x192a <__floatsisf+0x62>
    1934:	88 0f       	add	r24, r24
    1936:	96 95       	lsr	r25
    1938:	87 95       	ror	r24
    193a:	97 f9       	bld	r25, 7
    193c:	08 95       	ret

0000193e <__fp_inf>:
    193e:	97 f9       	bld	r25, 7
    1940:	9f 67       	ori	r25, 0x7F	; 127
    1942:	80 e8       	ldi	r24, 0x80	; 128
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	08 95       	ret

0000194a <__fp_nan>:
    194a:	9f ef       	ldi	r25, 0xFF	; 255
    194c:	80 ec       	ldi	r24, 0xC0	; 192
    194e:	08 95       	ret

00001950 <__fp_pscA>:
    1950:	00 24       	eor	r0, r0
    1952:	0a 94       	dec	r0
    1954:	16 16       	cp	r1, r22
    1956:	17 06       	cpc	r1, r23
    1958:	18 06       	cpc	r1, r24
    195a:	09 06       	cpc	r0, r25
    195c:	08 95       	ret

0000195e <__fp_pscB>:
    195e:	00 24       	eor	r0, r0
    1960:	0a 94       	dec	r0
    1962:	12 16       	cp	r1, r18
    1964:	13 06       	cpc	r1, r19
    1966:	14 06       	cpc	r1, r20
    1968:	05 06       	cpc	r0, r21
    196a:	08 95       	ret

0000196c <__fp_round>:
    196c:	09 2e       	mov	r0, r25
    196e:	03 94       	inc	r0
    1970:	00 0c       	add	r0, r0
    1972:	11 f4       	brne	.+4      	; 0x1978 <__fp_round+0xc>
    1974:	88 23       	and	r24, r24
    1976:	52 f0       	brmi	.+20     	; 0x198c <__fp_round+0x20>
    1978:	bb 0f       	add	r27, r27
    197a:	40 f4       	brcc	.+16     	; 0x198c <__fp_round+0x20>
    197c:	bf 2b       	or	r27, r31
    197e:	11 f4       	brne	.+4      	; 0x1984 <__fp_round+0x18>
    1980:	60 ff       	sbrs	r22, 0
    1982:	04 c0       	rjmp	.+8      	; 0x198c <__fp_round+0x20>
    1984:	6f 5f       	subi	r22, 0xFF	; 255
    1986:	7f 4f       	sbci	r23, 0xFF	; 255
    1988:	8f 4f       	sbci	r24, 0xFF	; 255
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	08 95       	ret

0000198e <__fp_split3>:
    198e:	57 fd       	sbrc	r21, 7
    1990:	90 58       	subi	r25, 0x80	; 128
    1992:	44 0f       	add	r20, r20
    1994:	55 1f       	adc	r21, r21
    1996:	59 f0       	breq	.+22     	; 0x19ae <__fp_splitA+0x10>
    1998:	5f 3f       	cpi	r21, 0xFF	; 255
    199a:	71 f0       	breq	.+28     	; 0x19b8 <__fp_splitA+0x1a>
    199c:	47 95       	ror	r20

0000199e <__fp_splitA>:
    199e:	88 0f       	add	r24, r24
    19a0:	97 fb       	bst	r25, 7
    19a2:	99 1f       	adc	r25, r25
    19a4:	61 f0       	breq	.+24     	; 0x19be <__fp_splitA+0x20>
    19a6:	9f 3f       	cpi	r25, 0xFF	; 255
    19a8:	79 f0       	breq	.+30     	; 0x19c8 <__fp_splitA+0x2a>
    19aa:	87 95       	ror	r24
    19ac:	08 95       	ret
    19ae:	12 16       	cp	r1, r18
    19b0:	13 06       	cpc	r1, r19
    19b2:	14 06       	cpc	r1, r20
    19b4:	55 1f       	adc	r21, r21
    19b6:	f2 cf       	rjmp	.-28     	; 0x199c <__fp_split3+0xe>
    19b8:	46 95       	lsr	r20
    19ba:	f1 df       	rcall	.-30     	; 0x199e <__fp_splitA>
    19bc:	08 c0       	rjmp	.+16     	; 0x19ce <__fp_splitA+0x30>
    19be:	16 16       	cp	r1, r22
    19c0:	17 06       	cpc	r1, r23
    19c2:	18 06       	cpc	r1, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	f1 cf       	rjmp	.-30     	; 0x19aa <__fp_splitA+0xc>
    19c8:	86 95       	lsr	r24
    19ca:	71 05       	cpc	r23, r1
    19cc:	61 05       	cpc	r22, r1
    19ce:	08 94       	sec
    19d0:	08 95       	ret

000019d2 <__fp_zero>:
    19d2:	e8 94       	clt

000019d4 <__fp_szero>:
    19d4:	bb 27       	eor	r27, r27
    19d6:	66 27       	eor	r22, r22
    19d8:	77 27       	eor	r23, r23
    19da:	cb 01       	movw	r24, r22
    19dc:	97 f9       	bld	r25, 7
    19de:	08 95       	ret

000019e0 <__mulsf3>:
    19e0:	0b d0       	rcall	.+22     	; 0x19f8 <__mulsf3x>
    19e2:	c4 cf       	rjmp	.-120    	; 0x196c <__fp_round>
    19e4:	b5 df       	rcall	.-150    	; 0x1950 <__fp_pscA>
    19e6:	28 f0       	brcs	.+10     	; 0x19f2 <__mulsf3+0x12>
    19e8:	ba df       	rcall	.-140    	; 0x195e <__fp_pscB>
    19ea:	18 f0       	brcs	.+6      	; 0x19f2 <__mulsf3+0x12>
    19ec:	95 23       	and	r25, r21
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <__mulsf3+0x12>
    19f0:	a6 cf       	rjmp	.-180    	; 0x193e <__fp_inf>
    19f2:	ab cf       	rjmp	.-170    	; 0x194a <__fp_nan>
    19f4:	11 24       	eor	r1, r1
    19f6:	ee cf       	rjmp	.-36     	; 0x19d4 <__fp_szero>

000019f8 <__mulsf3x>:
    19f8:	ca df       	rcall	.-108    	; 0x198e <__fp_split3>
    19fa:	a0 f3       	brcs	.-24     	; 0x19e4 <__mulsf3+0x4>

000019fc <__mulsf3_pse>:
    19fc:	95 9f       	mul	r25, r21
    19fe:	d1 f3       	breq	.-12     	; 0x19f4 <__mulsf3+0x14>
    1a00:	95 0f       	add	r25, r21
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	55 1f       	adc	r21, r21
    1a06:	62 9f       	mul	r22, r18
    1a08:	f0 01       	movw	r30, r0
    1a0a:	72 9f       	mul	r23, r18
    1a0c:	bb 27       	eor	r27, r27
    1a0e:	f0 0d       	add	r31, r0
    1a10:	b1 1d       	adc	r27, r1
    1a12:	63 9f       	mul	r22, r19
    1a14:	aa 27       	eor	r26, r26
    1a16:	f0 0d       	add	r31, r0
    1a18:	b1 1d       	adc	r27, r1
    1a1a:	aa 1f       	adc	r26, r26
    1a1c:	64 9f       	mul	r22, r20
    1a1e:	66 27       	eor	r22, r22
    1a20:	b0 0d       	add	r27, r0
    1a22:	a1 1d       	adc	r26, r1
    1a24:	66 1f       	adc	r22, r22
    1a26:	82 9f       	mul	r24, r18
    1a28:	22 27       	eor	r18, r18
    1a2a:	b0 0d       	add	r27, r0
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	62 1f       	adc	r22, r18
    1a30:	73 9f       	mul	r23, r19
    1a32:	b0 0d       	add	r27, r0
    1a34:	a1 1d       	adc	r26, r1
    1a36:	62 1f       	adc	r22, r18
    1a38:	83 9f       	mul	r24, r19
    1a3a:	a0 0d       	add	r26, r0
    1a3c:	61 1d       	adc	r22, r1
    1a3e:	22 1f       	adc	r18, r18
    1a40:	74 9f       	mul	r23, r20
    1a42:	33 27       	eor	r19, r19
    1a44:	a0 0d       	add	r26, r0
    1a46:	61 1d       	adc	r22, r1
    1a48:	23 1f       	adc	r18, r19
    1a4a:	84 9f       	mul	r24, r20
    1a4c:	60 0d       	add	r22, r0
    1a4e:	21 1d       	adc	r18, r1
    1a50:	82 2f       	mov	r24, r18
    1a52:	76 2f       	mov	r23, r22
    1a54:	6a 2f       	mov	r22, r26
    1a56:	11 24       	eor	r1, r1
    1a58:	9f 57       	subi	r25, 0x7F	; 127
    1a5a:	50 40       	sbci	r21, 0x00	; 0
    1a5c:	8a f0       	brmi	.+34     	; 0x1a80 <__mulsf3_pse+0x84>
    1a5e:	e1 f0       	breq	.+56     	; 0x1a98 <__mulsf3_pse+0x9c>
    1a60:	88 23       	and	r24, r24
    1a62:	4a f0       	brmi	.+18     	; 0x1a76 <__mulsf3_pse+0x7a>
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	66 1f       	adc	r22, r22
    1a6c:	77 1f       	adc	r23, r23
    1a6e:	88 1f       	adc	r24, r24
    1a70:	91 50       	subi	r25, 0x01	; 1
    1a72:	50 40       	sbci	r21, 0x00	; 0
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <__mulsf3_pse+0x64>
    1a76:	9e 3f       	cpi	r25, 0xFE	; 254
    1a78:	51 05       	cpc	r21, r1
    1a7a:	70 f0       	brcs	.+28     	; 0x1a98 <__mulsf3_pse+0x9c>
    1a7c:	60 cf       	rjmp	.-320    	; 0x193e <__fp_inf>
    1a7e:	aa cf       	rjmp	.-172    	; 0x19d4 <__fp_szero>
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	ec f3       	brlt	.-6      	; 0x1a7e <__mulsf3_pse+0x82>
    1a84:	98 3e       	cpi	r25, 0xE8	; 232
    1a86:	dc f3       	brlt	.-10     	; 0x1a7e <__mulsf3_pse+0x82>
    1a88:	86 95       	lsr	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b7 95       	ror	r27
    1a90:	f7 95       	ror	r31
    1a92:	e7 95       	ror	r30
    1a94:	9f 5f       	subi	r25, 0xFF	; 255
    1a96:	c1 f7       	brne	.-16     	; 0x1a88 <__mulsf3_pse+0x8c>
    1a98:	fe 2b       	or	r31, r30
    1a9a:	88 0f       	add	r24, r24
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	96 95       	lsr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	97 f9       	bld	r25, 7
    1aa4:	08 95       	ret

00001aa6 <__divmodhi4>:
    1aa6:	97 fb       	bst	r25, 7
    1aa8:	07 2e       	mov	r0, r23
    1aaa:	16 f4       	brtc	.+4      	; 0x1ab0 <__divmodhi4+0xa>
    1aac:	00 94       	com	r0
    1aae:	07 d0       	rcall	.+14     	; 0x1abe <__divmodhi4_neg1>
    1ab0:	77 fd       	sbrc	r23, 7
    1ab2:	09 d0       	rcall	.+18     	; 0x1ac6 <__divmodhi4_neg2>
    1ab4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__udivmodhi4>
    1ab8:	07 fc       	sbrc	r0, 7
    1aba:	05 d0       	rcall	.+10     	; 0x1ac6 <__divmodhi4_neg2>
    1abc:	3e f4       	brtc	.+14     	; 0x1acc <__divmodhi4_exit>

00001abe <__divmodhi4_neg1>:
    1abe:	90 95       	com	r25
    1ac0:	81 95       	neg	r24
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	08 95       	ret

00001ac6 <__divmodhi4_neg2>:
    1ac6:	70 95       	com	r23
    1ac8:	61 95       	neg	r22
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255

00001acc <__divmodhi4_exit>:
    1acc:	08 95       	ret

00001ace <__divmodsi4>:
    1ace:	05 2e       	mov	r0, r21
    1ad0:	97 fb       	bst	r25, 7
    1ad2:	1e f4       	brtc	.+6      	; 0x1ada <__divmodsi4+0xc>
    1ad4:	00 94       	com	r0
    1ad6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__negsi2>
    1ada:	57 fd       	sbrc	r21, 7
    1adc:	07 d0       	rcall	.+14     	; 0x1aec <__divmodsi4_neg2>
    1ade:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__udivmodsi4>
    1ae2:	07 fc       	sbrc	r0, 7
    1ae4:	03 d0       	rcall	.+6      	; 0x1aec <__divmodsi4_neg2>
    1ae6:	4e f4       	brtc	.+18     	; 0x1afa <__divmodsi4_exit>
    1ae8:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__negsi2>

00001aec <__divmodsi4_neg2>:
    1aec:	50 95       	com	r21
    1aee:	40 95       	com	r20
    1af0:	30 95       	com	r19
    1af2:	21 95       	neg	r18
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	4f 4f       	sbci	r20, 0xFF	; 255
    1af8:	5f 4f       	sbci	r21, 0xFF	; 255

00001afa <__divmodsi4_exit>:
    1afa:	08 95       	ret

00001afc <__negsi2>:
    1afc:	90 95       	com	r25
    1afe:	80 95       	com	r24
    1b00:	70 95       	com	r23
    1b02:	61 95       	neg	r22
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	08 95       	ret

00001b0c <__udivmodhi4>:
    1b0c:	aa 1b       	sub	r26, r26
    1b0e:	bb 1b       	sub	r27, r27
    1b10:	51 e1       	ldi	r21, 0x11	; 17
    1b12:	07 c0       	rjmp	.+14     	; 0x1b22 <__udivmodhi4_ep>

00001b14 <__udivmodhi4_loop>:
    1b14:	aa 1f       	adc	r26, r26
    1b16:	bb 1f       	adc	r27, r27
    1b18:	a6 17       	cp	r26, r22
    1b1a:	b7 07       	cpc	r27, r23
    1b1c:	10 f0       	brcs	.+4      	; 0x1b22 <__udivmodhi4_ep>
    1b1e:	a6 1b       	sub	r26, r22
    1b20:	b7 0b       	sbc	r27, r23

00001b22 <__udivmodhi4_ep>:
    1b22:	88 1f       	adc	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	5a 95       	dec	r21
    1b28:	a9 f7       	brne	.-22     	; 0x1b14 <__udivmodhi4_loop>
    1b2a:	80 95       	com	r24
    1b2c:	90 95       	com	r25
    1b2e:	bc 01       	movw	r22, r24
    1b30:	cd 01       	movw	r24, r26
    1b32:	08 95       	ret

00001b34 <__udivmodsi4>:
    1b34:	a1 e2       	ldi	r26, 0x21	; 33
    1b36:	1a 2e       	mov	r1, r26
    1b38:	aa 1b       	sub	r26, r26
    1b3a:	bb 1b       	sub	r27, r27
    1b3c:	fd 01       	movw	r30, r26
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <__udivmodsi4_ep>

00001b40 <__udivmodsi4_loop>:
    1b40:	aa 1f       	adc	r26, r26
    1b42:	bb 1f       	adc	r27, r27
    1b44:	ee 1f       	adc	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	a2 17       	cp	r26, r18
    1b4a:	b3 07       	cpc	r27, r19
    1b4c:	e4 07       	cpc	r30, r20
    1b4e:	f5 07       	cpc	r31, r21
    1b50:	20 f0       	brcs	.+8      	; 0x1b5a <__udivmodsi4_ep>
    1b52:	a2 1b       	sub	r26, r18
    1b54:	b3 0b       	sbc	r27, r19
    1b56:	e4 0b       	sbc	r30, r20
    1b58:	f5 0b       	sbc	r31, r21

00001b5a <__udivmodsi4_ep>:
    1b5a:	66 1f       	adc	r22, r22
    1b5c:	77 1f       	adc	r23, r23
    1b5e:	88 1f       	adc	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	1a 94       	dec	r1
    1b64:	69 f7       	brne	.-38     	; 0x1b40 <__udivmodsi4_loop>
    1b66:	60 95       	com	r22
    1b68:	70 95       	com	r23
    1b6a:	80 95       	com	r24
    1b6c:	90 95       	com	r25
    1b6e:	9b 01       	movw	r18, r22
    1b70:	ac 01       	movw	r20, r24
    1b72:	bd 01       	movw	r22, r26
    1b74:	cf 01       	movw	r24, r30
    1b76:	08 95       	ret

00001b78 <strcpy_P>:
    1b78:	fb 01       	movw	r30, r22
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	05 90       	lpm	r0, Z+
    1b7e:	0d 92       	st	X+, r0
    1b80:	00 20       	and	r0, r0
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <strcpy_P+0x4>
    1b84:	08 95       	ret

00001b86 <fdevopen>:
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	ec 01       	movw	r28, r24
    1b90:	8b 01       	movw	r16, r22
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	31 f4       	brne	.+12     	; 0x1ba2 <fdevopen+0x1c>
    1b96:	61 15       	cp	r22, r1
    1b98:	71 05       	cpc	r23, r1
    1b9a:	19 f4       	brne	.+6      	; 0x1ba2 <fdevopen+0x1c>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	38 c0       	rjmp	.+112    	; 0x1c12 <fdevopen+0x8c>
    1ba2:	6e e0       	ldi	r22, 0x0E	; 14
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 21 10 	call	0x2042	; 0x2042 <calloc>
    1bae:	fc 01       	movw	r30, r24
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	a1 f3       	breq	.-24     	; 0x1b9c <fdevopen+0x16>
    1bb4:	80 e8       	ldi	r24, 0x80	; 128
    1bb6:	83 83       	std	Z+3, r24	; 0x03
    1bb8:	01 15       	cp	r16, r1
    1bba:	11 05       	cpc	r17, r1
    1bbc:	71 f0       	breq	.+28     	; 0x1bda <fdevopen+0x54>
    1bbe:	13 87       	std	Z+11, r17	; 0x0b
    1bc0:	02 87       	std	Z+10, r16	; 0x0a
    1bc2:	81 e8       	ldi	r24, 0x81	; 129
    1bc4:	83 83       	std	Z+3, r24	; 0x03
    1bc6:	80 91 38 04 	lds	r24, 0x0438
    1bca:	90 91 39 04 	lds	r25, 0x0439
    1bce:	89 2b       	or	r24, r25
    1bd0:	21 f4       	brne	.+8      	; 0x1bda <fdevopen+0x54>
    1bd2:	f0 93 39 04 	sts	0x0439, r31
    1bd6:	e0 93 38 04 	sts	0x0438, r30
    1bda:	20 97       	sbiw	r28, 0x00	; 0
    1bdc:	c9 f0       	breq	.+50     	; 0x1c10 <fdevopen+0x8a>
    1bde:	d1 87       	std	Z+9, r29	; 0x09
    1be0:	c0 87       	std	Z+8, r28	; 0x08
    1be2:	83 81       	ldd	r24, Z+3	; 0x03
    1be4:	82 60       	ori	r24, 0x02	; 2
    1be6:	83 83       	std	Z+3, r24	; 0x03
    1be8:	80 91 3a 04 	lds	r24, 0x043A
    1bec:	90 91 3b 04 	lds	r25, 0x043B
    1bf0:	89 2b       	or	r24, r25
    1bf2:	71 f4       	brne	.+28     	; 0x1c10 <fdevopen+0x8a>
    1bf4:	f0 93 3b 04 	sts	0x043B, r31
    1bf8:	e0 93 3a 04 	sts	0x043A, r30
    1bfc:	80 91 3c 04 	lds	r24, 0x043C
    1c00:	90 91 3d 04 	lds	r25, 0x043D
    1c04:	89 2b       	or	r24, r25
    1c06:	21 f4       	brne	.+8      	; 0x1c10 <fdevopen+0x8a>
    1c08:	f0 93 3d 04 	sts	0x043D, r31
    1c0c:	e0 93 3c 04 	sts	0x043C, r30
    1c10:	cf 01       	movw	r24, r30
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <printf>:
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e4 e1       	ldi	r30, 0x14	; 20
    1c22:	fe e0       	ldi	r31, 0x0E	; 14
    1c24:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__+0x20>
    1c28:	fe 01       	movw	r30, r28
    1c2a:	35 96       	adiw	r30, 0x05	; 5
    1c2c:	61 91       	ld	r22, Z+
    1c2e:	71 91       	ld	r23, Z+
    1c30:	af 01       	movw	r20, r30
    1c32:	80 91 3a 04 	lds	r24, 0x043A
    1c36:	90 91 3b 04 	lds	r25, 0x043B
    1c3a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <vfprintf>
    1c3e:	e2 e0       	ldi	r30, 0x02	; 2
    1c40:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__+0x20>

00001c44 <puts>:
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	e0 91 3a 04 	lds	r30, 0x043A
    1c50:	f0 91 3b 04 	lds	r31, 0x043B
    1c54:	23 81       	ldd	r18, Z+3	; 0x03
    1c56:	21 ff       	sbrs	r18, 1
    1c58:	1b c0       	rjmp	.+54     	; 0x1c90 <puts+0x4c>
    1c5a:	ec 01       	movw	r28, r24
    1c5c:	00 e0       	ldi	r16, 0x00	; 0
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	89 91       	ld	r24, Y+
    1c62:	60 91 3a 04 	lds	r22, 0x043A
    1c66:	70 91 3b 04 	lds	r23, 0x043B
    1c6a:	db 01       	movw	r26, r22
    1c6c:	18 96       	adiw	r26, 0x08	; 8
    1c6e:	ed 91       	ld	r30, X+
    1c70:	fc 91       	ld	r31, X
    1c72:	19 97       	sbiw	r26, 0x09	; 9
    1c74:	88 23       	and	r24, r24
    1c76:	31 f0       	breq	.+12     	; 0x1c84 <puts+0x40>
    1c78:	09 95       	icall
    1c7a:	89 2b       	or	r24, r25
    1c7c:	89 f3       	breq	.-30     	; 0x1c60 <puts+0x1c>
    1c7e:	0f ef       	ldi	r16, 0xFF	; 255
    1c80:	1f ef       	ldi	r17, 0xFF	; 255
    1c82:	ee cf       	rjmp	.-36     	; 0x1c60 <puts+0x1c>
    1c84:	8a e0       	ldi	r24, 0x0A	; 10
    1c86:	09 95       	icall
    1c88:	89 2b       	or	r24, r25
    1c8a:	11 f4       	brne	.+4      	; 0x1c90 <puts+0x4c>
    1c8c:	c8 01       	movw	r24, r16
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <puts+0x50>
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	9f ef       	ldi	r25, 0xFF	; 255
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	08 95       	ret

00001c9e <vfprintf>:
    1c9e:	ac e0       	ldi	r26, 0x0C	; 12
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e5 e5       	ldi	r30, 0x55	; 85
    1ca4:	fe e0       	ldi	r31, 0x0E	; 14
    1ca6:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__>
    1caa:	7c 01       	movw	r14, r24
    1cac:	6b 01       	movw	r12, r22
    1cae:	8a 01       	movw	r16, r20
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	17 82       	std	Z+7, r1	; 0x07
    1cb4:	16 82       	std	Z+6, r1	; 0x06
    1cb6:	83 81       	ldd	r24, Z+3	; 0x03
    1cb8:	81 ff       	sbrs	r24, 1
    1cba:	bd c1       	rjmp	.+890    	; 0x2036 <vfprintf+0x398>
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	4c 01       	movw	r8, r24
    1cc2:	f7 01       	movw	r30, r14
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	f6 01       	movw	r30, r12
    1cc8:	93 fd       	sbrc	r25, 3
    1cca:	85 91       	lpm	r24, Z+
    1ccc:	93 ff       	sbrs	r25, 3
    1cce:	81 91       	ld	r24, Z+
    1cd0:	6f 01       	movw	r12, r30
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <vfprintf+0x3a>
    1cd6:	ab c1       	rjmp	.+854    	; 0x202e <vfprintf+0x390>
    1cd8:	85 32       	cpi	r24, 0x25	; 37
    1cda:	39 f4       	brne	.+14     	; 0x1cea <vfprintf+0x4c>
    1cdc:	93 fd       	sbrc	r25, 3
    1cde:	85 91       	lpm	r24, Z+
    1ce0:	93 ff       	sbrs	r25, 3
    1ce2:	81 91       	ld	r24, Z+
    1ce4:	6f 01       	movw	r12, r30
    1ce6:	85 32       	cpi	r24, 0x25	; 37
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <vfprintf+0x56>
    1cea:	b7 01       	movw	r22, r14
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    1cf2:	e7 cf       	rjmp	.-50     	; 0x1cc2 <vfprintf+0x24>
    1cf4:	51 2c       	mov	r5, r1
    1cf6:	31 2c       	mov	r3, r1
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	20 32       	cpi	r18, 0x20	; 32
    1cfc:	a0 f4       	brcc	.+40     	; 0x1d26 <vfprintf+0x88>
    1cfe:	8b 32       	cpi	r24, 0x2B	; 43
    1d00:	69 f0       	breq	.+26     	; 0x1d1c <vfprintf+0x7e>
    1d02:	30 f4       	brcc	.+12     	; 0x1d10 <vfprintf+0x72>
    1d04:	80 32       	cpi	r24, 0x20	; 32
    1d06:	59 f0       	breq	.+22     	; 0x1d1e <vfprintf+0x80>
    1d08:	83 32       	cpi	r24, 0x23	; 35
    1d0a:	69 f4       	brne	.+26     	; 0x1d26 <vfprintf+0x88>
    1d0c:	20 61       	ori	r18, 0x10	; 16
    1d0e:	2c c0       	rjmp	.+88     	; 0x1d68 <vfprintf+0xca>
    1d10:	8d 32       	cpi	r24, 0x2D	; 45
    1d12:	39 f0       	breq	.+14     	; 0x1d22 <vfprintf+0x84>
    1d14:	80 33       	cpi	r24, 0x30	; 48
    1d16:	39 f4       	brne	.+14     	; 0x1d26 <vfprintf+0x88>
    1d18:	21 60       	ori	r18, 0x01	; 1
    1d1a:	26 c0       	rjmp	.+76     	; 0x1d68 <vfprintf+0xca>
    1d1c:	22 60       	ori	r18, 0x02	; 2
    1d1e:	24 60       	ori	r18, 0x04	; 4
    1d20:	23 c0       	rjmp	.+70     	; 0x1d68 <vfprintf+0xca>
    1d22:	28 60       	ori	r18, 0x08	; 8
    1d24:	21 c0       	rjmp	.+66     	; 0x1d68 <vfprintf+0xca>
    1d26:	27 fd       	sbrc	r18, 7
    1d28:	27 c0       	rjmp	.+78     	; 0x1d78 <vfprintf+0xda>
    1d2a:	30 ed       	ldi	r19, 0xD0	; 208
    1d2c:	38 0f       	add	r19, r24
    1d2e:	3a 30       	cpi	r19, 0x0A	; 10
    1d30:	78 f4       	brcc	.+30     	; 0x1d50 <vfprintf+0xb2>
    1d32:	26 ff       	sbrs	r18, 6
    1d34:	06 c0       	rjmp	.+12     	; 0x1d42 <vfprintf+0xa4>
    1d36:	fa e0       	ldi	r31, 0x0A	; 10
    1d38:	5f 9e       	mul	r5, r31
    1d3a:	30 0d       	add	r19, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	53 2e       	mov	r5, r19
    1d40:	13 c0       	rjmp	.+38     	; 0x1d68 <vfprintf+0xca>
    1d42:	8a e0       	ldi	r24, 0x0A	; 10
    1d44:	38 9e       	mul	r3, r24
    1d46:	30 0d       	add	r19, r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	33 2e       	mov	r3, r19
    1d4c:	20 62       	ori	r18, 0x20	; 32
    1d4e:	0c c0       	rjmp	.+24     	; 0x1d68 <vfprintf+0xca>
    1d50:	8e 32       	cpi	r24, 0x2E	; 46
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <vfprintf+0xbe>
    1d54:	26 fd       	sbrc	r18, 6
    1d56:	6b c1       	rjmp	.+726    	; 0x202e <vfprintf+0x390>
    1d58:	20 64       	ori	r18, 0x40	; 64
    1d5a:	06 c0       	rjmp	.+12     	; 0x1d68 <vfprintf+0xca>
    1d5c:	8c 36       	cpi	r24, 0x6C	; 108
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <vfprintf+0xc6>
    1d60:	20 68       	ori	r18, 0x80	; 128
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <vfprintf+0xca>
    1d64:	88 36       	cpi	r24, 0x68	; 104
    1d66:	41 f4       	brne	.+16     	; 0x1d78 <vfprintf+0xda>
    1d68:	f6 01       	movw	r30, r12
    1d6a:	93 fd       	sbrc	r25, 3
    1d6c:	85 91       	lpm	r24, Z+
    1d6e:	93 ff       	sbrs	r25, 3
    1d70:	81 91       	ld	r24, Z+
    1d72:	6f 01       	movw	r12, r30
    1d74:	81 11       	cpse	r24, r1
    1d76:	c1 cf       	rjmp	.-126    	; 0x1cfa <vfprintf+0x5c>
    1d78:	98 2f       	mov	r25, r24
    1d7a:	9f 7d       	andi	r25, 0xDF	; 223
    1d7c:	95 54       	subi	r25, 0x45	; 69
    1d7e:	93 30       	cpi	r25, 0x03	; 3
    1d80:	28 f4       	brcc	.+10     	; 0x1d8c <vfprintf+0xee>
    1d82:	0c 5f       	subi	r16, 0xFC	; 252
    1d84:	1f 4f       	sbci	r17, 0xFF	; 255
    1d86:	ff e3       	ldi	r31, 0x3F	; 63
    1d88:	f9 83       	std	Y+1, r31	; 0x01
    1d8a:	0d c0       	rjmp	.+26     	; 0x1da6 <vfprintf+0x108>
    1d8c:	83 36       	cpi	r24, 0x63	; 99
    1d8e:	31 f0       	breq	.+12     	; 0x1d9c <vfprintf+0xfe>
    1d90:	83 37       	cpi	r24, 0x73	; 115
    1d92:	71 f0       	breq	.+28     	; 0x1db0 <vfprintf+0x112>
    1d94:	83 35       	cpi	r24, 0x53	; 83
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <vfprintf+0xfc>
    1d98:	5b c0       	rjmp	.+182    	; 0x1e50 <vfprintf+0x1b2>
    1d9a:	22 c0       	rjmp	.+68     	; 0x1de0 <vfprintf+0x142>
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 81       	ld	r24, Z
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	0e 5f       	subi	r16, 0xFE	; 254
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	44 24       	eor	r4, r4
    1da8:	43 94       	inc	r4
    1daa:	51 2c       	mov	r5, r1
    1dac:	54 01       	movw	r10, r8
    1dae:	15 c0       	rjmp	.+42     	; 0x1dda <vfprintf+0x13c>
    1db0:	38 01       	movw	r6, r16
    1db2:	f2 e0       	ldi	r31, 0x02	; 2
    1db4:	6f 0e       	add	r6, r31
    1db6:	71 1c       	adc	r7, r1
    1db8:	f8 01       	movw	r30, r16
    1dba:	a0 80       	ld	r10, Z
    1dbc:	b1 80       	ldd	r11, Z+1	; 0x01
    1dbe:	26 ff       	sbrs	r18, 6
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <vfprintf+0x12a>
    1dc2:	65 2d       	mov	r22, r5
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <vfprintf+0x12e>
    1dc8:	6f ef       	ldi	r22, 0xFF	; 255
    1dca:	7f ef       	ldi	r23, 0xFF	; 255
    1dcc:	c5 01       	movw	r24, r10
    1dce:	2c 87       	std	Y+12, r18	; 0x0c
    1dd0:	0e 94 76 11 	call	0x22ec	; 0x22ec <strnlen>
    1dd4:	2c 01       	movw	r4, r24
    1dd6:	83 01       	movw	r16, r6
    1dd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dda:	2f 77       	andi	r18, 0x7F	; 127
    1ddc:	22 2e       	mov	r2, r18
    1dde:	17 c0       	rjmp	.+46     	; 0x1e0e <vfprintf+0x170>
    1de0:	38 01       	movw	r6, r16
    1de2:	f2 e0       	ldi	r31, 0x02	; 2
    1de4:	6f 0e       	add	r6, r31
    1de6:	71 1c       	adc	r7, r1
    1de8:	f8 01       	movw	r30, r16
    1dea:	a0 80       	ld	r10, Z
    1dec:	b1 80       	ldd	r11, Z+1	; 0x01
    1dee:	26 ff       	sbrs	r18, 6
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <vfprintf+0x15a>
    1df2:	65 2d       	mov	r22, r5
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <vfprintf+0x15e>
    1df8:	6f ef       	ldi	r22, 0xFF	; 255
    1dfa:	7f ef       	ldi	r23, 0xFF	; 255
    1dfc:	c5 01       	movw	r24, r10
    1dfe:	2c 87       	std	Y+12, r18	; 0x0c
    1e00:	0e 94 64 11 	call	0x22c8	; 0x22c8 <strnlen_P>
    1e04:	2c 01       	movw	r4, r24
    1e06:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e08:	20 68       	ori	r18, 0x80	; 128
    1e0a:	22 2e       	mov	r2, r18
    1e0c:	83 01       	movw	r16, r6
    1e0e:	23 fc       	sbrc	r2, 3
    1e10:	1b c0       	rjmp	.+54     	; 0x1e48 <vfprintf+0x1aa>
    1e12:	83 2d       	mov	r24, r3
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	48 16       	cp	r4, r24
    1e18:	59 06       	cpc	r5, r25
    1e1a:	b0 f4       	brcc	.+44     	; 0x1e48 <vfprintf+0x1aa>
    1e1c:	b7 01       	movw	r22, r14
    1e1e:	80 e2       	ldi	r24, 0x20	; 32
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    1e26:	3a 94       	dec	r3
    1e28:	f4 cf       	rjmp	.-24     	; 0x1e12 <vfprintf+0x174>
    1e2a:	f5 01       	movw	r30, r10
    1e2c:	27 fc       	sbrc	r2, 7
    1e2e:	85 91       	lpm	r24, Z+
    1e30:	27 fe       	sbrs	r2, 7
    1e32:	81 91       	ld	r24, Z+
    1e34:	5f 01       	movw	r10, r30
    1e36:	b7 01       	movw	r22, r14
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    1e3e:	31 10       	cpse	r3, r1
    1e40:	3a 94       	dec	r3
    1e42:	f1 e0       	ldi	r31, 0x01	; 1
    1e44:	4f 1a       	sub	r4, r31
    1e46:	51 08       	sbc	r5, r1
    1e48:	41 14       	cp	r4, r1
    1e4a:	51 04       	cpc	r5, r1
    1e4c:	71 f7       	brne	.-36     	; 0x1e2a <vfprintf+0x18c>
    1e4e:	e5 c0       	rjmp	.+458    	; 0x201a <vfprintf+0x37c>
    1e50:	84 36       	cpi	r24, 0x64	; 100
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <vfprintf+0x1ba>
    1e54:	89 36       	cpi	r24, 0x69	; 105
    1e56:	39 f5       	brne	.+78     	; 0x1ea6 <vfprintf+0x208>
    1e58:	f8 01       	movw	r30, r16
    1e5a:	27 ff       	sbrs	r18, 7
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <vfprintf+0x1ce>
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	0c 5f       	subi	r16, 0xFC	; 252
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	08 c0       	rjmp	.+16     	; 0x1e7c <vfprintf+0x1de>
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	88 27       	eor	r24, r24
    1e72:	77 fd       	sbrc	r23, 7
    1e74:	80 95       	com	r24
    1e76:	98 2f       	mov	r25, r24
    1e78:	0e 5f       	subi	r16, 0xFE	; 254
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	2f 76       	andi	r18, 0x6F	; 111
    1e7e:	b2 2e       	mov	r11, r18
    1e80:	97 ff       	sbrs	r25, 7
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <vfprintf+0x1f8>
    1e84:	90 95       	com	r25
    1e86:	80 95       	com	r24
    1e88:	70 95       	com	r23
    1e8a:	61 95       	neg	r22
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	20 68       	ori	r18, 0x80	; 128
    1e94:	b2 2e       	mov	r11, r18
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	a4 01       	movw	r20, r8
    1e9c:	0e 94 b3 11 	call	0x2366	; 0x2366 <__ultoa_invert>
    1ea0:	a8 2e       	mov	r10, r24
    1ea2:	a8 18       	sub	r10, r8
    1ea4:	44 c0       	rjmp	.+136    	; 0x1f2e <vfprintf+0x290>
    1ea6:	85 37       	cpi	r24, 0x75	; 117
    1ea8:	29 f4       	brne	.+10     	; 0x1eb4 <vfprintf+0x216>
    1eaa:	2f 7e       	andi	r18, 0xEF	; 239
    1eac:	b2 2e       	mov	r11, r18
    1eae:	2a e0       	ldi	r18, 0x0A	; 10
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	25 c0       	rjmp	.+74     	; 0x1efe <vfprintf+0x260>
    1eb4:	f2 2f       	mov	r31, r18
    1eb6:	f9 7f       	andi	r31, 0xF9	; 249
    1eb8:	bf 2e       	mov	r11, r31
    1eba:	8f 36       	cpi	r24, 0x6F	; 111
    1ebc:	c1 f0       	breq	.+48     	; 0x1eee <vfprintf+0x250>
    1ebe:	18 f4       	brcc	.+6      	; 0x1ec6 <vfprintf+0x228>
    1ec0:	88 35       	cpi	r24, 0x58	; 88
    1ec2:	79 f0       	breq	.+30     	; 0x1ee2 <vfprintf+0x244>
    1ec4:	b4 c0       	rjmp	.+360    	; 0x202e <vfprintf+0x390>
    1ec6:	80 37       	cpi	r24, 0x70	; 112
    1ec8:	19 f0       	breq	.+6      	; 0x1ed0 <vfprintf+0x232>
    1eca:	88 37       	cpi	r24, 0x78	; 120
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <vfprintf+0x238>
    1ece:	af c0       	rjmp	.+350    	; 0x202e <vfprintf+0x390>
    1ed0:	2f 2f       	mov	r18, r31
    1ed2:	20 61       	ori	r18, 0x10	; 16
    1ed4:	b2 2e       	mov	r11, r18
    1ed6:	b4 fe       	sbrs	r11, 4
    1ed8:	0d c0       	rjmp	.+26     	; 0x1ef4 <vfprintf+0x256>
    1eda:	8b 2d       	mov	r24, r11
    1edc:	84 60       	ori	r24, 0x04	; 4
    1ede:	b8 2e       	mov	r11, r24
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <vfprintf+0x256>
    1ee2:	24 ff       	sbrs	r18, 4
    1ee4:	0a c0       	rjmp	.+20     	; 0x1efa <vfprintf+0x25c>
    1ee6:	9f 2f       	mov	r25, r31
    1ee8:	96 60       	ori	r25, 0x06	; 6
    1eea:	b9 2e       	mov	r11, r25
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0x25c>
    1eee:	28 e0       	ldi	r18, 0x08	; 8
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <vfprintf+0x260>
    1ef4:	20 e1       	ldi	r18, 0x10	; 16
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <vfprintf+0x260>
    1efa:	20 e1       	ldi	r18, 0x10	; 16
    1efc:	32 e0       	ldi	r19, 0x02	; 2
    1efe:	f8 01       	movw	r30, r16
    1f00:	b7 fe       	sbrs	r11, 7
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <vfprintf+0x274>
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	0c 5f       	subi	r16, 0xFC	; 252
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	06 c0       	rjmp	.+12     	; 0x1f1e <vfprintf+0x280>
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 5f       	subi	r16, 0xFE	; 254
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	a4 01       	movw	r20, r8
    1f20:	0e 94 b3 11 	call	0x2366	; 0x2366 <__ultoa_invert>
    1f24:	a8 2e       	mov	r10, r24
    1f26:	a8 18       	sub	r10, r8
    1f28:	fb 2d       	mov	r31, r11
    1f2a:	ff 77       	andi	r31, 0x7F	; 127
    1f2c:	bf 2e       	mov	r11, r31
    1f2e:	b6 fe       	sbrs	r11, 6
    1f30:	0b c0       	rjmp	.+22     	; 0x1f48 <vfprintf+0x2aa>
    1f32:	2b 2d       	mov	r18, r11
    1f34:	2e 7f       	andi	r18, 0xFE	; 254
    1f36:	a5 14       	cp	r10, r5
    1f38:	50 f4       	brcc	.+20     	; 0x1f4e <vfprintf+0x2b0>
    1f3a:	b4 fe       	sbrs	r11, 4
    1f3c:	0a c0       	rjmp	.+20     	; 0x1f52 <vfprintf+0x2b4>
    1f3e:	b2 fc       	sbrc	r11, 2
    1f40:	08 c0       	rjmp	.+16     	; 0x1f52 <vfprintf+0x2b4>
    1f42:	2b 2d       	mov	r18, r11
    1f44:	2e 7e       	andi	r18, 0xEE	; 238
    1f46:	05 c0       	rjmp	.+10     	; 0x1f52 <vfprintf+0x2b4>
    1f48:	7a 2c       	mov	r7, r10
    1f4a:	2b 2d       	mov	r18, r11
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <vfprintf+0x2b6>
    1f4e:	7a 2c       	mov	r7, r10
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <vfprintf+0x2b6>
    1f52:	75 2c       	mov	r7, r5
    1f54:	24 ff       	sbrs	r18, 4
    1f56:	0d c0       	rjmp	.+26     	; 0x1f72 <vfprintf+0x2d4>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ea 0d       	add	r30, r10
    1f5c:	f1 1d       	adc	r31, r1
    1f5e:	80 81       	ld	r24, Z
    1f60:	80 33       	cpi	r24, 0x30	; 48
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <vfprintf+0x2ca>
    1f64:	29 7e       	andi	r18, 0xE9	; 233
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <vfprintf+0x2dc>
    1f68:	22 ff       	sbrs	r18, 2
    1f6a:	06 c0       	rjmp	.+12     	; 0x1f78 <vfprintf+0x2da>
    1f6c:	73 94       	inc	r7
    1f6e:	73 94       	inc	r7
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <vfprintf+0x2dc>
    1f72:	82 2f       	mov	r24, r18
    1f74:	86 78       	andi	r24, 0x86	; 134
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <vfprintf+0x2dc>
    1f78:	73 94       	inc	r7
    1f7a:	23 fd       	sbrc	r18, 3
    1f7c:	13 c0       	rjmp	.+38     	; 0x1fa4 <vfprintf+0x306>
    1f7e:	20 ff       	sbrs	r18, 0
    1f80:	06 c0       	rjmp	.+12     	; 0x1f8e <vfprintf+0x2f0>
    1f82:	5a 2c       	mov	r5, r10
    1f84:	73 14       	cp	r7, r3
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <vfprintf+0x2f0>
    1f88:	53 0c       	add	r5, r3
    1f8a:	57 18       	sub	r5, r7
    1f8c:	73 2c       	mov	r7, r3
    1f8e:	73 14       	cp	r7, r3
    1f90:	68 f4       	brcc	.+26     	; 0x1fac <vfprintf+0x30e>
    1f92:	b7 01       	movw	r22, r14
    1f94:	80 e2       	ldi	r24, 0x20	; 32
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	2c 87       	std	Y+12, r18	; 0x0c
    1f9a:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    1f9e:	73 94       	inc	r7
    1fa0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fa2:	f5 cf       	rjmp	.-22     	; 0x1f8e <vfprintf+0x2f0>
    1fa4:	73 14       	cp	r7, r3
    1fa6:	10 f4       	brcc	.+4      	; 0x1fac <vfprintf+0x30e>
    1fa8:	37 18       	sub	r3, r7
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <vfprintf+0x310>
    1fac:	31 2c       	mov	r3, r1
    1fae:	24 ff       	sbrs	r18, 4
    1fb0:	12 c0       	rjmp	.+36     	; 0x1fd6 <vfprintf+0x338>
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	80 e3       	ldi	r24, 0x30	; 48
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	2c 87       	std	Y+12, r18	; 0x0c
    1fba:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    1fbe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc0:	22 ff       	sbrs	r18, 2
    1fc2:	17 c0       	rjmp	.+46     	; 0x1ff2 <vfprintf+0x354>
    1fc4:	21 ff       	sbrs	r18, 1
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <vfprintf+0x330>
    1fc8:	88 e5       	ldi	r24, 0x58	; 88
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <vfprintf+0x334>
    1fce:	88 e7       	ldi	r24, 0x78	; 120
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	0c c0       	rjmp	.+24     	; 0x1fee <vfprintf+0x350>
    1fd6:	82 2f       	mov	r24, r18
    1fd8:	86 78       	andi	r24, 0x86	; 134
    1fda:	59 f0       	breq	.+22     	; 0x1ff2 <vfprintf+0x354>
    1fdc:	21 fd       	sbrc	r18, 1
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <vfprintf+0x346>
    1fe0:	80 e2       	ldi	r24, 0x20	; 32
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <vfprintf+0x348>
    1fe4:	8b e2       	ldi	r24, 0x2B	; 43
    1fe6:	27 fd       	sbrc	r18, 7
    1fe8:	8d e2       	ldi	r24, 0x2D	; 45
    1fea:	b7 01       	movw	r22, r14
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    1ff2:	a5 14       	cp	r10, r5
    1ff4:	38 f4       	brcc	.+14     	; 0x2004 <vfprintf+0x366>
    1ff6:	b7 01       	movw	r22, r14
    1ff8:	80 e3       	ldi	r24, 0x30	; 48
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    2000:	5a 94       	dec	r5
    2002:	f7 cf       	rjmp	.-18     	; 0x1ff2 <vfprintf+0x354>
    2004:	aa 94       	dec	r10
    2006:	f4 01       	movw	r30, r8
    2008:	ea 0d       	add	r30, r10
    200a:	f1 1d       	adc	r31, r1
    200c:	80 81       	ld	r24, Z
    200e:	b7 01       	movw	r22, r14
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    2016:	a1 10       	cpse	r10, r1
    2018:	f5 cf       	rjmp	.-22     	; 0x2004 <vfprintf+0x366>
    201a:	33 20       	and	r3, r3
    201c:	09 f4       	brne	.+2      	; 0x2020 <vfprintf+0x382>
    201e:	51 ce       	rjmp	.-862    	; 0x1cc2 <vfprintf+0x24>
    2020:	b7 01       	movw	r22, r14
    2022:	80 e2       	ldi	r24, 0x20	; 32
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    202a:	3a 94       	dec	r3
    202c:	f6 cf       	rjmp	.-20     	; 0x201a <vfprintf+0x37c>
    202e:	f7 01       	movw	r30, r14
    2030:	86 81       	ldd	r24, Z+6	; 0x06
    2032:	97 81       	ldd	r25, Z+7	; 0x07
    2034:	02 c0       	rjmp	.+4      	; 0x203a <vfprintf+0x39c>
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	9f ef       	ldi	r25, 0xFF	; 255
    203a:	2c 96       	adiw	r28, 0x0c	; 12
    203c:	e2 e1       	ldi	r30, 0x12	; 18
    203e:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__>

00002042 <calloc>:
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	86 9f       	mul	r24, r22
    204c:	80 01       	movw	r16, r0
    204e:	87 9f       	mul	r24, r23
    2050:	10 0d       	add	r17, r0
    2052:	96 9f       	mul	r25, r22
    2054:	10 0d       	add	r17, r0
    2056:	11 24       	eor	r1, r1
    2058:	c8 01       	movw	r24, r16
    205a:	0e 94 3d 10 	call	0x207a	; 0x207a <malloc>
    205e:	ec 01       	movw	r28, r24
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	29 f0       	breq	.+10     	; 0x206e <calloc+0x2c>
    2064:	a8 01       	movw	r20, r16
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	0e 94 6f 11 	call	0x22de	; 0x22de <memset>
    206e:	ce 01       	movw	r24, r28
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	08 95       	ret

0000207a <malloc>:
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	91 05       	cpc	r25, r1
    2082:	10 f4       	brcc	.+4      	; 0x2088 <malloc+0xe>
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	e0 91 40 04 	lds	r30, 0x0440
    208c:	f0 91 41 04 	lds	r31, 0x0441
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	30 97       	sbiw	r30, 0x00	; 0
    209a:	39 f1       	breq	.+78     	; 0x20ea <malloc+0x70>
    209c:	40 81       	ld	r20, Z
    209e:	51 81       	ldd	r21, Z+1	; 0x01
    20a0:	48 17       	cp	r20, r24
    20a2:	59 07       	cpc	r21, r25
    20a4:	b8 f0       	brcs	.+46     	; 0x20d4 <malloc+0x5a>
    20a6:	48 17       	cp	r20, r24
    20a8:	59 07       	cpc	r21, r25
    20aa:	71 f4       	brne	.+28     	; 0x20c8 <malloc+0x4e>
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	10 97       	sbiw	r26, 0x00	; 0
    20b2:	29 f0       	breq	.+10     	; 0x20be <malloc+0x44>
    20b4:	13 96       	adiw	r26, 0x03	; 3
    20b6:	9c 93       	st	X, r25
    20b8:	8e 93       	st	-X, r24
    20ba:	12 97       	sbiw	r26, 0x02	; 2
    20bc:	2c c0       	rjmp	.+88     	; 0x2116 <malloc+0x9c>
    20be:	90 93 41 04 	sts	0x0441, r25
    20c2:	80 93 40 04 	sts	0x0440, r24
    20c6:	27 c0       	rjmp	.+78     	; 0x2116 <malloc+0x9c>
    20c8:	21 15       	cp	r18, r1
    20ca:	31 05       	cpc	r19, r1
    20cc:	31 f0       	breq	.+12     	; 0x20da <malloc+0x60>
    20ce:	42 17       	cp	r20, r18
    20d0:	53 07       	cpc	r21, r19
    20d2:	18 f0       	brcs	.+6      	; 0x20da <malloc+0x60>
    20d4:	a9 01       	movw	r20, r18
    20d6:	db 01       	movw	r26, r22
    20d8:	01 c0       	rjmp	.+2      	; 0x20dc <malloc+0x62>
    20da:	ef 01       	movw	r28, r30
    20dc:	9a 01       	movw	r18, r20
    20de:	bd 01       	movw	r22, r26
    20e0:	df 01       	movw	r26, r30
    20e2:	02 80       	ldd	r0, Z+2	; 0x02
    20e4:	f3 81       	ldd	r31, Z+3	; 0x03
    20e6:	e0 2d       	mov	r30, r0
    20e8:	d7 cf       	rjmp	.-82     	; 0x2098 <malloc+0x1e>
    20ea:	21 15       	cp	r18, r1
    20ec:	31 05       	cpc	r19, r1
    20ee:	f9 f0       	breq	.+62     	; 0x212e <malloc+0xb4>
    20f0:	28 1b       	sub	r18, r24
    20f2:	39 0b       	sbc	r19, r25
    20f4:	24 30       	cpi	r18, 0x04	; 4
    20f6:	31 05       	cpc	r19, r1
    20f8:	80 f4       	brcc	.+32     	; 0x211a <malloc+0xa0>
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	61 15       	cp	r22, r1
    2100:	71 05       	cpc	r23, r1
    2102:	21 f0       	breq	.+8      	; 0x210c <malloc+0x92>
    2104:	fb 01       	movw	r30, r22
    2106:	93 83       	std	Z+3, r25	; 0x03
    2108:	82 83       	std	Z+2, r24	; 0x02
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <malloc+0x9a>
    210c:	90 93 41 04 	sts	0x0441, r25
    2110:	80 93 40 04 	sts	0x0440, r24
    2114:	fe 01       	movw	r30, r28
    2116:	32 96       	adiw	r30, 0x02	; 2
    2118:	44 c0       	rjmp	.+136    	; 0x21a2 <malloc+0x128>
    211a:	fe 01       	movw	r30, r28
    211c:	e2 0f       	add	r30, r18
    211e:	f3 1f       	adc	r31, r19
    2120:	81 93       	st	Z+, r24
    2122:	91 93       	st	Z+, r25
    2124:	22 50       	subi	r18, 0x02	; 2
    2126:	31 09       	sbc	r19, r1
    2128:	39 83       	std	Y+1, r19	; 0x01
    212a:	28 83       	st	Y, r18
    212c:	3a c0       	rjmp	.+116    	; 0x21a2 <malloc+0x128>
    212e:	20 91 3e 04 	lds	r18, 0x043E
    2132:	30 91 3f 04 	lds	r19, 0x043F
    2136:	23 2b       	or	r18, r19
    2138:	41 f4       	brne	.+16     	; 0x214a <malloc+0xd0>
    213a:	20 91 02 01 	lds	r18, 0x0102
    213e:	30 91 03 01 	lds	r19, 0x0103
    2142:	30 93 3f 04 	sts	0x043F, r19
    2146:	20 93 3e 04 	sts	0x043E, r18
    214a:	20 91 00 01 	lds	r18, 0x0100
    214e:	30 91 01 01 	lds	r19, 0x0101
    2152:	21 15       	cp	r18, r1
    2154:	31 05       	cpc	r19, r1
    2156:	41 f4       	brne	.+16     	; 0x2168 <malloc+0xee>
    2158:	2d b7       	in	r18, 0x3d	; 61
    215a:	3e b7       	in	r19, 0x3e	; 62
    215c:	40 91 04 01 	lds	r20, 0x0104
    2160:	50 91 05 01 	lds	r21, 0x0105
    2164:	24 1b       	sub	r18, r20
    2166:	35 0b       	sbc	r19, r21
    2168:	e0 91 3e 04 	lds	r30, 0x043E
    216c:	f0 91 3f 04 	lds	r31, 0x043F
    2170:	e2 17       	cp	r30, r18
    2172:	f3 07       	cpc	r31, r19
    2174:	a0 f4       	brcc	.+40     	; 0x219e <malloc+0x124>
    2176:	2e 1b       	sub	r18, r30
    2178:	3f 0b       	sbc	r19, r31
    217a:	28 17       	cp	r18, r24
    217c:	39 07       	cpc	r19, r25
    217e:	78 f0       	brcs	.+30     	; 0x219e <malloc+0x124>
    2180:	ac 01       	movw	r20, r24
    2182:	4e 5f       	subi	r20, 0xFE	; 254
    2184:	5f 4f       	sbci	r21, 0xFF	; 255
    2186:	24 17       	cp	r18, r20
    2188:	35 07       	cpc	r19, r21
    218a:	48 f0       	brcs	.+18     	; 0x219e <malloc+0x124>
    218c:	4e 0f       	add	r20, r30
    218e:	5f 1f       	adc	r21, r31
    2190:	50 93 3f 04 	sts	0x043F, r21
    2194:	40 93 3e 04 	sts	0x043E, r20
    2198:	81 93       	st	Z+, r24
    219a:	91 93       	st	Z+, r25
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <malloc+0x128>
    219e:	e0 e0       	ldi	r30, 0x00	; 0
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	cf 01       	movw	r24, r30
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <free>:
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <free+0xa>
    21b2:	87 c0       	rjmp	.+270    	; 0x22c2 <free+0x118>
    21b4:	fc 01       	movw	r30, r24
    21b6:	32 97       	sbiw	r30, 0x02	; 2
    21b8:	13 82       	std	Z+3, r1	; 0x03
    21ba:	12 82       	std	Z+2, r1	; 0x02
    21bc:	c0 91 40 04 	lds	r28, 0x0440
    21c0:	d0 91 41 04 	lds	r29, 0x0441
    21c4:	20 97       	sbiw	r28, 0x00	; 0
    21c6:	81 f4       	brne	.+32     	; 0x21e8 <free+0x3e>
    21c8:	20 81       	ld	r18, Z
    21ca:	31 81       	ldd	r19, Z+1	; 0x01
    21cc:	28 0f       	add	r18, r24
    21ce:	39 1f       	adc	r19, r25
    21d0:	80 91 3e 04 	lds	r24, 0x043E
    21d4:	90 91 3f 04 	lds	r25, 0x043F
    21d8:	82 17       	cp	r24, r18
    21da:	93 07       	cpc	r25, r19
    21dc:	79 f5       	brne	.+94     	; 0x223c <free+0x92>
    21de:	f0 93 3f 04 	sts	0x043F, r31
    21e2:	e0 93 3e 04 	sts	0x043E, r30
    21e6:	6d c0       	rjmp	.+218    	; 0x22c2 <free+0x118>
    21e8:	de 01       	movw	r26, r28
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	ae 17       	cp	r26, r30
    21f0:	bf 07       	cpc	r27, r31
    21f2:	50 f4       	brcc	.+20     	; 0x2208 <free+0x5e>
    21f4:	12 96       	adiw	r26, 0x02	; 2
    21f6:	4d 91       	ld	r20, X+
    21f8:	5c 91       	ld	r21, X
    21fa:	13 97       	sbiw	r26, 0x03	; 3
    21fc:	9d 01       	movw	r18, r26
    21fe:	41 15       	cp	r20, r1
    2200:	51 05       	cpc	r21, r1
    2202:	09 f1       	breq	.+66     	; 0x2246 <free+0x9c>
    2204:	da 01       	movw	r26, r20
    2206:	f3 cf       	rjmp	.-26     	; 0x21ee <free+0x44>
    2208:	b3 83       	std	Z+3, r27	; 0x03
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	40 81       	ld	r20, Z
    220e:	51 81       	ldd	r21, Z+1	; 0x01
    2210:	84 0f       	add	r24, r20
    2212:	95 1f       	adc	r25, r21
    2214:	8a 17       	cp	r24, r26
    2216:	9b 07       	cpc	r25, r27
    2218:	71 f4       	brne	.+28     	; 0x2236 <free+0x8c>
    221a:	8d 91       	ld	r24, X+
    221c:	9c 91       	ld	r25, X
    221e:	11 97       	sbiw	r26, 0x01	; 1
    2220:	84 0f       	add	r24, r20
    2222:	95 1f       	adc	r25, r21
    2224:	02 96       	adiw	r24, 0x02	; 2
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	12 96       	adiw	r26, 0x02	; 2
    222c:	8d 91       	ld	r24, X+
    222e:	9c 91       	ld	r25, X
    2230:	13 97       	sbiw	r26, 0x03	; 3
    2232:	93 83       	std	Z+3, r25	; 0x03
    2234:	82 83       	std	Z+2, r24	; 0x02
    2236:	21 15       	cp	r18, r1
    2238:	31 05       	cpc	r19, r1
    223a:	29 f4       	brne	.+10     	; 0x2246 <free+0x9c>
    223c:	f0 93 41 04 	sts	0x0441, r31
    2240:	e0 93 40 04 	sts	0x0440, r30
    2244:	3e c0       	rjmp	.+124    	; 0x22c2 <free+0x118>
    2246:	d9 01       	movw	r26, r18
    2248:	13 96       	adiw	r26, 0x03	; 3
    224a:	fc 93       	st	X, r31
    224c:	ee 93       	st	-X, r30
    224e:	12 97       	sbiw	r26, 0x02	; 2
    2250:	4d 91       	ld	r20, X+
    2252:	5d 91       	ld	r21, X+
    2254:	a4 0f       	add	r26, r20
    2256:	b5 1f       	adc	r27, r21
    2258:	ea 17       	cp	r30, r26
    225a:	fb 07       	cpc	r31, r27
    225c:	79 f4       	brne	.+30     	; 0x227c <free+0xd2>
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	84 0f       	add	r24, r20
    2264:	95 1f       	adc	r25, r21
    2266:	02 96       	adiw	r24, 0x02	; 2
    2268:	d9 01       	movw	r26, r18
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	9c 93       	st	X, r25
    226e:	8e 93       	st	-X, r24
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	13 96       	adiw	r26, 0x03	; 3
    2276:	9c 93       	st	X, r25
    2278:	8e 93       	st	-X, r24
    227a:	12 97       	sbiw	r26, 0x02	; 2
    227c:	e0 e0       	ldi	r30, 0x00	; 0
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	9b 81       	ldd	r25, Y+3	; 0x03
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	19 f0       	breq	.+6      	; 0x228e <free+0xe4>
    2288:	fe 01       	movw	r30, r28
    228a:	ec 01       	movw	r28, r24
    228c:	f9 cf       	rjmp	.-14     	; 0x2280 <free+0xd6>
    228e:	ce 01       	movw	r24, r28
    2290:	02 96       	adiw	r24, 0x02	; 2
    2292:	28 81       	ld	r18, Y
    2294:	39 81       	ldd	r19, Y+1	; 0x01
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	20 91 3e 04 	lds	r18, 0x043E
    229e:	30 91 3f 04 	lds	r19, 0x043F
    22a2:	28 17       	cp	r18, r24
    22a4:	39 07       	cpc	r19, r25
    22a6:	69 f4       	brne	.+26     	; 0x22c2 <free+0x118>
    22a8:	30 97       	sbiw	r30, 0x00	; 0
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <free+0x10c>
    22ac:	10 92 41 04 	sts	0x0441, r1
    22b0:	10 92 40 04 	sts	0x0440, r1
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <free+0x110>
    22b6:	13 82       	std	Z+3, r1	; 0x03
    22b8:	12 82       	std	Z+2, r1	; 0x02
    22ba:	d0 93 3f 04 	sts	0x043F, r29
    22be:	c0 93 3e 04 	sts	0x043E, r28
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	08 95       	ret

000022c8 <strnlen_P>:
    22c8:	fc 01       	movw	r30, r24
    22ca:	05 90       	lpm	r0, Z+
    22cc:	61 50       	subi	r22, 0x01	; 1
    22ce:	70 40       	sbci	r23, 0x00	; 0
    22d0:	01 10       	cpse	r0, r1
    22d2:	d8 f7       	brcc	.-10     	; 0x22ca <strnlen_P+0x2>
    22d4:	80 95       	com	r24
    22d6:	90 95       	com	r25
    22d8:	8e 0f       	add	r24, r30
    22da:	9f 1f       	adc	r25, r31
    22dc:	08 95       	ret

000022de <memset>:
    22de:	dc 01       	movw	r26, r24
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <memset+0x6>
    22e2:	6d 93       	st	X+, r22
    22e4:	41 50       	subi	r20, 0x01	; 1
    22e6:	50 40       	sbci	r21, 0x00	; 0
    22e8:	e0 f7       	brcc	.-8      	; 0x22e2 <memset+0x4>
    22ea:	08 95       	ret

000022ec <strnlen>:
    22ec:	fc 01       	movw	r30, r24
    22ee:	61 50       	subi	r22, 0x01	; 1
    22f0:	70 40       	sbci	r23, 0x00	; 0
    22f2:	01 90       	ld	r0, Z+
    22f4:	01 10       	cpse	r0, r1
    22f6:	d8 f7       	brcc	.-10     	; 0x22ee <strnlen+0x2>
    22f8:	80 95       	com	r24
    22fa:	90 95       	com	r25
    22fc:	8e 0f       	add	r24, r30
    22fe:	9f 1f       	adc	r25, r31
    2300:	08 95       	ret

00002302 <fputc>:
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	18 2f       	mov	r17, r24
    230c:	09 2f       	mov	r16, r25
    230e:	eb 01       	movw	r28, r22
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	81 fd       	sbrc	r24, 1
    2314:	03 c0       	rjmp	.+6      	; 0x231c <fputc+0x1a>
    2316:	8f ef       	ldi	r24, 0xFF	; 255
    2318:	9f ef       	ldi	r25, 0xFF	; 255
    231a:	20 c0       	rjmp	.+64     	; 0x235c <fputc+0x5a>
    231c:	82 ff       	sbrs	r24, 2
    231e:	10 c0       	rjmp	.+32     	; 0x2340 <fputc+0x3e>
    2320:	4e 81       	ldd	r20, Y+6	; 0x06
    2322:	5f 81       	ldd	r21, Y+7	; 0x07
    2324:	2c 81       	ldd	r18, Y+4	; 0x04
    2326:	3d 81       	ldd	r19, Y+5	; 0x05
    2328:	42 17       	cp	r20, r18
    232a:	53 07       	cpc	r21, r19
    232c:	7c f4       	brge	.+30     	; 0x234c <fputc+0x4a>
    232e:	e8 81       	ld	r30, Y
    2330:	f9 81       	ldd	r31, Y+1	; 0x01
    2332:	9f 01       	movw	r18, r30
    2334:	2f 5f       	subi	r18, 0xFF	; 255
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	39 83       	std	Y+1, r19	; 0x01
    233a:	28 83       	st	Y, r18
    233c:	10 83       	st	Z, r17
    233e:	06 c0       	rjmp	.+12     	; 0x234c <fputc+0x4a>
    2340:	e8 85       	ldd	r30, Y+8	; 0x08
    2342:	f9 85       	ldd	r31, Y+9	; 0x09
    2344:	81 2f       	mov	r24, r17
    2346:	09 95       	icall
    2348:	89 2b       	or	r24, r25
    234a:	29 f7       	brne	.-54     	; 0x2316 <fputc+0x14>
    234c:	2e 81       	ldd	r18, Y+6	; 0x06
    234e:	3f 81       	ldd	r19, Y+7	; 0x07
    2350:	2f 5f       	subi	r18, 0xFF	; 255
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
    2354:	3f 83       	std	Y+7, r19	; 0x07
    2356:	2e 83       	std	Y+6, r18	; 0x06
    2358:	81 2f       	mov	r24, r17
    235a:	90 2f       	mov	r25, r16
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <__ultoa_invert>:
    2366:	fa 01       	movw	r30, r20
    2368:	aa 27       	eor	r26, r26
    236a:	28 30       	cpi	r18, 0x08	; 8
    236c:	51 f1       	breq	.+84     	; 0x23c2 <__ultoa_invert+0x5c>
    236e:	20 31       	cpi	r18, 0x10	; 16
    2370:	81 f1       	breq	.+96     	; 0x23d2 <__ultoa_invert+0x6c>
    2372:	e8 94       	clt
    2374:	6f 93       	push	r22
    2376:	6e 7f       	andi	r22, 0xFE	; 254
    2378:	6e 5f       	subi	r22, 0xFE	; 254
    237a:	7f 4f       	sbci	r23, 0xFF	; 255
    237c:	8f 4f       	sbci	r24, 0xFF	; 255
    237e:	9f 4f       	sbci	r25, 0xFF	; 255
    2380:	af 4f       	sbci	r26, 0xFF	; 255
    2382:	b1 e0       	ldi	r27, 0x01	; 1
    2384:	3e d0       	rcall	.+124    	; 0x2402 <__ultoa_invert+0x9c>
    2386:	b4 e0       	ldi	r27, 0x04	; 4
    2388:	3c d0       	rcall	.+120    	; 0x2402 <__ultoa_invert+0x9c>
    238a:	67 0f       	add	r22, r23
    238c:	78 1f       	adc	r23, r24
    238e:	89 1f       	adc	r24, r25
    2390:	9a 1f       	adc	r25, r26
    2392:	a1 1d       	adc	r26, r1
    2394:	68 0f       	add	r22, r24
    2396:	79 1f       	adc	r23, r25
    2398:	8a 1f       	adc	r24, r26
    239a:	91 1d       	adc	r25, r1
    239c:	a1 1d       	adc	r26, r1
    239e:	6a 0f       	add	r22, r26
    23a0:	71 1d       	adc	r23, r1
    23a2:	81 1d       	adc	r24, r1
    23a4:	91 1d       	adc	r25, r1
    23a6:	a1 1d       	adc	r26, r1
    23a8:	20 d0       	rcall	.+64     	; 0x23ea <__ultoa_invert+0x84>
    23aa:	09 f4       	brne	.+2      	; 0x23ae <__ultoa_invert+0x48>
    23ac:	68 94       	set
    23ae:	3f 91       	pop	r19
    23b0:	2a e0       	ldi	r18, 0x0A	; 10
    23b2:	26 9f       	mul	r18, r22
    23b4:	11 24       	eor	r1, r1
    23b6:	30 19       	sub	r19, r0
    23b8:	30 5d       	subi	r19, 0xD0	; 208
    23ba:	31 93       	st	Z+, r19
    23bc:	de f6       	brtc	.-74     	; 0x2374 <__ultoa_invert+0xe>
    23be:	cf 01       	movw	r24, r30
    23c0:	08 95       	ret
    23c2:	46 2f       	mov	r20, r22
    23c4:	47 70       	andi	r20, 0x07	; 7
    23c6:	40 5d       	subi	r20, 0xD0	; 208
    23c8:	41 93       	st	Z+, r20
    23ca:	b3 e0       	ldi	r27, 0x03	; 3
    23cc:	0f d0       	rcall	.+30     	; 0x23ec <__ultoa_invert+0x86>
    23ce:	c9 f7       	brne	.-14     	; 0x23c2 <__ultoa_invert+0x5c>
    23d0:	f6 cf       	rjmp	.-20     	; 0x23be <__ultoa_invert+0x58>
    23d2:	46 2f       	mov	r20, r22
    23d4:	4f 70       	andi	r20, 0x0F	; 15
    23d6:	40 5d       	subi	r20, 0xD0	; 208
    23d8:	4a 33       	cpi	r20, 0x3A	; 58
    23da:	18 f0       	brcs	.+6      	; 0x23e2 <__ultoa_invert+0x7c>
    23dc:	49 5d       	subi	r20, 0xD9	; 217
    23de:	31 fd       	sbrc	r19, 1
    23e0:	40 52       	subi	r20, 0x20	; 32
    23e2:	41 93       	st	Z+, r20
    23e4:	02 d0       	rcall	.+4      	; 0x23ea <__ultoa_invert+0x84>
    23e6:	a9 f7       	brne	.-22     	; 0x23d2 <__ultoa_invert+0x6c>
    23e8:	ea cf       	rjmp	.-44     	; 0x23be <__ultoa_invert+0x58>
    23ea:	b4 e0       	ldi	r27, 0x04	; 4
    23ec:	a6 95       	lsr	r26
    23ee:	97 95       	ror	r25
    23f0:	87 95       	ror	r24
    23f2:	77 95       	ror	r23
    23f4:	67 95       	ror	r22
    23f6:	ba 95       	dec	r27
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__ultoa_invert+0x86>
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	61 05       	cpc	r22, r1
    23fe:	71 05       	cpc	r23, r1
    2400:	08 95       	ret
    2402:	9b 01       	movw	r18, r22
    2404:	ac 01       	movw	r20, r24
    2406:	0a 2e       	mov	r0, r26
    2408:	06 94       	lsr	r0
    240a:	57 95       	ror	r21
    240c:	47 95       	ror	r20
    240e:	37 95       	ror	r19
    2410:	27 95       	ror	r18
    2412:	ba 95       	dec	r27
    2414:	c9 f7       	brne	.-14     	; 0x2408 <__ultoa_invert+0xa2>
    2416:	62 0f       	add	r22, r18
    2418:	73 1f       	adc	r23, r19
    241a:	84 1f       	adc	r24, r20
    241c:	95 1f       	adc	r25, r21
    241e:	a0 1d       	adc	r26, r0
    2420:	08 95       	ret

00002422 <__prologue_saves__>:
    2422:	2f 92       	push	r2
    2424:	3f 92       	push	r3
    2426:	4f 92       	push	r4
    2428:	5f 92       	push	r5
    242a:	6f 92       	push	r6
    242c:	7f 92       	push	r7
    242e:	8f 92       	push	r8
    2430:	9f 92       	push	r9
    2432:	af 92       	push	r10
    2434:	bf 92       	push	r11
    2436:	cf 92       	push	r12
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	ca 1b       	sub	r28, r26
    244c:	db 0b       	sbc	r29, r27
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	09 94       	ijmp

0000245a <__epilogue_restores__>:
    245a:	2a 88       	ldd	r2, Y+18	; 0x12
    245c:	39 88       	ldd	r3, Y+17	; 0x11
    245e:	48 88       	ldd	r4, Y+16	; 0x10
    2460:	5f 84       	ldd	r5, Y+15	; 0x0f
    2462:	6e 84       	ldd	r6, Y+14	; 0x0e
    2464:	7d 84       	ldd	r7, Y+13	; 0x0d
    2466:	8c 84       	ldd	r8, Y+12	; 0x0c
    2468:	9b 84       	ldd	r9, Y+11	; 0x0b
    246a:	aa 84       	ldd	r10, Y+10	; 0x0a
    246c:	b9 84       	ldd	r11, Y+9	; 0x09
    246e:	c8 84       	ldd	r12, Y+8	; 0x08
    2470:	df 80       	ldd	r13, Y+7	; 0x07
    2472:	ee 80       	ldd	r14, Y+6	; 0x06
    2474:	fd 80       	ldd	r15, Y+5	; 0x05
    2476:	0c 81       	ldd	r16, Y+4	; 0x04
    2478:	1b 81       	ldd	r17, Y+3	; 0x03
    247a:	aa 81       	ldd	r26, Y+2	; 0x02
    247c:	b9 81       	ldd	r27, Y+1	; 0x01
    247e:	ce 0f       	add	r28, r30
    2480:	d1 1d       	adc	r29, r1
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	ed 01       	movw	r28, r26
    248e:	08 95       	ret

00002490 <_exit>:
    2490:	f8 94       	cli

00002492 <__stop_program>:
    2492:	ff cf       	rjmp	.-2      	; 0x2492 <__stop_program>
